//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_cdn_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer"
	ves_io_schema_views_common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	ves_io_schema_views_common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	ves_io_schema_views_http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
)

// resourceVolterraCdnLoadbalancer is implementation of Volterra's CdnLoadbalancer resources
func resourceVolterraCdnLoadbalancer() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCdnLoadbalancerCreate,
		Read:   resourceVolterraCdnLoadbalancerRead,
		Update: resourceVolterraCdnLoadbalancerUpdate,
		Delete: resourceVolterraCdnLoadbalancerDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"add_location": {
				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"api_specification": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_definition": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"validation_all_spec_endpoints": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fall_through_mode_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_skip": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"api_endpoint": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"oversized_body_fail_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"oversized_body_skip_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"settings": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fail_close": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fail_open": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_fail_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"property_validation_settings_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"query_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"validation_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"response_validation_mode_active": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_properties": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enforcement_report": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"skip_response_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"validation_mode_active": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"request_validation_properties": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enforcement_report": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"validation_custom_list": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fall_through_mode_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_skip": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"api_endpoint": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"open_api_validation_rules": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_endpoint": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"api_group": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"base_path": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"any_domain": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"specific_domain": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"metadata": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"validation_mode": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_mode_active": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"response_validation_properties": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"enforcement_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"skip_response_validation": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"skip_validation": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"validation_mode_active": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"request_validation_properties": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"enforcement_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"oversized_body_fail_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"oversized_body_skip_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"settings": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fail_close": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fail_open": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_fail_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"property_validation_settings_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"query_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"validation_disabled": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},

			"api_specification_on_cache_miss": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_definition": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"validation_all_spec_endpoints": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fall_through_mode_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_skip": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"api_endpoint": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"oversized_body_fail_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"oversized_body_skip_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"settings": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fail_close": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fail_open": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_fail_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"property_validation_settings_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"query_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"validation_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"response_validation_mode_active": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_properties": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enforcement_report": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"skip_response_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"validation_mode_active": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"request_validation_properties": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enforcement_report": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"validation_custom_list": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fall_through_mode_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"action_skip": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"api_endpoint": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"open_api_validation_rules": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_endpoint": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"api_group": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"base_path": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"any_domain": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"specific_domain": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"metadata": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"validation_mode": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_mode_active": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"response_validation_properties": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"enforcement_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"skip_response_validation": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"skip_validation": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"validation_mode_active": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"request_validation_properties": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"enforcement_report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"oversized_body_fail_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"oversized_body_skip_validation": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"settings": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fail_close": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"fail_open": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_fail_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"oversized_body_skip_validation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"property_validation_settings_custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"query_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disallow_additional_parameters": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"validation_disabled": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},

			"disable_api_definition": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"api_discovery_on_cache_miss": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_discovery_from_code_scan": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"code_base_integrations": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"all_repos": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"selected_repos": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_code_repo": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"code_base_integration": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"discovered_api_settings": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"disable_learn_from_redirect_traffic": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"enable_learn_from_redirect_traffic": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"sensitive_data_detection_rules": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},
					},
				},
			},

			"disable_api_discovery": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"enable_api_discovery": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_discovery_from_code_scan": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"code_base_integrations": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"all_repos": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"selected_repos": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_code_repo": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"code_base_integration": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"discovered_api_settings": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"disable_learn_from_redirect_traffic": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"enable_learn_from_redirect_traffic": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"sensitive_data_detection_rules": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},
					},
				},
			},

			"api_protection_rules": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_endpoint_rules": {

							Type:       schema.TypeList,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"deny": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"api_endpoint_method": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"methods": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint_path": {
										Type:       schema.TypeString,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"client_matcher": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"client_selector": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"asn_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:       schema.TypeString,
																			Computed:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"prefix_sets": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:       schema.TypeString,
																			Computed:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"specific_domain": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"metadata": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"disable": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"request_matcher": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"headers": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"jwt_claims": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"query_params": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"key": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"api_groups_rules": {

							Type:       schema.TypeList,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"deny": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"api_group": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"base_path": {
										Type:       schema.TypeString,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"client_matcher": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"client_selector": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"asn_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:       schema.TypeString,
																			Computed:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"prefix_sets": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:       schema.TypeString,
																			Computed:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"specific_domain": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"metadata": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"disable": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"request_matcher": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"headers": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"jwt_claims": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"query_params": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"key": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_not_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_present": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"item": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"blocked_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"bot_skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"waf_skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"bot_defense": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disable_cors_support": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"enable_cors_support": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"policy": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_js_insert": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"js_insert_all_pages": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"javascript_location": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"js_insert_all_pages_except": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"javascript_location": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"js_insertion_rules": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"rules": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"javascript_location": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"javascript_mode": {
										Type:       schema.TypeString,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"js_download_path": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"disable_mobile_sdk": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"mobile_sdk_config": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile_identifier": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"reload_header_name": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"protected_app_endpoints": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"web": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"web_mobile": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"header": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"headers": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"mobile_identifier": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"any_domain": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"domain": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"suffix_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"flow_label": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"account_management": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"password_reset": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"authentication": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"login": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"disable_transaction_result": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"transaction_result": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"failure_conditions": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"status": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"success_conditions": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"status": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"login_mfa": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"login_partner": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"logout": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"token_refresh": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"financial_services": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"apply": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"money_transfer": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"flight": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"checkin": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"profile_management": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"update": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"view": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"search": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"flight_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"product_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"reservation_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"room_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"shopping_gift_cards": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"gift_card_make_purchase_with_gift_card": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"gift_card_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_add_to_cart": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_checkout": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_choose_seat": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_enter_drawing_submission": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_make_payment": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_order": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_price_inquiry": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_promo_code_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_purchase_gift_card": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_update_quantity": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"undefined_flow_label": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"allow_good_bots": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"mitigate_good_bots": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"http_methods": {

													Type: schema.TypeList,

													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"metadata": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"mitigation": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"block": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"body": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"body_hash": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"status": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"flag": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"append_headers": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"auto_type_header_name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"inference_header_name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"no_headers": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"none": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"redirect": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"uri": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"path": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"path": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"prefix": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"protocol": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"regional_endpoint": {
							Type:       schema.TypeString,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"timeout": {
							Type:       schema.TypeInt,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},

			"bot_defense_advanced": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"mobile": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"policy": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"js_download_path": {
										Type:       schema.TypeString,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"disable_mobile_sdk": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"mobile_sdk_config": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile_identifier": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"protected_app_endpoints": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile_client": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"web_client": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"web_mobile_client": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"header": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"headers": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"check_present": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"item": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"mobile_identifier": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"any_domain": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"domain": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"suffix_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"flow_label": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"account_management": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"password_reset": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"authentication": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"login": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"disable_transaction_result": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"transaction_result": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"failure_conditions": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"status": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"success_conditions": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"status": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"login_mfa": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"login_partner": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"logout": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"token_refresh": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"financial_services": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"apply": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"money_transfer": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"flight": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"checkin": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"profile_management": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"update": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"view": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"search": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"flight_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"product_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"reservation_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"room_search": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"shopping_gift_cards": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"gift_card_make_purchase_with_gift_card": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"gift_card_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_add_to_cart": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_checkout": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_choose_seat": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_enter_drawing_submission": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_make_payment": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_order": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_price_inquiry": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_promo_code_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_purchase_gift_card": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"shop_update_quantity": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"undefined_flow_label": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"http_methods": {

													Type: schema.TypeList,

													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"metadata": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"path": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"path": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"prefix": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"query": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"check_presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"request_body": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"regex_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"web": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"disable_bot_defense": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"cache_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_bypass": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"eligible_for_cache": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"hostname_uri": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ignore_response_cookie": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"scheme_hostname_request_uri": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ignore_response_cookie": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"scheme_hostname_uri": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ignore_response_cookie": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"scheme_hostname_uri_query": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ignore_response_cookie": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"scheme_proxy_host_request_uri": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"cache_ttl": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ignore_response_cookie": {
													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"scheme_proxy_host_uri": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"cache_ttl": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ignore_response_cookie": {
													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"rule_expression_list": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_rule_expression": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"operator": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cookie_matcher": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"operator": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"path_match": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"operator": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"query_parameters": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"operator": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"expression_name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"rule_name": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"captcha_challenge": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"challenge_on_cache_miss": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:       schema.TypeInt,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"custom_page": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"default_js_challenge_parameters": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"js_challenge_parameters": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:       schema.TypeInt,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"custom_page": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"js_script_delay": {
										Type:       schema.TypeInt,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"malicious_user_mitigation": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"enable_challenge": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"js_challenge": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"no_challenge": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"policy_based_challenge": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_captcha_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_js_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"rule_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"metadata": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"spec": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"arg_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"any_asn": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"body_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_captcha_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_javascript_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_name": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"client_name_matcher": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"client_selector": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"domain_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"expiration_timestamp": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"http_method": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"methods": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"suffix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"ja4_tls_fingerprint": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"default_temporary_blocking_parameters": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"temporary_user_blocking": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"custom_page": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"client_side_defense": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_js_insert": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"js_insert_all_pages": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"js_insert_all_pages_except": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"js_insertion_rules": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"rules": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"domain": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"suffix_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"disable_client_side_defense": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"cors_policy": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_credentials": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"allow_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_methods": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_origin": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allow_origin_regex": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"expose_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"max_age": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"maximum_age": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"csrf_policy": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"all_load_balancer_domains": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"custom_domain_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"domains": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"data_guard_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"apply_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"skip_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"path": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"prefix": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"regex": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"ddos_mitigation_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"block": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ddos_client_source": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn_list": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_numbers": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeInt,
													},
												},
											},
										},
									},

									"country_list": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"tls_fingerprint_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"classes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"excluded_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"invert_match": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"ip_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"default_cache_action": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"cache_ttl_default": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"cache_ttl_override": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"eligible_for_cache": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_ttl": {
										Type:       schema.TypeString,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"domains": {

				Type: schema.TypeList,

				Required: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"graphql_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"exact_path": {
							Type:     schema.TypeString,
							Required: true,
						},

						"graphql_settings": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_batched_queries": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_depth": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_total_length": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_value_length": {
										Type:       schema.TypeInt,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"policy_name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"method_get": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"method_post": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"disable_ip_reputation": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_ip_reputation": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ip_threat_categories": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"ip_reputation_on_cache_miss": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ip_threat_categories": {

							Type: schema.TypeList,

							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"jwt_validation": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"action": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"block": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"report": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"auth_server_uri": {

							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"jwks": {

							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"jwks_config": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cleartext": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"mandatory_claims": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"claim_names": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"reserved_claims": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"audience": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"audiences": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"audience_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"issuer": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"issuer_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_enable": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"target": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"all_endpoint": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"api_groups": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_groups": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"base_paths": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"base_paths": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"token_location": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bearer_token": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"cookie": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"header": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"query_param": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"l7_ddos_action_block": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"l7_ddos_action_default": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"l7_ddos_action_js_challenge": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"l7_ddos_action_none": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"http": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"dns_volterra_managed": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"port_ranges": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"https": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_cert_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_cert_params": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_mtls": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"use_mtls": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"client_certificate_optional": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"crl": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"no_crl": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"trusted_ca": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"trusted_ca_url": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"xfcc_disabled": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"xfcc_options": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"xfcc_header_elements": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_config": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_security": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cipher_suites": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"max_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"min_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"default_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"low_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"medium_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"tls_inline_params": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_mtls": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"use_mtls": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"client_certificate_optional": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"crl": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"no_crl": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"trusted_ca": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"trusted_ca_url": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"xfcc_disabled": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"xfcc_options": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"xfcc_header_elements": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_url": {
																Type:     schema.TypeString,
																Required: true,
															},

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"custom_hash_algorithms": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hash_algorithms": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_ocsp_stapling": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"use_system_defaults": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"private_key": {

																Type:     schema.TypeSet,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"blindfold_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"provider": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"secret_encoding": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"version": {
																						Type:       schema.TypeInt,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_config": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_security": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cipher_suites": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"max_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"min_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"default_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"low_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"medium_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"tls_parameters": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_certificates": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"description": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"custom_hash_algorithms": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:       schema.TypeSet,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"url": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tls_11_plus": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"tls_12_plus": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"https_auto_cert": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_config": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_11_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_12_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"disable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"malicious_user_detection_on_cache_miss": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"more_option": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_options": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_rules": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_bypass": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"eligible_for_cache": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hostname_uri": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"scheme_hostname_request_uri": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"scheme_hostname_uri": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"scheme_hostname_uri_query": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"scheme_proxy_host_request_uri": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"scheme_proxy_host_uri": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_override": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cache_ttl": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"ignore_response_cookie": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"rule_expression_list": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cache_rule_expression": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cache_headers": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"operator": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"contains": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_contain": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_end_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_equal": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_start_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"endswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"equals": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"match_regex": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"startswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"cookie_matcher": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"operator": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"contains": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_contain": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_end_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_equal": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_start_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"endswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"equals": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"match_regex": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"startswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"path_match": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"operator": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"contains": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_contain": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_end_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_equal": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_start_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"endswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"equals": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"match_regex": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"startswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"query_parameters": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"operator": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"contains": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_contain": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_end_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_equal": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"does_not_start_with": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"endswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"equals": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"match_regex": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"startswith": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"expression_name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"rule_name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"default_cache_action": {

										Type:       schema.TypeSet,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_disabled": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl_default": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"cache_ttl_override": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"eligible_for_cache": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cache_ttl": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"cache_ttl_options": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_disabled": {

										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"cache_ttl_default": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"cache_ttl_override": {

										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"header_options": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"request_headers_to_add": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_value": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"url": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"request_headers_to_remove": {

										Type: schema.TypeList,

										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"response_headers_to_add": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_value": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"url": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"response_headers_to_remove": {

										Type: schema.TypeList,

										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"logging_options": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"client_log_options": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"origin_log_options": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"security_options": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_protection": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_specification": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_definition": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"validation_all_spec_endpoints": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fall_through_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fall_through_mode_allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fall_through_mode_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"open_api_validation_rules": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"action_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_skip": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"api_endpoint": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"methods": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"path": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},

																											"api_group": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"base_path": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"metadata": {

																												Type:       schema.TypeSet,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"description": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"disable": {
																															Type:       schema.TypeBool,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"oversized_body_fail_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"oversized_body_skip_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"settings": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fail_close": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fail_open": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_fail_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"property_validation_settings_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"headers": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"query_parameters": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"property_validation_settings_default": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"validation_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"response_validation_mode_active": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"response_validation_properties": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"enforcement_block": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enforcement_report": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"skip_response_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"validation_mode_active": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"request_validation_properties": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"enforcement_block": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enforcement_report": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"validation_custom_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fall_through_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fall_through_mode_allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fall_through_mode_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"open_api_validation_rules": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"action_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_skip": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"api_endpoint": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"methods": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"path": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},

																											"api_group": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"base_path": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"metadata": {

																												Type:       schema.TypeSet,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"description": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"disable": {
																															Type:       schema.TypeBool,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"open_api_validation_rules": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"api_endpoint": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"methods": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"path": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"api_group": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"base_path": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"any_domain": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"specific_domain": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"metadata": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"description": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"disable": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"validation_mode": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"response_validation_mode_active": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"response_validation_properties": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"enforcement_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"enforcement_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"skip_response_validation": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"skip_validation": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"validation_mode_active": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"request_validation_properties": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"enforcement_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"enforcement_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"oversized_body_fail_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"oversized_body_skip_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"settings": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fail_close": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fail_open": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_fail_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"property_validation_settings_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"headers": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"query_parameters": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"property_validation_settings_default": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"validation_disabled": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"api_specification_on_cache_miss": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_definition": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"validation_all_spec_endpoints": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fall_through_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fall_through_mode_allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fall_through_mode_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"open_api_validation_rules": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"action_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_skip": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"api_endpoint": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"methods": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"path": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},

																											"api_group": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"base_path": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"metadata": {

																												Type:       schema.TypeSet,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"description": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"disable": {
																															Type:       schema.TypeBool,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"oversized_body_fail_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"oversized_body_skip_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"settings": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fail_close": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fail_open": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_fail_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"property_validation_settings_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"headers": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"query_parameters": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"property_validation_settings_default": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"validation_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"response_validation_mode_active": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"response_validation_properties": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"enforcement_block": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enforcement_report": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"skip_response_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"validation_mode_active": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"request_validation_properties": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"enforcement_block": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enforcement_report": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"validation_custom_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fall_through_mode": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fall_through_mode_allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fall_through_mode_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"open_api_validation_rules": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"action_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"action_skip": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"api_endpoint": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"methods": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"path": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},

																											"api_group": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"base_path": {

																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"metadata": {

																												Type:       schema.TypeSet,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"description": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"disable": {
																															Type:       schema.TypeBool,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Required:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"open_api_validation_rules": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"api_endpoint": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"methods": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"path": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"api_group": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"base_path": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"any_domain": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"specific_domain": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"metadata": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"description": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"disable": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"validation_mode": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"response_validation_mode_active": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"response_validation_properties": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"enforcement_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"enforcement_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"skip_response_validation": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"skip_validation": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"validation_mode_active": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"request_validation_properties": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"enforcement_block": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"enforcement_report": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"oversized_body_fail_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"oversized_body_skip_validation": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"settings": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fail_close": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"fail_open": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_fail_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"oversized_body_skip_validation": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"property_validation_settings_custom": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"headers": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_headers": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"query_parameters": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"allow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"disallow_additional_parameters": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"property_validation_settings_default": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"validation_disabled": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"disable_api_definition": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"api_discovery_on_cache_miss": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_discovery_from_code_scan": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"code_base_integrations": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"all_repos": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"selected_repos": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"api_code_repo": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"code_base_integration": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"name": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"namespace": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"tenant": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"discovered_api_settings": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"disable_learn_from_redirect_traffic": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enable_learn_from_redirect_traffic": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"sensitive_data_detection_rules": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},
														},
													},
												},

												"disable_api_discovery": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"enable_api_discovery": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_discovery_from_code_scan": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"code_base_integrations": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"all_repos": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"selected_repos": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"api_code_repo": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"code_base_integration": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"name": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"namespace": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"tenant": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"discovered_api_settings": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"disable_learn_from_redirect_traffic": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enable_learn_from_redirect_traffic": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"sensitive_data_detection_rules": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},
														},
													},
												},

												"api_protection_rules": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_endpoint_rules": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"deny": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_endpoint_method": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"invert_matcher": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"api_endpoint_path": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"client_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"any_client": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"client_selector": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"expressions": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"ip_threat_category_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"ip_threat_categories": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"any_ip": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"asn_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"as_numbers": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeInt,
																									},
																								},
																							},
																						},
																					},

																					"asn_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"asn_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"prefix_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_prefix_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_match": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"ip_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"ipv6_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"tls_fingerprint_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"classes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"exact_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"excluded_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"any_domain": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"specific_domain": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"request_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"cookie_matchers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"headers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"jwt_claims": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"query_params": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"key": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"api_groups_rules": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"allow": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"deny": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"api_group": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"client_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"any_client": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"client_selector": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"expressions": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"ip_threat_category_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"ip_threat_categories": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"any_ip": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"asn_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"as_numbers": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeInt,
																									},
																								},
																							},
																						},
																					},

																					"asn_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"asn_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"prefix_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_prefix_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_match": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"ip_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"ipv6_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"tls_fingerprint_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"classes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"exact_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"excluded_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"any_domain": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"specific_domain": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"metadata": {

																			Type:       schema.TypeSet,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"disable": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"request_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"cookie_matchers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"headers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"jwt_claims": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"query_params": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"key": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"jwt_validation": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"action": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"block": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"report": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"auth_server_uri": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"jwks": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"jwks_config": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cleartext": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"mandatory_claims": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"claim_names": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"reserved_claims": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"audience": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"audiences": {

																						Type: schema.TypeList,

																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"audience_disable": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"issuer": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"issuer_disable": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"validate_period_disable": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"validate_period_enable": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"target": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"all_endpoint": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"api_groups": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"api_groups": {

																						Type: schema.TypeList,

																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"base_paths": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"base_paths": {

																						Type: schema.TypeList,

																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"token_location": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"bearer_token": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"cookie": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"header": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"query_param": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"default_sensitive_data_policy": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"sensitive_data_policy": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"sensitive_data_policy_ref": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"auth_options": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_auth_config": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"disable_auth": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"jwt": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"backup_key": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"blindfold_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"url": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"provider": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"secret_encoding": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"version": {
																						Type:       schema.TypeInt,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"secret_key": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"blindfold_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"url": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"provider": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"secret_encoding": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"version": {
																						Type:       schema.TypeInt,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"bearer_token": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"cookie": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"header": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"query_param": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"common_security_controls": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blocked_clients": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"bot_skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"waf_skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"actions": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"as_number": {

																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"http_header": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"headers": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"invert_match": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"exact": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"presence": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"regex": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"user_identifier": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"expiration_timestamp": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"captcha_challenge": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cookie_expiry": {
																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"custom_page": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"challenge_on_cache_miss": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"captcha_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_captcha_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"default_js_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"js_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"js_script_delay": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_mitigation_settings": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"malicious_user_mitigation": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"enable_challenge": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"captcha_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_captcha_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"default_js_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"js_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"js_script_delay": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_mitigation_settings": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"malicious_user_mitigation": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"js_challenge": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cookie_expiry": {
																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"custom_page": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"js_script_delay": {
																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"no_challenge": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"policy_based_challenge": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"captcha_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_captcha_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"always_enable_captcha_challenge": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"always_enable_js_challenge": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"no_challenge": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"default_js_challenge_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"js_challenge_parameters": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie_expiry": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"js_script_delay": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"default_mitigation_settings": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"malicious_user_mitigation": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"rule_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"rules": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"metadata": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"description": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"disable": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"spec": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"arg_matchers": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"any_asn": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"asn_list": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"as_numbers": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeInt,
																												},
																											},
																										},
																									},
																								},

																								"asn_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"asn_sets": {

																												Type:       schema.TypeList,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"kind": {
																															Type:       schema.TypeString,
																															Computed:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"namespace": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"tenant": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},

																								"body_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"disable_challenge": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enable_captcha_challenge": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"enable_javascript_challenge": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"any_client": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"client_name": {

																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"client_name_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"client_selector": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"expressions": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"cookie_matchers": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"domain_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"expiration_timestamp": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"headers": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"http_method": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"methods": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"any_ip": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"ip_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"prefix_sets": {

																												Type:       schema.TypeList,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"kind": {
																															Type:       schema.TypeString,
																															Computed:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"namespace": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"tenant": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},

																								"ip_prefix_list": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_match": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"ip_prefixes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"ipv6_prefixes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"path": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"prefix_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"suffix_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"query_params": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"key": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"ja4_tls_fingerprint": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"tls_fingerprint_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"classes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"excluded_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"default_temporary_blocking_parameters": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"temporary_user_blocking": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"custom_page": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"cors_policy": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"allow_credentials": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"allow_headers": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"allow_methods": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"allow_origin": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"allow_origin_regex": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"disabled": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"expose_headers": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"max_age": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"maximum_age": {
																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"disable_ip_reputation": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"enable_ip_reputation": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_reputation_on_cache_miss": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_malicious_user_detection": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"enable_malicious_user_detection": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"malicious_user_detection_on_cache_miss": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"api_rate_limit": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_endpoint_rules": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"api_endpoint_method": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"invert_matcher": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"methods": {

																						Type: schema.TypeList,

																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"api_endpoint_path": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"client_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"any_client": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"client_selector": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"expressions": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"ip_threat_category_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"ip_threat_categories": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"any_ip": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"asn_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"as_numbers": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeInt,
																									},
																								},
																							},
																						},
																					},

																					"asn_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"asn_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"prefix_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_prefix_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_match": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"ip_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"ipv6_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"tls_fingerprint_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"classes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"exact_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"excluded_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"any_domain": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"specific_domain": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"inline_rate_limiter": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"ref_user_id": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"name": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"namespace": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"tenant": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"use_http_lb_user_id": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"threshold": {
																						Type:       schema.TypeInt,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"unit": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"ref_rate_limiter": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"namespace": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"tenant": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"request_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"cookie_matchers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"headers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"jwt_claims": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"query_params": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"key": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"bypass_rate_limiting_rules": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"bypass_rate_limiting_rules": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"client_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"any_client": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"client_selector": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"expressions": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"ip_threat_category_list": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"ip_threat_categories": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"any_ip": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"asn_list": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"as_numbers": {

																												Type: schema.TypeList,

																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeInt,
																												},
																											},
																										},
																									},
																								},

																								"asn_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"asn_sets": {

																												Type:       schema.TypeList,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"kind": {
																															Type:       schema.TypeString,
																															Computed:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"namespace": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"tenant": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},

																								"ip_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"prefix_sets": {

																												Type:       schema.TypeList,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"kind": {
																															Type:       schema.TypeString,
																															Computed:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},

																														"name": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"namespace": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																														"tenant": {
																															Type:       schema.TypeString,
																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																														},
																													},
																												},
																											},
																										},
																									},
																								},

																								"ip_prefix_list": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_match": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"ip_prefixes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"ipv6_prefixes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"tls_fingerprint_matcher": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"classes": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"excluded_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"any_url": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"api_endpoint": {

																						Type:       schema.TypeSet,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"methods": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"path": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"api_groups": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"api_groups": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"base_path": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"any_domain": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"specific_domain": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"request_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"cookie_matchers": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"headers": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"jwt_claims": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},

																								"query_params": {

																									Type:       schema.TypeList,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"invert_matcher": {
																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"key": {
																												Type:       schema.TypeString,
																												Required:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_not_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"check_present": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"item": {

																												Type:       schema.TypeSet,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Resource{
																													Schema: map[string]*schema.Schema{

																														"exact_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"regex_values": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},

																														"transformers": {

																															Type: schema.TypeList,

																															Optional:   true,
																															Deprecated: "This field is deprecated and will be removed in future release.",
																															Elem: &schema.Schema{
																																Type: schema.TypeString,
																															},
																														},
																													},
																												},
																											},

																											"presence": {

																												Type:       schema.TypeBool,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"custom_ip_allowed_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"rate_limiter_allowed_prefixes": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"namespace": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"tenant": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_allowed_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"prefixes": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"no_ip_allowed_list": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"server_url_rules": {

																Type:       schema.TypeList,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"api_group": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"base_path": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"client_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"any_client": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"client_selector": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"expressions": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"ip_threat_category_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"ip_threat_categories": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"any_ip": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"asn_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"as_numbers": {

																									Type: schema.TypeList,

																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeInt,
																									},
																								},
																							},
																						},
																					},

																					"asn_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"asn_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"prefix_sets": {

																									Type:       schema.TypeList,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"kind": {
																												Type:       schema.TypeString,
																												Computed:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},

																											"name": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"namespace": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																											"tenant": {
																												Type:       schema.TypeString,
																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},

																					"ip_prefix_list": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_match": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"ip_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"ipv6_prefixes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},

																					"tls_fingerprint_matcher": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"classes": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"exact_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},

																								"excluded_values": {

																									Type: schema.TypeList,

																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Schema{
																										Type: schema.TypeString,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"any_domain": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"specific_domain": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"inline_rate_limiter": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"ref_user_id": {

																						Type:       schema.TypeSet,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"name": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"namespace": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																								"tenant": {
																									Type:       schema.TypeString,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"use_http_lb_user_id": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"threshold": {
																						Type:       schema.TypeInt,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"unit": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"ref_rate_limiter": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"namespace": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"tenant": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"request_matcher": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"cookie_matchers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"headers": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"jwt_claims": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"name": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},

																					"query_params": {

																						Type:       schema.TypeList,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"invert_matcher": {
																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"key": {
																									Type:       schema.TypeString,
																									Required:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_not_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"check_present": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},

																								"item": {

																									Type:       schema.TypeSet,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																									Elem: &schema.Resource{
																										Schema: map[string]*schema.Schema{

																											"exact_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"regex_values": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},

																											"transformers": {

																												Type: schema.TypeList,

																												Optional:   true,
																												Deprecated: "This field is deprecated and will be removed in future release.",
																												Elem: &schema.Schema{
																													Type: schema.TypeString,
																												},
																											},
																										},
																									},
																								},

																								"presence": {

																									Type:       schema.TypeBool,
																									Optional:   true,
																									Deprecated: "This field is deprecated and will be removed in future release.",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"disable_rate_limit": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"rate_limit": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_ip_allowed_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"rate_limiter_allowed_prefixes": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"namespace": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"tenant": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_allowed_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"prefixes": {

																			Type: schema.TypeList,

																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"no_ip_allowed_list": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"no_policies": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"policies": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"policies": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"namespace": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																					"tenant": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"rate_limiter": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"burst_multiplier": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"total_number": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"unit": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"active_service_policies": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"policies": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"namespace": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																		"tenant": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"no_service_policies": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"service_policies_from_namespace": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"disable_threat_mesh": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"enable_threat_mesh": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"trusted_clients": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"bot_skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"waf_skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"actions": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"as_number": {

																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"http_header": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"headers": {

																			Type:       schema.TypeList,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"invert_match": {
																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"exact": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"presence": {

																						Type:       schema.TypeBool,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"regex": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"user_identifier": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"expiration_timestamp": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"user_id_client_ip": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"user_identification": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"geo_filtering": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"country_codes": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"block_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"country_codes": {

																Type: schema.TypeList,

																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"ip_filtering": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"block_list": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"web_app_firewall": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"csrf_policy": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"all_load_balancer_domains": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"custom_domain_list": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"domains": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disabled": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"data_guard_rules": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"apply_data_guard": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"skip_data_guard": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"suffix_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"path": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"prefix": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"graphql_rules": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"suffix_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_path": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"graphql_settings": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"disable_introspection": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"enable_introspection": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"max_batched_queries": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"max_depth": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"max_total_length": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"max_value_length": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"policy_name": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"method_get": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"method_post": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"protected_cookies": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"disable_tampering_protection": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"enable_tampering_protection": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"add_httponly": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ignore_httponly": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ignore_max_age": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"max_age_value": {

																Type:       schema.TypeInt,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ignore_samesite": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"samesite_lax": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"samesite_none": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"samesite_strict": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"add_secure": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"ignore_secure": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"app_firewall": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"app_firewall_on_cache_miss": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"disable_waf": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"waf_exclusion_rules": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"exact_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"suffix_value": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"expiration_timestamp": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"metadata": {

																Type:       schema.TypeSet,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"disable": {
																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"methods": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"any_path": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"path_prefix": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"path_regex": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"app_firewall_detection_control": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exclude_attack_type_contexts": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"context": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"context_name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"exclude_attack_type": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"exclude_bot_name_contexts": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"bot_name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"exclude_signature_contexts": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"context": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"context_name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"signature_id": {
																						Type:       schema.TypeInt,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"exclude_violation_contexts": {

																			Type:       schema.TypeList,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"context": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"context_name": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"exclude_violation": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"waf_skip_processing": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"origin_pool": {

				Type:     schema.TypeSet,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"follow_origin_redirect": {
							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"more_origin_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_byte_range_request": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"websocket_proxy": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"origin_request_timeout": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"origin_servers": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"public_ip": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"ipv6": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"public_name": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"dns_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"refresh_interval": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"public_name": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"dns_name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"refresh_interval": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"no_tls": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"use_tls": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"default_session_key_caching": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_session_key_caching": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_session_keys": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tls_certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_url": {
																Type:     schema.TypeString,
																Required: true,
															},

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"custom_hash_algorithms": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hash_algorithms": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_ocsp_stapling": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"use_system_defaults": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"private_key": {

																Type:     schema.TypeSet,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"store_provider": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"blindfold_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"location": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"provider": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"secret_encoding": {
																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"version": {
																						Type:       schema.TypeInt,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:       schema.TypeSet,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"use_mtls_obj": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"skip_server_verification": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_server_verification": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"trusted_ca": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"volterra_trusted_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"sni": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"use_host_header_as_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_config": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"other_settings": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_location": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"geo_filtering": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"allow_list": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"country_codes": {

													Type: schema.TypeList,

													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"invert_match": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"block_list": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"country_codes": {

													Type: schema.TypeList,

													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"invert_match": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"header_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"request_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"secret_value": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"response_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"secret_value": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"response_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"ip_filtering": {

							Type:       schema.TypeSet,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"allow_list": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ip_prefixes": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"ipv6_prefixes": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"block_list": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ip_prefixes": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"ipv6_prefixes": {

													Type: schema.TypeList,

													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"logging_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"client_log_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"origin_log_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"protected_cookies": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_max_age": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"max_age_value": {

							Type:       schema.TypeInt,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"ignore_samesite": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_lax": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_strict": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"api_rate_limit": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_endpoint_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_endpoint_method": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"base_path": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"client_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"bypass_rate_limiting_rules": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bypass_rate_limiting_rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_selector": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"ip_threat_category_list": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ip_threat_categories": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"any_url": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"api_endpoint": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"api_groups": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_groups": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"base_path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"any_domain": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_domain": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"request_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"jwt_claims": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"presence": {

																			Type:       schema.TypeBool,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"custom_ip_allowed_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_url_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_group": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"base_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"disable_rate_limit": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"rate_limit": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_ip_allowed_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_policies": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"policies": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"policies": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"rate_limiter": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"burst_multiplier": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"total_number": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"unit": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"default_sensitive_data_policy": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"sensitive_data_policy": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"sensitive_data_policy_ref": {

							Type:       schema.TypeSet,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"active_service_policies": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policies": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"no_service_policies": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"service_policies_from_namespace": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"slow_ddos_mitigation": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"request_headers_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"disable_request_timeout": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"request_timeout": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"system_default_timeouts": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_threat_mesh": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"enable_threat_mesh": {

				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"trusted_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"bot_skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"waf_skip_processing": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"user_id_client_ip": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"user_identification": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"app_firewall": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"app_firewall_on_cache_miss": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"namespace": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"tenant": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},

			"disable_waf": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"waf_exclusion_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:       schema.TypeBool,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"methods": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"any_path": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"path_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"path_regex": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"app_firewall_detection_control": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exclude_attack_type_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_attack_type": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_bot_name_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bot_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_signature_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"signature_id": {
													Type:     schema.TypeInt,
													Required: true,
												},
											},
										},
									},

									"exclude_violation_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_violation": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"waf_skip_processing": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCdnLoadbalancerCreate creates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType{}
	createReq := &ves_io_schema_views_cdn_loadbalancer.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//add_location
	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		createSpec.AddLocation =
			v.(bool)

	}

	//api_definition_choice

	apiDefinitionChoiceTypeFound := false

	if v, ok := d.GetOk("api_specification"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ApiSpecification{}
		apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		createSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
				apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

				for _, set := range sl {
					adMapToStrVal := set.(map[string]interface{})
					if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Name = val.(string)
					}
					if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Namespace = val.(string)
					}

					if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Tenant = val.(string)
					}
				}

			}

			validationTargetChoiceTypeFound := false

			if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
				validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
				apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

					if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
						for _, set := range sl {
							validationModeMapStrToI := set.(map[string]interface{})

							responseValidationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true
								responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
								responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
								validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

										response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

							if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true

								if v.(bool) {
									responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
									responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
									validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
								}

							}

							validationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true

								if v.(bool) {
									validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
									validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
									validationMode.ValidationModeChoice = validationModeChoiceInt
								}

							}

							if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true
								validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
								validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
								validationMode.ValidationModeChoice = validationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

										request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
				validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
				apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
						validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
						for i, set := range sl {
							openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
							openApiValidationRulesMapStrToI := set.(map[string]interface{})

							conditionTypeChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
								conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.ApiGroup = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									openApiValidationRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

								openApiValidationRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								openApiValidationRules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								openApiValidationRules[i].ValidationMode = validationMode
								for _, set := range sl {
									validationModeMapStrToI := set.(map[string]interface{})

									responseValidationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true
										responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
										responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
										validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

												response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

									if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true

										if v.(bool) {
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
											responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
										}

									}

									validationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true

										if v.(bool) {
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
											validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
											validationMode.ValidationModeChoice = validationModeChoiceInt
										}

									}

									if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true
										validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
										validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
										validationMode.ValidationModeChoice = validationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

												request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationCustomList.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true

				if v.(bool) {
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
					validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
				}

			}

		}

	}

	if v, ok := d.GetOk("api_specification_on_cache_miss"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ApiSpecificationOnCacheMiss{}
		apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		createSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ApiDefinition = apiDefinitionIntNew

				for _, set := range sl {
					adMapToStrVal := set.(map[string]interface{})
					if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Name = val.(string)
					}
					if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Namespace = val.(string)
					}

					if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Tenant = val.(string)
					}
				}

			}

			validationTargetChoiceTypeFound := false

			if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
				validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

					if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
						for _, set := range sl {
							validationModeMapStrToI := set.(map[string]interface{})

							responseValidationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true
								responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
								responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
								validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

										response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

							if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true

								if v.(bool) {
									responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
									responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
									validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
								}

							}

							validationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true

								if v.(bool) {
									validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
									validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
									validationMode.ValidationModeChoice = validationModeChoiceInt
								}

							}

							if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true
								validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
								validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
								validationMode.ValidationModeChoice = validationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

										request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
				validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
						validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
						for i, set := range sl {
							openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
							openApiValidationRulesMapStrToI := set.(map[string]interface{})

							conditionTypeChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
								conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.ApiGroup = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									openApiValidationRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

								openApiValidationRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								openApiValidationRules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								openApiValidationRules[i].ValidationMode = validationMode
								for _, set := range sl {
									validationModeMapStrToI := set.(map[string]interface{})

									responseValidationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true
										responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
										responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
										validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

												response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

									if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true

										if v.(bool) {
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
											responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
										}

									}

									validationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true

										if v.(bool) {
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
											validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
											validationMode.ValidationModeChoice = validationModeChoiceInt
										}

									}

									if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true
										validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
										validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
										validationMode.ValidationModeChoice = validationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

												request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationCustomList.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true

				if v.(bool) {
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
					validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
					apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt
				}

			}

		}

	}

	if v, ok := d.GetOk("disable_api_definition"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true

		if v.(bool) {
			apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableApiDefinition{}
			apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
			createSpec.ApiDefinitionChoice = apiDefinitionChoiceInt
		}

	}

	//api_discovery_choice

	apiDiscoveryChoiceTypeFound := false

	if v, ok := d.GetOk("api_discovery_on_cache_miss"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ApiDiscoveryOnCacheMiss{}
		apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		createSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
				for _, set := range sl {
					apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

					if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
						apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
						for i, set := range sl {
							codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
							codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

							apiReposChoiceTypeFound := false

							if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true

								if v.(bool) {
									apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
									apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
									codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true
								apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
								apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
								codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

									}

								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
								codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

								for _, set := range sl {
									cbiMapToStrVal := set.(map[string]interface{})
									if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Name = val.(string)
									}
									if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Namespace = val.(string)
									}

									if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Tenant = val.(string)
									}
								}

							}

						}

					}

				}

			}

			if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.DiscoveredApiSettings = discoveredApiSettings
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

			learnFromRedirectTrafficTypeFound := false

			if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.SensitiveDataDetectionRules = sensitiveDataDetectionRules
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true

		if v.(bool) {
			apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableApiDiscovery{}
			apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
			createSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableApiDiscovery{}
		apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		createSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
				for _, set := range sl {
					apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

					if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
						apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
						for i, set := range sl {
							codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
							codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

							apiReposChoiceTypeFound := false

							if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true

								if v.(bool) {
									apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
									apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
									codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true
								apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
								apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
								codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

									}

								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
								codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

								for _, set := range sl {
									cbiMapToStrVal := set.(map[string]interface{})
									if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Name = val.(string)
									}
									if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Namespace = val.(string)
									}

									if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Tenant = val.(string)
									}
								}

							}

						}

					}

				}

			}

			if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

			learnFromRedirectTrafficTypeFound := false

			if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.SensitiveDataDetectionRules = sensitiveDataDetectionRules
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

		}

	}

	//api_protection_rules
	if v, ok := d.GetOk("api_protection_rules"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
		createSpec.ApiProtectionRules = apiProtectionRules
		for _, set := range sl {
			apiProtectionRulesMapStrToI := set.(map[string]interface{})

			if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
				apiProtectionRules.ApiEndpointRules = apiEndpointRules
				for i, set := range sl {
					apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
					apiEndpointRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
						apiEndpointRules[i].Action = action
						for _, set := range sl {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeFound := false

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
									actionInt.Allow = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
									actionInt.Deny = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
						for _, set := range sl {
							apiEndpointMethodMapStrToI := set.(map[string]interface{})

							if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								apiEndpointMethod.InvertMatcher = w.(bool)
							}

							if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								apiEndpointMethod.Methods = methodsList

							}

						}

					}

					if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].ApiEndpointPath = w.(string)
					}

					if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiEndpointRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiEndpointRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

						apiEndpointRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						apiEndpointRules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiEndpointRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
				apiProtectionRules.ApiGroupsRules = apiGroupsRules
				for i, set := range sl {
					apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
					apiGroupsRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
						apiGroupsRules[i].Action = action
						for _, set := range sl {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeFound := false

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
									actionInt.Allow = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
									actionInt.Deny = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

						}

					}

					if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
						apiGroupsRules[i].ApiGroup = w.(string)
					}

					if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						apiGroupsRules[i].BasePath = w.(string)
					}

					if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiGroupsRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiGroupsRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

						apiGroupsRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						apiGroupsRules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiGroupsRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

		}

	}

	//blocked_clients
	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.BlockedClients = blockedClients
		for i, set := range sl {
			blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
			blockedClientsMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := blockedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
					actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
					actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
					actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

				actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
				for _, j := range v.([]interface{}) {
					actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
				}
				blockedClients[i].Actions = actionsList

			}

			clientSourceChoiceTypeFound := false

			if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.AsNumber = uint32(v.(int))

			}

			if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
				clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
						clientSourceChoiceInt.HttpHeader.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
								headers[i].InvertMatch = w.(bool)
							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

							valueMatchTypeFound := false

							if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Exact = v.(string)

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Presence = v.(bool)

							}

							if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Regex = v.(string)

							}

						}

					}

				}

			}

			if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.IpPrefix = v.(string)

			}

			if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.UserIdentifier = v.(string)

			}

			if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				blockedClients[i].ExpirationTimestamp = ts
			}

			if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				blockedClients[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

		}

	}

	//bot_defense_choice

	botDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_BotDefense{}
		botDefenseChoiceInt.BotDefense = &ves_io_schema_views_common_security.ShapeBotDefenseType{}
		createSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			corsSupportChoiceTypeFound := false

			if v, ok := cs["disable_cors_support"]; ok && !isIntfNil(v) && !corsSupportChoiceTypeFound {

				corsSupportChoiceTypeFound = true

				if v.(bool) {
					corsSupportChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefenseType_DisableCorsSupport{}
					corsSupportChoiceInt.DisableCorsSupport = &ves_io_schema.Empty{}
					botDefenseChoiceInt.BotDefense.CorsSupportChoice = corsSupportChoiceInt
				}

			}

			if v, ok := cs["enable_cors_support"]; ok && !isIntfNil(v) && !corsSupportChoiceTypeFound {

				corsSupportChoiceTypeFound = true

				if v.(bool) {
					corsSupportChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefenseType_EnableCorsSupport{}
					corsSupportChoiceInt.EnableCorsSupport = &ves_io_schema.Empty{}
					botDefenseChoiceInt.BotDefense.CorsSupportChoice = corsSupportChoiceInt
				}

			}

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType{}
				botDefenseChoiceInt.BotDefense.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					javaScriptChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableJsInsert{}
							javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPages{}
						javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

								javaScriptChoiceInt.JsInsertAllPages.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

							}

						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{}
						javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllWithExceptionsType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

								javaScriptChoiceInt.JsInsertAllPagesExcept.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

							}

						}

					}

					if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertionRules{}
						javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.ShapeJavaScriptInsertType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.Rules = rules
								for i, set := range sl {
									rules[i] = &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule{}
									rulesMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											rules[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										rules[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := rulesMapStrToI["javascript_location"]; ok && !isIntfNil(v) {

										rules[i].JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

									}

									if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										rules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										rules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["javascript_mode"]; ok && !isIntfNil(v) {

						policy.JavascriptMode = ves_io_schema.JavaScriptMode(ves_io_schema.JavaScriptMode_value[v.(string)])

					}

					if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
						policy.JsDownloadPath = w.(string)
					}

					mobileSdkChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true

						if v.(bool) {
							mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableMobileSdk{}
							mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
							policy.MobileSdkChoice = mobileSdkChoiceInt
						}

					}

					if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true
						mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_MobileSdkConfig{}
						mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.MobileSDKConfigType{}
						policy.MobileSdkChoice = mobileSdkChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
								mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
								for _, set := range sl {
									mobileIdentifierMapStrToI := set.(map[string]interface{})

									if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										mobileIdentifier.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

								}

							}

							if v, ok := cs["reload_header_name"]; ok && !isIntfNil(v) {

								mobileSdkChoiceInt.MobileSdkConfig.ReloadHeaderName = v.(string)

							}

						}

					}

					if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						protectedAppEndpoints := make([]*ves_io_schema_views_common_security.AppEndpointType, len(sl))
						policy.ProtectedAppEndpoints = protectedAppEndpoints
						for i, set := range sl {
							protectedAppEndpoints[i] = &ves_io_schema_views_common_security.AppEndpointType{}
							protectedAppEndpointsMapStrToI := set.(map[string]interface{})

							appTrafficTypeChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Mobile{}
									appTrafficTypeChoiceInt.Mobile = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Web{}
									appTrafficTypeChoiceInt.Web = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true
								appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_WebMobile{}
								appTrafficTypeChoiceInt.WebMobile = &ves_io_schema_views_common_security.WebMobileTrafficType{}
								protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["header"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										header := &ves_io_schema_policy.HeaderMatcherTypeBasic{}
										appTrafficTypeChoiceInt.WebMobile.Header = header
										for _, set := range sl {
											headerMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headerMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												header.Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headerMapStrToI["name"]; ok && !isIntfNil(w) {
												header.Name = w.(string)
											}

										}

									}

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										appTrafficTypeChoiceInt.WebMobile.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

										appTrafficTypeChoiceInt.WebMobile.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

									}

								}

							}

							domainMatcherChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true

								if v.(bool) {
									domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AnyDomain{}
									domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true
								domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Domain{}
								domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
								protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.RegexValue = v.(string)

									}

									if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

								}

							}

							flowLabelChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true
								flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_FlowLabel{}
								flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
								protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									flowLabelChoiceTypeFound := false

									if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
										flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
													labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
										flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["login"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true
												labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
												labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
												flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													_ = set.(map[string]interface{})

												}

											}

											if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
													labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
													labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
													labelChoiceInt.Logout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
													labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
										flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
													labelChoiceInt.Apply = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
													labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
										flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
													labelChoiceInt.Checkin = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
										flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
													labelChoiceInt.Update = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
													labelChoiceInt.View = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
										flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
													labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
													labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
													labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
													labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
										flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
													labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
													labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
													labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
													labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
													labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
													labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
													labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
													labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
													labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
													labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
													labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
													labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true

								if v.(bool) {
									flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_UndefinedFlowLabel{}
									flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
								}

							}

							goodbotChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["allow_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

								goodbotChoiceTypeFound = true

								if v.(bool) {
									goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AllowGoodBots{}
									goodbotChoiceInt.AllowGoodBots = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["mitigate_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

								goodbotChoiceTypeFound = true

								if v.(bool) {
									goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_MitigateGoodBots{}
									goodbotChoiceInt.MitigateGoodBots = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.BotHttpMethod{}
								for _, j := range v.([]interface{}) {
									http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
								}
								protectedAppEndpoints[i].HttpMethods = http_methodsList

							}

							if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								protectedAppEndpoints[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["mitigation"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
								protectedAppEndpoints[i].Mitigation = mitigation
								for _, set := range sl {
									mitigationMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
										actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["body"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.Body = v.(string)

											}

											if v, ok := cs["body_hash"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.BodyHash = v.(string)

											}

											if v, ok := cs["status"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

											}

										}

									}

									if v, ok := mitigationMapStrToI["flag"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Flag{}
										actionTypeInt.Flag = &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											sendHeadersChoiceTypeFound := false

											if v, ok := cs["append_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

												sendHeadersChoiceTypeFound = true
												sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_AppendHeaders{}
												sendHeadersChoiceInt.AppendHeaders = &ves_io_schema_policy.ShapeBotFlagMitigationActionType{}
												actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["auto_type_header_name"]; ok && !isIntfNil(v) {

														sendHeadersChoiceInt.AppendHeaders.AutoTypeHeaderName = v.(string)

													}

													if v, ok := cs["inference_header_name"]; ok && !isIntfNil(v) {

														sendHeadersChoiceInt.AppendHeaders.InferenceHeaderName = v.(string)

													}

												}

											}

											if v, ok := cs["no_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

												sendHeadersChoiceTypeFound = true

												if v.(bool) {
													sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_NoHeaders{}
													sendHeadersChoiceInt.NoHeaders = &ves_io_schema.Empty{}
													actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := mitigationMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											mitigation.ActionType = actionTypeInt
										}

									}

									if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
										actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["uri"]; ok && !isIntfNil(v) {

												actionTypeInt.Redirect.Uri = v.(string)

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema.PathMatcherType{}
								protectedAppEndpoints[i].Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									pathMatchTypeFound := false

									if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Path = v.(string)

									}

									if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Prefix = v.(string)

									}

									if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Regex = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["protocol"]; ok && !isIntfNil(v) {

								protectedAppEndpoints[i].Protocol = ves_io_schema_views_common_security.URLScheme(ves_io_schema_views_common_security.URLScheme_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := cs["regional_endpoint"]; ok && !isIntfNil(v) {

				botDefenseChoiceInt.BotDefense.RegionalEndpoint = ves_io_schema_views_common_security.ShapeBotDefenseRegion(ves_io_schema_views_common_security.ShapeBotDefenseRegion_value[v.(string)])

			}

			if v, ok := cs["timeout"]; ok && !isIntfNil(v) {

				botDefenseChoiceInt.BotDefense.Timeout = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("bot_defense_advanced"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_BotDefenseAdvanced{}
		botDefenseChoiceInt.BotDefenseAdvanced = &ves_io_schema_views_common_security.BotDefenseAdvancedType{}
		createSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["mobile"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				mobileInt := &ves_io_schema_views.ObjectRefType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Mobile = mobileInt

				for _, set := range sl {
					mMapToStrVal := set.(map[string]interface{})
					if val, ok := mMapToStrVal["name"]; ok && !isIntfNil(v) {
						mobileInt.Name = val.(string)
					}
					if val, ok := mMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						mobileInt.Namespace = val.(string)
					}

					if val, ok := mMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						mobileInt.Tenant = val.(string)
					}
				}

			}

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
						policy.JsDownloadPath = w.(string)
					}

					mobileSdkChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true

						if v.(bool) {
							mobileSdkChoiceInt := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType_DisableMobileSdk{}
							mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
							policy.MobileSdkChoice = mobileSdkChoiceInt
						}

					}

					if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true
						mobileSdkChoiceInt := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType_MobileSdkConfig{}
						mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.BotAdvancedMobileSDKConfigType{}
						policy.MobileSdkChoice = mobileSdkChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
								mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
								for _, set := range sl {
									mobileIdentifierMapStrToI := set.(map[string]interface{})

									if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										mobileIdentifier.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						protectedAppEndpoints := make([]*ves_io_schema_views_common_security.ProtectedAppEndpointType, len(sl))
						policy.ProtectedAppEndpoints = protectedAppEndpoints
						for i, set := range sl {
							protectedAppEndpoints[i] = &ves_io_schema_views_common_security.ProtectedAppEndpointType{}
							protectedAppEndpointsMapStrToI := set.(map[string]interface{})

							appTrafficTypeChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["mobile_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_MobileClient{}
									appTrafficTypeChoiceInt.MobileClient = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_WebClient{}
									appTrafficTypeChoiceInt.WebClient = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_mobile_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true
								appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_WebMobileClient{}
								appTrafficTypeChoiceInt.WebMobileClient = &ves_io_schema_views_common_security.WebMobileTrafficType{}
								protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["header"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										header := &ves_io_schema_policy.HeaderMatcherTypeBasic{}
										appTrafficTypeChoiceInt.WebMobileClient.Header = header
										for _, set := range sl {
											headerMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headerMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												header.Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headerMapStrToI["name"]; ok && !isIntfNil(w) {
												header.Name = w.(string)
											}

										}

									}

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										appTrafficTypeChoiceInt.WebMobileClient.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

										appTrafficTypeChoiceInt.WebMobileClient.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

									}

								}

							}

							domainMatcherChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true

								if v.(bool) {
									domainMatcherChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_AnyDomain{}
									domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true
								domainMatcherChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_Domain{}
								domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
								protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.RegexValue = v.(string)

									}

									if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

								}

							}

							flowLabelChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true
								flowLabelChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_FlowLabel{}
								flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
								protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									flowLabelChoiceTypeFound := false

									if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
										flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
													labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
										flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["login"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true
												labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
												labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
												flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													_ = set.(map[string]interface{})

												}

											}

											if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
													labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
													labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
													labelChoiceInt.Logout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
													labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
										flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
													labelChoiceInt.Apply = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
													labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
										flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
													labelChoiceInt.Checkin = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
										flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
													labelChoiceInt.Update = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
													labelChoiceInt.View = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
										flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
													labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
													labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
													labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
													labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
										flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
													labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
													labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
													labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
													labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
													labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
													labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
													labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
													labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
													labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
													labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
													labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
													labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true

								if v.(bool) {
									flowLabelChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_UndefinedFlowLabel{}
									flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.BotHttpMethod{}
								for _, j := range v.([]interface{}) {
									http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
								}
								protectedAppEndpoints[i].HttpMethods = http_methodsList

							}

							if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								protectedAppEndpoints[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema.PathMatcherType{}
								protectedAppEndpoints[i].Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									pathMatchTypeFound := false

									if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Path = v.(string)

									}

									if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Prefix = v.(string)

									}

									if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Regex = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["query"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								query := make([]*ves_io_schema_views_common_security.Query, len(sl))
								protectedAppEndpoints[i].Query = query
								for i, set := range sl {
									query[i] = &ves_io_schema_views_common_security.Query{}
									queryMapStrToI := set.(map[string]interface{})

									if w, ok := queryMapStrToI["name"]; ok && !isIntfNil(w) {
										query[i].Name = w.(string)
									}

									valueTypeTypeFound := false

									if v, ok := queryMapStrToI["check_presence"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true

										if v.(bool) {
											valueTypeInt := &ves_io_schema_views_common_security.Query_CheckPresence{}
											valueTypeInt.CheckPresence = &ves_io_schema.Empty{}
											query[i].ValueType = valueTypeInt
										}

									}

									if v, ok := queryMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.Query_ExactValue{}

										query[i].ValueType = valueTypeInt

										valueTypeInt.ExactValue = v.(string)

									}

									if v, ok := queryMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.Query_RegexValue{}

										query[i].ValueType = valueTypeInt

										valueTypeInt.RegexValue = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["request_body"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestBody := make([]*ves_io_schema_views_common_security.RequestBody, len(sl))
								protectedAppEndpoints[i].RequestBody = requestBody
								for i, set := range sl {
									requestBody[i] = &ves_io_schema_views_common_security.RequestBody{}
									requestBodyMapStrToI := set.(map[string]interface{})

									if w, ok := requestBodyMapStrToI["name"]; ok && !isIntfNil(w) {
										requestBody[i].Name = w.(string)
									}

									valueTypeTypeFound := false

									if v, ok := requestBodyMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.RequestBody_ExactValue{}

										requestBody[i].ValueType = valueTypeInt

										valueTypeInt.ExactValue = v.(string)

									}

									if v, ok := requestBodyMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.RequestBody_RegexValue{}

										requestBody[i].ValueType = valueTypeInt

										valueTypeInt.RegexValue = v.(string)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["web"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				webInt := &ves_io_schema_views.ObjectRefType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Web = webInt

				for _, set := range sl {
					wMapToStrVal := set.(map[string]interface{})
					if val, ok := wMapToStrVal["name"]; ok && !isIntfNil(v) {
						webInt.Name = val.(string)
					}
					if val, ok := wMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						webInt.Namespace = val.(string)
					}

					if val, ok := wMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						webInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	if v, ok := d.GetOk("disable_bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true

		if v.(bool) {
			botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableBotDefense{}
			botDefenseChoiceInt.DisableBotDefense = &ves_io_schema.Empty{}
			createSpec.BotDefenseChoice = botDefenseChoiceInt
		}

	}

	//cache_rules
	if v, ok := d.GetOk("cache_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cacheRules := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRule, len(sl))
		createSpec.CacheRules = cacheRules
		for i, set := range sl {
			cacheRules[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule{}
			cacheRulesMapStrToI := set.(map[string]interface{})

			cacheActionsTypeFound := false

			if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true

				if v.(bool) {
					cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_CacheBypass{}
					cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
					cacheRules[i].CacheActions = cacheActionsInt
				}

			}

			if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_EligibleForCache{}
				cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions{}
				cacheRules[i].CacheActions = cacheActionsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					eligibleForCacheTypeFound := false

					if v, ok := cs["hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_HostnameUri{}
						eligibleForCacheInt.HostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameRequestUri{}
						eligibleForCacheInt.SchemeHostnameRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUri{}
						eligibleForCacheInt.SchemeHostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_uri_query"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUriQuery{}
						eligibleForCacheInt.SchemeHostnameUriQuery = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostRequestUri{}
						eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostUri{}
						eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

				}

			}

			if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ruleExpressionList := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList, len(sl))
				cacheRules[i].RuleExpressionList = ruleExpressionList
				for i, set := range sl {
					ruleExpressionList[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList{}
					ruleExpressionListMapStrToI := set.(map[string]interface{})

					if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						cacheRuleExpression := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression, len(sl))
						ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
						for i, set := range sl {
							cacheRuleExpression[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression{}
							cacheRuleExpressionMapStrToI := set.(map[string]interface{})

							if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cacheHeaders := make([]*ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType, len(sl))
								cacheRuleExpression[i].CacheHeaders = cacheHeaders
								for i, set := range sl {
									cacheHeaders[i] = &ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType{}
									cacheHeadersMapStrToI := set.(map[string]interface{})

									if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

										cacheHeaders[i].Name = ves_io_schema_views_cdn_loadbalancer.HeaderOptions(ves_io_schema_views_cdn_loadbalancer.HeaderOptions_value[v.(string)])

									}

									if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										cacheHeaders[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatcher := make([]*ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType, len(sl))
								cacheRuleExpression[i].CookieMatcher = cookieMatcher
								for i, set := range sl {
									cookieMatcher[i] = &ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType{}
									cookieMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatcher[i].Name = w.(string)
									}

									if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										cookieMatcher[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								pathMatch := &ves_io_schema_views_cdn_loadbalancer.CDNPathMatcherType{}
								cacheRuleExpression[i].PathMatch = pathMatch
								for _, set := range sl {
									pathMatchMapStrToI := set.(map[string]interface{})

									if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										pathMatch.Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParameters := make([]*ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType, len(sl))
								cacheRuleExpression[i].QueryParameters = queryParameters
								for i, set := range sl {
									queryParameters[i] = &ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType{}
									queryParametersMapStrToI := set.(map[string]interface{})

									if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParameters[i].Key = w.(string)
									}

									if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										queryParameters[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
						ruleExpressionList[i].ExpressionName = w.(string)
					}

				}

			}

			if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
				cacheRules[i].RuleName = w.(string)
			}

		}

	}

	//challenge_type

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("challenge_on_cache_miss"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ChallengeOnCacheMiss{}
		challengeTypeInt.ChallengeOnCacheMiss = &ves_io_schema_views_common_waf.EnableChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.CustomPage = v.(string)

			}

			if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			createSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			challengeChoiceTypeFound := false

			if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
					challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
					challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
					challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

			if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
				challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
				for _, set := range sl {
					ruleListMapStrToI := set.(map[string]interface{})

					if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
						ruleList.Rules = rules
						for i, set := range sl {
							rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
							rulesMapStrToI := set.(map[string]interface{})

							if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								rules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
								rules[i].Spec = spec
								for _, set := range sl {
									specMapStrToI := set.(map[string]interface{})

									if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
										spec.ArgMatchers = argMatchers
										for i, set := range sl {
											argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
											argMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												argMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													argMatchers[i].Match = matchInt
												}

											}

											if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													argMatchers[i].Match = matchInt
												}

											}

											if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												argMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

												argMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												argMatchers[i].Name = w.(string)
											}

										}

									}

									asnChoiceTypeFound := false

									if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true

										if v.(bool) {
											asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
											asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
											spec.AsnChoice = asnChoiceInt
										}

									}

									if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true
										asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
										asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
										spec.AsnChoice = asnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

												ls := make([]uint32, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = uint32(v.(int))
												}
												asnChoiceInt.AsnList.AsNumbers = ls

											}

										}

									}

									if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true
										asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
										asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
										spec.AsnChoice = asnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
												for i, ps := range sl {

													asMapToStrVal := ps.(map[string]interface{})
													asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

													asnSetsInt[i].Kind = "bgp_asn_set"

													if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Name = v.(string)
													}

													if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Namespace = v.(string)
													}

													if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Tenant = v.(string)
													}

													if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										bodyMatcher := &ves_io_schema_policy.MatcherType{}
										spec.BodyMatcher = bodyMatcher
										for _, set := range sl {
											bodyMatcherMapStrToI := set.(map[string]interface{})

											if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												bodyMatcher.ExactValues = ls
											}

											if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												bodyMatcher.RegexValues = ls
											}

											if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												bodyMatcher.Transformers = transformersList

											}

										}

									}

									challengeActionTypeFound := false

									if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
											challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
											challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
											challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									clientChoiceTypeFound := false

									if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true

										if v.(bool) {
											clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
											clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
											spec.ClientChoice = clientChoiceInt
										}

									}

									if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientName{}

										spec.ClientChoice = clientChoiceInt

										clientChoiceInt.ClientName = v.(string)

									}

									if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientNameMatcher{}
										clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
										spec.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientNameMatcher.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientNameMatcher.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												clientChoiceInt.ClientNameMatcher.Transformers = transformersList

											}

										}

									}

									if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
										clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
										spec.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientSelector.Expressions = ls

											}

										}

									}

									if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
										spec.CookieMatchers = cookieMatchers
										for i, set := range sl {
											cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
											cookieMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												cookieMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												cookieMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

												cookieMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												cookieMatchers[i].Name = w.(string)
											}

										}

									}

									if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
										spec.DomainMatcher = domainMatcher
										for _, set := range sl {
											domainMatcherMapStrToI := set.(map[string]interface{})

											if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												domainMatcher.ExactValues = ls
											}

											if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												domainMatcher.RegexValues = ls
											}

										}

									}

									if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										spec.ExpirationTimestamp = ts
									}

									if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
										spec.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
											headersMapStrToI := set.(map[string]interface{})

											if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												headers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

												headers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
										spec.HttpMethod = httpMethod
										for _, set := range sl {
											httpMethodMapStrToI := set.(map[string]interface{})

											if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												httpMethod.InvertMatcher = w.(bool)
											}

											if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

												methodsList := []ves_io_schema.HttpMethod{}
												for _, j := range v.([]interface{}) {
													methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
												}
												httpMethod.Methods = methodsList

											}

										}

									}

									ipChoiceTypeFound := false

									if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true

										if v.(bool) {
											ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
											ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
											spec.IpChoice = ipChoiceInt
										}

									}

									if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true
										ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
										ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
										spec.IpChoice = ipChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

												ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

											}

											if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
												for i, ps := range sl {

													psMapToStrVal := ps.(map[string]interface{})
													prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

													prefixSetsInt[i].Kind = "ip_prefix_set"

													if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Name = v.(string)
													}

													if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Namespace = v.(string)
													}

													if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Tenant = v.(string)
													}

													if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true
										ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
										ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
										spec.IpChoice = ipChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

												ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

											}

											if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipChoiceInt.IpPrefixList.IpPrefixes = ls

											}

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

											}

										}

									}

									if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema_policy.PathMatcherType{}
										spec.Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.ExactValues = ls
											}

											if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												path.InvertMatcher = w.(bool)
											}

											if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.PrefixValues = ls
											}

											if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.RegexValues = ls
											}

											if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.SuffixValues = ls
											}

											if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												path.Transformers = transformersList

											}

										}

									}

									if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
										spec.QueryParams = queryParams
										for i, set := range sl {
											queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
											queryParamsMapStrToI := set.(map[string]interface{})

											if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												queryParams[i].InvertMatcher = w.(bool)
											}

											if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
												queryParams[i].Key = w.(string)
											}

											matchTypeFound := false

											if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												queryParams[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

												queryParams[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

										}

									}

									tlsFingerprintChoiceTypeFound := false

									if v, ok := specMapStrToI["ja4_tls_fingerprint"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

										tlsFingerprintChoiceTypeFound = true
										tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_Ja4TlsFingerprint{}
										tlsFingerprintChoiceInt.Ja4TlsFingerprint = &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
										spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.Ja4TlsFingerprint.ExactValues = ls

											}

										}

									}

									if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

										tlsFingerprintChoiceTypeFound = true
										tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
										tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
										spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["classes"]; ok && !isIntfNil(v) {

												classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
												for _, j := range v.([]interface{}) {
													classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

											}

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

											}

											if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

											}

										}

									}

								}

							}

						}

					}

				}

			}

			temporaryBlockingParametersChoiceTypeFound := false

			if v, ok := cs["default_temporary_blocking_parameters"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

				temporaryBlockingParametersChoiceTypeFound = true

				if v.(bool) {
					temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{}
					temporaryBlockingParametersChoiceInt.DefaultTemporaryBlockingParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt
				}

			}

			if v, ok := cs["temporary_user_blocking"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

				temporaryBlockingParametersChoiceTypeFound = true
				temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_TemporaryUserBlocking{}
				temporaryBlockingParametersChoiceInt.TemporaryUserBlocking = &ves_io_schema_virtual_host.TemporaryUserBlockingType{}
				challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						temporaryBlockingParametersChoiceInt.TemporaryUserBlocking.CustomPage = v.(string)

					}

				}

			}

		}

	}

	//client_side_defense_choice

	clientSideDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true
		clientSideDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ClientSideDefense{}
		clientSideDefenseChoiceInt.ClientSideDefense = &ves_io_schema_views_common_security.ClientSideDefenseType{}
		createSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.ClientSideDefensePolicyType{}
				clientSideDefenseChoiceInt.ClientSideDefense.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					javaScriptChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_DisableJsInsert{}
							javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPages{}
							javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPagesExcept{}
						javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.CSDJavaScriptInsertAllWithExceptionsType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertionRules{}
						javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.CSDJavaScriptInsertType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_security.CSDJavaScriptInsertionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.Rules = rules
								for i, set := range sl {
									rules[i] = &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule{}
									rulesMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											rules[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										rules[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										rules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										rules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true

		if v.(bool) {
			clientSideDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableClientSideDefense{}
			clientSideDefenseChoiceInt.DisableClientSideDefense = &ves_io_schema.Empty{}
			createSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt
		}

	}

	//cors_policy
	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		corsPolicy := &ves_io_schema.CorsPolicy{}
		createSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			corsPolicyMapStrToI := set.(map[string]interface{})

			if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
				corsPolicy.AllowCredentials = w.(bool)
			}

			if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
				corsPolicy.AllowHeaders = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
				corsPolicy.AllowMethods = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				corsPolicy.AllowOrigin = ls
			}

			if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				corsPolicy.AllowOriginRegex = ls
			}

			if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
				corsPolicy.Disabled = w.(bool)
			}

			if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
				corsPolicy.ExposeHeaders = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["max_age"]; ok && !isIntfNil(w) {
				corsPolicy.MaxAge = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
				corsPolicy.MaximumAge = int32(w.(int))
			}

		}

	}

	//csrf_policy
	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		createSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			csrfPolicyMapStrToI := set.(map[string]interface{})

			allowedDomainsTypeFound := false

			if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true

				if v.(bool) {
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
					allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
					csrfPolicy.AllowedDomains = allowedDomainsInt
				}

			}

			if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true
				allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
				allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
				csrfPolicy.AllowedDomains = allowedDomainsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["domains"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						allowedDomainsInt.CustomDomainList.Domains = ls

					}

				}

			}

			if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true

				if v.(bool) {
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
					allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
					csrfPolicy.AllowedDomains = allowedDomainsInt
				}

			}

		}

	}

	//data_guard_rules
	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		createSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
			dataGuardRulesMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
					actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
					dataGuardRules[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
					actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
					dataGuardRules[i].ActionChoice = actionChoiceInt
				}

			}

			domainChoiceTypeFound := false

			if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					dataGuardRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

				dataGuardRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

				dataGuardRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				dataGuardRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				path := &ves_io_schema.PathMatcherType{}
				dataGuardRules[i].Path = path
				for _, set := range sl {
					pathMapStrToI := set.(map[string]interface{})

					pathMatchTypeFound := false

					if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Path = v.(string)

					}

					if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Prefix = v.(string)

					}

					if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Regex = v.(string)

					}

				}

			}

		}

	}

	//ddos_mitigation_rules
	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		createSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
			ddosMitigationRulesMapStrToI := set.(map[string]interface{})

			if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				ddosMitigationRules[i].ExpirationTimestamp = ts
			}

			if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				ddosMitigationRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			mitigationActionTypeFound := false

			if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

				mitigationActionTypeFound = true

				if v.(bool) {
					mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
					mitigationActionInt.Block = &ves_io_schema.Empty{}
					ddosMitigationRules[i].MitigationAction = mitigationActionInt
				}

			}

			mitigationChoiceTypeFound := false

			if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

				mitigationChoiceTypeFound = true
				mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
				mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
				ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						asnList := &ves_io_schema_policy.AsnMatchList{}
						mitigationChoiceInt.DdosClientSource.AsnList = asnList
						for _, set := range sl {
							asnListMapStrToI := set.(map[string]interface{})

							if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
								ls := make([]uint32, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = uint32(v.(int))
								}
								asnList.AsNumbers = ls
							}

						}

					}

					if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

						country_listList := []ves_io_schema_policy.CountryCode{}
						for _, j := range v.([]interface{}) {
							country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
						}
						mitigationChoiceInt.DdosClientSource.CountryList = country_listList

					}

					if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
						mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
						for _, set := range sl {
							tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

								classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
								for _, j := range v.([]interface{}) {
									classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
								}
								tlsFingerprintMatcher.Classes = classesList

							}

							if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								tlsFingerprintMatcher.ExactValues = ls
							}

							if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								tlsFingerprintMatcher.ExcludedValues = ls
							}

						}

					}

				}

			}

			if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

				mitigationChoiceTypeFound = true
				mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
				mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
				ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

						mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

					}

					if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

					}

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

					}

				}

			}

		}

	}

	//default_cache_action
	if v, ok := d.GetOk("default_cache_action"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		defaultCacheAction := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction{}
		createSpec.DefaultCacheAction = defaultCacheAction
		for _, set := range sl {
			defaultCacheActionMapStrToI := set.(map[string]interface{})

			cacheActionsTypeFound := false

			if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true

				if v.(bool) {
					cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheDisabled{}
					cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
					defaultCacheAction.CacheActions = cacheActionsInt
				}

			}

			if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlDefault{}

				defaultCacheAction.CacheActions = cacheActionsInt

				cacheActionsInt.CacheTtlDefault = v.(string)

			}

			if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlOverride{}

				defaultCacheAction.CacheActions = cacheActionsInt

				cacheActionsInt.CacheTtlOverride = v.(string)

			}

			if v, ok := defaultCacheActionMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_EligibleForCache{}
				cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.DefaultCacheTTLProps{}
				defaultCacheAction.CacheActions = cacheActionsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

						cacheActionsInt.EligibleForCache.CacheTtl = v.(string)

					}

				}

			}

		}

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		createSpec.Domains = ls

	}

	//graphql_rules
	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		createSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
			graphqlRulesMapStrToI := set.(map[string]interface{})

			domainChoiceTypeFound := false

			if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					graphqlRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

				graphqlRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

				graphqlRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
				graphqlRules[i].ExactPath = w.(string)
			}

			if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
				graphqlRules[i].GraphqlSettings = graphqlSettings
				for _, set := range sl {
					graphqlSettingsMapStrToI := set.(map[string]interface{})

					allowIntrospectionQueriesChoiceTypeFound := false

					if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

						allowIntrospectionQueriesChoiceTypeFound = true

						if v.(bool) {
							allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
							allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
							graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
						}

					}

					if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

						allowIntrospectionQueriesChoiceTypeFound = true

						if v.(bool) {
							allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
							allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
							graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
						}

					}

					if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxBatchedQueries = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxDepth = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxTotalLength = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_value_length"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxValueLength = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["policy_name"]; ok && !isIntfNil(w) {
						graphqlSettings.PolicyName = w.(string)
					}

				}

			}

			if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				graphqlRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			methodChoiceTypeFound := false

			if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

				methodChoiceTypeFound = true

				if v.(bool) {
					methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
					methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
					graphqlRules[i].MethodChoice = methodChoiceInt
				}

			}

			if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

				methodChoiceTypeFound = true

				if v.(bool) {
					methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
					methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
					graphqlRules[i].MethodChoice = methodChoiceInt
				}

			}

		}

	}

	//ip_reputation_choice

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			createSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		createSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

				ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
				for _, j := range v.([]interface{}) {
					ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
				}
				ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

			}

		}

	}

	if v, ok := d.GetOk("ip_reputation_on_cache_miss"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_IpReputationOnCacheMiss{}
		ipReputationChoiceInt.IpReputationOnCacheMiss = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		createSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

				ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
				for _, j := range v.([]interface{}) {
					ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
				}
				ipReputationChoiceInt.IpReputationOnCacheMiss.IpThreatCategories = ip_threat_categoriesList

			}

		}

	}

	//jwt_validation
	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		createSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			jwtValidationMapStrToI := set.(map[string]interface{})

			if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				action := &ves_io_schema.Action{}
				jwtValidation.Action = action
				for _, set := range sl {
					actionMapStrToI := set.(map[string]interface{})

					actionChoiceTypeFound := false

					if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema.Action_Block{}
							actionChoiceInt.Block = &ves_io_schema.Empty{}
							action.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema.Action_Report{}
							actionChoiceInt.Report = &ves_io_schema.Empty{}
							action.ActionChoice = actionChoiceInt
						}

					}

				}

			}

			jwksConfigurationTypeFound := false

			if v, ok := jwtValidationMapStrToI["auth_server_uri"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_AuthServerUri{}

				jwtValidation.JwksConfiguration = jwksConfigurationInt

				jwksConfigurationInt.AuthServerUri = v.(string)

			}

			if v, ok := jwtValidationMapStrToI["jwks"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_Jwks{}

				jwtValidation.JwksConfiguration = jwksConfigurationInt

				jwksConfigurationInt.Jwks = v.(string)

			}

			if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
				jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
				jwtValidation.JwksConfiguration = jwksConfigurationInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

						jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
				jwtValidation.MandatoryClaims = mandatoryClaims
				for _, set := range sl {
					mandatoryClaimsMapStrToI := set.(map[string]interface{})

					if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						mandatoryClaims.ClaimNames = ls
					}

				}

			}

			if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
				jwtValidation.ReservedClaims = reservedClaims
				for _, set := range sl {
					reservedClaimsMapStrToI := set.(map[string]interface{})

					audienceValidationTypeFound := false

					if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

						audienceValidationTypeFound = true
						audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
						audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
						reservedClaims.AudienceValidation = audienceValidationInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								audienceValidationInt.Audience.Audiences = ls

							}

						}

					}

					if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

						audienceValidationTypeFound = true

						if v.(bool) {
							audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
							audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
							reservedClaims.AudienceValidation = audienceValidationInt
						}

					}

					issuerValidationTypeFound := false

					if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

						issuerValidationTypeFound = true
						issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

						reservedClaims.IssuerValidation = issuerValidationInt

						issuerValidationInt.Issuer = v.(string)

					}

					if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

						issuerValidationTypeFound = true

						if v.(bool) {
							issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
							issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
							reservedClaims.IssuerValidation = issuerValidationInt
						}

					}

					validatePeriodTypeFound := false

					if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

						validatePeriodTypeFound = true

						if v.(bool) {
							validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
							validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
							reservedClaims.ValidatePeriod = validatePeriodInt
						}

					}

					if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

						validatePeriodTypeFound = true

						if v.(bool) {
							validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
							validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
							reservedClaims.ValidatePeriod = validatePeriodInt
						}

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				target := &ves_io_schema_views_common_waf.Target{}
				jwtValidation.Target = target
				for _, set := range sl {
					targetMapStrToI := set.(map[string]interface{})

					targetTypeFound := false

					if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true

						if v.(bool) {
							targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
							targetInt.AllEndpoint = &ves_io_schema.Empty{}
							target.Target = targetInt
						}

					}

					if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true
						targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
						targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
						target.Target = targetInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								targetInt.ApiGroups.ApiGroups = ls

							}

						}

					}

					if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true
						targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
						targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
						target.Target = targetInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								targetInt.BasePaths.BasePaths = ls

							}

						}

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
				jwtValidation.TokenLocation = tokenLocation
				for _, set := range sl {
					tokenLocationMapStrToI := set.(map[string]interface{})

					tokenLocationTypeFound := false

					if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true

						if v.(bool) {
							tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
							tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
							tokenLocation.TokenLocation = tokenLocationInt
						}

					}

					if v, ok := tokenLocationMapStrToI["cookie"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Cookie{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.Cookie = v.(string)

					}

					if v, ok := tokenLocationMapStrToI["header"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Header{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.Header = v.(string)

					}

					if v, ok := tokenLocationMapStrToI["query_param"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_QueryParam{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.QueryParam = v.(string)

					}

				}

			}

		}

	}

	//l7_ddos_auto_mitigation_action

	l7DdosAutoMitigationActionTypeFound := false

	if v, ok := d.GetOk("l7_ddos_action_block"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionBlock{}
			l7DdosAutoMitigationActionInt.L7DdosActionBlock = &ves_io_schema.Empty{}
			createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_default"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionDefault{}
			l7DdosAutoMitigationActionInt.L7DdosActionDefault = &ves_io_schema.Empty{}
			createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_js_challenge"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true
		l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionJsChallenge{}
		l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CustomPage = v.(string)

			}

			if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.JsScriptDelay = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("l7_ddos_action_none"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionNone{}
			l7DdosAutoMitigationActionInt.L7DdosActionNone = &ves_io_schema.Empty{}
			createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	//loadbalancer_type

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

			}

			portChoiceTypeFound := false

			if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

				loadbalancerTypeInt.Http.PortChoice = portChoiceInt

				portChoiceInt.Port = uint32(v.(int))

			}

			if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

				loadbalancerTypeInt.Http.PortChoice = portChoiceInt

				portChoiceInt.PortRanges = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("https"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_cert_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsCertOptions := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions{}
				loadbalancerTypeInt.Https.TlsCertOptions = tlsCertOptions
				for _, set := range sl {
					tlsCertOptionsMapStrToI := set.(map[string]interface{})

					tlsCertificatesChoiceTypeFound := false

					if v, ok := tlsCertOptionsMapStrToI["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

						tlsCertificatesChoiceTypeFound = true
						tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsCertParams{}
						tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
						tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
								for i, ps := range sl {

									cMapToStrVal := ps.(map[string]interface{})
									certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
										certificatesInt[i].Name = v.(string)
									}

									if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										certificatesInt[i].Namespace = v.(string)
									}

									if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										certificatesInt[i].Tenant = v.(string)
									}

								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

										mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

									}

									crlChoiceTypeFound := false

									if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true
										crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
										crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true

										if v.(bool) {
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
											crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
										}

									}

									trustedCaChoiceTypeFound := false

									if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
										trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										trustedCaChoiceInt.TrustedCaUrl = v.(string)

									}

									xfccHeaderTypeFound := false

									if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true

										if v.(bool) {
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
											xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
										}

									}

									if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true
										xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
										xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
										mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

												xfcc_header_elementsList := []ves_io_schema.XfccElement{}
												for _, j := range v.([]interface{}) {
													xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
												}
												xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

											}

										}

									}

								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
								for _, set := range sl {
									tlsConfigMapStrToI := set.(map[string]interface{})

									choiceTypeFound := false

									if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true
										choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
										choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
										tlsConfig.Choice = choiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												choiceInt.CustomSecurity.CipherSuites = ls

											}

											if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

											if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

										}

									}

									if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
											choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
											choiceInt.LowSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
											choiceInt.MediumSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

								}

							}

						}

					}

					if v, ok := tlsCertOptionsMapStrToI["tls_inline_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

						tlsCertificatesChoiceTypeFound = true
						tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsInlineParams{}
						tlsCertificatesChoiceInt.TlsInlineParams = &ves_io_schema_views.DownstreamTlsParamsType{}
						tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

										mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

									}

									crlChoiceTypeFound := false

									if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true
										crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
										crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true

										if v.(bool) {
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
											crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
										}

									}

									trustedCaChoiceTypeFound := false

									if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
										trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										trustedCaChoiceInt.TrustedCaUrl = v.(string)

									}

									xfccHeaderTypeFound := false

									if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true

										if v.(bool) {
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
											xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
										}

									}

									if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true
										xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
										xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
										mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

												xfcc_header_elementsList := []ves_io_schema.XfccElement{}
												for _, j := range v.([]interface{}) {
													xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
												}
												xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

											}

										}

									}

								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								tlsCertificatesChoiceInt.TlsInlineParams.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
										ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
										ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsInlineParams.TlsConfig = tlsConfig
								for _, set := range sl {
									tlsConfigMapStrToI := set.(map[string]interface{})

									choiceTypeFound := false

									if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true
										choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
										choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
										tlsConfig.Choice = choiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												choiceInt.CustomSecurity.CipherSuites = ls

											}

											if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

											if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

										}

									}

									if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
											choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
											choiceInt.LowSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
											choiceInt.MediumSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsParameters := &ves_io_schema_views_cdn_loadbalancer.CDNDownstreamTlsParamsType{}
				loadbalancerTypeInt.Https.TlsParameters = tlsParameters
				for _, set := range sl {
					tlsParametersMapStrToI := set.(map[string]interface{})

					if v, ok := tlsParametersMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
								ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
								ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := tlsParametersMapStrToI["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
						tlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
				loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
							choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
							choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	//malicious_user_detection_choice

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("malicious_user_detection_on_cache_miss"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_MaliciousUserDetectionOnCacheMiss{}
			maliciousUserDetectionChoiceInt.MaliciousUserDetectionOnCacheMiss = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	//more_option
	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		moreOption := &ves_io_schema_views_cdn_loadbalancer.AdvancedOptionsType{}
		createSpec.MoreOption = moreOption
		for _, set := range sl {
			moreOptionMapStrToI := set.(map[string]interface{})

			if v, ok := moreOptionMapStrToI["cache_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheOptions := &ves_io_schema_views_cdn_loadbalancer.CacheOptions{}
				moreOption.CacheOptions = cacheOptions
				for _, set := range sl {
					cacheOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := cacheOptionsMapStrToI["cache_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						cacheRules := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRule, len(sl))
						cacheOptions.CacheRules = cacheRules
						for i, set := range sl {
							cacheRules[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule{}
							cacheRulesMapStrToI := set.(map[string]interface{})

							cacheActionsTypeFound := false

							if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true

								if v.(bool) {
									cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_CacheBypass{}
									cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
									cacheRules[i].CacheActions = cacheActionsInt
								}

							}

							if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_EligibleForCache{}
								cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions{}
								cacheRules[i].CacheActions = cacheActionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									eligibleForCacheTypeFound := false

									if v, ok := cs["hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_HostnameUri{}
										eligibleForCacheInt.HostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameRequestUri{}
										eligibleForCacheInt.SchemeHostnameRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUri{}
										eligibleForCacheInt.SchemeHostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_uri_query"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUriQuery{}
										eligibleForCacheInt.SchemeHostnameUriQuery = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostRequestUri{}
										eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostUri{}
										eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

								}

							}

							if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ruleExpressionList := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList, len(sl))
								cacheRules[i].RuleExpressionList = ruleExpressionList
								for i, set := range sl {
									ruleExpressionList[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList{}
									ruleExpressionListMapStrToI := set.(map[string]interface{})

									if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cacheRuleExpression := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression, len(sl))
										ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
										for i, set := range sl {
											cacheRuleExpression[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression{}
											cacheRuleExpressionMapStrToI := set.(map[string]interface{})

											if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												cacheHeaders := make([]*ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType, len(sl))
												cacheRuleExpression[i].CacheHeaders = cacheHeaders
												for i, set := range sl {
													cacheHeaders[i] = &ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType{}
													cacheHeadersMapStrToI := set.(map[string]interface{})

													if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

														cacheHeaders[i].Name = ves_io_schema_views_cdn_loadbalancer.HeaderOptions(ves_io_schema_views_cdn_loadbalancer.HeaderOptions_value[v.(string)])

													}

													if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														cacheHeaders[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												cookieMatcher := make([]*ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType, len(sl))
												cacheRuleExpression[i].CookieMatcher = cookieMatcher
												for i, set := range sl {
													cookieMatcher[i] = &ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType{}
													cookieMatcherMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatcher[i].Name = w.(string)
													}

													if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														cookieMatcher[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												pathMatch := &ves_io_schema_views_cdn_loadbalancer.CDNPathMatcherType{}
												cacheRuleExpression[i].PathMatch = pathMatch
												for _, set := range sl {
													pathMatchMapStrToI := set.(map[string]interface{})

													if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														pathMatch.Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												queryParameters := make([]*ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType, len(sl))
												cacheRuleExpression[i].QueryParameters = queryParameters
												for i, set := range sl {
													queryParameters[i] = &ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType{}
													queryParametersMapStrToI := set.(map[string]interface{})

													if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParameters[i].Key = w.(string)
													}

													if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														queryParameters[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

										}

									}

									if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
										ruleExpressionList[i].ExpressionName = w.(string)
									}

								}

							}

							if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
								cacheRules[i].RuleName = w.(string)
							}

						}

					}

					if v, ok := cacheOptionsMapStrToI["default_cache_action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						defaultCacheAction := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction{}
						cacheOptions.DefaultCacheAction = defaultCacheAction
						for _, set := range sl {
							defaultCacheActionMapStrToI := set.(map[string]interface{})

							cacheActionsTypeFound := false

							if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true

								if v.(bool) {
									cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheDisabled{}
									cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
									defaultCacheAction.CacheActions = cacheActionsInt
								}

							}

							if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlDefault{}

								defaultCacheAction.CacheActions = cacheActionsInt

								cacheActionsInt.CacheTtlDefault = v.(string)

							}

							if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlOverride{}

								defaultCacheAction.CacheActions = cacheActionsInt

								cacheActionsInt.CacheTtlOverride = v.(string)

							}

							if v, ok := defaultCacheActionMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_EligibleForCache{}
								cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.DefaultCacheTTLProps{}
								defaultCacheAction.CacheActions = cacheActionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

										cacheActionsInt.EligibleForCache.CacheTtl = v.(string)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["cache_ttl_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheTtlOptions := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType{}
				moreOption.CacheTtlOptions = cacheTtlOptions
				for _, set := range sl {
					cacheTtlOptionsMapStrToI := set.(map[string]interface{})

					ttlOptionsTypeFound := false

					if v, ok := cacheTtlOptionsMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true

						if v.(bool) {
							ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheDisabled{}
							ttlOptionsInt.CacheDisabled = &ves_io_schema.Empty{}
							cacheTtlOptions.TtlOptions = ttlOptionsInt
						}

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlDefault{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlDefault = v.(string)

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlOverride{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlOverride = v.(string)

					}

				}

			}

			if v, ok := moreOptionMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				moreOption.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := moreOptionMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				moreOption.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["security_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				securityOptions := &ves_io_schema_views_cdn_loadbalancer.SecurityOptionsType{}
				moreOption.SecurityOptions = securityOptions
				for _, set := range sl {
					securityOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := securityOptionsMapStrToI["api_protection"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiProtection := &ves_io_schema_views_cdn_loadbalancer.ApiProtection{}
						securityOptions.ApiProtection = apiProtection
						for _, set := range sl {
							apiProtectionMapStrToI := set.(map[string]interface{})

							apiDefinitionChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["api_specification"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true
								apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiSpecification{}
								apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
								apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
										apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

										for _, set := range sl {
											adMapToStrVal := set.(map[string]interface{})
											if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Name = val.(string)
											}
											if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Namespace = val.(string)
											}

											if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Tenant = val.(string)
											}
										}

									}

									validationTargetChoiceTypeFound := false

									if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
										validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
										apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

											if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
												for _, set := range sl {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
										validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
										apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
												validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
												for i, set := range sl {
													openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
													openApiValidationRulesMapStrToI := set.(map[string]interface{})

													conditionTypeChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
														conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															openApiValidationRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

														openApiValidationRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														openApiValidationRules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
														openApiValidationRules[i].ValidationMode = validationMode
														for _, set := range sl {
															validationModeMapStrToI := set.(map[string]interface{})

															responseValidationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true
																responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
																responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
																validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																		response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

															if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true

																if v.(bool) {
																	responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
																	responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
																	validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
																}

															}

															validationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true

																if v.(bool) {
																	validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
																	validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
																	validationMode.ValidationModeChoice = validationModeChoiceInt
																}

															}

															if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true
																validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
																validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
																validationMode.ValidationModeChoice = validationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																		request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationCustomList.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true

										if v.(bool) {
											validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
											validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
											apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["api_specification_on_cache_miss"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true
								apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiSpecificationOnCacheMiss{}
								apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss = &ves_io_schema_views_common_waf.APISpecificationSettings{}
								apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ApiDefinition = apiDefinitionIntNew

										for _, set := range sl {
											adMapToStrVal := set.(map[string]interface{})
											if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Name = val.(string)
											}
											if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Namespace = val.(string)
											}

											if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Tenant = val.(string)
											}
										}

									}

									validationTargetChoiceTypeFound := false

									if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
										validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

											if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
												for _, set := range sl {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
										validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
												validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
												for i, set := range sl {
													openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
													openApiValidationRulesMapStrToI := set.(map[string]interface{})

													conditionTypeChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
														conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															openApiValidationRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

														openApiValidationRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														openApiValidationRules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
														openApiValidationRules[i].ValidationMode = validationMode
														for _, set := range sl {
															validationModeMapStrToI := set.(map[string]interface{})

															responseValidationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true
																responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
																responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
																validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																		response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

															if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true

																if v.(bool) {
																	responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
																	responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
																	validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
																}

															}

															validationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true

																if v.(bool) {
																	validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
																	validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
																	validationMode.ValidationModeChoice = validationModeChoiceInt
																}

															}

															if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true
																validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
																validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
																validationMode.ValidationModeChoice = validationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																		request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationCustomList.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true

										if v.(bool) {
											validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
											validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
											apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt
										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["disable_api_definition"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true

								if v.(bool) {
									apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DisableApiDefinition{}
									apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
									apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt
								}

							}

							apiDiscoveryChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["api_discovery_on_cache_miss"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true
								apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiDiscoveryOnCacheMiss{}
								apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
								apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
										for _, set := range sl {
											apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

											if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
												apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
												for i, set := range sl {
													codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
													codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

													apiReposChoiceTypeFound := false

													if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true

														if v.(bool) {
															apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
															apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
															codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true
														apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
														apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
														codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

															}

														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
														codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

														for _, set := range sl {
															cbiMapToStrVal := set.(map[string]interface{})
															if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Name = val.(string)
															}
															if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Namespace = val.(string)
															}

															if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Tenant = val.(string)
															}
														}

													}

												}

											}

										}

									}

									if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.DiscoveredApiSettings = discoveredApiSettings
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

									learnFromRedirectTrafficTypeFound := false

									if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.SensitiveDataDetectionRules = sensitiveDataDetectionRules
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["disable_api_discovery"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true

								if v.(bool) {
									apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DisableApiDiscovery{}
									apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
									apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt
								}

							}

							if v, ok := apiProtectionMapStrToI["enable_api_discovery"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true
								apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_EnableApiDiscovery{}
								apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
								apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
										for _, set := range sl {
											apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

											if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
												apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
												for i, set := range sl {
													codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
													codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

													apiReposChoiceTypeFound := false

													if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true

														if v.(bool) {
															apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
															apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
															codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true
														apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
														apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
														codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

															}

														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
														codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

														for _, set := range sl {
															cbiMapToStrVal := set.(map[string]interface{})
															if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Name = val.(string)
															}
															if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Namespace = val.(string)
															}

															if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Tenant = val.(string)
															}
														}

													}

												}

											}

										}

									}

									if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

									learnFromRedirectTrafficTypeFound := false

									if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.SensitiveDataDetectionRules = sensitiveDataDetectionRules
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["api_protection_rules"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
								apiProtection.ApiProtectionRules = apiProtectionRules
								for _, set := range sl {
									apiProtectionRulesMapStrToI := set.(map[string]interface{})

									if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
										apiProtectionRules.ApiEndpointRules = apiEndpointRules
										for i, set := range sl {
											apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
											apiEndpointRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
												apiEndpointRules[i].Action = action
												for _, set := range sl {
													actionMapStrToI := set.(map[string]interface{})

													actionTypeFound := false

													if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
															actionInt.Allow = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

													if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
															actionInt.Deny = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
												apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
												for _, set := range sl {
													apiEndpointMethodMapStrToI := set.(map[string]interface{})

													if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														apiEndpointMethod.InvertMatcher = w.(bool)
													}

													if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														apiEndpointMethod.Methods = methodsList

													}

												}

											}

											if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].ApiEndpointPath = w.(string)
											}

											if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiEndpointRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiEndpointRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

												apiEndpointRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												apiEndpointRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiEndpointRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

									if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
										apiProtectionRules.ApiGroupsRules = apiGroupsRules
										for i, set := range sl {
											apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
											apiGroupsRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
												apiGroupsRules[i].Action = action
												for _, set := range sl {
													actionMapStrToI := set.(map[string]interface{})

													actionTypeFound := false

													if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
															actionInt.Allow = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

													if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
															actionInt.Deny = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

												}

											}

											if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
												apiGroupsRules[i].ApiGroup = w.(string)
											}

											if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												apiGroupsRules[i].BasePath = w.(string)
											}

											if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiGroupsRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiGroupsRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

												apiGroupsRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												apiGroupsRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

											if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiGroupsRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["jwt_validation"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
								apiProtection.JwtValidation = jwtValidation
								for _, set := range sl {
									jwtValidationMapStrToI := set.(map[string]interface{})

									if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										action := &ves_io_schema.Action{}
										jwtValidation.Action = action
										for _, set := range sl {
											actionMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema.Action_Block{}
													actionChoiceInt.Block = &ves_io_schema.Empty{}
													action.ActionChoice = actionChoiceInt
												}

											}

											if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema.Action_Report{}
													actionChoiceInt.Report = &ves_io_schema.Empty{}
													action.ActionChoice = actionChoiceInt
												}

											}

										}

									}

									jwksConfigurationTypeFound := false

									if v, ok := jwtValidationMapStrToI["auth_server_uri"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_AuthServerUri{}

										jwtValidation.JwksConfiguration = jwksConfigurationInt

										jwksConfigurationInt.AuthServerUri = v.(string)

									}

									if v, ok := jwtValidationMapStrToI["jwks"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_Jwks{}

										jwtValidation.JwksConfiguration = jwksConfigurationInt

										jwksConfigurationInt.Jwks = v.(string)

									}

									if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
										jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
										jwtValidation.JwksConfiguration = jwksConfigurationInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

												jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
										jwtValidation.MandatoryClaims = mandatoryClaims
										for _, set := range sl {
											mandatoryClaimsMapStrToI := set.(map[string]interface{})

											if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												mandatoryClaims.ClaimNames = ls
											}

										}

									}

									if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
										jwtValidation.ReservedClaims = reservedClaims
										for _, set := range sl {
											reservedClaimsMapStrToI := set.(map[string]interface{})

											audienceValidationTypeFound := false

											if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

												audienceValidationTypeFound = true
												audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
												audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
												reservedClaims.AudienceValidation = audienceValidationInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														audienceValidationInt.Audience.Audiences = ls

													}

												}

											}

											if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

												audienceValidationTypeFound = true

												if v.(bool) {
													audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
													audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
													reservedClaims.AudienceValidation = audienceValidationInt
												}

											}

											issuerValidationTypeFound := false

											if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

												issuerValidationTypeFound = true
												issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

												reservedClaims.IssuerValidation = issuerValidationInt

												issuerValidationInt.Issuer = v.(string)

											}

											if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

												issuerValidationTypeFound = true

												if v.(bool) {
													issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
													issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
													reservedClaims.IssuerValidation = issuerValidationInt
												}

											}

											validatePeriodTypeFound := false

											if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

												validatePeriodTypeFound = true

												if v.(bool) {
													validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
													validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
													reservedClaims.ValidatePeriod = validatePeriodInt
												}

											}

											if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

												validatePeriodTypeFound = true

												if v.(bool) {
													validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
													validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
													reservedClaims.ValidatePeriod = validatePeriodInt
												}

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										target := &ves_io_schema_views_common_waf.Target{}
										jwtValidation.Target = target
										for _, set := range sl {
											targetMapStrToI := set.(map[string]interface{})

											targetTypeFound := false

											if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true

												if v.(bool) {
													targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
													targetInt.AllEndpoint = &ves_io_schema.Empty{}
													target.Target = targetInt
												}

											}

											if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true
												targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
												targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
												target.Target = targetInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														targetInt.ApiGroups.ApiGroups = ls

													}

												}

											}

											if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true
												targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
												targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
												target.Target = targetInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														targetInt.BasePaths.BasePaths = ls

													}

												}

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
										jwtValidation.TokenLocation = tokenLocation
										for _, set := range sl {
											tokenLocationMapStrToI := set.(map[string]interface{})

											tokenLocationTypeFound := false

											if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true

												if v.(bool) {
													tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
													tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
													tokenLocation.TokenLocation = tokenLocationInt
												}

											}

											if v, ok := tokenLocationMapStrToI["cookie"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Cookie{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.Cookie = v.(string)

											}

											if v, ok := tokenLocationMapStrToI["header"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Header{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.Header = v.(string)

											}

											if v, ok := tokenLocationMapStrToI["query_param"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_QueryParam{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.QueryParam = v.(string)

											}

										}

									}

								}

							}

							sensitiveDataPolicyChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["default_sensitive_data_policy"]; ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

								sensitiveDataPolicyChoiceTypeFound = true

								if v.(bool) {
									sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DefaultSensitiveDataPolicy{}
									sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
									apiProtection.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
								}

							}

							if v, ok := apiProtectionMapStrToI["sensitive_data_policy"]; ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

								sensitiveDataPolicyChoiceTypeFound = true
								sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_SensitiveDataPolicy{}
								sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
								apiProtection.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
										sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

										for _, set := range sl {
											sdprMapToStrVal := set.(map[string]interface{})
											if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Name = val.(string)
											}
											if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Namespace = val.(string)
											}

											if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Tenant = val.(string)
											}
										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["auth_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						authOptions := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions{}
						securityOptions.AuthOptions = authOptions
						for _, set := range sl {
							authOptionsMapStrToI := set.(map[string]interface{})

							authOptionsTypeFound := false

							if v, ok := authOptionsMapStrToI["custom"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Custom{}
								authOptionsInt.Custom = &ves_io_schema_views_cdn_loadbalancer.CDNCustomAuthentication{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["custom_auth_config"]; ok && !isIntfNil(v) {

										authOptionsInt.Custom.CustomAuthConfig = v.(string)

									}

								}

							}

							if v, ok := authOptionsMapStrToI["disable_auth"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true

								if v.(bool) {
									authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_DisableAuth{}
									authOptionsInt.DisableAuth = &ves_io_schema.Empty{}
									authOptions.AuthOptions = authOptionsInt
								}

							}

							if v, ok := authOptionsMapStrToI["jwt"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Jwt{}
								authOptionsInt.Jwt = &ves_io_schema_policy.JwtTokenAuthOptions{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["backup_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										backupKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.BackupKey = backupKey
										for _, set := range sl {
											backupKeyMapStrToI := set.(map[string]interface{})

											if v, ok := backupKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												backupKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := backupKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												backupKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := backupKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := backupKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := backupKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := backupKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									if v, ok := cs["secret_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										secretKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.SecretKey = secretKey
										for _, set := range sl {
											secretKeyMapStrToI := set.(map[string]interface{})

											if v, ok := secretKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := secretKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												secretKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := secretKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := secretKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									tokenSourceTypeFound := false

									if v, ok := cs["bearer_token"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true

										if v.(bool) {
											tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_BearerToken{}
											tokenSourceInt.BearerToken = &ves_io_schema.Empty{}
											authOptionsInt.Jwt.TokenSource = tokenSourceInt
										}

									}

									if v, ok := cs["cookie"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Cookie{}
										tokenSourceInt.Cookie = &ves_io_schema_policy.HttpCookieName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Cookie.Name = v.(string)

											}

										}

									}

									if v, ok := cs["header"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Header{}
										tokenSourceInt.Header = &ves_io_schema_policy.HttpHeaderName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Header.Name = v.(string)

											}

										}

									}

									if v, ok := cs["query_param"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_QueryParam{}
										tokenSourceInt.QueryParam = &ves_io_schema_policy.HttpQueryParameterName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												tokenSourceInt.QueryParam.Key = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["common_security_controls"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						commonSecurityControls := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls{}
						securityOptions.CommonSecurityControls = commonSecurityControls
						for _, set := range sl {
							commonSecurityControlsMapStrToI := set.(map[string]interface{})

							if v, ok := commonSecurityControlsMapStrToI["blocked_clients"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
								commonSecurityControls.BlockedClients = blockedClients
								for i, set := range sl {
									blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
									blockedClientsMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := blockedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
											actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
											actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
											actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

										actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
										for _, j := range v.([]interface{}) {
											actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
										}
										blockedClients[i].Actions = actionsList

									}

									clientSourceChoiceTypeFound := false

									if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.AsNumber = uint32(v.(int))

									}

									if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
										clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
												clientSourceChoiceInt.HttpHeader.Headers = headers
												for i, set := range sl {
													headers[i] = &ves_io_schema.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
														headers[i].InvertMatch = w.(bool)
													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

													valueMatchTypeFound := false

													if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Exact = v.(string)

													}

													if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Presence = v.(bool)

													}

													if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Regex = v.(string)

													}

												}

											}

										}

									}

									if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.IpPrefix = v.(string)

									}

									if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.UserIdentifier = v.(string)

									}

									if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										blockedClients[i].ExpirationTimestamp = ts
									}

									if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										blockedClients[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

								}

							}

							challengeTypeTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["captcha_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_CaptchaChallenge{}
								challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

										challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

									}

									if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

										challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["challenge_on_cache_miss"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ChallengeOnCacheMiss{}
								challengeTypeInt.ChallengeOnCacheMiss = &ves_io_schema_views_common_waf.EnableChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableChallenge{}
								challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["js_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_JsChallenge{}
								challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

									}

									if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.CustomPage = v.(string)

									}

									if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["no_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true

								if v.(bool) {
									challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_NoChallenge{}
									challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
									commonSecurityControls.ChallengeType = challengeTypeInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["policy_based_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_PolicyBasedChallenge{}
								challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									challengeChoiceTypeFound := false

									if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
											challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
											challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
											challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
										challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
										for _, set := range sl {
											ruleListMapStrToI := set.(map[string]interface{})

											if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
												ruleList.Rules = rules
												for i, set := range sl {
													rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
													rulesMapStrToI := set.(map[string]interface{})

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
														rules[i].Spec = spec
														for _, set := range sl {
															specMapStrToI := set.(map[string]interface{})

															if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
																spec.ArgMatchers = argMatchers
																for i, set := range sl {
																	argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																	argMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		argMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			argMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			argMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		argMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

																		argMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		argMatchers[i].Name = w.(string)
																	}

																}

															}

															asnChoiceTypeFound := false

															if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true

																if v.(bool) {
																	asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
																	asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
																	spec.AsnChoice = asnChoiceInt
																}

															}

															if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true
																asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
																asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
																spec.AsnChoice = asnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																		ls := make([]uint32, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = uint32(v.(int))
																		}
																		asnChoiceInt.AsnList.AsNumbers = ls

																	}

																}

															}

															if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true
																asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
																asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
																spec.AsnChoice = asnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																		for i, ps := range sl {

																			asMapToStrVal := ps.(map[string]interface{})
																			asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			asnSetsInt[i].Kind = "bgp_asn_set"

																			if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Name = v.(string)
																			}

																			if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																bodyMatcher := &ves_io_schema_policy.MatcherType{}
																spec.BodyMatcher = bodyMatcher
																for _, set := range sl {
																	bodyMatcherMapStrToI := set.(map[string]interface{})

																	if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		bodyMatcher.ExactValues = ls
																	}

																	if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		bodyMatcher.RegexValues = ls
																	}

																	if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		bodyMatcher.Transformers = transformersList

																	}

																}

															}

															challengeActionTypeFound := false

															if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
																	challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
																	challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
																	challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															clientChoiceTypeFound := false

															if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true

																if v.(bool) {
																	clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
																	clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
																	spec.ClientChoice = clientChoiceInt
																}

															}

															if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientName{}

																spec.ClientChoice = clientChoiceInt

																clientChoiceInt.ClientName = v.(string)

															}

															if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientNameMatcher{}
																clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
																spec.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientNameMatcher.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientNameMatcher.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		clientChoiceInt.ClientNameMatcher.Transformers = transformersList

																	}

																}

															}

															if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
																clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
																spec.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientSelector.Expressions = ls

																	}

																}

															}

															if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
																spec.CookieMatchers = cookieMatchers
																for i, set := range sl {
																	cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																	cookieMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		cookieMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																		cookieMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
																spec.DomainMatcher = domainMatcher
																for _, set := range sl {
																	domainMatcherMapStrToI := set.(map[string]interface{})

																	if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		domainMatcher.ExactValues = ls
																	}

																	if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		domainMatcher.RegexValues = ls
																	}

																}

															}

															if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
																ts, err := parseTime(w.(string))
																if err != nil {
																	return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
																}
																spec.ExpirationTimestamp = ts
															}

															if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
																spec.Headers = headers
																for i, set := range sl {
																	headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																	headersMapStrToI := set.(map[string]interface{})

																	if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		headers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		headers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																		headers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																		headers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
																spec.HttpMethod = httpMethod
																for _, set := range sl {
																	httpMethodMapStrToI := set.(map[string]interface{})

																	if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		httpMethod.InvertMatcher = w.(bool)
																	}

																	if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																		methodsList := []ves_io_schema.HttpMethod{}
																		for _, j := range v.([]interface{}) {
																			methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																		}
																		httpMethod.Methods = methodsList

																	}

																}

															}

															ipChoiceTypeFound := false

															if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true

																if v.(bool) {
																	ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
																	ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
																	spec.IpChoice = ipChoiceInt
																}

															}

															if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true
																ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
																ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
																spec.IpChoice = ipChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																		ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																	}

																	if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																		for i, ps := range sl {

																			psMapToStrVal := ps.(map[string]interface{})
																			prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			prefixSetsInt[i].Kind = "ip_prefix_set"

																			if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Name = v.(string)
																			}

																			if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true
																ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
																ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
																spec.IpChoice = ipChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																		ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																	}

																	if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipChoiceInt.IpPrefixList.IpPrefixes = ls

																	}

																	if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																	}

																}

															}

															if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																path := &ves_io_schema_policy.PathMatcherType{}
																spec.Path = path
																for _, set := range sl {
																	pathMapStrToI := set.(map[string]interface{})

																	if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.ExactValues = ls
																	}

																	if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		path.InvertMatcher = w.(bool)
																	}

																	if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.PrefixValues = ls
																	}

																	if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.RegexValues = ls
																	}

																	if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.SuffixValues = ls
																	}

																	if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		path.Transformers = transformersList

																	}

																}

															}

															if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
																spec.QueryParams = queryParams
																for i, set := range sl {
																	queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																	queryParamsMapStrToI := set.(map[string]interface{})

																	if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		queryParams[i].InvertMatcher = w.(bool)
																	}

																	if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																		queryParams[i].Key = w.(string)
																	}

																	matchTypeFound := false

																	if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		queryParams[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																		queryParams[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																}

															}

															tlsFingerprintChoiceTypeFound := false

															if v, ok := specMapStrToI["ja4_tls_fingerprint"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

																tlsFingerprintChoiceTypeFound = true
																tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_Ja4TlsFingerprint{}
																tlsFingerprintChoiceInt.Ja4TlsFingerprint = &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
																spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.Ja4TlsFingerprint.ExactValues = ls

																	}

																}

															}

															if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

																tlsFingerprintChoiceTypeFound = true
																tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
																tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
																spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																		classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																		for _, j := range v.([]interface{}) {
																			classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																	}

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																	}

																	if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																	}

																}

															}

														}

													}

												}

											}

										}

									}

									temporaryBlockingParametersChoiceTypeFound := false

									if v, ok := cs["default_temporary_blocking_parameters"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

										temporaryBlockingParametersChoiceTypeFound = true

										if v.(bool) {
											temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{}
											temporaryBlockingParametersChoiceInt.DefaultTemporaryBlockingParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt
										}

									}

									if v, ok := cs["temporary_user_blocking"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

										temporaryBlockingParametersChoiceTypeFound = true
										temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_TemporaryUserBlocking{}
										temporaryBlockingParametersChoiceInt.TemporaryUserBlocking = &ves_io_schema_virtual_host.TemporaryUserBlockingType{}
										challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												temporaryBlockingParametersChoiceInt.TemporaryUserBlocking.CustomPage = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["cors_policy"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								corsPolicy := &ves_io_schema.CorsPolicy{}
								commonSecurityControls.CorsPolicy = corsPolicy
								for _, set := range sl {
									corsPolicyMapStrToI := set.(map[string]interface{})

									if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
										corsPolicy.AllowCredentials = w.(bool)
									}

									if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
										corsPolicy.AllowHeaders = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
										corsPolicy.AllowMethods = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										corsPolicy.AllowOrigin = ls
									}

									if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										corsPolicy.AllowOriginRegex = ls
									}

									if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
										corsPolicy.Disabled = w.(bool)
									}

									if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
										corsPolicy.ExposeHeaders = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["max_age"]; ok && !isIntfNil(w) {
										corsPolicy.MaxAge = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
										corsPolicy.MaximumAge = int32(w.(int))
									}

								}

							}

							ipReputationChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_ip_reputation"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true

								if v.(bool) {
									ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableIpReputation{}
									ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
									commonSecurityControls.IpReputationChoice = ipReputationChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_ip_reputation"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true
								ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableIpReputation{}
								ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
								commonSecurityControls.IpReputationChoice = ipReputationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["ip_reputation_on_cache_miss"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true
								ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_IpReputationOnCacheMiss{}
								ipReputationChoiceInt.IpReputationOnCacheMiss = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
								commonSecurityControls.IpReputationChoice = ipReputationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										ipReputationChoiceInt.IpReputationOnCacheMiss.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							maliciousUserDetectionChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_malicious_user_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableMaliciousUserDetection{}
									maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_malicious_user_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableMaliciousUserDetection{}
									maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["malicious_user_detection_on_cache_miss"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_MaliciousUserDetectionOnCacheMiss{}
									maliciousUserDetectionChoiceInt.MaliciousUserDetectionOnCacheMiss = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							rateLimitChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["api_rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true
								rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ApiRateLimit{}
								rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
								commonSecurityControls.RateLimitChoice = rateLimitChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
										rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
										for i, set := range sl {
											apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
											apiEndpointRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
												apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
												for _, set := range sl {
													apiEndpointMethodMapStrToI := set.(map[string]interface{})

													if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														apiEndpointMethod.InvertMatcher = w.(bool)
													}

													if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														apiEndpointMethod.Methods = methodsList

													}

												}

											}

											if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].ApiEndpointPath = w.(string)
											}

											if w, ok := apiEndpointRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].BasePath = w.(string)
											}

											if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiEndpointRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiEndpointRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

												apiEndpointRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											rateLimiterChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
												rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
												apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													countByChoiceTypeFound := false

													if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true
														countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
														countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
														rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["name"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Name = v.(string)

															}

															if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Namespace = v.(string)

															}

															if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Tenant = v.(string)

															}

														}

													}

													if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true

														if v.(bool) {
															countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
															countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
															rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
														}

													}

													if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

													}

													if v, ok := cs["unit"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
												rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
												apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiEndpointRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

									ipAllowedListChoiceTypeFound := false

									if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
										ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
												ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
												for i, set := range sl {
													bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
													bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

													if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														clientMatcher := &ves_io_schema_policy.ClientMatcher{}
														bypassRateLimitingRules[i].ClientMatcher = clientMatcher
														for _, set := range sl {
															clientMatcherMapStrToI := set.(map[string]interface{})

															clientChoiceTypeFound := false

															if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true

																if v.(bool) {
																	clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
																	clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
																	clientMatcher.ClientChoice = clientChoiceInt
																}

															}

															if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
																clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
																clientMatcher.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientSelector.Expressions = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
																clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
																clientMatcher.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																		ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																		for _, j := range v.([]interface{}) {
																			ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																		}
																		clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																	}

																}

															}

															ipAsnChoiceTypeFound := false

															if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true

																if v.(bool) {
																	ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
																	ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
																	clientMatcher.IpAsnChoice = ipAsnChoiceInt
																}

															}

															if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
																ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																		ls := make([]uint32, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = uint32(v.(int))
																		}
																		ipAsnChoiceInt.AsnList.AsNumbers = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
																ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																		for i, ps := range sl {

																			asMapToStrVal := ps.(map[string]interface{})
																			asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			asnSetsInt[i].Kind = "bgp_asn_set"

																			if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Name = v.(string)
																			}

																			if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
																ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																		ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																	}

																	if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																		for i, ps := range sl {

																			psMapToStrVal := ps.(map[string]interface{})
																			prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			prefixSetsInt[i].Kind = "ip_prefix_set"

																			if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Name = v.(string)
																			}

																			if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
																ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																		ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																	}

																	if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																	}

																	if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
																clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
																for _, set := range sl {
																	tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																	if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																		classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																		for _, j := range v.([]interface{}) {
																			classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																		}
																		tlsFingerprintMatcher.Classes = classesList

																	}

																	if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintMatcher.ExactValues = ls
																	}

																	if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintMatcher.ExcludedValues = ls
																	}

																}

															}

														}

													}

													destinationTypeTypeFound := false

													if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true

														if v.(bool) {
															destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
															destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
															bypassRateLimitingRules[i].DestinationType = destinationTypeInt
														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
														destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																destinationTypeInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																destinationTypeInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
														destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																destinationTypeInt.ApiGroups.ApiGroups = ls

															}

														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														destinationTypeInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

														bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														requestMatcher := &ves_io_schema_policy.RequestMatcher{}
														bypassRateLimitingRules[i].RequestMatcher = requestMatcher
														for _, set := range sl {
															requestMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
																requestMatcher.CookieMatchers = cookieMatchers
																for i, set := range sl {
																	cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																	cookieMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		cookieMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																		cookieMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
																requestMatcher.Headers = headers
																for i, set := range sl {
																	headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																	headersMapStrToI := set.(map[string]interface{})

																	if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		headers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		headers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																		headers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																		headers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
																requestMatcher.JwtClaims = jwtClaims
																for i, set := range sl {
																	jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																	jwtClaimsMapStrToI := set.(map[string]interface{})

																	if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		jwtClaims[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			jwtClaims[i].Match = matchInt
																		}

																	}

																	if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			jwtClaims[i].Match = matchInt
																		}

																	}

																	if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		jwtClaims[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																		jwtClaims[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
																requestMatcher.QueryParams = queryParams
																for i, set := range sl {
																	queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																	queryParamsMapStrToI := set.(map[string]interface{})

																	if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		queryParams[i].InvertMatcher = w.(bool)
																	}

																	if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																		queryParams[i].Key = w.(string)
																	}

																	matchTypeFound := false

																	if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		queryParams[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																		queryParams[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
										ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
												for i, ps := range sl {

													rlapMapToStrVal := ps.(map[string]interface{})
													rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Name = v.(string)
													}

													if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
													}

													if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
										ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

											}

											if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

											}

										}

									}

									if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true

										if v.(bool) {
											ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
											ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
											rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
										}

									}

									if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
										rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
										for i, set := range sl {
											serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
											serverUrlRulesMapStrToI := set.(map[string]interface{})

											if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
												serverUrlRules[i].ApiGroup = w.(string)
											}

											if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												serverUrlRules[i].BasePath = w.(string)
											}

											if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												serverUrlRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													serverUrlRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

												serverUrlRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											rateLimiterChoiceTypeFound := false

											if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
												rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
												serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													countByChoiceTypeFound := false

													if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true
														countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
														countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
														rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["name"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Name = v.(string)

															}

															if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Namespace = v.(string)

															}

															if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Tenant = v.(string)

															}

														}

													}

													if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true

														if v.(bool) {
															countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
															countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
															rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
														}

													}

													if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

													}

													if v, ok := cs["unit"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

													}

												}

											}

											if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
												rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
												serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

													}

												}

											}

											if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												serverUrlRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["disable_rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true

								if v.(bool) {
									rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableRateLimit{}
									rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
									commonSecurityControls.RateLimitChoice = rateLimitChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true
								rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_RateLimit{}
								rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
								commonSecurityControls.RateLimitChoice = rateLimitChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									ipAllowedListChoiceTypeFound := false

									if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
										ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
										rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
												for i, ps := range sl {

													rlapMapToStrVal := ps.(map[string]interface{})
													rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Name = v.(string)
													}

													if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
													}

													if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
										ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
										rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

											}

											if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

											}

										}

									}

									if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true

										if v.(bool) {
											ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
											ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
											rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
										}

									}

									policyChoiceTypeFound := false

									if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

										policyChoiceTypeFound = true

										if v.(bool) {
											policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
											policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
											rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
										}

									}

									if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

										policyChoiceTypeFound = true
										policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
										policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
										rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["policies"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												policyChoiceInt.Policies.Policies = policiesInt
												for i, ps := range sl {

													pMapToStrVal := ps.(map[string]interface{})
													policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
														policiesInt[i].Name = v.(string)
													}

													if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														policiesInt[i].Namespace = v.(string)
													}

													if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														policiesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
										rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
										for _, set := range sl {
											rateLimiterMapStrToI := set.(map[string]interface{})

											if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
												rateLimiter.BurstMultiplier = uint32(w.(int))
											}

											if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
												rateLimiter.TotalNumber = uint32(w.(int))
											}

											if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

												rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

											}

										}

									}

								}

							}

							servicePolicyChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["active_service_policies"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true
								servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ActiveServicePolicies{}
								servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
								commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["policies"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
										servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
										for i, ps := range sl {

											pMapToStrVal := ps.(map[string]interface{})
											policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

											if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
												policiesInt[i].Name = v.(string)
											}

											if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												policiesInt[i].Namespace = v.(string)
											}

											if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												policiesInt[i].Tenant = v.(string)
											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["no_service_policies"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true

								if v.(bool) {
									servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_NoServicePolicies{}
									servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
									commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["service_policies_from_namespace"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true

								if v.(bool) {
									servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ServicePoliciesFromNamespace{}
									servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
									commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt
								}

							}

							threatMeshChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_threat_mesh"]; ok && !isIntfNil(v) && !threatMeshChoiceTypeFound {

								threatMeshChoiceTypeFound = true

								if v.(bool) {
									threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableThreatMesh{}
									threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
									commonSecurityControls.ThreatMeshChoice = threatMeshChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_threat_mesh"]; ok && !isIntfNil(v) && !threatMeshChoiceTypeFound {

								threatMeshChoiceTypeFound = true

								if v.(bool) {
									threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableThreatMesh{}
									threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
									commonSecurityControls.ThreatMeshChoice = threatMeshChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["trusted_clients"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
								commonSecurityControls.TrustedClients = trustedClients
								for i, set := range sl {
									trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
									trustedClientsMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := trustedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
											actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
											actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
											actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

										actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
										for _, j := range v.([]interface{}) {
											actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
										}
										trustedClients[i].Actions = actionsList

									}

									clientSourceChoiceTypeFound := false

									if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.AsNumber = uint32(v.(int))

									}

									if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
										clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
												clientSourceChoiceInt.HttpHeader.Headers = headers
												for i, set := range sl {
													headers[i] = &ves_io_schema.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
														headers[i].InvertMatch = w.(bool)
													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

													valueMatchTypeFound := false

													if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Exact = v.(string)

													}

													if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Presence = v.(bool)

													}

													if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Regex = v.(string)

													}

												}

											}

										}

									}

									if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.IpPrefix = v.(string)

									}

									if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.UserIdentifier = v.(string)

									}

									if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										trustedClients[i].ExpirationTimestamp = ts
									}

									if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										trustedClients[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

								}

							}

							userIdChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["user_id_client_ip"]; ok && !isIntfNil(v) && !userIdChoiceTypeFound {

								userIdChoiceTypeFound = true

								if v.(bool) {
									userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_UserIdClientIp{}
									userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
									commonSecurityControls.UserIdChoice = userIdChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["user_identification"]; ok && !isIntfNil(v) && !userIdChoiceTypeFound {

								userIdChoiceTypeFound = true
								userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_UserIdentification{}
								userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
								commonSecurityControls.UserIdChoice = userIdChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Tenant = v.(string)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
						securityOptions.GeoFiltering = geoFiltering
						for _, set := range sl {
							geoFilteringMapStrToI := set.(map[string]interface{})

							geoFilteringTypeTypeFound := false

							if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
								geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

								}

							}

							if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
								geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
						securityOptions.IpFiltering = ipFiltering
						for _, set := range sl {
							ipFilteringMapStrToI := set.(map[string]interface{})

							ipFilteringTypeTypeFound := false

							if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
								ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
								ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["web_app_firewall"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						webAppFirewall := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall{}
						securityOptions.WebAppFirewall = webAppFirewall
						for _, set := range sl {
							webAppFirewallMapStrToI := set.(map[string]interface{})

							if v, ok := webAppFirewallMapStrToI["csrf_policy"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								csrfPolicy := &ves_io_schema.CsrfPolicy{}
								webAppFirewall.CsrfPolicy = csrfPolicy
								for _, set := range sl {
									csrfPolicyMapStrToI := set.(map[string]interface{})

									allowedDomainsTypeFound := false

									if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true

										if v.(bool) {
											allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
											allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
											csrfPolicy.AllowedDomains = allowedDomainsInt
										}

									}

									if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true
										allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
										allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
										csrfPolicy.AllowedDomains = allowedDomainsInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["domains"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												allowedDomainsInt.CustomDomainList.Domains = ls

											}

										}

									}

									if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true

										if v.(bool) {
											allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
											allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
											csrfPolicy.AllowedDomains = allowedDomainsInt
										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["data_guard_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
								webAppFirewall.DataGuardRules = dataGuardRules
								for i, set := range sl {
									dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
									dataGuardRulesMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
											actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
											dataGuardRules[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
											actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
											dataGuardRules[i].ActionChoice = actionChoiceInt
										}

									}

									domainChoiceTypeFound := false

									if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											dataGuardRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

										dataGuardRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

										dataGuardRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										dataGuardRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										dataGuardRules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["graphql_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
								webAppFirewall.GraphqlRules = graphqlRules
								for i, set := range sl {
									graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
									graphqlRulesMapStrToI := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											graphqlRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

										graphqlRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

										graphqlRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
										graphqlRules[i].ExactPath = w.(string)
									}

									if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
										graphqlRules[i].GraphqlSettings = graphqlSettings
										for _, set := range sl {
											graphqlSettingsMapStrToI := set.(map[string]interface{})

											allowIntrospectionQueriesChoiceTypeFound := false

											if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

												allowIntrospectionQueriesChoiceTypeFound = true

												if v.(bool) {
													allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
													allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
													graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
												}

											}

											if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

												allowIntrospectionQueriesChoiceTypeFound = true

												if v.(bool) {
													allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
													allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
													graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
												}

											}

											if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxBatchedQueries = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxDepth = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxTotalLength = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_value_length"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxValueLength = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["policy_name"]; ok && !isIntfNil(w) {
												graphqlSettings.PolicyName = w.(string)
											}

										}

									}

									if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										graphqlRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									methodChoiceTypeFound := false

									if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

										methodChoiceTypeFound = true

										if v.(bool) {
											methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
											methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
											graphqlRules[i].MethodChoice = methodChoiceInt
										}

									}

									if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

										methodChoiceTypeFound = true

										if v.(bool) {
											methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
											methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
											graphqlRules[i].MethodChoice = methodChoiceInt
										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["protected_cookies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
								webAppFirewall.ProtectedCookies = protectedCookies
								for i, set := range sl {
									protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
									protectedCookiesMapStrToI := set.(map[string]interface{})

									cookieTamperingTypeFound := false

									if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

										cookieTamperingTypeFound = true

										if v.(bool) {
											cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
											cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
											protectedCookies[i].CookieTampering = cookieTamperingInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

										cookieTamperingTypeFound = true

										if v.(bool) {
											cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
											cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
											protectedCookies[i].CookieTampering = cookieTamperingInt
										}

									}

									httponlyTypeFound := false

									if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

										httponlyTypeFound = true

										if v.(bool) {
											httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
											httponlyInt.AddHttponly = &ves_io_schema.Empty{}
											protectedCookies[i].Httponly = httponlyInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

										httponlyTypeFound = true

										if v.(bool) {
											httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
											httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
											protectedCookies[i].Httponly = httponlyInt
										}

									}

									maxAgeTypeFound := false

									if v, ok := protectedCookiesMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

										maxAgeTypeFound = true

										if v.(bool) {
											maxAgeInt := &ves_io_schema.CookieManipulationOptionType_IgnoreMaxAge{}
											maxAgeInt.IgnoreMaxAge = &ves_io_schema.Empty{}
											protectedCookies[i].MaxAge = maxAgeInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

										maxAgeTypeFound = true
										maxAgeInt := &ves_io_schema.CookieManipulationOptionType_MaxAgeValue{}

										protectedCookies[i].MaxAge = maxAgeInt

										maxAgeInt.MaxAgeValue = int32(v.(int))

									}

									if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
										protectedCookies[i].Name = w.(string)
									}

									samesiteTypeFound := false

									if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
											samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
											samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
											samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
											samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									secureTypeFound := false

									if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

										secureTypeFound = true

										if v.(bool) {
											secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
											secureInt.AddSecure = &ves_io_schema.Empty{}
											protectedCookies[i].Secure = secureInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

										secureTypeFound = true

										if v.(bool) {
											secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
											secureInt.IgnoreSecure = &ves_io_schema.Empty{}
											protectedCookies[i].Secure = secureInt
										}

									}

								}

							}

							wafChoiceTypeFound := false

							if v, ok := webAppFirewallMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true
								wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_AppFirewall{}
								wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
								webAppFirewall.WafChoice = wafChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Tenant = v.(string)

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["app_firewall_on_cache_miss"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true
								wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_AppFirewallOnCacheMiss{}
								wafChoiceInt.AppFirewallOnCacheMiss = &ves_io_schema_views.ObjectRefType{}
								webAppFirewall.WafChoice = wafChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Tenant = v.(string)

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true

								if v.(bool) {
									wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_DisableWaf{}
									wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
									webAppFirewall.WafChoice = wafChoiceInt
								}

							}

							if v, ok := webAppFirewallMapStrToI["waf_exclusion_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
								webAppFirewall.WafExclusionRules = wafExclusionRules
								for i, set := range sl {
									wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
									wafExclusionRulesMapStrToI := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											wafExclusionRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

										wafExclusionRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

										wafExclusionRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										wafExclusionRules[i].ExpirationTimestamp = ts
									}

									if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										wafExclusionRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										wafExclusionRules[i].Methods = methodsList

									}

									pathChoiceTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true

										if v.(bool) {
											pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
											pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
											wafExclusionRules[i].PathChoice = pathChoiceInt
										}

									}

									if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true
										pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

										wafExclusionRules[i].PathChoice = pathChoiceInt

										pathChoiceInt.PathPrefix = v.(string)

									}

									if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true
										pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

										wafExclusionRules[i].PathChoice = pathChoiceInt

										pathChoiceInt.PathRegex = v.(string)

									}

									wafAdvancedConfigurationTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

										wafAdvancedConfigurationTypeFound = true
										wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
										wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
										wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
												for i, set := range sl {
													excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
													excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeAttackTypeContexts[i].ContextName = w.(string)
													}

													if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

													}

												}

											}

											if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
												for i, set := range sl {
													excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
													excludeBotNameContextsMapStrToI := set.(map[string]interface{})

													if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
														excludeBotNameContexts[i].BotName = w.(string)
													}

												}

											}

											if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
												for i, set := range sl {
													excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
													excludeSignatureContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].ContextName = w.(string)
													}

													if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].SignatureId = uint32(w.(int))
													}

												}

											}

											if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
												for i, set := range sl {
													excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
													excludeViolationContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeViolationContexts[i].ContextName = w.(string)
													}

													if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

													}

												}

											}

										}

									}

									if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

										wafAdvancedConfigurationTypeFound = true

										if v.(bool) {
											wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
											wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
											wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	//origin_pool
	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		createSpec.OriginPool = originPool
		for _, set := range sl {
			originPoolMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolMapStrToI["follow_origin_redirect"]; ok && !isIntfNil(w) {
				originPool.FollowOriginRedirect = w.(bool)
			}

			if v, ok := originPoolMapStrToI["more_origin_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				moreOriginOptions := &ves_io_schema_views_cdn_loadbalancer.OriginAdvancedConfiguration{}
				originPool.MoreOriginOptions = moreOriginOptions
				for _, set := range sl {
					moreOriginOptionsMapStrToI := set.(map[string]interface{})

					if w, ok := moreOriginOptionsMapStrToI["disable_byte_range_request"]; ok && !isIntfNil(w) {
						moreOriginOptions.DisableByteRangeRequest = w.(bool)
					}

					if w, ok := moreOriginOptionsMapStrToI["websocket_proxy"]; ok && !isIntfNil(w) {
						moreOriginOptions.WebsocketProxy = w.(bool)
					}

				}

			}

			if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
				originPool.OriginRequestTimeout = w.(string)
			}

			if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
				originPool.OriginServers = originServers
				for i, set := range sl {
					originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
					originServersMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
						choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							publicIpChoiceTypeFound := false

							if v, ok := cs["ip"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

								publicIpChoiceTypeFound = true
								publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ip{}

								choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

								publicIpChoiceInt.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

								publicIpChoiceTypeFound = true
								publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ipv6{}

								choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

								publicIpChoiceInt.Ipv6 = v.(string)

							}

						}

					}

					if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
						choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.DnsName = v.(string)

							}

							if v, ok := cs["refresh_interval"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.RefreshInterval = uint32(v.(int))

							}

						}

					}

					if w, ok := originServersMapStrToI["port"]; ok && !isIntfNil(w) {
						originServers[i].Port = uint32(w.(int))
					}

				}

			}

			if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
				originPool.PublicName = publicName
				for _, set := range sl {
					publicNameMapStrToI := set.(map[string]interface{})

					if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
						publicName.DnsName = w.(string)
					}

					if w, ok := publicNameMapStrToI["refresh_interval"]; ok && !isIntfNil(w) {
						publicName.RefreshInterval = uint32(w.(int))
					}

				}

			}

			tlsChoiceTypeFound := false

			if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true

				if v.(bool) {
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
					tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
					originPool.TlsChoice = tlsChoiceInt
				}

			}

			if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true
				tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
				tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
				originPool.TlsChoice = tlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					maxSessionKeysTypeTypeFound := false

					if v, ok := cs["default_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true

						if v.(bool) {
							maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DefaultSessionKeyCaching{}
							maxSessionKeysTypeInt.DefaultSessionKeyCaching = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
						}

					}

					if v, ok := cs["disable_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true

						if v.(bool) {
							maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSessionKeyCaching{}
							maxSessionKeysTypeInt.DisableSessionKeyCaching = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
						}

					}

					if v, ok := cs["max_session_keys"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true
						maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_MaxSessionKeys{}

						tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt

						maxSessionKeysTypeInt.MaxSessionKeys = uint32(v.(int))

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
										ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
										ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["use_mtls_obj"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtlsObj{}
						mtlsChoiceInt.UseMtlsObj = &ves_io_schema_views.ObjectRefType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Tenant = v.(string)

							}

						}

					}

					serverValidationChoiceTypeFound := false

					if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
							serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true
						serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
						serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
						tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCaUrl{}

								serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

						}

					}

					if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
							serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					sniChoiceTypeFound := false

					if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
							sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true
						sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

						tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

						sniChoiceInt.Sni = v.(string)

					}

					if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
							sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsChoiceInt.UseTls.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	//other_settings
	if v, ok := d.GetOk("other_settings"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		otherSettings := &ves_io_schema_views_cdn_loadbalancer.OtherSettings{}
		createSpec.OtherSettings = otherSettings
		for _, set := range sl {
			otherSettingsMapStrToI := set.(map[string]interface{})

			if w, ok := otherSettingsMapStrToI["add_location"]; ok && !isIntfNil(w) {
				otherSettings.AddLocation = w.(bool)
			}

			if v, ok := otherSettingsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
				otherSettings.GeoFiltering = geoFiltering
				for _, set := range sl {
					geoFilteringMapStrToI := set.(map[string]interface{})

					geoFilteringTypeTypeFound := false

					if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

						geoFilteringTypeTypeFound = true
						geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
						geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
						geoFiltering.GeoFilteringType = geoFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

							}

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

							}

						}

					}

					if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

						geoFilteringTypeTypeFound = true
						geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
						geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
						geoFiltering.GeoFilteringType = geoFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

							}

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

							}

						}

					}

				}

			}

			if v, ok := otherSettingsMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				otherSettings.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := otherSettingsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
				otherSettings.IpFiltering = ipFiltering
				for _, set := range sl {
					ipFilteringMapStrToI := set.(map[string]interface{})

					ipFilteringTypeTypeFound := false

					if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

						ipFilteringTypeTypeFound = true
						ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
						ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
						ipFiltering.IpFilteringType = ipFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.AllowList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

							}

						}

					}

					if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

						ipFilteringTypeTypeFound = true
						ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
						ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
						ipFiltering.IpFilteringType = ipFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.BlockList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

							}

						}

					}

				}

			}

			if v, ok := otherSettingsMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				otherSettings.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

		}

	}

	//protected_cookies
	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		createSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
			protectedCookiesMapStrToI := set.(map[string]interface{})

			cookieTamperingTypeFound := false

			if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

				cookieTamperingTypeFound = true

				if v.(bool) {
					cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
					cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
					protectedCookies[i].CookieTampering = cookieTamperingInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

				cookieTamperingTypeFound = true

				if v.(bool) {
					cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
					cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
					protectedCookies[i].CookieTampering = cookieTamperingInt
				}

			}

			httponlyTypeFound := false

			if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

				httponlyTypeFound = true

				if v.(bool) {
					httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
					httponlyInt.AddHttponly = &ves_io_schema.Empty{}
					protectedCookies[i].Httponly = httponlyInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

				httponlyTypeFound = true

				if v.(bool) {
					httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
					httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
					protectedCookies[i].Httponly = httponlyInt
				}

			}

			maxAgeTypeFound := false

			if v, ok := protectedCookiesMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

				maxAgeTypeFound = true

				if v.(bool) {
					maxAgeInt := &ves_io_schema.CookieManipulationOptionType_IgnoreMaxAge{}
					maxAgeInt.IgnoreMaxAge = &ves_io_schema.Empty{}
					protectedCookies[i].MaxAge = maxAgeInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

				maxAgeTypeFound = true
				maxAgeInt := &ves_io_schema.CookieManipulationOptionType_MaxAgeValue{}

				protectedCookies[i].MaxAge = maxAgeInt

				maxAgeInt.MaxAgeValue = int32(v.(int))

			}

			if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
				protectedCookies[i].Name = w.(string)
			}

			samesiteTypeFound := false

			if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
					samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
					samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
					samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
					samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			secureTypeFound := false

			if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

				secureTypeFound = true

				if v.(bool) {
					secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
					secureInt.AddSecure = &ves_io_schema.Empty{}
					protectedCookies[i].Secure = secureInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

				secureTypeFound = true

				if v.(bool) {
					secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
					secureInt.IgnoreSecure = &ves_io_schema.Empty{}
					protectedCookies[i].Secure = secureInt
				}

			}

		}

	}

	//rate_limit_choice

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
				rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
				for i, set := range sl {
					apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
					apiEndpointRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
						for _, set := range sl {
							apiEndpointMethodMapStrToI := set.(map[string]interface{})

							if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								apiEndpointMethod.InvertMatcher = w.(bool)
							}

							if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								apiEndpointMethod.Methods = methodsList

							}

						}

					}

					if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].ApiEndpointPath = w.(string)
					}

					if w, ok := apiEndpointRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].BasePath = w.(string)
					}

					if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiEndpointRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiEndpointRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

						apiEndpointRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					rateLimiterChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
						rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
						apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							countByChoiceTypeFound := false

							if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true
								countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
								countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
								rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true

								if v.(bool) {
									countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
									countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
									rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
								}

							}

							if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

							}

							if v, ok := cs["unit"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
						rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
						apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiEndpointRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

			ipAllowedListChoiceTypeFound := false

			if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
				ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
						ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
						for i, set := range sl {
							bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
							bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

							if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								bypassRateLimitingRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									clientMatcherMapStrToI := set.(map[string]interface{})

									clientChoiceTypeFound := false

									if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true

										if v.(bool) {
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
											clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
											clientMatcher.ClientChoice = clientChoiceInt
										}

									}

									if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
										clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
										clientMatcher.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientSelector.Expressions = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
										clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
										clientMatcher.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

												ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
												for _, j := range v.([]interface{}) {
													ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
												}
												clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

											}

										}

									}

									ipAsnChoiceTypeFound := false

									if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true

										if v.(bool) {
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
											ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt
										}

									}

									if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
										ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

												ls := make([]uint32, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = uint32(v.(int))
												}
												ipAsnChoiceInt.AsnList.AsNumbers = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
										ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
												for i, ps := range sl {

													asMapToStrVal := ps.(map[string]interface{})
													asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

													asnSetsInt[i].Kind = "bgp_asn_set"

													if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Name = v.(string)
													}

													if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Namespace = v.(string)
													}

													if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Tenant = v.(string)
													}

													if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
										ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

												ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

											}

											if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
												for i, ps := range sl {

													psMapToStrVal := ps.(map[string]interface{})
													prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

													prefixSetsInt[i].Kind = "ip_prefix_set"

													if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Name = v.(string)
													}

													if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Namespace = v.(string)
													}

													if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Tenant = v.(string)
													}

													if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
										ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

												ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

											}

											if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

											}

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
										clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
										for _, set := range sl {
											tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

											if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

												classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
												for _, j := range v.([]interface{}) {
													classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
												}
												tlsFingerprintMatcher.Classes = classesList

											}

											if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintMatcher.ExactValues = ls
											}

											if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintMatcher.ExcludedValues = ls
											}

										}

									}

								}

							}

							destinationTypeTypeFound := false

							if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true

								if v.(bool) {
									destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
									destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
									bypassRateLimitingRules[i].DestinationType = destinationTypeInt
								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
								destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										destinationTypeInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										destinationTypeInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
								destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										destinationTypeInt.ApiGroups.ApiGroups = ls

									}

								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								destinationTypeInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

								bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								bypassRateLimitingRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									requestMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
										requestMatcher.CookieMatchers = cookieMatchers
										for i, set := range sl {
											cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
											cookieMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												cookieMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												cookieMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

												cookieMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												cookieMatchers[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
										requestMatcher.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
											headersMapStrToI := set.(map[string]interface{})

											if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												headers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

												headers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
										requestMatcher.JwtClaims = jwtClaims
										for i, set := range sl {
											jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
											jwtClaimsMapStrToI := set.(map[string]interface{})

											if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												jwtClaims[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													jwtClaims[i].Match = matchInt
												}

											}

											if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													jwtClaims[i].Match = matchInt
												}

											}

											if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												jwtClaims[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
												jwtClaims[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
										requestMatcher.QueryParams = queryParams
										for i, set := range sl {
											queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
											queryParamsMapStrToI := set.(map[string]interface{})

											if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												queryParams[i].InvertMatcher = w.(bool)
											}

											if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
												queryParams[i].Key = w.(string)
											}

											matchTypeFound := false

											if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												queryParams[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

												queryParams[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
				ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
						for i, ps := range sl {

							rlapMapToStrVal := ps.(map[string]interface{})
							rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Name = v.(string)
							}

							if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
							}

							if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
				ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

					}

					if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

					}

				}

			}

			if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true

				if v.(bool) {
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
					ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
				}

			}

			if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
				rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
				for i, set := range sl {
					serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
					serverUrlRulesMapStrToI := set.(map[string]interface{})

					if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
						serverUrlRules[i].ApiGroup = w.(string)
					}

					if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						serverUrlRules[i].BasePath = w.(string)
					}

					if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						serverUrlRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							serverUrlRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

						serverUrlRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					rateLimiterChoiceTypeFound := false

					if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
						rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
						serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							countByChoiceTypeFound := false

							if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true
								countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
								countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
								rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true

								if v.(bool) {
									countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
									countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
									rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
								}

							}

							if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

							}

							if v, ok := cs["unit"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}

					}

					if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
						rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
						serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						serverUrlRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			createSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			ipAllowedListChoiceTypeFound := false

			if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
				ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
				rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
						for i, ps := range sl {

							rlapMapToStrVal := ps.(map[string]interface{})
							rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Name = v.(string)
							}

							if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
							}

							if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
				ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
				rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

					}

					if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

					}

				}

			}

			if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true

				if v.(bool) {
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
					ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
				}

			}

			policyChoiceTypeFound := false

			if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

				policyChoiceTypeFound = true

				if v.(bool) {
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
					policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
				}

			}

			if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

				policyChoiceTypeFound = true
				policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
				policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
				rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["policies"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						policyChoiceInt.Policies.Policies = policiesInt
						for i, ps := range sl {

							pMapToStrVal := ps.(map[string]interface{})
							policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
								policiesInt[i].Name = v.(string)
							}

							if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								policiesInt[i].Namespace = v.(string)
							}

							if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								policiesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
				rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
				for _, set := range sl {
					rateLimiterMapStrToI := set.(map[string]interface{})

					if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
						rateLimiter.BurstMultiplier = uint32(w.(int))
					}

					if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
						rateLimiter.TotalNumber = uint32(w.(int))
					}

					if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

						rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

					}

				}

			}

		}

	}

	//sensitive_data_policy_choice

	sensitiveDataPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("default_sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true

		if v.(bool) {
			sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DefaultSensitiveDataPolicy{}
			sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
			createSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true
		sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_SensitiveDataPolicy{}
		sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
		createSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
				sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

				for _, set := range sl {
					sdprMapToStrVal := set.(map[string]interface{})
					if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Name = val.(string)
					}
					if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Namespace = val.(string)
					}

					if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	//service_policy_choice

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		createSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policies"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
				for i, ps := range sl {

					pMapToStrVal := ps.(map[string]interface{})
					policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
						policiesInt[i].Name = v.(string)
					}

					if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						policiesInt[i].Namespace = v.(string)
					}

					if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						policiesInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	//slow_ddos_mitigation_choice

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

				slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

			}

			requestTimeoutChoiceTypeFound := false

			if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

				requestTimeoutChoiceTypeFound = true

				if v.(bool) {
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
					requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
				}

			}

			if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

				requestTimeoutChoiceTypeFound = true
				requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

				slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

				requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	//threat_mesh_choice

	threatMeshChoiceTypeFound := false

	if v, ok := d.GetOk("disable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableThreatMesh{}
			threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
			createSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableThreatMesh{}
			threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
			createSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	//trusted_clients
	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.TrustedClients = trustedClients
		for i, set := range sl {
			trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
			trustedClientsMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := trustedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
					actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
					actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
					actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

				actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
				for _, j := range v.([]interface{}) {
					actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
				}
				trustedClients[i].Actions = actionsList

			}

			clientSourceChoiceTypeFound := false

			if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.AsNumber = uint32(v.(int))

			}

			if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
				clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
						clientSourceChoiceInt.HttpHeader.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
								headers[i].InvertMatch = w.(bool)
							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

							valueMatchTypeFound := false

							if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Exact = v.(string)

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Presence = v.(bool)

							}

							if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Regex = v.(string)

							}

						}

					}

				}

			}

			if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.IpPrefix = v.(string)

			}

			if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.UserIdentifier = v.(string)

			}

			if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				trustedClients[i].ExpirationTimestamp = ts
			}

			if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				trustedClients[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

		}

	}

	//user_id_choice

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			createSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		createSpec.UserIdChoice = userIdChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Tenant = v.(string)

			}

		}

	}

	//waf_choice

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		createSpec.WafChoice = wafChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Tenant = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("app_firewall_on_cache_miss"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_AppFirewallOnCacheMiss{}
		wafChoiceInt.AppFirewallOnCacheMiss = &ves_io_schema_views.ObjectRefType{}
		createSpec.WafChoice = wafChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Tenant = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			createSpec.WafChoice = wafChoiceInt
		}

	}

	//waf_exclusion_rules
	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		createSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
			wafExclusionRulesMapStrToI := set.(map[string]interface{})

			domainChoiceTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					wafExclusionRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

				wafExclusionRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

				wafExclusionRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				wafExclusionRules[i].ExpirationTimestamp = ts
			}

			if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				wafExclusionRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

				methodsList := []ves_io_schema.HttpMethod{}
				for _, j := range v.([]interface{}) {
					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
				}
				wafExclusionRules[i].Methods = methodsList

			}

			pathChoiceTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true

				if v.(bool) {
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
					pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
					wafExclusionRules[i].PathChoice = pathChoiceInt
				}

			}

			if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true
				pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

				wafExclusionRules[i].PathChoice = pathChoiceInt

				pathChoiceInt.PathPrefix = v.(string)

			}

			if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true
				pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

				wafExclusionRules[i].PathChoice = pathChoiceInt

				pathChoiceInt.PathRegex = v.(string)

			}

			wafAdvancedConfigurationTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

				wafAdvancedConfigurationTypeFound = true
				wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
				wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
				wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
						for i, set := range sl {
							excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
							excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeAttackTypeContexts[i].ContextName = w.(string)
							}

							if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

								excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

							}

						}

					}

					if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
						for i, set := range sl {
							excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
							excludeBotNameContextsMapStrToI := set.(map[string]interface{})

							if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
								excludeBotNameContexts[i].BotName = w.(string)
							}

						}

					}

					if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
						for i, set := range sl {
							excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
							excludeSignatureContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeSignatureContexts[i].ContextName = w.(string)
							}

							if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
								excludeSignatureContexts[i].SignatureId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
						for i, set := range sl {
							excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
							excludeViolationContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeViolationContexts[i].ContextName = w.(string)
							}

							if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

								excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

				wafAdvancedConfigurationTypeFound = true

				if v.(bool) {
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
					wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra CdnLoadbalancer object with struct: %+v", createReq)

	createCdnLoadbalancerResp, err := client.CreateObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CdnLoadbalancer: %s", err)
	}
	d.SetId(createCdnLoadbalancerResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer %q: %s", d.Id(), err)
	}
	return setCdnLoadbalancerFields(client, d, resp)
}

func setCdnLoadbalancerFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCdnLoadbalancerUpdate updates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_cdn_loadbalancer.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		updateSpec.AddLocation =
			v.(bool)

	}

	apiDefinitionChoiceTypeFound := false

	if v, ok := d.GetOk("api_specification"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ApiSpecification{}
		apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		updateSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
				apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

				for _, set := range sl {
					adMapToStrVal := set.(map[string]interface{})
					if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Name = val.(string)
					}
					if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Namespace = val.(string)
					}

					if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Tenant = val.(string)
					}
				}

			}

			validationTargetChoiceTypeFound := false

			if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
				validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
				apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

					if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
						for _, set := range sl {
							validationModeMapStrToI := set.(map[string]interface{})

							responseValidationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true
								responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
								responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
								validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

										response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

							if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true

								if v.(bool) {
									responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
									responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
									validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
								}

							}

							validationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true

								if v.(bool) {
									validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
									validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
									validationMode.ValidationModeChoice = validationModeChoiceInt
								}

							}

							if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true
								validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
								validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
								validationMode.ValidationModeChoice = validationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

										request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
				validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
				apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
						validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
						for i, set := range sl {
							openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
							openApiValidationRulesMapStrToI := set.(map[string]interface{})

							conditionTypeChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
								conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.ApiGroup = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									openApiValidationRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

								openApiValidationRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								openApiValidationRules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								openApiValidationRules[i].ValidationMode = validationMode
								for _, set := range sl {
									validationModeMapStrToI := set.(map[string]interface{})

									responseValidationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true
										responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
										responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
										validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

												response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

									if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true

										if v.(bool) {
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
											responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
										}

									}

									validationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true

										if v.(bool) {
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
											validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
											validationMode.ValidationModeChoice = validationModeChoiceInt
										}

									}

									if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true
										validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
										validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
										validationMode.ValidationModeChoice = validationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

												request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationCustomList.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true

				if v.(bool) {
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
					validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
				}

			}

		}

	}

	if v, ok := d.GetOk("api_specification_on_cache_miss"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ApiSpecificationOnCacheMiss{}
		apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		updateSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ApiDefinition = apiDefinitionIntNew

				for _, set := range sl {
					adMapToStrVal := set.(map[string]interface{})
					if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Name = val.(string)
					}
					if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Namespace = val.(string)
					}

					if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						apiDefinitionIntNew.Tenant = val.(string)
					}
				}

			}

			validationTargetChoiceTypeFound := false

			if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
				validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

					if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
						validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
						for _, set := range sl {
							validationModeMapStrToI := set.(map[string]interface{})

							responseValidationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true
								responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
								responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
								validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

										response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

							if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

								responseValidationModeChoiceTypeFound = true

								if v.(bool) {
									responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
									responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
									validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
								}

							}

							validationModeChoiceTypeFound := false

							if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true

								if v.(bool) {
									validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
									validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
									validationMode.ValidationModeChoice = validationModeChoiceInt
								}

							}

							if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

								validationModeChoiceTypeFound = true
								validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
								validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
								validationMode.ValidationModeChoice = validationModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

										request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
										for _, j := range v.([]interface{}) {
											request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
										}
										validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

									}

									validationEnforcementTypeTypeFound := false

									if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
											validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

									if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

										validationEnforcementTypeTypeFound = true

										if v.(bool) {
											validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
											validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
											validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true
				validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
				validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
				apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
						validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
						for _, set := range sl {
							fallThroughModeMapStrToI := set.(map[string]interface{})

							fallThroughModeChoiceTypeFound := false

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true

								if v.(bool) {
									fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
									fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
									fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
								}

							}

							if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

								fallThroughModeChoiceTypeFound = true
								fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
								fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
								fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
										fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
										for i, set := range sl {
											openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
											openApiValidationRulesMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
													actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
													actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
													actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
													openApiValidationRules[i].ActionChoice = actionChoiceInt
												}

											}

											conditionTypeChoiceTypeFound := false

											if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
												conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}

											}

											if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.ApiGroup = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

												conditionTypeChoiceTypeFound = true
												conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

												openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

												conditionTypeChoiceInt.BasePath = v.(string)

											}

											if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												openApiValidationRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
						validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
						for i, set := range sl {
							openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
							openApiValidationRulesMapStrToI := set.(map[string]interface{})

							conditionTypeChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
								conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.ApiGroup = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

								conditionTypeChoiceTypeFound = true
								conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

								openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

								conditionTypeChoiceInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									openApiValidationRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

								openApiValidationRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								openApiValidationRules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								openApiValidationRules[i].ValidationMode = validationMode
								for _, set := range sl {
									validationModeMapStrToI := set.(map[string]interface{})

									responseValidationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true
										responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
										responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
										validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

												response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

									if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

										responseValidationModeChoiceTypeFound = true

										if v.(bool) {
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
											responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
										}

									}

									validationModeChoiceTypeFound := false

									if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true

										if v.(bool) {
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
											validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
											validationMode.ValidationModeChoice = validationModeChoiceInt
										}

									}

									if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

										validationModeChoiceTypeFound = true
										validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
										validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
										validationMode.ValidationModeChoice = validationModeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

												request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
												for _, j := range v.([]interface{}) {
													request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
												}
												validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

											}

											validationEnforcementTypeTypeFound := false

											if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
													validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

											if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

												validationEnforcementTypeTypeFound = true

												if v.(bool) {
													validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
													validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
													validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
												}

											}

										}

									}

								}

							}

						}

					}

					oversizedBodyChoiceTypeFound := false

					if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
							oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

						oversizedBodyChoiceTypeFound = true

						if v.(bool) {
							oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
							oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
							validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
						}

					}

					if v, ok := cs["settings"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
						validationTargetChoiceInt.ValidationCustomList.Settings = settings
						for _, set := range sl {
							settingsMapStrToI := set.(map[string]interface{})

							failConfigurationTypeFound := false

							if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
									failConfigurationInt.FailClose = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

								failConfigurationTypeFound = true

								if v.(bool) {
									failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
									failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
									settings.FailConfiguration = failConfigurationInt
								}

							}

							oversizedBodyChoiceTypeFound := false

							if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
									oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

								oversizedBodyChoiceTypeFound = true

								if v.(bool) {
									oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
									oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
									settings.OversizedBodyChoice = oversizedBodyChoiceInt
								}

							}

							propertyValidationSettingsChoiceTypeFound := false

							if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true
								propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
								propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
								settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
										for _, set := range sl {
											headersMapStrToI := set.(map[string]interface{})

											additionalHeadersChoiceTypeFound := false

											if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
													additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

											if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

												additionalHeadersChoiceTypeFound = true

												if v.(bool) {
													additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
													additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
													headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
										propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
										for _, set := range sl {
											queryParametersMapStrToI := set.(map[string]interface{})

											additionalParametersChoiceTypeFound := false

											if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
													additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

											if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

												additionalParametersChoiceTypeFound = true

												if v.(bool) {
													additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
													additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
													queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

								propertyValidationSettingsChoiceTypeFound = true

								if v.(bool) {
									propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
									propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
									settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

				validationTargetChoiceTypeFound = true

				if v.(bool) {
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
					validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
					apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt
				}

			}

		}

	}

	if v, ok := d.GetOk("disable_api_definition"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true

		if v.(bool) {
			apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableApiDefinition{}
			apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
			updateSpec.ApiDefinitionChoice = apiDefinitionChoiceInt
		}

	}

	apiDiscoveryChoiceTypeFound := false

	if v, ok := d.GetOk("api_discovery_on_cache_miss"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ApiDiscoveryOnCacheMiss{}
		apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		updateSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
				for _, set := range sl {
					apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

					if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
						apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
						for i, set := range sl {
							codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
							codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

							apiReposChoiceTypeFound := false

							if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true

								if v.(bool) {
									apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
									apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
									codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true
								apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
								apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
								codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

									}

								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
								codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

								for _, set := range sl {
									cbiMapToStrVal := set.(map[string]interface{})
									if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Name = val.(string)
									}
									if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Namespace = val.(string)
									}

									if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Tenant = val.(string)
									}
								}

							}

						}

					}

				}

			}

			if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.DiscoveredApiSettings = discoveredApiSettings
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

			learnFromRedirectTrafficTypeFound := false

			if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
				apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.SensitiveDataDetectionRules = sensitiveDataDetectionRules
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true

		if v.(bool) {
			apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableApiDiscovery{}
			apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
			updateSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableApiDiscovery{}
		apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		updateSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
				for _, set := range sl {
					apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

					if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
						apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
						for i, set := range sl {
							codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
							codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

							apiReposChoiceTypeFound := false

							if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true

								if v.(bool) {
									apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
									apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
									codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

								apiReposChoiceTypeFound = true
								apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
								apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
								codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

									}

								}

							}

							if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
								codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

								for _, set := range sl {
									cbiMapToStrVal := set.(map[string]interface{})
									if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Name = val.(string)
									}
									if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Namespace = val.(string)
									}

									if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										codeBaseIntegrationInt.Tenant = val.(string)
									}
								}

							}

						}

					}

				}

			}

			if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

			learnFromRedirectTrafficTypeFound := false

			if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

				learnFromRedirectTrafficTypeFound = true

				if v.(bool) {
					learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
					learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
				}

			}

			if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
				apiDiscoveryChoiceInt.EnableApiDiscovery.SensitiveDataDetectionRules = sensitiveDataDetectionRules
				for _, set := range sl {
					_ = set.(map[string]interface{})

				}

			}

		}

	}

	if v, ok := d.GetOk("api_protection_rules"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
		updateSpec.ApiProtectionRules = apiProtectionRules
		for _, set := range sl {
			apiProtectionRulesMapStrToI := set.(map[string]interface{})

			if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
				apiProtectionRules.ApiEndpointRules = apiEndpointRules
				for i, set := range sl {
					apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
					apiEndpointRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
						apiEndpointRules[i].Action = action
						for _, set := range sl {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeFound := false

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
									actionInt.Allow = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
									actionInt.Deny = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
						for _, set := range sl {
							apiEndpointMethodMapStrToI := set.(map[string]interface{})

							if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								apiEndpointMethod.InvertMatcher = w.(bool)
							}

							if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								apiEndpointMethod.Methods = methodsList

							}

						}

					}

					if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].ApiEndpointPath = w.(string)
					}

					if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiEndpointRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiEndpointRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

						apiEndpointRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						apiEndpointRules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiEndpointRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
				apiProtectionRules.ApiGroupsRules = apiGroupsRules
				for i, set := range sl {
					apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
					apiGroupsRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
						apiGroupsRules[i].Action = action
						for _, set := range sl {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeFound := false

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
									actionInt.Allow = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

								actionTypeFound = true

								if v.(bool) {
									actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
									actionInt.Deny = &ves_io_schema.Empty{}
									action.Action = actionInt
								}

							}

						}

					}

					if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
						apiGroupsRules[i].ApiGroup = w.(string)
					}

					if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						apiGroupsRules[i].BasePath = w.(string)
					}

					if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiGroupsRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiGroupsRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

						apiGroupsRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						apiGroupsRules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiGroupsRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.BlockedClients = blockedClients
		for i, set := range sl {
			blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
			blockedClientsMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := blockedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
					actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
					actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
					actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
					blockedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

				actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
				for _, j := range v.([]interface{}) {
					actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
				}
				blockedClients[i].Actions = actionsList

			}

			clientSourceChoiceTypeFound := false

			if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.AsNumber = uint32(v.(int))

			}

			if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
				clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
						clientSourceChoiceInt.HttpHeader.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
								headers[i].InvertMatch = w.(bool)
							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

							valueMatchTypeFound := false

							if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Exact = v.(string)

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Presence = v.(bool)

							}

							if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Regex = v.(string)

							}

						}

					}

				}

			}

			if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.IpPrefix = v.(string)

			}

			if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

				blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.UserIdentifier = v.(string)

			}

			if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				blockedClients[i].ExpirationTimestamp = ts
			}

			if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				blockedClients[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

		}

	}

	botDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_BotDefense{}
		botDefenseChoiceInt.BotDefense = &ves_io_schema_views_common_security.ShapeBotDefenseType{}
		updateSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			corsSupportChoiceTypeFound := false

			if v, ok := cs["disable_cors_support"]; ok && !isIntfNil(v) && !corsSupportChoiceTypeFound {

				corsSupportChoiceTypeFound = true

				if v.(bool) {
					corsSupportChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefenseType_DisableCorsSupport{}
					corsSupportChoiceInt.DisableCorsSupport = &ves_io_schema.Empty{}
					botDefenseChoiceInt.BotDefense.CorsSupportChoice = corsSupportChoiceInt
				}

			}

			if v, ok := cs["enable_cors_support"]; ok && !isIntfNil(v) && !corsSupportChoiceTypeFound {

				corsSupportChoiceTypeFound = true

				if v.(bool) {
					corsSupportChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefenseType_EnableCorsSupport{}
					corsSupportChoiceInt.EnableCorsSupport = &ves_io_schema.Empty{}
					botDefenseChoiceInt.BotDefense.CorsSupportChoice = corsSupportChoiceInt
				}

			}

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType{}
				botDefenseChoiceInt.BotDefense.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					javaScriptChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableJsInsert{}
							javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPages{}
						javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

								javaScriptChoiceInt.JsInsertAllPages.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

							}

						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{}
						javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllWithExceptionsType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

								javaScriptChoiceInt.JsInsertAllPagesExcept.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

							}

						}

					}

					if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertionRules{}
						javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.ShapeJavaScriptInsertType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.Rules = rules
								for i, set := range sl {
									rules[i] = &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule{}
									rulesMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											rules[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										rules[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := rulesMapStrToI["javascript_location"]; ok && !isIntfNil(v) {

										rules[i].JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

									}

									if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										rules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										rules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["javascript_mode"]; ok && !isIntfNil(v) {

						policy.JavascriptMode = ves_io_schema.JavaScriptMode(ves_io_schema.JavaScriptMode_value[v.(string)])

					}

					if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
						policy.JsDownloadPath = w.(string)
					}

					mobileSdkChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true

						if v.(bool) {
							mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableMobileSdk{}
							mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
							policy.MobileSdkChoice = mobileSdkChoiceInt
						}

					}

					if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true
						mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_MobileSdkConfig{}
						mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.MobileSDKConfigType{}
						policy.MobileSdkChoice = mobileSdkChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
								mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
								for _, set := range sl {
									mobileIdentifierMapStrToI := set.(map[string]interface{})

									if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										mobileIdentifier.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

								}

							}

							if v, ok := cs["reload_header_name"]; ok && !isIntfNil(v) {

								mobileSdkChoiceInt.MobileSdkConfig.ReloadHeaderName = v.(string)

							}

						}

					}

					if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						protectedAppEndpoints := make([]*ves_io_schema_views_common_security.AppEndpointType, len(sl))
						policy.ProtectedAppEndpoints = protectedAppEndpoints
						for i, set := range sl {
							protectedAppEndpoints[i] = &ves_io_schema_views_common_security.AppEndpointType{}
							protectedAppEndpointsMapStrToI := set.(map[string]interface{})

							appTrafficTypeChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Mobile{}
									appTrafficTypeChoiceInt.Mobile = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Web{}
									appTrafficTypeChoiceInt.Web = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true
								appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_WebMobile{}
								appTrafficTypeChoiceInt.WebMobile = &ves_io_schema_views_common_security.WebMobileTrafficType{}
								protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["header"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										header := &ves_io_schema_policy.HeaderMatcherTypeBasic{}
										appTrafficTypeChoiceInt.WebMobile.Header = header
										for _, set := range sl {
											headerMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headerMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												header.Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headerMapStrToI["name"]; ok && !isIntfNil(w) {
												header.Name = w.(string)
											}

										}

									}

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										appTrafficTypeChoiceInt.WebMobile.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

										appTrafficTypeChoiceInt.WebMobile.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

									}

								}

							}

							domainMatcherChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true

								if v.(bool) {
									domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AnyDomain{}
									domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true
								domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Domain{}
								domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
								protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.RegexValue = v.(string)

									}

									if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

								}

							}

							flowLabelChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true
								flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_FlowLabel{}
								flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
								protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									flowLabelChoiceTypeFound := false

									if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
										flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
													labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
										flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["login"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true
												labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
												labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
												flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													_ = set.(map[string]interface{})

												}

											}

											if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
													labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
													labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
													labelChoiceInt.Logout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
													labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
										flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
													labelChoiceInt.Apply = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
													labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
										flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
													labelChoiceInt.Checkin = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
										flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
													labelChoiceInt.Update = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
													labelChoiceInt.View = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
										flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
													labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
													labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
													labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
													labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
										flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
													labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
													labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
													labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
													labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
													labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
													labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
													labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
													labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
													labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
													labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
													labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
													labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true

								if v.(bool) {
									flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_UndefinedFlowLabel{}
									flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
								}

							}

							goodbotChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["allow_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

								goodbotChoiceTypeFound = true

								if v.(bool) {
									goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AllowGoodBots{}
									goodbotChoiceInt.AllowGoodBots = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["mitigate_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

								goodbotChoiceTypeFound = true

								if v.(bool) {
									goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_MitigateGoodBots{}
									goodbotChoiceInt.MitigateGoodBots = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.BotHttpMethod{}
								for _, j := range v.([]interface{}) {
									http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
								}
								protectedAppEndpoints[i].HttpMethods = http_methodsList

							}

							if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								protectedAppEndpoints[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["mitigation"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
								protectedAppEndpoints[i].Mitigation = mitigation
								for _, set := range sl {
									mitigationMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
										actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["body"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.Body = v.(string)

											}

											if v, ok := cs["body_hash"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.BodyHash = v.(string)

											}

											if v, ok := cs["status"]; ok && !isIntfNil(v) {

												actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

											}

										}

									}

									if v, ok := mitigationMapStrToI["flag"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Flag{}
										actionTypeInt.Flag = &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											sendHeadersChoiceTypeFound := false

											if v, ok := cs["append_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

												sendHeadersChoiceTypeFound = true
												sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_AppendHeaders{}
												sendHeadersChoiceInt.AppendHeaders = &ves_io_schema_policy.ShapeBotFlagMitigationActionType{}
												actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["auto_type_header_name"]; ok && !isIntfNil(v) {

														sendHeadersChoiceInt.AppendHeaders.AutoTypeHeaderName = v.(string)

													}

													if v, ok := cs["inference_header_name"]; ok && !isIntfNil(v) {

														sendHeadersChoiceInt.AppendHeaders.InferenceHeaderName = v.(string)

													}

												}

											}

											if v, ok := cs["no_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

												sendHeadersChoiceTypeFound = true

												if v.(bool) {
													sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_NoHeaders{}
													sendHeadersChoiceInt.NoHeaders = &ves_io_schema.Empty{}
													actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt
												}

											}

										}

									}

									if v, ok := mitigationMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											mitigation.ActionType = actionTypeInt
										}

									}

									if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
										actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
										mitigation.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["uri"]; ok && !isIntfNil(v) {

												actionTypeInt.Redirect.Uri = v.(string)

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema.PathMatcherType{}
								protectedAppEndpoints[i].Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									pathMatchTypeFound := false

									if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Path = v.(string)

									}

									if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Prefix = v.(string)

									}

									if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Regex = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["protocol"]; ok && !isIntfNil(v) {

								protectedAppEndpoints[i].Protocol = ves_io_schema_views_common_security.URLScheme(ves_io_schema_views_common_security.URLScheme_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := cs["regional_endpoint"]; ok && !isIntfNil(v) {

				botDefenseChoiceInt.BotDefense.RegionalEndpoint = ves_io_schema_views_common_security.ShapeBotDefenseRegion(ves_io_schema_views_common_security.ShapeBotDefenseRegion_value[v.(string)])

			}

			if v, ok := cs["timeout"]; ok && !isIntfNil(v) {

				botDefenseChoiceInt.BotDefense.Timeout = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("bot_defense_advanced"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_BotDefenseAdvanced{}
		botDefenseChoiceInt.BotDefenseAdvanced = &ves_io_schema_views_common_security.BotDefenseAdvancedType{}
		updateSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["mobile"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				mobileInt := &ves_io_schema_views.ObjectRefType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Mobile = mobileInt

				for _, set := range sl {
					mMapToStrVal := set.(map[string]interface{})
					if val, ok := mMapToStrVal["name"]; ok && !isIntfNil(v) {
						mobileInt.Name = val.(string)
					}
					if val, ok := mMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						mobileInt.Namespace = val.(string)
					}

					if val, ok := mMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						mobileInt.Tenant = val.(string)
					}
				}

			}

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
						policy.JsDownloadPath = w.(string)
					}

					mobileSdkChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true

						if v.(bool) {
							mobileSdkChoiceInt := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType_DisableMobileSdk{}
							mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
							policy.MobileSdkChoice = mobileSdkChoiceInt
						}

					}

					if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

						mobileSdkChoiceTypeFound = true
						mobileSdkChoiceInt := &ves_io_schema_views_common_security.BotDefenseAdvancedPolicyType_MobileSdkConfig{}
						mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.BotAdvancedMobileSDKConfigType{}
						policy.MobileSdkChoice = mobileSdkChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
								mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
								for _, set := range sl {
									mobileIdentifierMapStrToI := set.(map[string]interface{})

									if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										mobileIdentifier.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						protectedAppEndpoints := make([]*ves_io_schema_views_common_security.ProtectedAppEndpointType, len(sl))
						policy.ProtectedAppEndpoints = protectedAppEndpoints
						for i, set := range sl {
							protectedAppEndpoints[i] = &ves_io_schema_views_common_security.ProtectedAppEndpointType{}
							protectedAppEndpointsMapStrToI := set.(map[string]interface{})

							appTrafficTypeChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["mobile_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_MobileClient{}
									appTrafficTypeChoiceInt.MobileClient = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true

								if v.(bool) {
									appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_WebClient{}
									appTrafficTypeChoiceInt.WebClient = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["web_mobile_client"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

								appTrafficTypeChoiceTypeFound = true
								appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_WebMobileClient{}
								appTrafficTypeChoiceInt.WebMobileClient = &ves_io_schema_views_common_security.WebMobileTrafficType{}
								protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["header"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										header := &ves_io_schema_policy.HeaderMatcherTypeBasic{}
										appTrafficTypeChoiceInt.WebMobileClient.Header = header
										for _, set := range sl {
											headerMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headerMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													header.Match = matchInt
												}

											}

											if v, ok := headerMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												header.Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headerMapStrToI["name"]; ok && !isIntfNil(w) {
												header.Name = w.(string)
											}

										}

									}

									if v, ok := cs["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
										appTrafficTypeChoiceInt.WebMobileClient.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
											headersMapStrToI := set.(map[string]interface{})

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

										appTrafficTypeChoiceInt.WebMobileClient.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

									}

								}

							}

							domainMatcherChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true

								if v.(bool) {
									domainMatcherChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_AnyDomain{}
									domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

								domainMatcherChoiceTypeFound = true
								domainMatcherChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_Domain{}
								domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
								protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.RegexValue = v.(string)

									}

									if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

										domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

								}

							}

							flowLabelChoiceTypeFound := false

							if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true
								flowLabelChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_FlowLabel{}
								flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
								protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									flowLabelChoiceTypeFound := false

									if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
										flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
													labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
										flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["login"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true
												labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
												labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
												flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													_ = set.(map[string]interface{})

												}

											}

											if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
													labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
													labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
													labelChoiceInt.Logout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
													labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
										flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
													labelChoiceInt.Apply = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
													labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
										flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
													labelChoiceInt.Checkin = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
										flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
													labelChoiceInt.Create = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
													labelChoiceInt.Update = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
													labelChoiceInt.View = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
										flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
													labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
													labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
													labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
													labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
												}

											}

										}

									}

									if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

										flowLabelChoiceTypeFound = true
										flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
										flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
										flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											labelChoiceTypeFound := false

											if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
													labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
													labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
													labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
													labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
													labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
													labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
													labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
													labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
													labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
													labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
													labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

											if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

												labelChoiceTypeFound = true

												if v.(bool) {
													labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
													labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
													flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
												}

											}

										}

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

								flowLabelChoiceTypeFound = true

								if v.(bool) {
									flowLabelChoiceInt := &ves_io_schema_views_common_security.ProtectedAppEndpointType_UndefinedFlowLabel{}
									flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
									protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.BotHttpMethod{}
								for _, j := range v.([]interface{}) {
									http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
								}
								protectedAppEndpoints[i].HttpMethods = http_methodsList

							}

							if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								protectedAppEndpoints[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema.PathMatcherType{}
								protectedAppEndpoints[i].Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									pathMatchTypeFound := false

									if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Path = v.(string)

									}

									if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Prefix = v.(string)

									}

									if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

										pathMatchTypeFound = true
										pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

										path.PathMatch = pathMatchInt

										pathMatchInt.Regex = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["query"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								query := make([]*ves_io_schema_views_common_security.Query, len(sl))
								protectedAppEndpoints[i].Query = query
								for i, set := range sl {
									query[i] = &ves_io_schema_views_common_security.Query{}
									queryMapStrToI := set.(map[string]interface{})

									if w, ok := queryMapStrToI["name"]; ok && !isIntfNil(w) {
										query[i].Name = w.(string)
									}

									valueTypeTypeFound := false

									if v, ok := queryMapStrToI["check_presence"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true

										if v.(bool) {
											valueTypeInt := &ves_io_schema_views_common_security.Query_CheckPresence{}
											valueTypeInt.CheckPresence = &ves_io_schema.Empty{}
											query[i].ValueType = valueTypeInt
										}

									}

									if v, ok := queryMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.Query_ExactValue{}

										query[i].ValueType = valueTypeInt

										valueTypeInt.ExactValue = v.(string)

									}

									if v, ok := queryMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.Query_RegexValue{}

										query[i].ValueType = valueTypeInt

										valueTypeInt.RegexValue = v.(string)

									}

								}

							}

							if v, ok := protectedAppEndpointsMapStrToI["request_body"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestBody := make([]*ves_io_schema_views_common_security.RequestBody, len(sl))
								protectedAppEndpoints[i].RequestBody = requestBody
								for i, set := range sl {
									requestBody[i] = &ves_io_schema_views_common_security.RequestBody{}
									requestBodyMapStrToI := set.(map[string]interface{})

									if w, ok := requestBodyMapStrToI["name"]; ok && !isIntfNil(w) {
										requestBody[i].Name = w.(string)
									}

									valueTypeTypeFound := false

									if v, ok := requestBodyMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.RequestBody_ExactValue{}

										requestBody[i].ValueType = valueTypeInt

										valueTypeInt.ExactValue = v.(string)

									}

									if v, ok := requestBodyMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valueTypeTypeFound {

										valueTypeTypeFound = true
										valueTypeInt := &ves_io_schema_views_common_security.RequestBody_RegexValue{}

										requestBody[i].ValueType = valueTypeInt

										valueTypeInt.RegexValue = v.(string)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["web"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				webInt := &ves_io_schema_views.ObjectRefType{}
				botDefenseChoiceInt.BotDefenseAdvanced.Web = webInt

				for _, set := range sl {
					wMapToStrVal := set.(map[string]interface{})
					if val, ok := wMapToStrVal["name"]; ok && !isIntfNil(v) {
						webInt.Name = val.(string)
					}
					if val, ok := wMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						webInt.Namespace = val.(string)
					}

					if val, ok := wMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						webInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	if v, ok := d.GetOk("disable_bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true

		if v.(bool) {
			botDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableBotDefense{}
			botDefenseChoiceInt.DisableBotDefense = &ves_io_schema.Empty{}
			updateSpec.BotDefenseChoice = botDefenseChoiceInt
		}

	}

	if v, ok := d.GetOk("cache_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cacheRules := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRule, len(sl))
		updateSpec.CacheRules = cacheRules
		for i, set := range sl {
			cacheRules[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule{}
			cacheRulesMapStrToI := set.(map[string]interface{})

			cacheActionsTypeFound := false

			if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true

				if v.(bool) {
					cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_CacheBypass{}
					cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
					cacheRules[i].CacheActions = cacheActionsInt
				}

			}

			if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_EligibleForCache{}
				cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions{}
				cacheRules[i].CacheActions = cacheActionsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					eligibleForCacheTypeFound := false

					if v, ok := cs["hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_HostnameUri{}
						eligibleForCacheInt.HostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.HostnameUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameRequestUri{}
						eligibleForCacheInt.SchemeHostnameRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameRequestUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUri{}
						eligibleForCacheInt.SchemeHostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_hostname_uri_query"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUriQuery{}
						eligibleForCacheInt.SchemeHostnameUriQuery = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeHostnameUriQuery.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostRequestUri{}
						eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

					if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

						eligibleForCacheTypeFound = true
						eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostUri{}
						eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
						cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

							}

							if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

							}

							if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

								eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

							}

						}

					}

				}

			}

			if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ruleExpressionList := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList, len(sl))
				cacheRules[i].RuleExpressionList = ruleExpressionList
				for i, set := range sl {
					ruleExpressionList[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList{}
					ruleExpressionListMapStrToI := set.(map[string]interface{})

					if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						cacheRuleExpression := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression, len(sl))
						ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
						for i, set := range sl {
							cacheRuleExpression[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression{}
							cacheRuleExpressionMapStrToI := set.(map[string]interface{})

							if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cacheHeaders := make([]*ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType, len(sl))
								cacheRuleExpression[i].CacheHeaders = cacheHeaders
								for i, set := range sl {
									cacheHeaders[i] = &ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType{}
									cacheHeadersMapStrToI := set.(map[string]interface{})

									if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

										cacheHeaders[i].Name = ves_io_schema_views_cdn_loadbalancer.HeaderOptions(ves_io_schema_views_cdn_loadbalancer.HeaderOptions_value[v.(string)])

									}

									if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										cacheHeaders[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatcher := make([]*ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType, len(sl))
								cacheRuleExpression[i].CookieMatcher = cookieMatcher
								for i, set := range sl {
									cookieMatcher[i] = &ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType{}
									cookieMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatcher[i].Name = w.(string)
									}

									if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										cookieMatcher[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								pathMatch := &ves_io_schema_views_cdn_loadbalancer.CDNPathMatcherType{}
								cacheRuleExpression[i].PathMatch = pathMatch
								for _, set := range sl {
									pathMatchMapStrToI := set.(map[string]interface{})

									if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										pathMatch.Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParameters := make([]*ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType, len(sl))
								cacheRuleExpression[i].QueryParameters = queryParameters
								for i, set := range sl {
									queryParameters[i] = &ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType{}
									queryParametersMapStrToI := set.(map[string]interface{})

									if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParameters[i].Key = w.(string)
									}

									if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
										queryParameters[i].Operator = operator
										for _, set := range sl {
											operatorMapStrToI := set.(map[string]interface{})

											cacheOperatorTypeFound := false

											if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Contains = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotContain = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEndWith = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotEqual = v.(string)

											}

											if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.DoesNotStartWith = v.(string)

											}

											if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Endswith = v.(string)

											}

											if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Equals = v.(string)

											}

											if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.MatchRegex = v.(string)

											}

											if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

												cacheOperatorTypeFound = true
												cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

												operator.CacheOperator = cacheOperatorInt

												cacheOperatorInt.Startswith = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
						ruleExpressionList[i].ExpressionName = w.(string)
					}

				}

			}

			if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
				cacheRules[i].RuleName = w.(string)
			}

		}

	}

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("challenge_on_cache_miss"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ChallengeOnCacheMiss{}
		challengeTypeInt.ChallengeOnCacheMiss = &ves_io_schema_views_common_waf.EnableChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.CustomPage = v.(string)

			}

			if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

				challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			updateSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			captchaChallengeParametersChoiceTypeFound := false

			if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true
				captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
				captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
				challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

					}

				}

			}

			if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

				captchaChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
				}

			}

			challengeChoiceTypeFound := false

			if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
					challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
					challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

				challengeChoiceTypeFound = true

				if v.(bool) {
					challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
					challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
				}

			}

			jsChallengeParametersChoiceTypeFound := false

			if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true

				if v.(bool) {
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
					jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
				}

			}

			if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

				jsChallengeParametersChoiceTypeFound = true
				jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
				jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
				challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

					}

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

					}

					if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

						jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

					}

				}

			}

			maliciousUserMitigationChoiceTypeFound := false

			if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true

				if v.(bool) {
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
					maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
				}

			}

			if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

				maliciousUserMitigationChoiceTypeFound = true
				maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
				maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
				challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

					}

				}

			}

			if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
				challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
				for _, set := range sl {
					ruleListMapStrToI := set.(map[string]interface{})

					if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
						ruleList.Rules = rules
						for i, set := range sl {
							rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
							rulesMapStrToI := set.(map[string]interface{})

							if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								metadata := &ves_io_schema.MessageMetaType{}
								rules[i].Metadata = metadata
								for _, set := range sl {
									metadataMapStrToI := set.(map[string]interface{})

									if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
										metadata.Description = w.(string)
									}

									if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
										metadata.Disable = w.(bool)
									}

									if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
										metadata.Name = w.(string)
									}

								}

							}

							if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
								rules[i].Spec = spec
								for _, set := range sl {
									specMapStrToI := set.(map[string]interface{})

									if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
										spec.ArgMatchers = argMatchers
										for i, set := range sl {
											argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
											argMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												argMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													argMatchers[i].Match = matchInt
												}

											}

											if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													argMatchers[i].Match = matchInt
												}

											}

											if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												argMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

												argMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												argMatchers[i].Name = w.(string)
											}

										}

									}

									asnChoiceTypeFound := false

									if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true

										if v.(bool) {
											asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
											asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
											spec.AsnChoice = asnChoiceInt
										}

									}

									if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true
										asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
										asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
										spec.AsnChoice = asnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

												ls := make([]uint32, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = uint32(v.(int))
												}
												asnChoiceInt.AsnList.AsNumbers = ls

											}

										}

									}

									if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

										asnChoiceTypeFound = true
										asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
										asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
										spec.AsnChoice = asnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
												for i, ps := range sl {

													asMapToStrVal := ps.(map[string]interface{})
													asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

													asnSetsInt[i].Kind = "bgp_asn_set"

													if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Name = v.(string)
													}

													if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Namespace = v.(string)
													}

													if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Tenant = v.(string)
													}

													if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										bodyMatcher := &ves_io_schema_policy.MatcherType{}
										spec.BodyMatcher = bodyMatcher
										for _, set := range sl {
											bodyMatcherMapStrToI := set.(map[string]interface{})

											if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												bodyMatcher.ExactValues = ls
											}

											if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												bodyMatcher.RegexValues = ls
											}

											if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												bodyMatcher.Transformers = transformersList

											}

										}

									}

									challengeActionTypeFound := false

									if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
											challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
											challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

										challengeActionTypeFound = true

										if v.(bool) {
											challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
											challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
											spec.ChallengeAction = challengeActionInt
										}

									}

									clientChoiceTypeFound := false

									if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true

										if v.(bool) {
											clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
											clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
											spec.ClientChoice = clientChoiceInt
										}

									}

									if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientName{}

										spec.ClientChoice = clientChoiceInt

										clientChoiceInt.ClientName = v.(string)

									}

									if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientNameMatcher{}
										clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
										spec.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientNameMatcher.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientNameMatcher.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												clientChoiceInt.ClientNameMatcher.Transformers = transformersList

											}

										}

									}

									if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
										clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
										spec.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientSelector.Expressions = ls

											}

										}

									}

									if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
										spec.CookieMatchers = cookieMatchers
										for i, set := range sl {
											cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
											cookieMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												cookieMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												cookieMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

												cookieMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												cookieMatchers[i].Name = w.(string)
											}

										}

									}

									if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
										spec.DomainMatcher = domainMatcher
										for _, set := range sl {
											domainMatcherMapStrToI := set.(map[string]interface{})

											if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												domainMatcher.ExactValues = ls
											}

											if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												domainMatcher.RegexValues = ls
											}

										}

									}

									if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										spec.ExpirationTimestamp = ts
									}

									if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
										spec.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
											headersMapStrToI := set.(map[string]interface{})

											if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												headers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

												headers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
										spec.HttpMethod = httpMethod
										for _, set := range sl {
											httpMethodMapStrToI := set.(map[string]interface{})

											if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												httpMethod.InvertMatcher = w.(bool)
											}

											if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

												methodsList := []ves_io_schema.HttpMethod{}
												for _, j := range v.([]interface{}) {
													methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
												}
												httpMethod.Methods = methodsList

											}

										}

									}

									ipChoiceTypeFound := false

									if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true

										if v.(bool) {
											ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
											ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
											spec.IpChoice = ipChoiceInt
										}

									}

									if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true
										ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
										ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
										spec.IpChoice = ipChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

												ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

											}

											if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
												for i, ps := range sl {

													psMapToStrVal := ps.(map[string]interface{})
													prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

													prefixSetsInt[i].Kind = "ip_prefix_set"

													if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Name = v.(string)
													}

													if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Namespace = v.(string)
													}

													if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Tenant = v.(string)
													}

													if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

										ipChoiceTypeFound = true
										ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
										ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
										spec.IpChoice = ipChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

												ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

											}

											if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipChoiceInt.IpPrefixList.IpPrefixes = ls

											}

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

											}

										}

									}

									if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema_policy.PathMatcherType{}
										spec.Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.ExactValues = ls
											}

											if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												path.InvertMatcher = w.(bool)
											}

											if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.PrefixValues = ls
											}

											if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.RegexValues = ls
											}

											if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												path.SuffixValues = ls
											}

											if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												path.Transformers = transformersList

											}

										}

									}

									if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
										spec.QueryParams = queryParams
										for i, set := range sl {
											queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
											queryParamsMapStrToI := set.(map[string]interface{})

											if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												queryParams[i].InvertMatcher = w.(bool)
											}

											if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
												queryParams[i].Key = w.(string)
											}

											matchTypeFound := false

											if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												queryParams[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

												queryParams[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

										}

									}

									tlsFingerprintChoiceTypeFound := false

									if v, ok := specMapStrToI["ja4_tls_fingerprint"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

										tlsFingerprintChoiceTypeFound = true
										tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_Ja4TlsFingerprint{}
										tlsFingerprintChoiceInt.Ja4TlsFingerprint = &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
										spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.Ja4TlsFingerprint.ExactValues = ls

											}

										}

									}

									if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

										tlsFingerprintChoiceTypeFound = true
										tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
										tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
										spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["classes"]; ok && !isIntfNil(v) {

												classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
												for _, j := range v.([]interface{}) {
													classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

											}

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

											}

											if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

											}

										}

									}

								}

							}

						}

					}

				}

			}

			temporaryBlockingParametersChoiceTypeFound := false

			if v, ok := cs["default_temporary_blocking_parameters"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

				temporaryBlockingParametersChoiceTypeFound = true

				if v.(bool) {
					temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{}
					temporaryBlockingParametersChoiceInt.DefaultTemporaryBlockingParameters = &ves_io_schema.Empty{}
					challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt
				}

			}

			if v, ok := cs["temporary_user_blocking"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

				temporaryBlockingParametersChoiceTypeFound = true
				temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_TemporaryUserBlocking{}
				temporaryBlockingParametersChoiceInt.TemporaryUserBlocking = &ves_io_schema_virtual_host.TemporaryUserBlockingType{}
				challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

						temporaryBlockingParametersChoiceInt.TemporaryUserBlocking.CustomPage = v.(string)

					}

				}

			}

		}

	}

	clientSideDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true
		clientSideDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ClientSideDefense{}
		clientSideDefenseChoiceInt.ClientSideDefense = &ves_io_schema_views_common_security.ClientSideDefenseType{}
		updateSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policy"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				policy := &ves_io_schema_views_common_security.ClientSideDefensePolicyType{}
				clientSideDefenseChoiceInt.ClientSideDefense.Policy = policy
				for _, set := range sl {
					policyMapStrToI := set.(map[string]interface{})

					javaScriptChoiceTypeFound := false

					if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_DisableJsInsert{}
							javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true

						if v.(bool) {
							javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPages{}
							javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema.Empty{}
							policy.JavaScriptChoice = javaScriptChoiceInt
						}

					}

					if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPagesExcept{}
						javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.CSDJavaScriptInsertAllWithExceptionsType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

						javaScriptChoiceTypeFound = true
						javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertionRules{}
						javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.CSDJavaScriptInsertType{}
						policy.JavaScriptChoice = javaScriptChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
								for i, set := range sl {
									excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
									excludeListMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										excludeList[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										excludeList[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_security.CSDJavaScriptInsertionRule, len(sl))
								javaScriptChoiceInt.JsInsertionRules.Rules = rules
								for i, set := range sl {
									rules[i] = &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule{}
									rulesMapStrToI := set.(map[string]interface{})

									domainMatcherChoiceTypeFound := false

									if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true

										if v.(bool) {
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_AnyDomain{}
											domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											rules[i].DomainMatcherChoice = domainMatcherChoiceInt
										}

									}

									if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

										domainMatcherChoiceTypeFound = true
										domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_Domain{}
										domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
										rules[i].DomainMatcherChoice = domainMatcherChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.ExactValue = v.(string)

											}

											if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.RegexValue = v.(string)

											}

											if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

												domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

												domainChoiceInt.SuffixValue = v.(string)

											}

										}

									}

									if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										rules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										rules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true

		if v.(bool) {
			clientSideDefenseChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableClientSideDefense{}
			clientSideDefenseChoiceInt.DisableClientSideDefense = &ves_io_schema.Empty{}
			updateSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt
		}

	}

	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		corsPolicy := &ves_io_schema.CorsPolicy{}
		updateSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			corsPolicyMapStrToI := set.(map[string]interface{})

			if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
				corsPolicy.AllowCredentials = w.(bool)
			}

			if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
				corsPolicy.AllowHeaders = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
				corsPolicy.AllowMethods = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				corsPolicy.AllowOrigin = ls
			}

			if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				corsPolicy.AllowOriginRegex = ls
			}

			if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
				corsPolicy.Disabled = w.(bool)
			}

			if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
				corsPolicy.ExposeHeaders = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["max_age"]; ok && !isIntfNil(w) {
				corsPolicy.MaxAge = w.(string)
			}

			if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
				corsPolicy.MaximumAge = int32(w.(int))
			}

		}

	}

	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		updateSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			csrfPolicyMapStrToI := set.(map[string]interface{})

			allowedDomainsTypeFound := false

			if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true

				if v.(bool) {
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
					allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
					csrfPolicy.AllowedDomains = allowedDomainsInt
				}

			}

			if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true
				allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
				allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
				csrfPolicy.AllowedDomains = allowedDomainsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["domains"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						allowedDomainsInt.CustomDomainList.Domains = ls

					}

				}

			}

			if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

				allowedDomainsTypeFound = true

				if v.(bool) {
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
					allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
					csrfPolicy.AllowedDomains = allowedDomainsInt
				}

			}

		}

	}

	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		updateSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
			dataGuardRulesMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
					actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
					dataGuardRules[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
					actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
					dataGuardRules[i].ActionChoice = actionChoiceInt
				}

			}

			domainChoiceTypeFound := false

			if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					dataGuardRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

				dataGuardRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

				dataGuardRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				dataGuardRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				path := &ves_io_schema.PathMatcherType{}
				dataGuardRules[i].Path = path
				for _, set := range sl {
					pathMapStrToI := set.(map[string]interface{})

					pathMatchTypeFound := false

					if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Path = v.(string)

					}

					if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Prefix = v.(string)

					}

					if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

						pathMatchTypeFound = true
						pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

						path.PathMatch = pathMatchInt

						pathMatchInt.Regex = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		updateSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
			ddosMitigationRulesMapStrToI := set.(map[string]interface{})

			if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				ddosMitigationRules[i].ExpirationTimestamp = ts
			}

			if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				ddosMitigationRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			mitigationActionTypeFound := false

			if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

				mitigationActionTypeFound = true

				if v.(bool) {
					mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
					mitigationActionInt.Block = &ves_io_schema.Empty{}
					ddosMitigationRules[i].MitigationAction = mitigationActionInt
				}

			}

			mitigationChoiceTypeFound := false

			if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

				mitigationChoiceTypeFound = true
				mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
				mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
				ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						asnList := &ves_io_schema_policy.AsnMatchList{}
						mitigationChoiceInt.DdosClientSource.AsnList = asnList
						for _, set := range sl {
							asnListMapStrToI := set.(map[string]interface{})

							if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
								ls := make([]uint32, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = uint32(v.(int))
								}
								asnList.AsNumbers = ls
							}

						}

					}

					if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

						country_listList := []ves_io_schema_policy.CountryCode{}
						for _, j := range v.([]interface{}) {
							country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
						}
						mitigationChoiceInt.DdosClientSource.CountryList = country_listList

					}

					if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
						mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
						for _, set := range sl {
							tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

								classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
								for _, j := range v.([]interface{}) {
									classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
								}
								tlsFingerprintMatcher.Classes = classesList

							}

							if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								tlsFingerprintMatcher.ExactValues = ls
							}

							if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								tlsFingerprintMatcher.ExcludedValues = ls
							}

						}

					}

				}

			}

			if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

				mitigationChoiceTypeFound = true
				mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
				mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
				ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

						mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

					}

					if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

					}

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("default_cache_action"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		defaultCacheAction := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction{}
		updateSpec.DefaultCacheAction = defaultCacheAction
		for _, set := range sl {
			defaultCacheActionMapStrToI := set.(map[string]interface{})

			cacheActionsTypeFound := false

			if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true

				if v.(bool) {
					cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheDisabled{}
					cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
					defaultCacheAction.CacheActions = cacheActionsInt
				}

			}

			if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlDefault{}

				defaultCacheAction.CacheActions = cacheActionsInt

				cacheActionsInt.CacheTtlDefault = v.(string)

			}

			if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlOverride{}

				defaultCacheAction.CacheActions = cacheActionsInt

				cacheActionsInt.CacheTtlOverride = v.(string)

			}

			if v, ok := defaultCacheActionMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

				cacheActionsTypeFound = true
				cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_EligibleForCache{}
				cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.DefaultCacheTTLProps{}
				defaultCacheAction.CacheActions = cacheActionsInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

						cacheActionsInt.EligibleForCache.CacheTtl = v.(string)

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		updateSpec.Domains = ls

	}

	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		updateSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
			graphqlRulesMapStrToI := set.(map[string]interface{})

			domainChoiceTypeFound := false

			if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					graphqlRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

				graphqlRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

				graphqlRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
				graphqlRules[i].ExactPath = w.(string)
			}

			if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
				graphqlRules[i].GraphqlSettings = graphqlSettings
				for _, set := range sl {
					graphqlSettingsMapStrToI := set.(map[string]interface{})

					allowIntrospectionQueriesChoiceTypeFound := false

					if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

						allowIntrospectionQueriesChoiceTypeFound = true

						if v.(bool) {
							allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
							allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
							graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
						}

					}

					if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

						allowIntrospectionQueriesChoiceTypeFound = true

						if v.(bool) {
							allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
							allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
							graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
						}

					}

					if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxBatchedQueries = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxDepth = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxTotalLength = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["max_value_length"]; ok && !isIntfNil(w) {
						graphqlSettings.MaxValueLength = uint32(w.(int))
					}

					if w, ok := graphqlSettingsMapStrToI["policy_name"]; ok && !isIntfNil(w) {
						graphqlSettings.PolicyName = w.(string)
					}

				}

			}

			if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				graphqlRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			methodChoiceTypeFound := false

			if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

				methodChoiceTypeFound = true

				if v.(bool) {
					methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
					methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
					graphqlRules[i].MethodChoice = methodChoiceInt
				}

			}

			if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

				methodChoiceTypeFound = true

				if v.(bool) {
					methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
					methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
					graphqlRules[i].MethodChoice = methodChoiceInt
				}

			}

		}

	}

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			updateSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		updateSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

				ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
				for _, j := range v.([]interface{}) {
					ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
				}
				ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

			}

		}

	}

	if v, ok := d.GetOk("ip_reputation_on_cache_miss"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_IpReputationOnCacheMiss{}
		ipReputationChoiceInt.IpReputationOnCacheMiss = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		updateSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

				ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
				for _, j := range v.([]interface{}) {
					ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
				}
				ipReputationChoiceInt.IpReputationOnCacheMiss.IpThreatCategories = ip_threat_categoriesList

			}

		}

	}

	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		updateSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			jwtValidationMapStrToI := set.(map[string]interface{})

			if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				action := &ves_io_schema.Action{}
				jwtValidation.Action = action
				for _, set := range sl {
					actionMapStrToI := set.(map[string]interface{})

					actionChoiceTypeFound := false

					if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema.Action_Block{}
							actionChoiceInt.Block = &ves_io_schema.Empty{}
							action.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema.Action_Report{}
							actionChoiceInt.Report = &ves_io_schema.Empty{}
							action.ActionChoice = actionChoiceInt
						}

					}

				}

			}

			jwksConfigurationTypeFound := false

			if v, ok := jwtValidationMapStrToI["auth_server_uri"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_AuthServerUri{}

				jwtValidation.JwksConfiguration = jwksConfigurationInt

				jwksConfigurationInt.AuthServerUri = v.(string)

			}

			if v, ok := jwtValidationMapStrToI["jwks"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_Jwks{}

				jwtValidation.JwksConfiguration = jwksConfigurationInt

				jwksConfigurationInt.Jwks = v.(string)

			}

			if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

				jwksConfigurationTypeFound = true
				jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
				jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
				jwtValidation.JwksConfiguration = jwksConfigurationInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

						jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
				jwtValidation.MandatoryClaims = mandatoryClaims
				for _, set := range sl {
					mandatoryClaimsMapStrToI := set.(map[string]interface{})

					if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						mandatoryClaims.ClaimNames = ls
					}

				}

			}

			if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
				jwtValidation.ReservedClaims = reservedClaims
				for _, set := range sl {
					reservedClaimsMapStrToI := set.(map[string]interface{})

					audienceValidationTypeFound := false

					if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

						audienceValidationTypeFound = true
						audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
						audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
						reservedClaims.AudienceValidation = audienceValidationInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								audienceValidationInt.Audience.Audiences = ls

							}

						}

					}

					if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

						audienceValidationTypeFound = true

						if v.(bool) {
							audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
							audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
							reservedClaims.AudienceValidation = audienceValidationInt
						}

					}

					issuerValidationTypeFound := false

					if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

						issuerValidationTypeFound = true
						issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

						reservedClaims.IssuerValidation = issuerValidationInt

						issuerValidationInt.Issuer = v.(string)

					}

					if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

						issuerValidationTypeFound = true

						if v.(bool) {
							issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
							issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
							reservedClaims.IssuerValidation = issuerValidationInt
						}

					}

					validatePeriodTypeFound := false

					if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

						validatePeriodTypeFound = true

						if v.(bool) {
							validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
							validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
							reservedClaims.ValidatePeriod = validatePeriodInt
						}

					}

					if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

						validatePeriodTypeFound = true

						if v.(bool) {
							validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
							validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
							reservedClaims.ValidatePeriod = validatePeriodInt
						}

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				target := &ves_io_schema_views_common_waf.Target{}
				jwtValidation.Target = target
				for _, set := range sl {
					targetMapStrToI := set.(map[string]interface{})

					targetTypeFound := false

					if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true

						if v.(bool) {
							targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
							targetInt.AllEndpoint = &ves_io_schema.Empty{}
							target.Target = targetInt
						}

					}

					if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true
						targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
						targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
						target.Target = targetInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								targetInt.ApiGroups.ApiGroups = ls

							}

						}

					}

					if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

						targetTypeFound = true
						targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
						targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
						target.Target = targetInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								targetInt.BasePaths.BasePaths = ls

							}

						}

					}

				}

			}

			if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
				jwtValidation.TokenLocation = tokenLocation
				for _, set := range sl {
					tokenLocationMapStrToI := set.(map[string]interface{})

					tokenLocationTypeFound := false

					if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true

						if v.(bool) {
							tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
							tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
							tokenLocation.TokenLocation = tokenLocationInt
						}

					}

					if v, ok := tokenLocationMapStrToI["cookie"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Cookie{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.Cookie = v.(string)

					}

					if v, ok := tokenLocationMapStrToI["header"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Header{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.Header = v.(string)

					}

					if v, ok := tokenLocationMapStrToI["query_param"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

						tokenLocationTypeFound = true
						tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_QueryParam{}

						tokenLocation.TokenLocation = tokenLocationInt

						tokenLocationInt.QueryParam = v.(string)

					}

				}

			}

		}

	}

	l7DdosAutoMitigationActionTypeFound := false

	if v, ok := d.GetOk("l7_ddos_action_block"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionBlock{}
			l7DdosAutoMitigationActionInt.L7DdosActionBlock = &ves_io_schema.Empty{}
			updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_default"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionDefault{}
			l7DdosAutoMitigationActionInt.L7DdosActionDefault = &ves_io_schema.Empty{}
			updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_js_challenge"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true
		l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionJsChallenge{}
		l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CookieExpiry = uint32(v.(int))

			}

			if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CustomPage = v.(string)

			}

			if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

				l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.JsScriptDelay = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("l7_ddos_action_none"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionNone{}
			l7DdosAutoMitigationActionInt.L7DdosActionNone = &ves_io_schema.Empty{}
			updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

			}

			portChoiceTypeFound := false

			if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

				loadbalancerTypeInt.Http.PortChoice = portChoiceInt

				portChoiceInt.Port = uint32(v.(int))

			}

			if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

				loadbalancerTypeInt.Http.PortChoice = portChoiceInt

				portChoiceInt.PortRanges = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("https"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_cert_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsCertOptions := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions{}
				loadbalancerTypeInt.Https.TlsCertOptions = tlsCertOptions
				for _, set := range sl {
					tlsCertOptionsMapStrToI := set.(map[string]interface{})

					tlsCertificatesChoiceTypeFound := false

					if v, ok := tlsCertOptionsMapStrToI["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

						tlsCertificatesChoiceTypeFound = true
						tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsCertParams{}
						tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
						tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
								for i, ps := range sl {

									cMapToStrVal := ps.(map[string]interface{})
									certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
										certificatesInt[i].Name = v.(string)
									}

									if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										certificatesInt[i].Namespace = v.(string)
									}

									if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										certificatesInt[i].Tenant = v.(string)
									}

								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

										mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

									}

									crlChoiceTypeFound := false

									if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true
										crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
										crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true

										if v.(bool) {
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
											crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
										}

									}

									trustedCaChoiceTypeFound := false

									if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
										trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										trustedCaChoiceInt.TrustedCaUrl = v.(string)

									}

									xfccHeaderTypeFound := false

									if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true

										if v.(bool) {
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
											xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
										}

									}

									if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true
										xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
										xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
										mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

												xfcc_header_elementsList := []ves_io_schema.XfccElement{}
												for _, j := range v.([]interface{}) {
													xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
												}
												xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

											}

										}

									}

								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
								for _, set := range sl {
									tlsConfigMapStrToI := set.(map[string]interface{})

									choiceTypeFound := false

									if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true
										choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
										choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
										tlsConfig.Choice = choiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												choiceInt.CustomSecurity.CipherSuites = ls

											}

											if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

											if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

										}

									}

									if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
											choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
											choiceInt.LowSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
											choiceInt.MediumSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

								}

							}

						}

					}

					if v, ok := tlsCertOptionsMapStrToI["tls_inline_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

						tlsCertificatesChoiceTypeFound = true
						tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsInlineParams{}
						tlsCertificatesChoiceInt.TlsInlineParams = &ves_io_schema_views.DownstreamTlsParamsType{}
						tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

										mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

									}

									crlChoiceTypeFound := false

									if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true
										crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
										crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												crlChoiceInt.Crl.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

										crlChoiceTypeFound = true

										if v.(bool) {
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
											crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
										}

									}

									trustedCaChoiceTypeFound := false

									if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
										trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

										trustedCaChoiceTypeFound = true
										trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

										mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

										trustedCaChoiceInt.TrustedCaUrl = v.(string)

									}

									xfccHeaderTypeFound := false

									if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true

										if v.(bool) {
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
											xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
										}

									}

									if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

										xfccHeaderTypeFound = true
										xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
										xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
										mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

												xfcc_header_elementsList := []ves_io_schema.XfccElement{}
												for _, j := range v.([]interface{}) {
													xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
												}
												xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

											}

										}

									}

								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								tlsCertificatesChoiceInt.TlsInlineParams.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
										ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
										ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsInlineParams.TlsConfig = tlsConfig
								for _, set := range sl {
									tlsConfigMapStrToI := set.(map[string]interface{})

									choiceTypeFound := false

									if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true
										choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
										choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
										tlsConfig.Choice = choiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												choiceInt.CustomSecurity.CipherSuites = ls

											}

											if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

											if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

												choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

											}

										}

									}

									if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
											choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
											choiceInt.LowSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

									if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

										choiceTypeFound = true

										if v.(bool) {
											choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
											choiceInt.MediumSecurity = &ves_io_schema.Empty{}
											tlsConfig.Choice = choiceInt
										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsParameters := &ves_io_schema_views_cdn_loadbalancer.CDNDownstreamTlsParamsType{}
				loadbalancerTypeInt.Https.TlsParameters = tlsParameters
				for _, set := range sl {
					tlsParametersMapStrToI := set.(map[string]interface{})

					if v, ok := tlsParametersMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
								ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
								ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := tlsParametersMapStrToI["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
						tlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
				loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
							choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
							choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("malicious_user_detection_on_cache_miss"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_MaliciousUserDetectionOnCacheMiss{}
			maliciousUserDetectionChoiceInt.MaliciousUserDetectionOnCacheMiss = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		moreOption := &ves_io_schema_views_cdn_loadbalancer.AdvancedOptionsType{}
		updateSpec.MoreOption = moreOption
		for _, set := range sl {
			moreOptionMapStrToI := set.(map[string]interface{})

			if v, ok := moreOptionMapStrToI["cache_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheOptions := &ves_io_schema_views_cdn_loadbalancer.CacheOptions{}
				moreOption.CacheOptions = cacheOptions
				for _, set := range sl {
					cacheOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := cacheOptionsMapStrToI["cache_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						cacheRules := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRule, len(sl))
						cacheOptions.CacheRules = cacheRules
						for i, set := range sl {
							cacheRules[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule{}
							cacheRulesMapStrToI := set.(map[string]interface{})

							cacheActionsTypeFound := false

							if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true

								if v.(bool) {
									cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_CacheBypass{}
									cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
									cacheRules[i].CacheActions = cacheActionsInt
								}

							}

							if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.CDNCacheRule_EligibleForCache{}
								cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions{}
								cacheRules[i].CacheActions = cacheActionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									eligibleForCacheTypeFound := false

									if v, ok := cs["hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_HostnameUri{}
										eligibleForCacheInt.HostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.HostnameUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameRequestUri{}
										eligibleForCacheInt.SchemeHostnameRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameRequestUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUri{}
										eligibleForCacheInt.SchemeHostnameUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_hostname_uri_query"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeHostnameUriQuery{}
										eligibleForCacheInt.SchemeHostnameUriQuery = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeHostnameUriQuery.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostRequestUri{}
										eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

									if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

										eligibleForCacheTypeFound = true
										eligibleForCacheInt := &ves_io_schema_views_cdn_loadbalancer.CacheEligibleOptions_SchemeProxyHostUri{}
										eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_views_cdn_loadbalancer.CacheTTLEnableProps{}
										cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

											}

											if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

											}

											if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

												eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

											}

										}

									}

								}

							}

							if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ruleExpressionList := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList, len(sl))
								cacheRules[i].RuleExpressionList = ruleExpressionList
								for i, set := range sl {
									ruleExpressionList[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpressionList{}
									ruleExpressionListMapStrToI := set.(map[string]interface{})

									if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cacheRuleExpression := make([]*ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression, len(sl))
										ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
										for i, set := range sl {
											cacheRuleExpression[i] = &ves_io_schema_views_cdn_loadbalancer.CDNCacheRuleExpression{}
											cacheRuleExpressionMapStrToI := set.(map[string]interface{})

											if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												cacheHeaders := make([]*ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType, len(sl))
												cacheRuleExpression[i].CacheHeaders = cacheHeaders
												for i, set := range sl {
													cacheHeaders[i] = &ves_io_schema_views_cdn_loadbalancer.CacheHeaderMatcherType{}
													cacheHeadersMapStrToI := set.(map[string]interface{})

													if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

														cacheHeaders[i].Name = ves_io_schema_views_cdn_loadbalancer.HeaderOptions(ves_io_schema_views_cdn_loadbalancer.HeaderOptions_value[v.(string)])

													}

													if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														cacheHeaders[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												cookieMatcher := make([]*ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType, len(sl))
												cacheRuleExpression[i].CookieMatcher = cookieMatcher
												for i, set := range sl {
													cookieMatcher[i] = &ves_io_schema_views_cdn_loadbalancer.CacheCookieMatcherType{}
													cookieMatcherMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatcher[i].Name = w.(string)
													}

													if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														cookieMatcher[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												pathMatch := &ves_io_schema_views_cdn_loadbalancer.CDNPathMatcherType{}
												cacheRuleExpression[i].PathMatch = pathMatch
												for _, set := range sl {
													pathMatchMapStrToI := set.(map[string]interface{})

													if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														pathMatch.Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

											if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												queryParameters := make([]*ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType, len(sl))
												cacheRuleExpression[i].QueryParameters = queryParameters
												for i, set := range sl {
													queryParameters[i] = &ves_io_schema_views_cdn_loadbalancer.CacheQueryParameterMatcherType{}
													queryParametersMapStrToI := set.(map[string]interface{})

													if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParameters[i].Key = w.(string)
													}

													if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														operator := &ves_io_schema_views_cdn_loadbalancer.CacheOperator{}
														queryParameters[i].Operator = operator
														for _, set := range sl {
															operatorMapStrToI := set.(map[string]interface{})

															cacheOperatorTypeFound := false

															if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Contains{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Contains = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotContain{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotContain = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEndWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEndWith = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotEqual{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotEqual = v.(string)

															}

															if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_DoesNotStartWith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.DoesNotStartWith = v.(string)

															}

															if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Endswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Endswith = v.(string)

															}

															if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Equals{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Equals = v.(string)

															}

															if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_MatchRegex{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.MatchRegex = v.(string)

															}

															if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																cacheOperatorTypeFound = true
																cacheOperatorInt := &ves_io_schema_views_cdn_loadbalancer.CacheOperator_Startswith{}

																operator.CacheOperator = cacheOperatorInt

																cacheOperatorInt.Startswith = v.(string)

															}

														}

													}

												}

											}

										}

									}

									if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
										ruleExpressionList[i].ExpressionName = w.(string)
									}

								}

							}

							if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
								cacheRules[i].RuleName = w.(string)
							}

						}

					}

					if v, ok := cacheOptionsMapStrToI["default_cache_action"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						defaultCacheAction := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction{}
						cacheOptions.DefaultCacheAction = defaultCacheAction
						for _, set := range sl {
							defaultCacheActionMapStrToI := set.(map[string]interface{})

							cacheActionsTypeFound := false

							if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true

								if v.(bool) {
									cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheDisabled{}
									cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
									defaultCacheAction.CacheActions = cacheActionsInt
								}

							}

							if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlDefault{}

								defaultCacheAction.CacheActions = cacheActionsInt

								cacheActionsInt.CacheTtlDefault = v.(string)

							}

							if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_CacheTtlOverride{}

								defaultCacheAction.CacheActions = cacheActionsInt

								cacheActionsInt.CacheTtlOverride = v.(string)

							}

							if v, ok := defaultCacheActionMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

								cacheActionsTypeFound = true
								cacheActionsInt := &ves_io_schema_views_cdn_loadbalancer.DefaultCacheAction_EligibleForCache{}
								cacheActionsInt.EligibleForCache = &ves_io_schema_views_cdn_loadbalancer.DefaultCacheTTLProps{}
								defaultCacheAction.CacheActions = cacheActionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

										cacheActionsInt.EligibleForCache.CacheTtl = v.(string)

									}

								}

							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["cache_ttl_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheTtlOptions := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType{}
				moreOption.CacheTtlOptions = cacheTtlOptions
				for _, set := range sl {
					cacheTtlOptionsMapStrToI := set.(map[string]interface{})

					ttlOptionsTypeFound := false

					if v, ok := cacheTtlOptionsMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true

						if v.(bool) {
							ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheDisabled{}
							ttlOptionsInt.CacheDisabled = &ves_io_schema.Empty{}
							cacheTtlOptions.TtlOptions = ttlOptionsInt
						}

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlDefault{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlDefault = v.(string)

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlOverride{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlOverride = v.(string)

					}

				}

			}

			if v, ok := moreOptionMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				moreOption.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := moreOptionMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				moreOption.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["security_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				securityOptions := &ves_io_schema_views_cdn_loadbalancer.SecurityOptionsType{}
				moreOption.SecurityOptions = securityOptions
				for _, set := range sl {
					securityOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := securityOptionsMapStrToI["api_protection"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiProtection := &ves_io_schema_views_cdn_loadbalancer.ApiProtection{}
						securityOptions.ApiProtection = apiProtection
						for _, set := range sl {
							apiProtectionMapStrToI := set.(map[string]interface{})

							apiDefinitionChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["api_specification"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true
								apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiSpecification{}
								apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
								apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
										apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

										for _, set := range sl {
											adMapToStrVal := set.(map[string]interface{})
											if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Name = val.(string)
											}
											if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Namespace = val.(string)
											}

											if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Tenant = val.(string)
											}
										}

									}

									validationTargetChoiceTypeFound := false

									if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
										validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
										apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

											if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
												for _, set := range sl {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
										validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
										apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
												validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
												for i, set := range sl {
													openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
													openApiValidationRulesMapStrToI := set.(map[string]interface{})

													conditionTypeChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
														conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															openApiValidationRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

														openApiValidationRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														openApiValidationRules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
														openApiValidationRules[i].ValidationMode = validationMode
														for _, set := range sl {
															validationModeMapStrToI := set.(map[string]interface{})

															responseValidationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true
																responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
																responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
																validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																		response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

															if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true

																if v.(bool) {
																	responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
																	responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
																	validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
																}

															}

															validationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true

																if v.(bool) {
																	validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
																	validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
																	validationMode.ValidationModeChoice = validationModeChoiceInt
																}

															}

															if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true
																validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
																validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
																validationMode.ValidationModeChoice = validationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																		request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationCustomList.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true

										if v.(bool) {
											validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
											validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
											apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["api_specification_on_cache_miss"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true
								apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiSpecificationOnCacheMiss{}
								apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss = &ves_io_schema_views_common_waf.APISpecificationSettings{}
								apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ApiDefinition = apiDefinitionIntNew

										for _, set := range sl {
											adMapToStrVal := set.(map[string]interface{})
											if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Name = val.(string)
											}
											if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Namespace = val.(string)
											}

											if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												apiDefinitionIntNew.Tenant = val.(string)
											}
										}

									}

									validationTargetChoiceTypeFound := false

									if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
										validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationAllSpecEndpoints.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

											if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
												validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
												for _, set := range sl {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																for _, j := range v.([]interface{}) {
																	request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																}
																validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

															}

															validationEnforcementTypeTypeFound := false

															if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																	validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

															if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																validationEnforcementTypeTypeFound = true

																if v.(bool) {
																	validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																	validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																	validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true
										validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
										validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
										apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
												validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
												for _, set := range sl {
													fallThroughModeMapStrToI := set.(map[string]interface{})

													fallThroughModeChoiceTypeFound := false

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true

														if v.(bool) {
															fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
															fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
															fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
														}

													}

													if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

														fallThroughModeChoiceTypeFound = true
														fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
														fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
														fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
																fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
																for i, set := range sl {
																	openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																	openApiValidationRulesMapStrToI := set.(map[string]interface{})

																	actionChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																			actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																			actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																		actionChoiceTypeFound = true

																		if v.(bool) {
																			actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																			actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																			openApiValidationRules[i].ActionChoice = actionChoiceInt
																		}

																	}

																	conditionTypeChoiceTypeFound := false

																	if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																		conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}

																	}

																	if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.ApiGroup = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																		conditionTypeChoiceTypeFound = true
																		conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																		openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																		conditionTypeChoiceInt.BasePath = v.(string)

																	}

																	if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																		sl := v.(*schema.Set).List()
																		metadata := &ves_io_schema.MessageMetaType{}
																		openApiValidationRules[i].Metadata = metadata
																		for _, set := range sl {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																				metadata.Disable = w.(bool)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

											if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
												validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
												for i, set := range sl {
													openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
													openApiValidationRulesMapStrToI := set.(map[string]interface{})

													conditionTypeChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
														conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

														conditionTypeChoiceTypeFound = true
														conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

														openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

														conditionTypeChoiceInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															openApiValidationRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

														openApiValidationRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														openApiValidationRules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
														openApiValidationRules[i].ValidationMode = validationMode
														for _, set := range sl {
															validationModeMapStrToI := set.(map[string]interface{})

															responseValidationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true
																responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
																responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
																validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																		response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

															if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

																responseValidationModeChoiceTypeFound = true

																if v.(bool) {
																	responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
																	responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
																	validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
																}

															}

															validationModeChoiceTypeFound := false

															if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true

																if v.(bool) {
																	validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
																	validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
																	validationMode.ValidationModeChoice = validationModeChoiceInt
																}

															}

															if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

																validationModeChoiceTypeFound = true
																validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
																validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
																validationMode.ValidationModeChoice = validationModeChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																		request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																		for _, j := range v.([]interface{}) {
																			request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																		}
																		validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																	}

																	validationEnforcementTypeTypeFound := false

																	if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																			validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																	if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																		validationEnforcementTypeTypeFound = true

																		if v.(bool) {
																			validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																			validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																			validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																		}

																	}

																}

															}

														}

													}

												}

											}

											oversizedBodyChoiceTypeFound := false

											if v, ok := cs["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{}
													oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

												oversizedBodyChoiceTypeFound = true

												if v.(bool) {
													oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{}
													oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
													validationTargetChoiceInt.ValidationCustomList.OversizedBodyChoice = oversizedBodyChoiceInt
												}

											}

											if v, ok := cs["settings"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
												validationTargetChoiceInt.ValidationCustomList.Settings = settings
												for _, set := range sl {
													settingsMapStrToI := set.(map[string]interface{})

													failConfigurationTypeFound := false

													if v, ok := settingsMapStrToI["fail_close"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailClose{}
															failConfigurationInt.FailClose = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													if v, ok := settingsMapStrToI["fail_open"]; ok && !isIntfNil(v) && !failConfigurationTypeFound {

														failConfigurationTypeFound = true

														if v.(bool) {
															failConfigurationInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_FailOpen{}
															failConfigurationInt.FailOpen = &ves_io_schema.Empty{}
															settings.FailConfiguration = failConfigurationInt
														}

													}

													oversizedBodyChoiceTypeFound := false

													if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
															oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

														oversizedBodyChoiceTypeFound = true

														if v.(bool) {
															oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
															oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
															settings.OversizedBodyChoice = oversizedBodyChoiceInt
														}

													}

													propertyValidationSettingsChoiceTypeFound := false

													if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true
														propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
														settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["headers"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																headers := &ves_io_schema_views_common_waf.ValidationSettingForHeaders{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.Headers = headers
																for _, set := range sl {
																	headersMapStrToI := set.(map[string]interface{})

																	additionalHeadersChoiceTypeFound := false

																	if v, ok := headersMapStrToI["allow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{}
																			additionalHeadersChoiceInt.AllowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																	if v, ok := headersMapStrToI["disallow_additional_headers"]; ok && !isIntfNil(v) && !additionalHeadersChoiceTypeFound {

																		additionalHeadersChoiceTypeFound = true

																		if v.(bool) {
																			additionalHeadersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{}
																			additionalHeadersChoiceInt.DisallowAdditionalHeaders = &ves_io_schema.Empty{}
																			headers.AdditionalHeadersChoice = additionalHeadersChoiceInt
																		}

																	}

																}

															}

															if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
																propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
																for _, set := range sl {
																	queryParametersMapStrToI := set.(map[string]interface{})

																	additionalParametersChoiceTypeFound := false

																	if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																			additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																	if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																		additionalParametersChoiceTypeFound = true

																		if v.(bool) {
																			additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																			additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																			queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																		}

																	}

																}

															}

														}

													}

													if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

														propertyValidationSettingsChoiceTypeFound = true

														if v.(bool) {
															propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
															propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
															settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
														}

													}

												}

											}

										}

									}

									if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

										validationTargetChoiceTypeFound = true

										if v.(bool) {
											validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
											validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
											apiDefinitionChoiceInt.ApiSpecificationOnCacheMiss.ValidationTargetChoice = validationTargetChoiceInt
										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["disable_api_definition"]; ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

								apiDefinitionChoiceTypeFound = true

								if v.(bool) {
									apiDefinitionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DisableApiDefinition{}
									apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
									apiProtection.ApiDefinitionChoice = apiDefinitionChoiceInt
								}

							}

							apiDiscoveryChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["api_discovery_on_cache_miss"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true
								apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_ApiDiscoveryOnCacheMiss{}
								apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
								apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
										for _, set := range sl {
											apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

											if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
												apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
												for i, set := range sl {
													codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
													codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

													apiReposChoiceTypeFound := false

													if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true

														if v.(bool) {
															apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
															apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
															codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true
														apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
														apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
														codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

															}

														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
														codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

														for _, set := range sl {
															cbiMapToStrVal := set.(map[string]interface{})
															if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Name = val.(string)
															}
															if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Namespace = val.(string)
															}

															if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Tenant = val.(string)
															}
														}

													}

												}

											}

										}

									}

									if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.DiscoveredApiSettings = discoveredApiSettings
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

									learnFromRedirectTrafficTypeFound := false

									if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
										apiDiscoveryChoiceInt.ApiDiscoveryOnCacheMiss.SensitiveDataDetectionRules = sensitiveDataDetectionRules
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["disable_api_discovery"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true

								if v.(bool) {
									apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DisableApiDiscovery{}
									apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
									apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt
								}

							}

							if v, ok := apiProtectionMapStrToI["enable_api_discovery"]; ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

								apiDiscoveryChoiceTypeFound = true
								apiDiscoveryChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_EnableApiDiscovery{}
								apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
								apiProtection.ApiDiscoveryChoice = apiDiscoveryChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
										for _, set := range sl {
											apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

											if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
												apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
												for i, set := range sl {
													codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
													codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

													apiReposChoiceTypeFound := false

													if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true

														if v.(bool) {
															apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
															apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
															codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

														apiReposChoiceTypeFound = true
														apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
														apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
														codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

															}

														}

													}

													if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
														codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

														for _, set := range sl {
															cbiMapToStrVal := set.(map[string]interface{})
															if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Name = val.(string)
															}
															if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Namespace = val.(string)
															}

															if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																codeBaseIntegrationInt.Tenant = val.(string)
															}
														}

													}

												}

											}

										}

									}

									if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

									learnFromRedirectTrafficTypeFound := false

									if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

										learnFromRedirectTrafficTypeFound = true

										if v.(bool) {
											learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
											learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
											apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
										}

									}

									if v, ok := cs["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
										apiDiscoveryChoiceInt.EnableApiDiscovery.SensitiveDataDetectionRules = sensitiveDataDetectionRules
										for _, set := range sl {
											_ = set.(map[string]interface{})

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["api_protection_rules"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
								apiProtection.ApiProtectionRules = apiProtectionRules
								for _, set := range sl {
									apiProtectionRulesMapStrToI := set.(map[string]interface{})

									if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
										apiProtectionRules.ApiEndpointRules = apiEndpointRules
										for i, set := range sl {
											apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
											apiEndpointRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
												apiEndpointRules[i].Action = action
												for _, set := range sl {
													actionMapStrToI := set.(map[string]interface{})

													actionTypeFound := false

													if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
															actionInt.Allow = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

													if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
															actionInt.Deny = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
												apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
												for _, set := range sl {
													apiEndpointMethodMapStrToI := set.(map[string]interface{})

													if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														apiEndpointMethod.InvertMatcher = w.(bool)
													}

													if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														apiEndpointMethod.Methods = methodsList

													}

												}

											}

											if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].ApiEndpointPath = w.(string)
											}

											if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiEndpointRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiEndpointRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

												apiEndpointRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												apiEndpointRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiEndpointRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

									if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
										apiProtectionRules.ApiGroupsRules = apiGroupsRules
										for i, set := range sl {
											apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
											apiGroupsRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
												apiGroupsRules[i].Action = action
												for _, set := range sl {
													actionMapStrToI := set.(map[string]interface{})

													actionTypeFound := false

													if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
															actionInt.Allow = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

													if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

														actionTypeFound = true

														if v.(bool) {
															actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
															actionInt.Deny = &ves_io_schema.Empty{}
															action.Action = actionInt
														}

													}

												}

											}

											if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
												apiGroupsRules[i].ApiGroup = w.(string)
											}

											if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												apiGroupsRules[i].BasePath = w.(string)
											}

											if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiGroupsRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiGroupsRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

												apiGroupsRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												metadata := &ves_io_schema.MessageMetaType{}
												apiGroupsRules[i].Metadata = metadata
												for _, set := range sl {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}

											}

											if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiGroupsRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

								}

							}

							if v, ok := apiProtectionMapStrToI["jwt_validation"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
								apiProtection.JwtValidation = jwtValidation
								for _, set := range sl {
									jwtValidationMapStrToI := set.(map[string]interface{})

									if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										action := &ves_io_schema.Action{}
										jwtValidation.Action = action
										for _, set := range sl {
											actionMapStrToI := set.(map[string]interface{})

											actionChoiceTypeFound := false

											if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema.Action_Block{}
													actionChoiceInt.Block = &ves_io_schema.Empty{}
													action.ActionChoice = actionChoiceInt
												}

											}

											if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

												actionChoiceTypeFound = true

												if v.(bool) {
													actionChoiceInt := &ves_io_schema.Action_Report{}
													actionChoiceInt.Report = &ves_io_schema.Empty{}
													action.ActionChoice = actionChoiceInt
												}

											}

										}

									}

									jwksConfigurationTypeFound := false

									if v, ok := jwtValidationMapStrToI["auth_server_uri"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_AuthServerUri{}

										jwtValidation.JwksConfiguration = jwksConfigurationInt

										jwksConfigurationInt.AuthServerUri = v.(string)

									}

									if v, ok := jwtValidationMapStrToI["jwks"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_Jwks{}

										jwtValidation.JwksConfiguration = jwksConfigurationInt

										jwksConfigurationInt.Jwks = v.(string)

									}

									if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

										jwksConfigurationTypeFound = true
										jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
										jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
										jwtValidation.JwksConfiguration = jwksConfigurationInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

												jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
										jwtValidation.MandatoryClaims = mandatoryClaims
										for _, set := range sl {
											mandatoryClaimsMapStrToI := set.(map[string]interface{})

											if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												mandatoryClaims.ClaimNames = ls
											}

										}

									}

									if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
										jwtValidation.ReservedClaims = reservedClaims
										for _, set := range sl {
											reservedClaimsMapStrToI := set.(map[string]interface{})

											audienceValidationTypeFound := false

											if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

												audienceValidationTypeFound = true
												audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
												audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
												reservedClaims.AudienceValidation = audienceValidationInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														audienceValidationInt.Audience.Audiences = ls

													}

												}

											}

											if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

												audienceValidationTypeFound = true

												if v.(bool) {
													audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
													audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
													reservedClaims.AudienceValidation = audienceValidationInt
												}

											}

											issuerValidationTypeFound := false

											if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

												issuerValidationTypeFound = true
												issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

												reservedClaims.IssuerValidation = issuerValidationInt

												issuerValidationInt.Issuer = v.(string)

											}

											if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

												issuerValidationTypeFound = true

												if v.(bool) {
													issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
													issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
													reservedClaims.IssuerValidation = issuerValidationInt
												}

											}

											validatePeriodTypeFound := false

											if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

												validatePeriodTypeFound = true

												if v.(bool) {
													validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
													validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
													reservedClaims.ValidatePeriod = validatePeriodInt
												}

											}

											if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

												validatePeriodTypeFound = true

												if v.(bool) {
													validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
													validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
													reservedClaims.ValidatePeriod = validatePeriodInt
												}

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										target := &ves_io_schema_views_common_waf.Target{}
										jwtValidation.Target = target
										for _, set := range sl {
											targetMapStrToI := set.(map[string]interface{})

											targetTypeFound := false

											if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true

												if v.(bool) {
													targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
													targetInt.AllEndpoint = &ves_io_schema.Empty{}
													target.Target = targetInt
												}

											}

											if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true
												targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
												targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
												target.Target = targetInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														targetInt.ApiGroups.ApiGroups = ls

													}

												}

											}

											if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

												targetTypeFound = true
												targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
												targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
												target.Target = targetInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														targetInt.BasePaths.BasePaths = ls

													}

												}

											}

										}

									}

									if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
										jwtValidation.TokenLocation = tokenLocation
										for _, set := range sl {
											tokenLocationMapStrToI := set.(map[string]interface{})

											tokenLocationTypeFound := false

											if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true

												if v.(bool) {
													tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
													tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
													tokenLocation.TokenLocation = tokenLocationInt
												}

											}

											if v, ok := tokenLocationMapStrToI["cookie"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Cookie{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.Cookie = v.(string)

											}

											if v, ok := tokenLocationMapStrToI["header"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_Header{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.Header = v.(string)

											}

											if v, ok := tokenLocationMapStrToI["query_param"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

												tokenLocationTypeFound = true
												tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_QueryParam{}

												tokenLocation.TokenLocation = tokenLocationInt

												tokenLocationInt.QueryParam = v.(string)

											}

										}

									}

								}

							}

							sensitiveDataPolicyChoiceTypeFound := false

							if v, ok := apiProtectionMapStrToI["default_sensitive_data_policy"]; ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

								sensitiveDataPolicyChoiceTypeFound = true

								if v.(bool) {
									sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_DefaultSensitiveDataPolicy{}
									sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
									apiProtection.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
								}

							}

							if v, ok := apiProtectionMapStrToI["sensitive_data_policy"]; ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

								sensitiveDataPolicyChoiceTypeFound = true
								sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ApiProtection_SensitiveDataPolicy{}
								sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
								apiProtection.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
										sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

										for _, set := range sl {
											sdprMapToStrVal := set.(map[string]interface{})
											if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Name = val.(string)
											}
											if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Namespace = val.(string)
											}

											if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												sensitiveDataPolicyRefInt.Tenant = val.(string)
											}
										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["auth_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						authOptions := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions{}
						securityOptions.AuthOptions = authOptions
						for _, set := range sl {
							authOptionsMapStrToI := set.(map[string]interface{})

							authOptionsTypeFound := false

							if v, ok := authOptionsMapStrToI["custom"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Custom{}
								authOptionsInt.Custom = &ves_io_schema_views_cdn_loadbalancer.CDNCustomAuthentication{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["custom_auth_config"]; ok && !isIntfNil(v) {

										authOptionsInt.Custom.CustomAuthConfig = v.(string)

									}

								}

							}

							if v, ok := authOptionsMapStrToI["disable_auth"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true

								if v.(bool) {
									authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_DisableAuth{}
									authOptionsInt.DisableAuth = &ves_io_schema.Empty{}
									authOptions.AuthOptions = authOptionsInt
								}

							}

							if v, ok := authOptionsMapStrToI["jwt"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Jwt{}
								authOptionsInt.Jwt = &ves_io_schema_policy.JwtTokenAuthOptions{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["backup_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										backupKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.BackupKey = backupKey
										for _, set := range sl {
											backupKeyMapStrToI := set.(map[string]interface{})

											if v, ok := backupKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												backupKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := backupKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												backupKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := backupKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := backupKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := backupKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := backupKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												backupKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									if v, ok := cs["secret_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										secretKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.SecretKey = secretKey
										for _, set := range sl {
											secretKeyMapStrToI := set.(map[string]interface{})

											if v, ok := secretKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := secretKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												secretKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := secretKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := secretKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									tokenSourceTypeFound := false

									if v, ok := cs["bearer_token"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true

										if v.(bool) {
											tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_BearerToken{}
											tokenSourceInt.BearerToken = &ves_io_schema.Empty{}
											authOptionsInt.Jwt.TokenSource = tokenSourceInt
										}

									}

									if v, ok := cs["cookie"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Cookie{}
										tokenSourceInt.Cookie = &ves_io_schema_policy.HttpCookieName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Cookie.Name = v.(string)

											}

										}

									}

									if v, ok := cs["header"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Header{}
										tokenSourceInt.Header = &ves_io_schema_policy.HttpHeaderName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Header.Name = v.(string)

											}

										}

									}

									if v, ok := cs["query_param"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_QueryParam{}
										tokenSourceInt.QueryParam = &ves_io_schema_policy.HttpQueryParameterName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												tokenSourceInt.QueryParam.Key = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["common_security_controls"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						commonSecurityControls := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls{}
						securityOptions.CommonSecurityControls = commonSecurityControls
						for _, set := range sl {
							commonSecurityControlsMapStrToI := set.(map[string]interface{})

							if v, ok := commonSecurityControlsMapStrToI["blocked_clients"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
								commonSecurityControls.BlockedClients = blockedClients
								for i, set := range sl {
									blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
									blockedClientsMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := blockedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
											actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
											actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
											actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
											blockedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

										actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
										for _, j := range v.([]interface{}) {
											actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
										}
										blockedClients[i].Actions = actionsList

									}

									clientSourceChoiceTypeFound := false

									if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.AsNumber = uint32(v.(int))

									}

									if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
										clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
												clientSourceChoiceInt.HttpHeader.Headers = headers
												for i, set := range sl {
													headers[i] = &ves_io_schema.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
														headers[i].InvertMatch = w.(bool)
													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

													valueMatchTypeFound := false

													if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Exact = v.(string)

													}

													if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Presence = v.(bool)

													}

													if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Regex = v.(string)

													}

												}

											}

										}

									}

									if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.IpPrefix = v.(string)

									}

									if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

										blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.UserIdentifier = v.(string)

									}

									if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										blockedClients[i].ExpirationTimestamp = ts
									}

									if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										blockedClients[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

								}

							}

							challengeTypeTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["captcha_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_CaptchaChallenge{}
								challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

										challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

									}

									if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

										challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["challenge_on_cache_miss"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ChallengeOnCacheMiss{}
								challengeTypeInt.ChallengeOnCacheMiss = &ves_io_schema_views_common_waf.EnableChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.ChallengeOnCacheMiss.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.ChallengeOnCacheMiss.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableChallenge{}
								challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["js_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_JsChallenge{}
								challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

									}

									if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.CustomPage = v.(string)

									}

									if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

										challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["no_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true

								if v.(bool) {
									challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_NoChallenge{}
									challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
									commonSecurityControls.ChallengeType = challengeTypeInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["policy_based_challenge"]; ok && !isIntfNil(v) && !challengeTypeTypeFound {

								challengeTypeTypeFound = true
								challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_PolicyBasedChallenge{}
								challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
								commonSecurityControls.ChallengeType = challengeTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									captchaChallengeParametersChoiceTypeFound := false

									if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true
										captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
										captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
										challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

											}

										}

									}

									if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

										captchaChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
											captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
										}

									}

									challengeChoiceTypeFound := false

									if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
											challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
											challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

										challengeChoiceTypeFound = true

										if v.(bool) {
											challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
											challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
										}

									}

									jsChallengeParametersChoiceTypeFound := false

									if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true

										if v.(bool) {
											jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
											jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
										}

									}

									if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

										jsChallengeParametersChoiceTypeFound = true
										jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
										jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
										challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

											}

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

											}

											if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

												jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

											}

										}

									}

									maliciousUserMitigationChoiceTypeFound := false

									if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true

										if v.(bool) {
											maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
											maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
										}

									}

									if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

										maliciousUserMitigationChoiceTypeFound = true
										maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
										maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
										challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

											}

											if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

											}

											if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

												maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

											}

										}

									}

									if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
										challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
										for _, set := range sl {
											ruleListMapStrToI := set.(map[string]interface{})

											if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
												ruleList.Rules = rules
												for i, set := range sl {
													rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
													rulesMapStrToI := set.(map[string]interface{})

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															metadataMapStrToI := set.(map[string]interface{})

															if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																metadata.Description = w.(string)
															}

															if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
																metadata.Disable = w.(bool)
															}

															if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																metadata.Name = w.(string)
															}

														}

													}

													if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
														rules[i].Spec = spec
														for _, set := range sl {
															specMapStrToI := set.(map[string]interface{})

															if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
																spec.ArgMatchers = argMatchers
																for i, set := range sl {
																	argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																	argMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		argMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			argMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			argMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		argMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

																		argMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		argMatchers[i].Name = w.(string)
																	}

																}

															}

															asnChoiceTypeFound := false

															if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true

																if v.(bool) {
																	asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
																	asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
																	spec.AsnChoice = asnChoiceInt
																}

															}

															if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true
																asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
																asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
																spec.AsnChoice = asnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																		ls := make([]uint32, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = uint32(v.(int))
																		}
																		asnChoiceInt.AsnList.AsNumbers = ls

																	}

																}

															}

															if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

																asnChoiceTypeFound = true
																asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
																asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
																spec.AsnChoice = asnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																		for i, ps := range sl {

																			asMapToStrVal := ps.(map[string]interface{})
																			asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			asnSetsInt[i].Kind = "bgp_asn_set"

																			if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Name = v.(string)
																			}

																			if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																bodyMatcher := &ves_io_schema_policy.MatcherType{}
																spec.BodyMatcher = bodyMatcher
																for _, set := range sl {
																	bodyMatcherMapStrToI := set.(map[string]interface{})

																	if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		bodyMatcher.ExactValues = ls
																	}

																	if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		bodyMatcher.RegexValues = ls
																	}

																	if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		bodyMatcher.Transformers = transformersList

																	}

																}

															}

															challengeActionTypeFound := false

															if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
																	challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
																	challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

																challengeActionTypeFound = true

																if v.(bool) {
																	challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
																	challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
																	spec.ChallengeAction = challengeActionInt
																}

															}

															clientChoiceTypeFound := false

															if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true

																if v.(bool) {
																	clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
																	clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
																	spec.ClientChoice = clientChoiceInt
																}

															}

															if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientName{}

																spec.ClientChoice = clientChoiceInt

																clientChoiceInt.ClientName = v.(string)

															}

															if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientNameMatcher{}
																clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
																spec.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientNameMatcher.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientNameMatcher.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		clientChoiceInt.ClientNameMatcher.Transformers = transformersList

																	}

																}

															}

															if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
																clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
																spec.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientSelector.Expressions = ls

																	}

																}

															}

															if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
																spec.CookieMatchers = cookieMatchers
																for i, set := range sl {
																	cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																	cookieMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		cookieMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																		cookieMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
																spec.DomainMatcher = domainMatcher
																for _, set := range sl {
																	domainMatcherMapStrToI := set.(map[string]interface{})

																	if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		domainMatcher.ExactValues = ls
																	}

																	if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		domainMatcher.RegexValues = ls
																	}

																}

															}

															if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
																ts, err := parseTime(w.(string))
																if err != nil {
																	return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
																}
																spec.ExpirationTimestamp = ts
															}

															if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
																spec.Headers = headers
																for i, set := range sl {
																	headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																	headersMapStrToI := set.(map[string]interface{})

																	if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		headers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		headers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																		headers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																		headers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
																spec.HttpMethod = httpMethod
																for _, set := range sl {
																	httpMethodMapStrToI := set.(map[string]interface{})

																	if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		httpMethod.InvertMatcher = w.(bool)
																	}

																	if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																		methodsList := []ves_io_schema.HttpMethod{}
																		for _, j := range v.([]interface{}) {
																			methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																		}
																		httpMethod.Methods = methodsList

																	}

																}

															}

															ipChoiceTypeFound := false

															if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true

																if v.(bool) {
																	ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
																	ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
																	spec.IpChoice = ipChoiceInt
																}

															}

															if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true
																ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
																ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
																spec.IpChoice = ipChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																		ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																	}

																	if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																		for i, ps := range sl {

																			psMapToStrVal := ps.(map[string]interface{})
																			prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			prefixSetsInt[i].Kind = "ip_prefix_set"

																			if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Name = v.(string)
																			}

																			if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

																ipChoiceTypeFound = true
																ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
																ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
																spec.IpChoice = ipChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																		ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																	}

																	if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipChoiceInt.IpPrefixList.IpPrefixes = ls

																	}

																	if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																	}

																}

															}

															if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																path := &ves_io_schema_policy.PathMatcherType{}
																spec.Path = path
																for _, set := range sl {
																	pathMapStrToI := set.(map[string]interface{})

																	if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.ExactValues = ls
																	}

																	if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		path.InvertMatcher = w.(bool)
																	}

																	if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.PrefixValues = ls
																	}

																	if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.RegexValues = ls
																	}

																	if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		path.SuffixValues = ls
																	}

																	if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		path.Transformers = transformersList

																	}

																}

															}

															if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
																spec.QueryParams = queryParams
																for i, set := range sl {
																	queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																	queryParamsMapStrToI := set.(map[string]interface{})

																	if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		queryParams[i].InvertMatcher = w.(bool)
																	}

																	if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																		queryParams[i].Key = w.(string)
																	}

																	matchTypeFound := false

																	if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		queryParams[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																		queryParams[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																}

															}

															tlsFingerprintChoiceTypeFound := false

															if v, ok := specMapStrToI["ja4_tls_fingerprint"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

																tlsFingerprintChoiceTypeFound = true
																tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_Ja4TlsFingerprint{}
																tlsFingerprintChoiceInt.Ja4TlsFingerprint = &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
																spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.Ja4TlsFingerprint.ExactValues = ls

																	}

																}

															}

															if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

																tlsFingerprintChoiceTypeFound = true
																tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
																tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
																spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																		classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																		for _, j := range v.([]interface{}) {
																			classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																	}

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																	}

																	if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																	}

																}

															}

														}

													}

												}

											}

										}

									}

									temporaryBlockingParametersChoiceTypeFound := false

									if v, ok := cs["default_temporary_blocking_parameters"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

										temporaryBlockingParametersChoiceTypeFound = true

										if v.(bool) {
											temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{}
											temporaryBlockingParametersChoiceInt.DefaultTemporaryBlockingParameters = &ves_io_schema.Empty{}
											challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt
										}

									}

									if v, ok := cs["temporary_user_blocking"]; ok && !isIntfNil(v) && !temporaryBlockingParametersChoiceTypeFound {

										temporaryBlockingParametersChoiceTypeFound = true
										temporaryBlockingParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_TemporaryUserBlocking{}
										temporaryBlockingParametersChoiceInt.TemporaryUserBlocking = &ves_io_schema_virtual_host.TemporaryUserBlockingType{}
										challengeTypeInt.PolicyBasedChallenge.TemporaryBlockingParametersChoice = temporaryBlockingParametersChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

												temporaryBlockingParametersChoiceInt.TemporaryUserBlocking.CustomPage = v.(string)

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["cors_policy"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								corsPolicy := &ves_io_schema.CorsPolicy{}
								commonSecurityControls.CorsPolicy = corsPolicy
								for _, set := range sl {
									corsPolicyMapStrToI := set.(map[string]interface{})

									if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
										corsPolicy.AllowCredentials = w.(bool)
									}

									if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
										corsPolicy.AllowHeaders = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
										corsPolicy.AllowMethods = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										corsPolicy.AllowOrigin = ls
									}

									if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										corsPolicy.AllowOriginRegex = ls
									}

									if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
										corsPolicy.Disabled = w.(bool)
									}

									if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
										corsPolicy.ExposeHeaders = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["max_age"]; ok && !isIntfNil(w) {
										corsPolicy.MaxAge = w.(string)
									}

									if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
										corsPolicy.MaximumAge = int32(w.(int))
									}

								}

							}

							ipReputationChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_ip_reputation"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true

								if v.(bool) {
									ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableIpReputation{}
									ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
									commonSecurityControls.IpReputationChoice = ipReputationChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_ip_reputation"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true
								ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableIpReputation{}
								ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
								commonSecurityControls.IpReputationChoice = ipReputationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["ip_reputation_on_cache_miss"]; ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

								ipReputationChoiceTypeFound = true
								ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_IpReputationOnCacheMiss{}
								ipReputationChoiceInt.IpReputationOnCacheMiss = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
								commonSecurityControls.IpReputationChoice = ipReputationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										ipReputationChoiceInt.IpReputationOnCacheMiss.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							maliciousUserDetectionChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_malicious_user_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableMaliciousUserDetection{}
									maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_malicious_user_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableMaliciousUserDetection{}
									maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["malicious_user_detection_on_cache_miss"]; ok && !isIntfNil(v) && !maliciousUserDetectionChoiceTypeFound {

								maliciousUserDetectionChoiceTypeFound = true

								if v.(bool) {
									maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_MaliciousUserDetectionOnCacheMiss{}
									maliciousUserDetectionChoiceInt.MaliciousUserDetectionOnCacheMiss = &ves_io_schema.Empty{}
									commonSecurityControls.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
								}

							}

							rateLimitChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["api_rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true
								rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ApiRateLimit{}
								rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
								commonSecurityControls.RateLimitChoice = rateLimitChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
										rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
										for i, set := range sl {
											apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
											apiEndpointRulesMapStrToI := set.(map[string]interface{})

											if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
												apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
												for _, set := range sl {
													apiEndpointMethodMapStrToI := set.(map[string]interface{})

													if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														apiEndpointMethod.InvertMatcher = w.(bool)
													}

													if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														apiEndpointMethod.Methods = methodsList

													}

												}

											}

											if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].ApiEndpointPath = w.(string)
											}

											if w, ok := apiEndpointRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												apiEndpointRules[i].BasePath = w.(string)
											}

											if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												apiEndpointRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													apiEndpointRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

												apiEndpointRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											rateLimiterChoiceTypeFound := false

											if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
												rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
												apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													countByChoiceTypeFound := false

													if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true
														countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
														countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
														rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["name"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Name = v.(string)

															}

															if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Namespace = v.(string)

															}

															if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Tenant = v.(string)

															}

														}

													}

													if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true

														if v.(bool) {
															countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
															countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
															rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
														}

													}

													if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

													}

													if v, ok := cs["unit"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
												rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
												apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

													}

												}

											}

											if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												apiEndpointRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

									ipAllowedListChoiceTypeFound := false

									if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
										ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
												ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
												for i, set := range sl {
													bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
													bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

													if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														clientMatcher := &ves_io_schema_policy.ClientMatcher{}
														bypassRateLimitingRules[i].ClientMatcher = clientMatcher
														for _, set := range sl {
															clientMatcherMapStrToI := set.(map[string]interface{})

															clientChoiceTypeFound := false

															if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true

																if v.(bool) {
																	clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
																	clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
																	clientMatcher.ClientChoice = clientChoiceInt
																}

															}

															if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
																clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
																clientMatcher.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		clientChoiceInt.ClientSelector.Expressions = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

																clientChoiceTypeFound = true
																clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
																clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
																clientMatcher.ClientChoice = clientChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																		ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																		for _, j := range v.([]interface{}) {
																			ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																		}
																		clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																	}

																}

															}

															ipAsnChoiceTypeFound := false

															if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true

																if v.(bool) {
																	ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
																	ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
																	clientMatcher.IpAsnChoice = ipAsnChoiceInt
																}

															}

															if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
																ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																		ls := make([]uint32, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = uint32(v.(int))
																		}
																		ipAsnChoiceInt.AsnList.AsNumbers = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
																ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																		for i, ps := range sl {

																			asMapToStrVal := ps.(map[string]interface{})
																			asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			asnSetsInt[i].Kind = "bgp_asn_set"

																			if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Name = v.(string)
																			}

																			if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				asnSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
																ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																		ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																	}

																	if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																		sl := v.([]interface{})
																		prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																		ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																		for i, ps := range sl {

																			psMapToStrVal := ps.(map[string]interface{})
																			prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																			prefixSetsInt[i].Kind = "ip_prefix_set"

																			if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Name = v.(string)
																			}

																			if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Namespace = v.(string)
																			}

																			if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Tenant = v.(string)
																			}

																			if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																				prefixSetsInt[i].Uid = v.(string)
																			}

																		}

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

																ipAsnChoiceTypeFound = true
																ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
																ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
																clientMatcher.IpAsnChoice = ipAsnChoiceInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																		ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																	}

																	if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																	}

																	if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																	}

																}

															}

															if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

																sl := v.(*schema.Set).List()
																tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
																clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
																for _, set := range sl {
																	tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																	if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																		classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																		for _, j := range v.([]interface{}) {
																			classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																		}
																		tlsFingerprintMatcher.Classes = classesList

																	}

																	if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintMatcher.ExactValues = ls
																	}

																	if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																		ls := make([]string, len(w.([]interface{})))
																		for i, v := range w.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		tlsFingerprintMatcher.ExcludedValues = ls
																	}

																}

															}

														}

													}

													destinationTypeTypeFound := false

													if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true

														if v.(bool) {
															destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
															destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
															bypassRateLimitingRules[i].DestinationType = destinationTypeInt
														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
														destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																methodsList := []ves_io_schema.HttpMethod{}
																for _, j := range v.([]interface{}) {
																	methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																}
																destinationTypeInt.ApiEndpoint.Methods = methodsList

															}

															if v, ok := cs["path"]; ok && !isIntfNil(v) {

																destinationTypeInt.ApiEndpoint.Path = v.(string)

															}

														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
														destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																destinationTypeInt.ApiGroups.ApiGroups = ls

															}

														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

														destinationTypeTypeFound = true
														destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

														bypassRateLimitingRules[i].DestinationType = destinationTypeInt

														destinationTypeInt.BasePath = v.(string)

													}

													domainChoiceTypeFound := false

													if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
														}

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

														bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														requestMatcher := &ves_io_schema_policy.RequestMatcher{}
														bypassRateLimitingRules[i].RequestMatcher = requestMatcher
														for _, set := range sl {
															requestMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
																requestMatcher.CookieMatchers = cookieMatchers
																for i, set := range sl {
																	cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																	cookieMatchersMapStrToI := set.(map[string]interface{})

																	if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			cookieMatchers[i].Match = matchInt
																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		cookieMatchers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																		cookieMatchers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																		cookieMatchers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
																requestMatcher.Headers = headers
																for i, set := range sl {
																	headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																	headersMapStrToI := set.(map[string]interface{})

																	if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		headers[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			headers[i].Match = matchInt
																		}

																	}

																	if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		headers[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																		headers[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																	if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																		headers[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
																requestMatcher.JwtClaims = jwtClaims
																for i, set := range sl {
																	jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																	jwtClaimsMapStrToI := set.(map[string]interface{})

																	if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		jwtClaims[i].InvertMatcher = w.(bool)
																	}

																	matchTypeFound := false

																	if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			jwtClaims[i].Match = matchInt
																		}

																	}

																	if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			jwtClaims[i].Match = matchInt
																		}

																	}

																	if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		jwtClaims[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																		jwtClaims[i].Name = w.(string)
																	}

																}

															}

															if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
																requestMatcher.QueryParams = queryParams
																for i, set := range sl {
																	queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																	queryParamsMapStrToI := set.(map[string]interface{})

																	if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																		queryParams[i].InvertMatcher = w.(bool)
																	}

																	if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																		queryParams[i].Key = w.(string)
																	}

																	matchTypeFound := false

																	if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																			matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true

																		if v.(bool) {
																			matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																			matchInt.CheckPresent = &ves_io_schema.Empty{}
																			queryParams[i].Match = matchInt
																		}

																	}

																	if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																		matchInt.Item = &ves_io_schema_policy.MatcherType{}
																		queryParams[i].Match = matchInt

																		sl := v.(*schema.Set).List()
																		for _, set := range sl {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					ls[i] = v.(string)
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}

																	}

																	if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																		matchTypeFound = true
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																		queryParams[i].Match = matchInt

																		matchInt.Presence = v.(bool)

																	}

																}

															}

														}

													}

												}

											}

										}

									}

									if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
										ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
												for i, ps := range sl {

													rlapMapToStrVal := ps.(map[string]interface{})
													rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Name = v.(string)
													}

													if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
													}

													if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
										ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
										rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

											}

											if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

											}

										}

									}

									if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true

										if v.(bool) {
											ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
											ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
											rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
										}

									}

									if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
										rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
										for i, set := range sl {
											serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
											serverUrlRulesMapStrToI := set.(map[string]interface{})

											if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
												serverUrlRules[i].ApiGroup = w.(string)
											}

											if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
												serverUrlRules[i].BasePath = w.(string)
											}

											if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												clientMatcher := &ves_io_schema_policy.ClientMatcher{}
												serverUrlRules[i].ClientMatcher = clientMatcher
												for _, set := range sl {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																clientChoiceInt.ClientSelector.Expressions = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																for _, j := range v.([]interface{}) {
																	ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																}
																clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

															}

														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																ls := make([]uint32, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = uint32(v.(int))
																}
																ipAsnChoiceInt.AsnList.AsNumbers = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																for i, ps := range sl {

																	asMapToStrVal := ps.(map[string]interface{})
																	asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	asnSetsInt[i].Kind = "bgp_asn_set"

																	if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Name = v.(string)
																	}

																	if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		asnSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

															}

															if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																sl := v.([]interface{})
																prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																for i, ps := range sl {

																	psMapToStrVal := ps.(map[string]interface{})
																	prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																	prefixSetsInt[i].Kind = "ip_prefix_set"

																	if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Name = v.(string)
																	}

																	if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Namespace = v.(string)
																	}

																	if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Tenant = v.(string)
																	}

																	if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																		prefixSetsInt[i].Uid = v.(string)
																	}

																}

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

															}

															if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

															}

															if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																ls := make([]string, len(v.([]interface{})))
																for i, v := range v.([]interface{}) {
																	ls[i] = v.(string)
																}
																ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

															}

														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.(*schema.Set).List()
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

															if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																for _, j := range v.([]interface{}) {
																	classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																}
																tlsFingerprintMatcher.Classes = classesList

															}

															if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExactValues = ls
															}

															if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																ls := make([]string, len(w.([]interface{})))
																for i, v := range w.([]interface{}) {
																	ls[i] = v.(string)
																}
																tlsFingerprintMatcher.ExcludedValues = ls
															}

														}

													}

												}

											}

											domainChoiceTypeFound := false

											if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true

												if v.(bool) {
													domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
													domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
													serverUrlRules[i].DomainChoice = domainChoiceInt
												}

											}

											if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

												serverUrlRules[i].DomainChoice = domainChoiceInt

												domainChoiceInt.SpecificDomain = v.(string)

											}

											rateLimiterChoiceTypeFound := false

											if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
												rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
												serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													countByChoiceTypeFound := false

													if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true
														countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
														countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
														rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

														sl := v.(*schema.Set).List()
														for _, set := range sl {
															cs := set.(map[string]interface{})

															if v, ok := cs["name"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Name = v.(string)

															}

															if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Namespace = v.(string)

															}

															if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																countByChoiceInt.RefUserId.Tenant = v.(string)

															}

														}

													}

													if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

														countByChoiceTypeFound = true

														if v.(bool) {
															countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
															countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
															rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
														}

													}

													if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

													}

													if v, ok := cs["unit"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

													}

												}

											}

											if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

												rateLimiterChoiceTypeFound = true
												rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
												rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
												serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

													}

												}

											}

											if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												requestMatcher := &ves_io_schema_policy.RequestMatcher{}
												serverUrlRules[i].RequestMatcher = requestMatcher
												for _, set := range sl {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
															cookieMatchersMapStrToI := set.(map[string]interface{})

															if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																cookieMatchers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	cookieMatchers[i].Match = matchInt
																}

															}

															if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																cookieMatchers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

																cookieMatchers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																cookieMatchers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
															headersMapStrToI := set.(map[string]interface{})

															if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																headers[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	headers[i].Match = matchInt
																}

															}

															if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																headers[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

																headers[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

															if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																headers[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
															jwtClaimsMapStrToI := set.(map[string]interface{})

															if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																jwtClaims[i].InvertMatcher = w.(bool)
															}

															matchTypeFound := false

															if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	jwtClaims[i].Match = matchInt
																}

															}

															if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																jwtClaims[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																jwtClaims[i].Name = w.(string)
															}

														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
															queryParamsMapStrToI := set.(map[string]interface{})

															if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																queryParams[i].InvertMatcher = w.(bool)
															}

															if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																queryParams[i].Key = w.(string)
															}

															matchTypeFound := false

															if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																	matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true

																if v.(bool) {
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																	matchInt.CheckPresent = &ves_io_schema.Empty{}
																	queryParams[i].Match = matchInt
																}

															}

															if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																matchInt.Item = &ves_io_schema_policy.MatcherType{}
																queryParams[i].Match = matchInt

																sl := v.(*schema.Set).List()
																for _, set := range sl {
																	cs := set.(map[string]interface{})

																	if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.ExactValues = ls

																	}

																	if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																		ls := make([]string, len(v.([]interface{})))
																		for i, v := range v.([]interface{}) {
																			ls[i] = v.(string)
																		}
																		matchInt.Item.RegexValues = ls

																	}

																	if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																		transformersList := []ves_io_schema_policy.Transformer{}
																		for _, j := range v.([]interface{}) {
																			transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																		}
																		matchInt.Item.Transformers = transformersList

																	}

																}

															}

															if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

																matchTypeFound = true
																matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

																queryParams[i].Match = matchInt

																matchInt.Presence = v.(bool)

															}

														}

													}

												}

											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["disable_rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true

								if v.(bool) {
									rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableRateLimit{}
									rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
									commonSecurityControls.RateLimitChoice = rateLimitChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["rate_limit"]; ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

								rateLimitChoiceTypeFound = true
								rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_RateLimit{}
								rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
								commonSecurityControls.RateLimitChoice = rateLimitChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									ipAllowedListChoiceTypeFound := false

									if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
										ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
										rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
												for i, ps := range sl {

													rlapMapToStrVal := ps.(map[string]interface{})
													rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Name = v.(string)
													}

													if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
													}

													if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true
										ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
										ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
										rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

											}

											if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

											}

										}

									}

									if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

										ipAllowedListChoiceTypeFound = true

										if v.(bool) {
											ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
											ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
											rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
										}

									}

									policyChoiceTypeFound := false

									if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

										policyChoiceTypeFound = true

										if v.(bool) {
											policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
											policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
											rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
										}

									}

									if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

										policyChoiceTypeFound = true
										policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
										policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
										rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["policies"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
												policyChoiceInt.Policies.Policies = policiesInt
												for i, ps := range sl {

													pMapToStrVal := ps.(map[string]interface{})
													policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

													if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
														policiesInt[i].Name = v.(string)
													}

													if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														policiesInt[i].Namespace = v.(string)
													}

													if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														policiesInt[i].Tenant = v.(string)
													}

												}

											}

										}

									}

									if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
										rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
										for _, set := range sl {
											rateLimiterMapStrToI := set.(map[string]interface{})

											if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
												rateLimiter.BurstMultiplier = uint32(w.(int))
											}

											if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
												rateLimiter.TotalNumber = uint32(w.(int))
											}

											if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

												rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

											}

										}

									}

								}

							}

							servicePolicyChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["active_service_policies"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true
								servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ActiveServicePolicies{}
								servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
								commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["policies"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
										servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
										for i, ps := range sl {

											pMapToStrVal := ps.(map[string]interface{})
											policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

											if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
												policiesInt[i].Name = v.(string)
											}

											if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												policiesInt[i].Namespace = v.(string)
											}

											if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												policiesInt[i].Tenant = v.(string)
											}

										}

									}

								}

							}

							if v, ok := commonSecurityControlsMapStrToI["no_service_policies"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true

								if v.(bool) {
									servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_NoServicePolicies{}
									servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
									commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["service_policies_from_namespace"]; ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

								servicePolicyChoiceTypeFound = true

								if v.(bool) {
									servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_ServicePoliciesFromNamespace{}
									servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
									commonSecurityControls.ServicePolicyChoice = servicePolicyChoiceInt
								}

							}

							threatMeshChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["disable_threat_mesh"]; ok && !isIntfNil(v) && !threatMeshChoiceTypeFound {

								threatMeshChoiceTypeFound = true

								if v.(bool) {
									threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_DisableThreatMesh{}
									threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
									commonSecurityControls.ThreatMeshChoice = threatMeshChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["enable_threat_mesh"]; ok && !isIntfNil(v) && !threatMeshChoiceTypeFound {

								threatMeshChoiceTypeFound = true

								if v.(bool) {
									threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_EnableThreatMesh{}
									threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
									commonSecurityControls.ThreatMeshChoice = threatMeshChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["trusted_clients"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
								commonSecurityControls.TrustedClients = trustedClients
								for i, set := range sl {
									trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
									trustedClientsMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := trustedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
											actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
											actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
											actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
											trustedClients[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

										actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
										for _, j := range v.([]interface{}) {
											actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
										}
										trustedClients[i].Actions = actionsList

									}

									clientSourceChoiceTypeFound := false

									if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.AsNumber = uint32(v.(int))

									}

									if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
										clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["headers"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
												clientSourceChoiceInt.HttpHeader.Headers = headers
												for i, set := range sl {
													headers[i] = &ves_io_schema.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
														headers[i].InvertMatch = w.(bool)
													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

													valueMatchTypeFound := false

													if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Exact = v.(string)

													}

													if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Presence = v.(bool)

													}

													if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

														valueMatchTypeFound = true
														valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

														headers[i].ValueMatch = valueMatchInt

														valueMatchInt.Regex = v.(string)

													}

												}

											}

										}

									}

									if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.IpPrefix = v.(string)

									}

									if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

										clientSourceChoiceTypeFound = true
										clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

										trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

										clientSourceChoiceInt.UserIdentifier = v.(string)

									}

									if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										trustedClients[i].ExpirationTimestamp = ts
									}

									if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										trustedClients[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

								}

							}

							userIdChoiceTypeFound := false

							if v, ok := commonSecurityControlsMapStrToI["user_id_client_ip"]; ok && !isIntfNil(v) && !userIdChoiceTypeFound {

								userIdChoiceTypeFound = true

								if v.(bool) {
									userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_UserIdClientIp{}
									userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
									commonSecurityControls.UserIdChoice = userIdChoiceInt
								}

							}

							if v, ok := commonSecurityControlsMapStrToI["user_identification"]; ok && !isIntfNil(v) && !userIdChoiceTypeFound {

								userIdChoiceTypeFound = true
								userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CommonSecurityControls_UserIdentification{}
								userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
								commonSecurityControls.UserIdChoice = userIdChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										userIdChoiceInt.UserIdentification.Tenant = v.(string)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
						securityOptions.GeoFiltering = geoFiltering
						for _, set := range sl {
							geoFilteringMapStrToI := set.(map[string]interface{})

							geoFilteringTypeTypeFound := false

							if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
								geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

								}

							}

							if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
								geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
						securityOptions.IpFiltering = ipFiltering
						for _, set := range sl {
							ipFilteringMapStrToI := set.(map[string]interface{})

							ipFilteringTypeTypeFound := false

							if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
								ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
								ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["web_app_firewall"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						webAppFirewall := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall{}
						securityOptions.WebAppFirewall = webAppFirewall
						for _, set := range sl {
							webAppFirewallMapStrToI := set.(map[string]interface{})

							if v, ok := webAppFirewallMapStrToI["csrf_policy"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								csrfPolicy := &ves_io_schema.CsrfPolicy{}
								webAppFirewall.CsrfPolicy = csrfPolicy
								for _, set := range sl {
									csrfPolicyMapStrToI := set.(map[string]interface{})

									allowedDomainsTypeFound := false

									if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true

										if v.(bool) {
											allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
											allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
											csrfPolicy.AllowedDomains = allowedDomainsInt
										}

									}

									if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true
										allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
										allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
										csrfPolicy.AllowedDomains = allowedDomainsInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["domains"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												allowedDomainsInt.CustomDomainList.Domains = ls

											}

										}

									}

									if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

										allowedDomainsTypeFound = true

										if v.(bool) {
											allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
											allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
											csrfPolicy.AllowedDomains = allowedDomainsInt
										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["data_guard_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
								webAppFirewall.DataGuardRules = dataGuardRules
								for i, set := range sl {
									dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
									dataGuardRulesMapStrToI := set.(map[string]interface{})

									actionChoiceTypeFound := false

									if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
											actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
											dataGuardRules[i].ActionChoice = actionChoiceInt
										}

									}

									if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

										actionChoiceTypeFound = true

										if v.(bool) {
											actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
											actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
											dataGuardRules[i].ActionChoice = actionChoiceInt
										}

									}

									domainChoiceTypeFound := false

									if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											dataGuardRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

										dataGuardRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

										dataGuardRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										dataGuardRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										path := &ves_io_schema.PathMatcherType{}
										dataGuardRules[i].Path = path
										for _, set := range sl {
											pathMapStrToI := set.(map[string]interface{})

											pathMatchTypeFound := false

											if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Path = v.(string)

											}

											if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Prefix = v.(string)

											}

											if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

												pathMatchTypeFound = true
												pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

												path.PathMatch = pathMatchInt

												pathMatchInt.Regex = v.(string)

											}

										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["graphql_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
								webAppFirewall.GraphqlRules = graphqlRules
								for i, set := range sl {
									graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
									graphqlRulesMapStrToI := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											graphqlRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

										graphqlRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

										graphqlRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
										graphqlRules[i].ExactPath = w.(string)
									}

									if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
										graphqlRules[i].GraphqlSettings = graphqlSettings
										for _, set := range sl {
											graphqlSettingsMapStrToI := set.(map[string]interface{})

											allowIntrospectionQueriesChoiceTypeFound := false

											if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

												allowIntrospectionQueriesChoiceTypeFound = true

												if v.(bool) {
													allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
													allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
													graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
												}

											}

											if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

												allowIntrospectionQueriesChoiceTypeFound = true

												if v.(bool) {
													allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
													allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
													graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
												}

											}

											if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxBatchedQueries = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxDepth = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxTotalLength = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["max_value_length"]; ok && !isIntfNil(w) {
												graphqlSettings.MaxValueLength = uint32(w.(int))
											}

											if w, ok := graphqlSettingsMapStrToI["policy_name"]; ok && !isIntfNil(w) {
												graphqlSettings.PolicyName = w.(string)
											}

										}

									}

									if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										graphqlRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									methodChoiceTypeFound := false

									if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

										methodChoiceTypeFound = true

										if v.(bool) {
											methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
											methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
											graphqlRules[i].MethodChoice = methodChoiceInt
										}

									}

									if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

										methodChoiceTypeFound = true

										if v.(bool) {
											methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
											methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
											graphqlRules[i].MethodChoice = methodChoiceInt
										}

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["protected_cookies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
								webAppFirewall.ProtectedCookies = protectedCookies
								for i, set := range sl {
									protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
									protectedCookiesMapStrToI := set.(map[string]interface{})

									cookieTamperingTypeFound := false

									if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

										cookieTamperingTypeFound = true

										if v.(bool) {
											cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
											cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
											protectedCookies[i].CookieTampering = cookieTamperingInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

										cookieTamperingTypeFound = true

										if v.(bool) {
											cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
											cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
											protectedCookies[i].CookieTampering = cookieTamperingInt
										}

									}

									httponlyTypeFound := false

									if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

										httponlyTypeFound = true

										if v.(bool) {
											httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
											httponlyInt.AddHttponly = &ves_io_schema.Empty{}
											protectedCookies[i].Httponly = httponlyInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

										httponlyTypeFound = true

										if v.(bool) {
											httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
											httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
											protectedCookies[i].Httponly = httponlyInt
										}

									}

									maxAgeTypeFound := false

									if v, ok := protectedCookiesMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

										maxAgeTypeFound = true

										if v.(bool) {
											maxAgeInt := &ves_io_schema.CookieManipulationOptionType_IgnoreMaxAge{}
											maxAgeInt.IgnoreMaxAge = &ves_io_schema.Empty{}
											protectedCookies[i].MaxAge = maxAgeInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

										maxAgeTypeFound = true
										maxAgeInt := &ves_io_schema.CookieManipulationOptionType_MaxAgeValue{}

										protectedCookies[i].MaxAge = maxAgeInt

										maxAgeInt.MaxAgeValue = int32(v.(int))

									}

									if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
										protectedCookies[i].Name = w.(string)
									}

									samesiteTypeFound := false

									if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
											samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
											samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
											samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

										samesiteTypeFound = true

										if v.(bool) {
											samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
											samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
											protectedCookies[i].Samesite = samesiteInt
										}

									}

									secureTypeFound := false

									if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

										secureTypeFound = true

										if v.(bool) {
											secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
											secureInt.AddSecure = &ves_io_schema.Empty{}
											protectedCookies[i].Secure = secureInt
										}

									}

									if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

										secureTypeFound = true

										if v.(bool) {
											secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
											secureInt.IgnoreSecure = &ves_io_schema.Empty{}
											protectedCookies[i].Secure = secureInt
										}

									}

								}

							}

							wafChoiceTypeFound := false

							if v, ok := webAppFirewallMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true
								wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_AppFirewall{}
								wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
								webAppFirewall.WafChoice = wafChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewall.Tenant = v.(string)

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["app_firewall_on_cache_miss"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true
								wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_AppFirewallOnCacheMiss{}
								wafChoiceInt.AppFirewallOnCacheMiss = &ves_io_schema_views.ObjectRefType{}
								webAppFirewall.WafChoice = wafChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										wafChoiceInt.AppFirewallOnCacheMiss.Tenant = v.(string)

									}

								}

							}

							if v, ok := webAppFirewallMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

								wafChoiceTypeFound = true

								if v.(bool) {
									wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.WebApplicationFirewall_DisableWaf{}
									wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
									webAppFirewall.WafChoice = wafChoiceInt
								}

							}

							if v, ok := webAppFirewallMapStrToI["waf_exclusion_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
								webAppFirewall.WafExclusionRules = wafExclusionRules
								for i, set := range sl {
									wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
									wafExclusionRulesMapStrToI := set.(map[string]interface{})

									domainChoiceTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true

										if v.(bool) {
											domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
											domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
											wafExclusionRules[i].DomainChoice = domainChoiceInt
										}

									}

									if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

										wafExclusionRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.ExactValue = v.(string)

									}

									if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

										domainChoiceTypeFound = true
										domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

										wafExclusionRules[i].DomainChoice = domainChoiceInt

										domainChoiceInt.SuffixValue = v.(string)

									}

									if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
										ts, err := parseTime(w.(string))
										if err != nil {
											return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
										}
										wafExclusionRules[i].ExpirationTimestamp = ts
									}

									if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										metadata := &ves_io_schema.MessageMetaType{}
										wafExclusionRules[i].Metadata = metadata
										for _, set := range sl {
											metadataMapStrToI := set.(map[string]interface{})

											if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
												metadata.Description = w.(string)
											}

											if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
												metadata.Disable = w.(bool)
											}

											if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
												metadata.Name = w.(string)
											}

										}

									}

									if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										wafExclusionRules[i].Methods = methodsList

									}

									pathChoiceTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true

										if v.(bool) {
											pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
											pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
											wafExclusionRules[i].PathChoice = pathChoiceInt
										}

									}

									if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true
										pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

										wafExclusionRules[i].PathChoice = pathChoiceInt

										pathChoiceInt.PathPrefix = v.(string)

									}

									if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

										pathChoiceTypeFound = true
										pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

										wafExclusionRules[i].PathChoice = pathChoiceInt

										pathChoiceInt.PathRegex = v.(string)

									}

									wafAdvancedConfigurationTypeFound := false

									if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

										wafAdvancedConfigurationTypeFound = true
										wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
										wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
										wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
												for i, set := range sl {
													excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
													excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeAttackTypeContexts[i].ContextName = w.(string)
													}

													if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

													}

												}

											}

											if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
												for i, set := range sl {
													excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
													excludeBotNameContextsMapStrToI := set.(map[string]interface{})

													if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
														excludeBotNameContexts[i].BotName = w.(string)
													}

												}

											}

											if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
												for i, set := range sl {
													excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
													excludeSignatureContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].ContextName = w.(string)
													}

													if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].SignatureId = uint32(w.(int))
													}

												}

											}

											if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
												wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
												for i, set := range sl {
													excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
													excludeViolationContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

													}

													if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
														excludeViolationContexts[i].ContextName = w.(string)
													}

													if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

													}

												}

											}

										}

									}

									if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

										wafAdvancedConfigurationTypeFound = true

										if v.(bool) {
											wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
											wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
											wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		updateSpec.OriginPool = originPool
		for _, set := range sl {
			originPoolMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolMapStrToI["follow_origin_redirect"]; ok && !isIntfNil(w) {
				originPool.FollowOriginRedirect = w.(bool)
			}

			if v, ok := originPoolMapStrToI["more_origin_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				moreOriginOptions := &ves_io_schema_views_cdn_loadbalancer.OriginAdvancedConfiguration{}
				originPool.MoreOriginOptions = moreOriginOptions
				for _, set := range sl {
					moreOriginOptionsMapStrToI := set.(map[string]interface{})

					if w, ok := moreOriginOptionsMapStrToI["disable_byte_range_request"]; ok && !isIntfNil(w) {
						moreOriginOptions.DisableByteRangeRequest = w.(bool)
					}

					if w, ok := moreOriginOptionsMapStrToI["websocket_proxy"]; ok && !isIntfNil(w) {
						moreOriginOptions.WebsocketProxy = w.(bool)
					}

				}

			}

			if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
				originPool.OriginRequestTimeout = w.(string)
			}

			if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
				originPool.OriginServers = originServers
				for i, set := range sl {
					originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
					originServersMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
						choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							publicIpChoiceTypeFound := false

							if v, ok := cs["ip"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

								publicIpChoiceTypeFound = true
								publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ip{}

								choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

								publicIpChoiceInt.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

								publicIpChoiceTypeFound = true
								publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ipv6{}

								choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

								publicIpChoiceInt.Ipv6 = v.(string)

							}

						}

					}

					if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
						choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.DnsName = v.(string)

							}

							if v, ok := cs["refresh_interval"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.RefreshInterval = uint32(v.(int))

							}

						}

					}

					if w, ok := originServersMapStrToI["port"]; ok && !isIntfNil(w) {
						originServers[i].Port = uint32(w.(int))
					}

				}

			}

			if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
				originPool.PublicName = publicName
				for _, set := range sl {
					publicNameMapStrToI := set.(map[string]interface{})

					if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
						publicName.DnsName = w.(string)
					}

					if w, ok := publicNameMapStrToI["refresh_interval"]; ok && !isIntfNil(w) {
						publicName.RefreshInterval = uint32(w.(int))
					}

				}

			}

			tlsChoiceTypeFound := false

			if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true

				if v.(bool) {
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
					tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
					originPool.TlsChoice = tlsChoiceInt
				}

			}

			if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true
				tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
				tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
				originPool.TlsChoice = tlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					maxSessionKeysTypeTypeFound := false

					if v, ok := cs["default_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true

						if v.(bool) {
							maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DefaultSessionKeyCaching{}
							maxSessionKeysTypeInt.DefaultSessionKeyCaching = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
						}

					}

					if v, ok := cs["disable_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true

						if v.(bool) {
							maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSessionKeyCaching{}
							maxSessionKeysTypeInt.DisableSessionKeyCaching = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
						}

					}

					if v, ok := cs["max_session_keys"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

						maxSessionKeysTypeTypeFound = true
						maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_MaxSessionKeys{}

						tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt

						maxSessionKeysTypeInt.MaxSessionKeys = uint32(v.(int))

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
										ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
										ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["use_mtls_obj"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtlsObj{}
						mtlsChoiceInt.UseMtlsObj = &ves_io_schema_views.ObjectRefType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtlsObj.Tenant = v.(string)

							}

						}

					}

					serverValidationChoiceTypeFound := false

					if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
							serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true
						serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
						serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
						tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCaUrl{}

								serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

						}

					}

					if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
							serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					sniChoiceTypeFound := false

					if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
							sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true
						sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

						tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

						sniChoiceInt.Sni = v.(string)

					}

					if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
							sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsChoiceInt.UseTls.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("other_settings"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		otherSettings := &ves_io_schema_views_cdn_loadbalancer.OtherSettings{}
		updateSpec.OtherSettings = otherSettings
		for _, set := range sl {
			otherSettingsMapStrToI := set.(map[string]interface{})

			if w, ok := otherSettingsMapStrToI["add_location"]; ok && !isIntfNil(w) {
				otherSettings.AddLocation = w.(bool)
			}

			if v, ok := otherSettingsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
				otherSettings.GeoFiltering = geoFiltering
				for _, set := range sl {
					geoFilteringMapStrToI := set.(map[string]interface{})

					geoFilteringTypeTypeFound := false

					if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

						geoFilteringTypeTypeFound = true
						geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
						geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
						geoFiltering.GeoFilteringType = geoFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

							}

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

							}

						}

					}

					if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

						geoFilteringTypeTypeFound = true
						geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
						geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
						geoFiltering.GeoFilteringType = geoFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

							}

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

							}

						}

					}

				}

			}

			if v, ok := otherSettingsMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				otherSettings.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := otherSettingsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
				otherSettings.IpFiltering = ipFiltering
				for _, set := range sl {
					ipFilteringMapStrToI := set.(map[string]interface{})

					ipFilteringTypeTypeFound := false

					if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

						ipFilteringTypeTypeFound = true
						ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
						ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
						ipFiltering.IpFilteringType = ipFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.AllowList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

							}

						}

					}

					if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

						ipFilteringTypeTypeFound = true
						ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
						ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
						ipFiltering.IpFilteringType = ipFilteringTypeInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.BlockList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

							}

						}

					}

				}

			}

			if v, ok := otherSettingsMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				otherSettings.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		updateSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
			protectedCookiesMapStrToI := set.(map[string]interface{})

			cookieTamperingTypeFound := false

			if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

				cookieTamperingTypeFound = true

				if v.(bool) {
					cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
					cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
					protectedCookies[i].CookieTampering = cookieTamperingInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

				cookieTamperingTypeFound = true

				if v.(bool) {
					cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
					cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
					protectedCookies[i].CookieTampering = cookieTamperingInt
				}

			}

			httponlyTypeFound := false

			if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

				httponlyTypeFound = true

				if v.(bool) {
					httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
					httponlyInt.AddHttponly = &ves_io_schema.Empty{}
					protectedCookies[i].Httponly = httponlyInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

				httponlyTypeFound = true

				if v.(bool) {
					httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
					httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
					protectedCookies[i].Httponly = httponlyInt
				}

			}

			maxAgeTypeFound := false

			if v, ok := protectedCookiesMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

				maxAgeTypeFound = true

				if v.(bool) {
					maxAgeInt := &ves_io_schema.CookieManipulationOptionType_IgnoreMaxAge{}
					maxAgeInt.IgnoreMaxAge = &ves_io_schema.Empty{}
					protectedCookies[i].MaxAge = maxAgeInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeTypeFound {

				maxAgeTypeFound = true
				maxAgeInt := &ves_io_schema.CookieManipulationOptionType_MaxAgeValue{}

				protectedCookies[i].MaxAge = maxAgeInt

				maxAgeInt.MaxAgeValue = int32(v.(int))

			}

			if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
				protectedCookies[i].Name = w.(string)
			}

			samesiteTypeFound := false

			if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
					samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
					samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
					samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

				samesiteTypeFound = true

				if v.(bool) {
					samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
					samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
					protectedCookies[i].Samesite = samesiteInt
				}

			}

			secureTypeFound := false

			if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

				secureTypeFound = true

				if v.(bool) {
					secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
					secureInt.AddSecure = &ves_io_schema.Empty{}
					protectedCookies[i].Secure = secureInt
				}

			}

			if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

				secureTypeFound = true

				if v.(bool) {
					secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
					secureInt.IgnoreSecure = &ves_io_schema.Empty{}
					protectedCookies[i].Secure = secureInt
				}

			}

		}

	}

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
				rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
				for i, set := range sl {
					apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
					apiEndpointRulesMapStrToI := set.(map[string]interface{})

					if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
						for _, set := range sl {
							apiEndpointMethodMapStrToI := set.(map[string]interface{})

							if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								apiEndpointMethod.InvertMatcher = w.(bool)
							}

							if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								apiEndpointMethod.Methods = methodsList

							}

						}

					}

					if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].ApiEndpointPath = w.(string)
					}

					if w, ok := apiEndpointRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						apiEndpointRules[i].BasePath = w.(string)
					}

					if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						apiEndpointRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							apiEndpointRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

						apiEndpointRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					rateLimiterChoiceTypeFound := false

					if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
						rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
						apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							countByChoiceTypeFound := false

							if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true
								countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
								countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
								rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true

								if v.(bool) {
									countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
									countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
									rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
								}

							}

							if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

							}

							if v, ok := cs["unit"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
						rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
						apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						apiEndpointRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

			ipAllowedListChoiceTypeFound := false

			if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
				ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
						ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
						for i, set := range sl {
							bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
							bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

							if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								bypassRateLimitingRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									clientMatcherMapStrToI := set.(map[string]interface{})

									clientChoiceTypeFound := false

									if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true

										if v.(bool) {
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
											clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
											clientMatcher.ClientChoice = clientChoiceInt
										}

									}

									if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
										clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
										clientMatcher.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												clientChoiceInt.ClientSelector.Expressions = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

										clientChoiceTypeFound = true
										clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
										clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
										clientMatcher.ClientChoice = clientChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

												ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
												for _, j := range v.([]interface{}) {
													ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
												}
												clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

											}

										}

									}

									ipAsnChoiceTypeFound := false

									if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true

										if v.(bool) {
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
											ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt
										}

									}

									if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
										ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

												ls := make([]uint32, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = uint32(v.(int))
												}
												ipAsnChoiceInt.AsnList.AsNumbers = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
										ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
												for i, ps := range sl {

													asMapToStrVal := ps.(map[string]interface{})
													asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

													asnSetsInt[i].Kind = "bgp_asn_set"

													if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Name = v.(string)
													}

													if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Namespace = v.(string)
													}

													if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Tenant = v.(string)
													}

													if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
														asnSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
										ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

												ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

											}

											if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
												for i, ps := range sl {

													psMapToStrVal := ps.(map[string]interface{})
													prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

													prefixSetsInt[i].Kind = "ip_prefix_set"

													if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Name = v.(string)
													}

													if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Namespace = v.(string)
													}

													if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Tenant = v.(string)
													}

													if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
														prefixSetsInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

										ipAsnChoiceTypeFound = true
										ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
										ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
										clientMatcher.IpAsnChoice = ipAsnChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

												ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

											}

											if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

											}

											if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

											}

										}

									}

									if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
										clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
										for _, set := range sl {
											tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

											if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

												classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
												for _, j := range v.([]interface{}) {
													classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
												}
												tlsFingerprintMatcher.Classes = classesList

											}

											if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintMatcher.ExactValues = ls
											}

											if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												tlsFingerprintMatcher.ExcludedValues = ls
											}

										}

									}

								}

							}

							destinationTypeTypeFound := false

							if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true

								if v.(bool) {
									destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
									destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
									bypassRateLimitingRules[i].DestinationType = destinationTypeInt
								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
								destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										destinationTypeInt.ApiEndpoint.Methods = methodsList

									}

									if v, ok := cs["path"]; ok && !isIntfNil(v) {

										destinationTypeInt.ApiEndpoint.Path = v.(string)

									}

								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
								destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										destinationTypeInt.ApiGroups.ApiGroups = ls

									}

								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

								destinationTypeTypeFound = true
								destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

								bypassRateLimitingRules[i].DestinationType = destinationTypeInt

								destinationTypeInt.BasePath = v.(string)

							}

							domainChoiceTypeFound := false

							if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

								bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								bypassRateLimitingRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									requestMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
										requestMatcher.CookieMatchers = cookieMatchers
										for i, set := range sl {
											cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
											cookieMatchersMapStrToI := set.(map[string]interface{})

											if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												cookieMatchers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													cookieMatchers[i].Match = matchInt
												}

											}

											if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												cookieMatchers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

												cookieMatchers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
												cookieMatchers[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
										requestMatcher.Headers = headers
										for i, set := range sl {
											headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
											headersMapStrToI := set.(map[string]interface{})

											if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												headers[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													headers[i].Match = matchInt
												}

											}

											if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												headers[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

												headers[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

											if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
												headers[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
										requestMatcher.JwtClaims = jwtClaims
										for i, set := range sl {
											jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
											jwtClaimsMapStrToI := set.(map[string]interface{})

											if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												jwtClaims[i].InvertMatcher = w.(bool)
											}

											matchTypeFound := false

											if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													jwtClaims[i].Match = matchInt
												}

											}

											if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													jwtClaims[i].Match = matchInt
												}

											}

											if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												jwtClaims[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
												jwtClaims[i].Name = w.(string)
											}

										}

									}

									if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
										requestMatcher.QueryParams = queryParams
										for i, set := range sl {
											queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
											queryParamsMapStrToI := set.(map[string]interface{})

											if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
												queryParams[i].InvertMatcher = w.(bool)
											}

											if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
												queryParams[i].Key = w.(string)
											}

											matchTypeFound := false

											if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
													matchInt.CheckNotPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true

												if v.(bool) {
													matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
													matchInt.CheckPresent = &ves_io_schema.Empty{}
													queryParams[i].Match = matchInt
												}

											}

											if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
												matchInt.Item = &ves_io_schema_policy.MatcherType{}
												queryParams[i].Match = matchInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.ExactValues = ls

													}

													if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														matchInt.Item.RegexValues = ls

													}

													if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

														transformersList := []ves_io_schema_policy.Transformer{}
														for _, j := range v.([]interface{}) {
															transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
														}
														matchInt.Item.Transformers = transformersList

													}

												}

											}

											if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

												matchTypeFound = true
												matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

												queryParams[i].Match = matchInt

												matchInt.Presence = v.(bool)

											}

										}

									}

								}

							}

						}

					}

				}

			}

			if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
				ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
						for i, ps := range sl {

							rlapMapToStrVal := ps.(map[string]interface{})
							rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Name = v.(string)
							}

							if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
							}

							if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
				ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
				rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

					}

					if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

					}

				}

			}

			if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true

				if v.(bool) {
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
					ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
				}

			}

			if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
				rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
				for i, set := range sl {
					serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
					serverUrlRulesMapStrToI := set.(map[string]interface{})

					if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
						serverUrlRules[i].ApiGroup = w.(string)
					}

					if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
						serverUrlRules[i].BasePath = w.(string)
					}

					if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientMatcher := &ves_io_schema_policy.ClientMatcher{}
						serverUrlRules[i].ClientMatcher = clientMatcher
						for _, set := range sl {
							clientMatcherMapStrToI := set.(map[string]interface{})

							clientChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									clientMatcher.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
								clientMatcher.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							ipAsnChoiceTypeFound := false

							if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true

								if v.(bool) {
									ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
									ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
									clientMatcher.IpAsnChoice = ipAsnChoiceInt
								}

							}

							if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
								ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										ipAsnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
								ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
								ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

								ipAsnChoiceTypeFound = true
								ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
								ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								clientMatcher.IpAsnChoice = ipAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

						}

					}

					domainChoiceTypeFound := false

					if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true

						if v.(bool) {
							domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
							domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
							serverUrlRules[i].DomainChoice = domainChoiceInt
						}

					}

					if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

						domainChoiceTypeFound = true
						domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

						serverUrlRules[i].DomainChoice = domainChoiceInt

						domainChoiceInt.SpecificDomain = v.(string)

					}

					rateLimiterChoiceTypeFound := false

					if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
						rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
						serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							countByChoiceTypeFound := false

							if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true
								countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
								countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
								rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										countByChoiceInt.RefUserId.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

								countByChoiceTypeFound = true

								if v.(bool) {
									countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
									countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
									rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
								}

							}

							if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

							}

							if v, ok := cs["unit"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}

					}

					if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

						rateLimiterChoiceTypeFound = true
						rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
						rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
						serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						requestMatcher := &ves_io_schema_policy.RequestMatcher{}
						serverUrlRules[i].RequestMatcher = requestMatcher
						for _, set := range sl {
							requestMatcherMapStrToI := set.(map[string]interface{})

							if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								requestMatcher.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								requestMatcher.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
								requestMatcher.JwtClaims = jwtClaims
								for i, set := range sl {
									jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
									jwtClaimsMapStrToI := set.(map[string]interface{})

									if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										jwtClaims[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											jwtClaims[i].Match = matchInt
										}

									}

									if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										jwtClaims[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
										jwtClaims[i].Name = w.(string)
									}

								}

							}

							if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								requestMatcher.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			updateSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			ipAllowedListChoiceTypeFound := false

			if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
				ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
				rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
						for i, ps := range sl {

							rlapMapToStrVal := ps.(map[string]interface{})
							rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Name = v.(string)
							}

							if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
							}

							if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true
				ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
				ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
				rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

					}

					if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

					}

				}

			}

			if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

				ipAllowedListChoiceTypeFound = true

				if v.(bool) {
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
					ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
				}

			}

			policyChoiceTypeFound := false

			if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

				policyChoiceTypeFound = true

				if v.(bool) {
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
					policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
				}

			}

			if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

				policyChoiceTypeFound = true
				policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
				policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
				rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["policies"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						policyChoiceInt.Policies.Policies = policiesInt
						for i, ps := range sl {

							pMapToStrVal := ps.(map[string]interface{})
							policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
								policiesInt[i].Name = v.(string)
							}

							if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								policiesInt[i].Namespace = v.(string)
							}

							if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								policiesInt[i].Tenant = v.(string)
							}

						}

					}

				}

			}

			if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
				rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
				for _, set := range sl {
					rateLimiterMapStrToI := set.(map[string]interface{})

					if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
						rateLimiter.BurstMultiplier = uint32(w.(int))
					}

					if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
						rateLimiter.TotalNumber = uint32(w.(int))
					}

					if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

						rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

					}

				}

			}

		}

	}

	sensitiveDataPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("default_sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true

		if v.(bool) {
			sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DefaultSensitiveDataPolicy{}
			sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
			updateSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true
		sensitiveDataPolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_SensitiveDataPolicy{}
		sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
		updateSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
				sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

				for _, set := range sl {
					sdprMapToStrVal := set.(map[string]interface{})
					if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Name = val.(string)
					}
					if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Namespace = val.(string)
					}

					if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						sensitiveDataPolicyRefInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		updateSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policies"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
				for i, ps := range sl {

					pMapToStrVal := ps.(map[string]interface{})
					policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
						policiesInt[i].Name = v.(string)
					}

					if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						policiesInt[i].Namespace = v.(string)
					}

					if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						policiesInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

				slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

			}

			requestTimeoutChoiceTypeFound := false

			if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

				requestTimeoutChoiceTypeFound = true

				if v.(bool) {
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
					requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
				}

			}

			if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

				requestTimeoutChoiceTypeFound = true
				requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

				slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

				requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	threatMeshChoiceTypeFound := false

	if v, ok := d.GetOk("disable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableThreatMesh{}
			threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
			updateSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableThreatMesh{}
			threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
			updateSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.TrustedClients = trustedClients
		for i, set := range sl {
			trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
			trustedClientsMapStrToI := set.(map[string]interface{})

			actionChoiceTypeFound := false

			if v, ok := trustedClientsMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_BotSkipProcessing{}
					actionChoiceInt.BotSkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_SkipProcessing{}
					actionChoiceInt.SkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

				actionChoiceTypeFound = true

				if v.(bool) {
					actionChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_WafSkipProcessing{}
					actionChoiceInt.WafSkipProcessing = &ves_io_schema.Empty{}
					trustedClients[i].ActionChoice = actionChoiceInt
				}

			}

			if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

				actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
				for _, j := range v.([]interface{}) {
					actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
				}
				trustedClients[i].Actions = actionsList

			}

			clientSourceChoiceTypeFound := false

			if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.AsNumber = uint32(v.(int))

			}

			if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
				clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
						clientSourceChoiceInt.HttpHeader.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
								headers[i].InvertMatch = w.(bool)
							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

							valueMatchTypeFound := false

							if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Exact = v.(string)

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Presence = v.(bool)

							}

							if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

								valueMatchTypeFound = true
								valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

								headers[i].ValueMatch = valueMatchInt

								valueMatchInt.Regex = v.(string)

							}

						}

					}

				}

			}

			if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.IpPrefix = v.(string)

			}

			if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

				clientSourceChoiceTypeFound = true
				clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

				trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

				clientSourceChoiceInt.UserIdentifier = v.(string)

			}

			if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				trustedClients[i].ExpirationTimestamp = ts
			}

			if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				trustedClients[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

		}

	}

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			updateSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		updateSpec.UserIdChoice = userIdChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				userIdChoiceInt.UserIdentification.Tenant = v.(string)

			}

		}

	}

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		updateSpec.WafChoice = wafChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewall.Tenant = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("app_firewall_on_cache_miss"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_AppFirewallOnCacheMiss{}
		wafChoiceInt.AppFirewallOnCacheMiss = &ves_io_schema_views.ObjectRefType{}
		updateSpec.WafChoice = wafChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["name"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Name = v.(string)

			}

			if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Namespace = v.(string)

			}

			if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

				wafChoiceInt.AppFirewallOnCacheMiss.Tenant = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			updateSpec.WafChoice = wafChoiceInt
		}

	}

	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		updateSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
			wafExclusionRulesMapStrToI := set.(map[string]interface{})

			domainChoiceTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true

				if v.(bool) {
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
					domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
					wafExclusionRules[i].DomainChoice = domainChoiceInt
				}

			}

			if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

				wafExclusionRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.ExactValue = v.(string)

			}

			if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

				domainChoiceTypeFound = true
				domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

				wafExclusionRules[i].DomainChoice = domainChoiceInt

				domainChoiceInt.SuffixValue = v.(string)

			}

			if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
				ts, err := parseTime(w.(string))
				if err != nil {
					return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
				}
				wafExclusionRules[i].ExpirationTimestamp = ts
			}

			if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				wafExclusionRules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

				methodsList := []ves_io_schema.HttpMethod{}
				for _, j := range v.([]interface{}) {
					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
				}
				wafExclusionRules[i].Methods = methodsList

			}

			pathChoiceTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true

				if v.(bool) {
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
					pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
					wafExclusionRules[i].PathChoice = pathChoiceInt
				}

			}

			if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true
				pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

				wafExclusionRules[i].PathChoice = pathChoiceInt

				pathChoiceInt.PathPrefix = v.(string)

			}

			if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

				pathChoiceTypeFound = true
				pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

				wafExclusionRules[i].PathChoice = pathChoiceInt

				pathChoiceInt.PathRegex = v.(string)

			}

			wafAdvancedConfigurationTypeFound := false

			if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

				wafAdvancedConfigurationTypeFound = true
				wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
				wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
				wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
						for i, set := range sl {
							excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
							excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeAttackTypeContexts[i].ContextName = w.(string)
							}

							if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

								excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

							}

						}

					}

					if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
						for i, set := range sl {
							excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
							excludeBotNameContextsMapStrToI := set.(map[string]interface{})

							if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
								excludeBotNameContexts[i].BotName = w.(string)
							}

						}

					}

					if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
						for i, set := range sl {
							excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
							excludeSignatureContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeSignatureContexts[i].ContextName = w.(string)
							}

							if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
								excludeSignatureContexts[i].SignatureId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
						wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
						for i, set := range sl {
							excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
							excludeViolationContextsMapStrToI := set.(map[string]interface{})

							if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

								excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

							}

							if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
								excludeViolationContexts[i].ContextName = w.(string)
							}

							if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

								excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

				wafAdvancedConfigurationTypeFound = true

				if v.(bool) {
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
					wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra CdnLoadbalancer obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CdnLoadbalancer: %s", err)
	}

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CdnLoadbalancer obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_dns_domain "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraDnsDomain is implementation of Volterra's DnsDomain resources
func resourceVolterraDnsDomain() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraDnsDomainCreate,
		Read:   resourceVolterraDnsDomainRead,
		Update: resourceVolterraDnsDomainUpdate,
		Delete: resourceVolterraDnsDomainDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"dnssec_mode": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"route53": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"creds": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"verification_only": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"volterra_managed": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraDnsDomainCreate creates DnsDomain resource
func resourceVolterraDnsDomainCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_dns_domain.CreateSpecType{}
	createReq := &ves_io_schema_dns_domain.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//dnssec_mode
	if v, ok := d.GetOk("dnssec_mode"); ok && !isIntfNil(v) {

		createSpec.DnssecMode = ves_io_schema_dns_domain.DNSSECMode(ves_io_schema_dns_domain.DNSSECMode_value[v.(string)])

	}

	//domain_choice

	domainChoiceTypeFound := false

	if v, ok := d.GetOk("route53"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true
		domainChoiceInt := &ves_io_schema_dns_domain.CreateSpecType_Route53{}
		domainChoiceInt.Route53 = &ves_io_schema_dns_domain.AWSRoute53Type{}
		createSpec.DomainChoice = domainChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["creds"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				credsInt := &ves_io_schema_views.ObjectRefType{}
				domainChoiceInt.Route53.Creds = credsInt

				for _, set := range sl {
					cMapToStrVal := set.(map[string]interface{})
					if val, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
						credsInt.Name = val.(string)
					}
					if val, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						credsInt.Namespace = val.(string)
					}

					if val, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						credsInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	if v, ok := d.GetOk("verification_only"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true

		if v.(bool) {
			domainChoiceInt := &ves_io_schema_dns_domain.CreateSpecType_VerificationOnly{}
			domainChoiceInt.VerificationOnly = &ves_io_schema.Empty{}
			createSpec.DomainChoice = domainChoiceInt
		}

	}

	if v, ok := d.GetOk("volterra_managed"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true

		if v.(bool) {
			domainChoiceInt := &ves_io_schema_dns_domain.CreateSpecType_VolterraManaged{}
			domainChoiceInt.VolterraManaged = &ves_io_schema.Empty{}
			createSpec.DomainChoice = domainChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra DnsDomain object with struct: %+v", createReq)

	createDnsDomainResp, err := client.CreateObject(context.Background(), ves_io_schema_dns_domain.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating DnsDomain: %s", err)
	}
	d.SetId(createDnsDomainResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraDnsDomainRead(d, meta)
}

func resourceVolterraDnsDomainRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_dns_domain.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DnsDomain %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DnsDomain %q: %s", d.Id(), err)
	}
	return setDnsDomainFields(client, d, resp)
}

func setDnsDomainFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraDnsDomainUpdate updates DnsDomain resource
func resourceVolterraDnsDomainUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_dns_domain.ReplaceSpecType{}
	updateReq := &ves_io_schema_dns_domain.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("dnssec_mode"); ok && !isIntfNil(v) {

		updateSpec.DnssecMode = ves_io_schema_dns_domain.DNSSECMode(ves_io_schema_dns_domain.DNSSECMode_value[v.(string)])

	}

	domainChoiceTypeFound := false

	if v, ok := d.GetOk("route53"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true
		domainChoiceInt := &ves_io_schema_dns_domain.ReplaceSpecType_Route53{}
		domainChoiceInt.Route53 = &ves_io_schema_dns_domain.AWSRoute53Type{}
		updateSpec.DomainChoice = domainChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["creds"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				credsInt := &ves_io_schema_views.ObjectRefType{}
				domainChoiceInt.Route53.Creds = credsInt

				for _, set := range sl {
					cMapToStrVal := set.(map[string]interface{})
					if val, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
						credsInt.Name = val.(string)
					}
					if val, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						credsInt.Namespace = val.(string)
					}

					if val, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						credsInt.Tenant = val.(string)
					}
				}

			}

		}

	}

	if v, ok := d.GetOk("verification_only"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true

		if v.(bool) {
			domainChoiceInt := &ves_io_schema_dns_domain.ReplaceSpecType_VerificationOnly{}
			domainChoiceInt.VerificationOnly = &ves_io_schema.Empty{}
			updateSpec.DomainChoice = domainChoiceInt
		}

	}

	if v, ok := d.GetOk("volterra_managed"); ok && !domainChoiceTypeFound {

		domainChoiceTypeFound = true

		if v.(bool) {
			domainChoiceInt := &ves_io_schema_dns_domain.ReplaceSpecType_VolterraManaged{}
			domainChoiceInt.VolterraManaged = &ves_io_schema.Empty{}
			updateSpec.DomainChoice = domainChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra DnsDomain obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_dns_domain.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating DnsDomain: %s", err)
	}

	return resourceVolterraDnsDomainRead(d, meta)
}

func resourceVolterraDnsDomainDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_dns_domain.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DnsDomain %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DnsDomain before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra DnsDomain obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_dns_domain.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_setting "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting"
)

// resourceVolterraAppSetting is implementation of Volterra's AppSetting resources
func resourceVolterraAppSetting() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraAppSettingCreate,
		Read:   resourceVolterraAppSettingRead,
		Update: resourceVolterraAppSettingUpdate,
		Delete: resourceVolterraAppSettingDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"anomaly_types": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"app_type_refs": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"app_type_settings": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"app_type_ref": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"business_logic_markup_setting": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"timeseries_analyses_setting": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"metric_selectors": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"metric": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"metrics_source": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"user_behavior_analysis_setting": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_learning": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_learning": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_detection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_detection": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cooling_off_period": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"exclude_failed_login_activity": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"include_failed_login_activity": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"login_failures_threshold": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"exclude_forbidden_activity": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"include_forbidden_activity": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"forbidden_requests_threshold": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"exclude_waf_activity": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"include_waf_activity": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraAppSettingCreate creates AppSetting resource
func resourceVolterraAppSettingCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_app_setting.CreateSpecType{}
	createReq := &ves_io_schema_app_setting.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//anomaly_types
	if v, ok := d.GetOk("anomaly_types"); ok && !isIntfNil(v) {

		anomaly_typesList := []ves_io_schema_app_setting.AnomalyType{}
		for _, j := range v.([]interface{}) {
			anomaly_typesList = append(anomaly_typesList, ves_io_schema_app_setting.AnomalyType(ves_io_schema_app_setting.AnomalyType_value[j.(string)]))
		}
		createSpec.AnomalyTypes = anomaly_typesList

	}

	//app_type_refs
	if v, ok := d.GetOk("app_type_refs"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTypeRefsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.AppTypeRefs = appTypeRefsInt
		for i, ps := range sl {

			atrMapToStrVal := ps.(map[string]interface{})
			appTypeRefsInt[i] = &ves_io_schema.ObjectRefType{}

			appTypeRefsInt[i].Kind = "app_type"

			if v, ok := atrMapToStrVal["name"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Name = v.(string)
			}

			if v, ok := atrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Namespace = v.(string)
			}

			if v, ok := atrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Tenant = v.(string)
			}

			if v, ok := atrMapToStrVal["uid"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Uid = v.(string)
			}

		}

	}

	//app_type_settings
	if v, ok := d.GetOk("app_type_settings"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTypeSettings := make([]*ves_io_schema_app_setting.AppTypeSettings, len(sl))
		createSpec.AppTypeSettings = appTypeSettings
		for i, set := range sl {
			appTypeSettings[i] = &ves_io_schema_app_setting.AppTypeSettings{}
			appTypeSettingsMapStrToI := set.(map[string]interface{})

			if v, ok := appTypeSettingsMapStrToI["app_type_ref"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				appTypeRefInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				appTypeSettings[i].AppTypeRef = appTypeRefInt
				for i, ps := range sl {

					atrMapToStrVal := ps.(map[string]interface{})
					appTypeRefInt[i] = &ves_io_schema.ObjectRefType{}

					appTypeRefInt[i].Kind = "app_type"

					if v, ok := atrMapToStrVal["name"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Name = v.(string)
					}

					if v, ok := atrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Namespace = v.(string)
					}

					if v, ok := atrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Tenant = v.(string)
					}

					if v, ok := atrMapToStrVal["uid"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Uid = v.(string)
					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["business_logic_markup_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				businessLogicMarkupSetting := &ves_io_schema_app_setting.BusinessLogicMarkupSetting{}
				appTypeSettings[i].BusinessLogicMarkupSetting = businessLogicMarkupSetting
				for _, set := range sl {
					businessLogicMarkupSettingMapStrToI := set.(map[string]interface{})

					learnFromNamespaceTypeFound := false

					if v, ok := businessLogicMarkupSettingMapStrToI["disable"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.BusinessLogicMarkupSetting_Disable{}
							learnFromNamespaceInt.Disable = &ves_io_schema.Empty{}
							businessLogicMarkupSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					if v, ok := businessLogicMarkupSettingMapStrToI["enable"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.BusinessLogicMarkupSetting_Enable{}
							learnFromNamespaceInt.Enable = &ves_io_schema.Empty{}
							businessLogicMarkupSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["timeseries_analyses_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				timeseriesAnalysesSetting := &ves_io_schema_app_setting.TimeseriesAnalysesSetting{}
				appTypeSettings[i].TimeseriesAnalysesSetting = timeseriesAnalysesSetting
				for _, set := range sl {
					timeseriesAnalysesSettingMapStrToI := set.(map[string]interface{})

					if v, ok := timeseriesAnalysesSettingMapStrToI["metric_selectors"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						metricSelectors := make([]*ves_io_schema_app_setting.MetricSelector, len(sl))
						timeseriesAnalysesSetting.MetricSelectors = metricSelectors
						for i, set := range sl {
							metricSelectors[i] = &ves_io_schema_app_setting.MetricSelector{}
							metricSelectorsMapStrToI := set.(map[string]interface{})

							if v, ok := metricSelectorsMapStrToI["metric"]; ok && !isIntfNil(v) {

								metricList := []ves_io_schema_app_setting.Metric{}
								for _, j := range v.([]interface{}) {
									metricList = append(metricList, ves_io_schema_app_setting.Metric(ves_io_schema_app_setting.Metric_value[j.(string)]))
								}
								metricSelectors[i].Metric = metricList

							}

							if v, ok := metricSelectorsMapStrToI["metrics_source"]; ok && !isIntfNil(v) {

								metricSelectors[i].MetricsSource = ves_io_schema_app_setting.MetricsSource(ves_io_schema_app_setting.MetricsSource_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["user_behavior_analysis_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				userBehaviorAnalysisSetting := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting{}
				appTypeSettings[i].UserBehaviorAnalysisSetting = userBehaviorAnalysisSetting
				for _, set := range sl {
					userBehaviorAnalysisSettingMapStrToI := set.(map[string]interface{})

					learnFromNamespaceTypeFound := false

					if v, ok := userBehaviorAnalysisSettingMapStrToI["disable_learning"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_DisableLearning{}
							learnFromNamespaceInt.DisableLearning = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					if v, ok := userBehaviorAnalysisSettingMapStrToI["enable_learning"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_EnableLearning{}
							learnFromNamespaceInt.EnableLearning = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					maliciousUserDetectionTypeFound := false

					if v, ok := userBehaviorAnalysisSettingMapStrToI["disable_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionTypeFound {

						maliciousUserDetectionTypeFound = true

						if v.(bool) {
							maliciousUserDetectionInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_DisableDetection{}
							maliciousUserDetectionInt.DisableDetection = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.MaliciousUserDetection = maliciousUserDetectionInt
						}

					}

					if v, ok := userBehaviorAnalysisSettingMapStrToI["enable_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionTypeFound {

						maliciousUserDetectionTypeFound = true
						maliciousUserDetectionInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_EnableDetection{}
						maliciousUserDetectionInt.EnableDetection = &ves_io_schema_app_setting.MaliciousUserDetectionSetting{}
						userBehaviorAnalysisSetting.MaliciousUserDetection = maliciousUserDetectionInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							coolingOffPeriodSettingTypeFound := false

							if v, ok := cs["cooling_off_period"]; ok && !isIntfNil(v) && !coolingOffPeriodSettingTypeFound {

								coolingOffPeriodSettingTypeFound = true
								coolingOffPeriodSettingInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_CoolingOffPeriod{}

								maliciousUserDetectionInt.EnableDetection.CoolingOffPeriodSetting = coolingOffPeriodSettingInt

								coolingOffPeriodSettingInt.CoolingOffPeriod = uint32(v.(int))

							}

							failedLoginActivityChoiceTypeFound := false

							if v, ok := cs["exclude_failed_login_activity"]; ok && !isIntfNil(v) && !failedLoginActivityChoiceTypeFound {

								failedLoginActivityChoiceTypeFound = true

								if v.(bool) {
									failedLoginActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeFailedLoginActivity{}
									failedLoginActivityChoiceInt.ExcludeFailedLoginActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.FailedLoginActivityChoice = failedLoginActivityChoiceInt
								}

							}

							if v, ok := cs["include_failed_login_activity"]; ok && !isIntfNil(v) && !failedLoginActivityChoiceTypeFound {

								failedLoginActivityChoiceTypeFound = true
								failedLoginActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeFailedLoginActivity{}
								failedLoginActivityChoiceInt.IncludeFailedLoginActivity = &ves_io_schema_app_setting.FailedLoginActivitySetting{}
								maliciousUserDetectionInt.EnableDetection.FailedLoginActivityChoice = failedLoginActivityChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["login_failures_threshold"]; ok && !isIntfNil(v) {

										failedLoginActivityChoiceInt.IncludeFailedLoginActivity.LoginFailuresThreshold = uint32(v.(int))

									}

								}

							}

							forbiddenActivityChoiceTypeFound := false

							if v, ok := cs["exclude_forbidden_activity"]; ok && !isIntfNil(v) && !forbiddenActivityChoiceTypeFound {

								forbiddenActivityChoiceTypeFound = true

								if v.(bool) {
									forbiddenActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeForbiddenActivity{}
									forbiddenActivityChoiceInt.ExcludeForbiddenActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.ForbiddenActivityChoice = forbiddenActivityChoiceInt
								}

							}

							if v, ok := cs["include_forbidden_activity"]; ok && !isIntfNil(v) && !forbiddenActivityChoiceTypeFound {

								forbiddenActivityChoiceTypeFound = true
								forbiddenActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeForbiddenActivity{}
								forbiddenActivityChoiceInt.IncludeForbiddenActivity = &ves_io_schema_app_setting.ForbiddenActivitySetting{}
								maliciousUserDetectionInt.EnableDetection.ForbiddenActivityChoice = forbiddenActivityChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["forbidden_requests_threshold"]; ok && !isIntfNil(v) {

										forbiddenActivityChoiceInt.IncludeForbiddenActivity.ForbiddenRequestsThreshold = uint32(v.(int))

									}

								}

							}

							wafActivityChoiceTypeFound := false

							if v, ok := cs["exclude_waf_activity"]; ok && !isIntfNil(v) && !wafActivityChoiceTypeFound {

								wafActivityChoiceTypeFound = true

								if v.(bool) {
									wafActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeWafActivity{}
									wafActivityChoiceInt.ExcludeWafActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.WafActivityChoice = wafActivityChoiceInt
								}

							}

							if v, ok := cs["include_waf_activity"]; ok && !isIntfNil(v) && !wafActivityChoiceTypeFound {

								wafActivityChoiceTypeFound = true

								if v.(bool) {
									wafActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeWafActivity{}
									wafActivityChoiceInt.IncludeWafActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.WafActivityChoice = wafActivityChoiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra AppSetting object with struct: %+v", createReq)

	createAppSettingResp, err := client.CreateObject(context.Background(), ves_io_schema_app_setting.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating AppSetting: %s", err)
	}
	d.SetId(createAppSettingResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraAppSettingRead(d, meta)
}

func resourceVolterraAppSettingRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_app_setting.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppSetting %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppSetting %q: %s", d.Id(), err)
	}
	return setAppSettingFields(client, d, resp)
}

func setAppSettingFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraAppSettingUpdate updates AppSetting resource
func resourceVolterraAppSettingUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_app_setting.ReplaceSpecType{}
	updateReq := &ves_io_schema_app_setting.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("anomaly_types"); ok && !isIntfNil(v) {

		anomaly_typesList := []ves_io_schema_app_setting.AnomalyType{}
		for _, j := range v.([]interface{}) {
			anomaly_typesList = append(anomaly_typesList, ves_io_schema_app_setting.AnomalyType(ves_io_schema_app_setting.AnomalyType_value[j.(string)]))
		}
		updateSpec.AnomalyTypes = anomaly_typesList

	}

	if v, ok := d.GetOk("app_type_refs"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTypeRefsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.AppTypeRefs = appTypeRefsInt
		for i, ps := range sl {

			atrMapToStrVal := ps.(map[string]interface{})
			appTypeRefsInt[i] = &ves_io_schema.ObjectRefType{}

			appTypeRefsInt[i].Kind = "app_type"

			if v, ok := atrMapToStrVal["name"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Name = v.(string)
			}

			if v, ok := atrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Namespace = v.(string)
			}

			if v, ok := atrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Tenant = v.(string)
			}

			if v, ok := atrMapToStrVal["uid"]; ok && !isIntfNil(v) {
				appTypeRefsInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("app_type_settings"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTypeSettings := make([]*ves_io_schema_app_setting.AppTypeSettings, len(sl))
		updateSpec.AppTypeSettings = appTypeSettings
		for i, set := range sl {
			appTypeSettings[i] = &ves_io_schema_app_setting.AppTypeSettings{}
			appTypeSettingsMapStrToI := set.(map[string]interface{})

			if v, ok := appTypeSettingsMapStrToI["app_type_ref"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				appTypeRefInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				appTypeSettings[i].AppTypeRef = appTypeRefInt
				for i, ps := range sl {

					atrMapToStrVal := ps.(map[string]interface{})
					appTypeRefInt[i] = &ves_io_schema.ObjectRefType{}

					appTypeRefInt[i].Kind = "app_type"

					if v, ok := atrMapToStrVal["name"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Name = v.(string)
					}

					if v, ok := atrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Namespace = v.(string)
					}

					if v, ok := atrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Tenant = v.(string)
					}

					if v, ok := atrMapToStrVal["uid"]; ok && !isIntfNil(v) {
						appTypeRefInt[i].Uid = v.(string)
					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["business_logic_markup_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				businessLogicMarkupSetting := &ves_io_schema_app_setting.BusinessLogicMarkupSetting{}
				appTypeSettings[i].BusinessLogicMarkupSetting = businessLogicMarkupSetting
				for _, set := range sl {
					businessLogicMarkupSettingMapStrToI := set.(map[string]interface{})

					learnFromNamespaceTypeFound := false

					if v, ok := businessLogicMarkupSettingMapStrToI["disable"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.BusinessLogicMarkupSetting_Disable{}
							learnFromNamespaceInt.Disable = &ves_io_schema.Empty{}
							businessLogicMarkupSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					if v, ok := businessLogicMarkupSettingMapStrToI["enable"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.BusinessLogicMarkupSetting_Enable{}
							learnFromNamespaceInt.Enable = &ves_io_schema.Empty{}
							businessLogicMarkupSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["timeseries_analyses_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				timeseriesAnalysesSetting := &ves_io_schema_app_setting.TimeseriesAnalysesSetting{}
				appTypeSettings[i].TimeseriesAnalysesSetting = timeseriesAnalysesSetting
				for _, set := range sl {
					timeseriesAnalysesSettingMapStrToI := set.(map[string]interface{})

					if v, ok := timeseriesAnalysesSettingMapStrToI["metric_selectors"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						metricSelectors := make([]*ves_io_schema_app_setting.MetricSelector, len(sl))
						timeseriesAnalysesSetting.MetricSelectors = metricSelectors
						for i, set := range sl {
							metricSelectors[i] = &ves_io_schema_app_setting.MetricSelector{}
							metricSelectorsMapStrToI := set.(map[string]interface{})

							if v, ok := metricSelectorsMapStrToI["metric"]; ok && !isIntfNil(v) {

								metricList := []ves_io_schema_app_setting.Metric{}
								for _, j := range v.([]interface{}) {
									metricList = append(metricList, ves_io_schema_app_setting.Metric(ves_io_schema_app_setting.Metric_value[j.(string)]))
								}
								metricSelectors[i].Metric = metricList

							}

							if v, ok := metricSelectorsMapStrToI["metrics_source"]; ok && !isIntfNil(v) {

								metricSelectors[i].MetricsSource = ves_io_schema_app_setting.MetricsSource(ves_io_schema_app_setting.MetricsSource_value[v.(string)])

							}

						}

					}

				}

			}

			if v, ok := appTypeSettingsMapStrToI["user_behavior_analysis_setting"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				userBehaviorAnalysisSetting := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting{}
				appTypeSettings[i].UserBehaviorAnalysisSetting = userBehaviorAnalysisSetting
				for _, set := range sl {
					userBehaviorAnalysisSettingMapStrToI := set.(map[string]interface{})

					learnFromNamespaceTypeFound := false

					if v, ok := userBehaviorAnalysisSettingMapStrToI["disable_learning"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_DisableLearning{}
							learnFromNamespaceInt.DisableLearning = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					if v, ok := userBehaviorAnalysisSettingMapStrToI["enable_learning"]; ok && !isIntfNil(v) && !learnFromNamespaceTypeFound {

						learnFromNamespaceTypeFound = true

						if v.(bool) {
							learnFromNamespaceInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_EnableLearning{}
							learnFromNamespaceInt.EnableLearning = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.LearnFromNamespace = learnFromNamespaceInt
						}

					}

					maliciousUserDetectionTypeFound := false

					if v, ok := userBehaviorAnalysisSettingMapStrToI["disable_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionTypeFound {

						maliciousUserDetectionTypeFound = true

						if v.(bool) {
							maliciousUserDetectionInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_DisableDetection{}
							maliciousUserDetectionInt.DisableDetection = &ves_io_schema.Empty{}
							userBehaviorAnalysisSetting.MaliciousUserDetection = maliciousUserDetectionInt
						}

					}

					if v, ok := userBehaviorAnalysisSettingMapStrToI["enable_detection"]; ok && !isIntfNil(v) && !maliciousUserDetectionTypeFound {

						maliciousUserDetectionTypeFound = true
						maliciousUserDetectionInt := &ves_io_schema_app_setting.UserBehaviorAnalysisSetting_EnableDetection{}
						maliciousUserDetectionInt.EnableDetection = &ves_io_schema_app_setting.MaliciousUserDetectionSetting{}
						userBehaviorAnalysisSetting.MaliciousUserDetection = maliciousUserDetectionInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							coolingOffPeriodSettingTypeFound := false

							if v, ok := cs["cooling_off_period"]; ok && !isIntfNil(v) && !coolingOffPeriodSettingTypeFound {

								coolingOffPeriodSettingTypeFound = true
								coolingOffPeriodSettingInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_CoolingOffPeriod{}

								maliciousUserDetectionInt.EnableDetection.CoolingOffPeriodSetting = coolingOffPeriodSettingInt

								coolingOffPeriodSettingInt.CoolingOffPeriod = uint32(v.(int))

							}

							failedLoginActivityChoiceTypeFound := false

							if v, ok := cs["exclude_failed_login_activity"]; ok && !isIntfNil(v) && !failedLoginActivityChoiceTypeFound {

								failedLoginActivityChoiceTypeFound = true

								if v.(bool) {
									failedLoginActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeFailedLoginActivity{}
									failedLoginActivityChoiceInt.ExcludeFailedLoginActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.FailedLoginActivityChoice = failedLoginActivityChoiceInt
								}

							}

							if v, ok := cs["include_failed_login_activity"]; ok && !isIntfNil(v) && !failedLoginActivityChoiceTypeFound {

								failedLoginActivityChoiceTypeFound = true
								failedLoginActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeFailedLoginActivity{}
								failedLoginActivityChoiceInt.IncludeFailedLoginActivity = &ves_io_schema_app_setting.FailedLoginActivitySetting{}
								maliciousUserDetectionInt.EnableDetection.FailedLoginActivityChoice = failedLoginActivityChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["login_failures_threshold"]; ok && !isIntfNil(v) {

										failedLoginActivityChoiceInt.IncludeFailedLoginActivity.LoginFailuresThreshold = uint32(v.(int))

									}

								}

							}

							forbiddenActivityChoiceTypeFound := false

							if v, ok := cs["exclude_forbidden_activity"]; ok && !isIntfNil(v) && !forbiddenActivityChoiceTypeFound {

								forbiddenActivityChoiceTypeFound = true

								if v.(bool) {
									forbiddenActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeForbiddenActivity{}
									forbiddenActivityChoiceInt.ExcludeForbiddenActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.ForbiddenActivityChoice = forbiddenActivityChoiceInt
								}

							}

							if v, ok := cs["include_forbidden_activity"]; ok && !isIntfNil(v) && !forbiddenActivityChoiceTypeFound {

								forbiddenActivityChoiceTypeFound = true
								forbiddenActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeForbiddenActivity{}
								forbiddenActivityChoiceInt.IncludeForbiddenActivity = &ves_io_schema_app_setting.ForbiddenActivitySetting{}
								maliciousUserDetectionInt.EnableDetection.ForbiddenActivityChoice = forbiddenActivityChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["forbidden_requests_threshold"]; ok && !isIntfNil(v) {

										forbiddenActivityChoiceInt.IncludeForbiddenActivity.ForbiddenRequestsThreshold = uint32(v.(int))

									}

								}

							}

							wafActivityChoiceTypeFound := false

							if v, ok := cs["exclude_waf_activity"]; ok && !isIntfNil(v) && !wafActivityChoiceTypeFound {

								wafActivityChoiceTypeFound = true

								if v.(bool) {
									wafActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_ExcludeWafActivity{}
									wafActivityChoiceInt.ExcludeWafActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.WafActivityChoice = wafActivityChoiceInt
								}

							}

							if v, ok := cs["include_waf_activity"]; ok && !isIntfNil(v) && !wafActivityChoiceTypeFound {

								wafActivityChoiceTypeFound = true

								if v.(bool) {
									wafActivityChoiceInt := &ves_io_schema_app_setting.MaliciousUserDetectionSetting_IncludeWafActivity{}
									wafActivityChoiceInt.IncludeWafActivity = &ves_io_schema.Empty{}
									maliciousUserDetectionInt.EnableDetection.WafActivityChoice = wafActivityChoiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra AppSetting obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_app_setting.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating AppSetting: %s", err)
	}

	return resourceVolterraAppSettingRead(d, meta)
}

func resourceVolterraAppSettingDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_app_setting.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppSetting %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppSetting before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra AppSetting obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_app_setting.ObjectType, namespace, name)
}

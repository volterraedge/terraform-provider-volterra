//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_views_uztna_domain_view "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/views/uztna_domain_view"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraUztnaDomainView is implementation of Volterra's UztnaDomainView resources
func resourceVolterraUztnaDomainView() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaDomainViewCreate,
		Read:   resourceVolterraUztnaDomainViewRead,
		Update: resourceVolterraUztnaDomainViewUpdate,
		Delete: resourceVolterraUztnaDomainViewDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"access_url": {
				Type:     schema.TypeString,
				Required: true,
			},

			"app_vip_pool": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4_app_vip_pool": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"cert": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"certificate": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"gateways": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"perimeter_re": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"all_cloud": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"private_gateway": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"uztna_gateway": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"lease_pool": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4_leasepool": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy_name": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaDomainViewCreate creates UztnaDomainView resource
func resourceVolterraUztnaDomainViewCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_views_uztna_domain_view.CreateSpecType{}
	createReq := &ves_io_schema_uztna_views_uztna_domain_view.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//access_url
	if v, ok := d.GetOk("access_url"); ok && !isIntfNil(v) {

		createSpec.AccessUrl =
			v.(string)

	}

	//app_vip_pool
	if v, ok := d.GetOk("app_vip_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appVipPool := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewAppVIPPool{}
		createSpec.AppVipPool = appVipPool
		for _, set := range sl {
			if set != nil {
				appVipPoolMapStrToI := set.(map[string]interface{})

				ipaddressTypeTypeFound := false

				if v, ok := appVipPoolMapStrToI["ipv4_app_vip_pool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewAppVIPPool_Ipv4AppVipPool{}
					ipaddressTypeInt.Ipv4AppVipPool = &ves_io_schema_views.ObjectRefType{}
					appVipPool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4AppVipPool.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4AppVipPool.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4AppVipPool.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	//cert
	if v, ok := d.GetOk("cert"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cert := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewCertificate{}
		createSpec.Cert = cert
		for _, set := range sl {
			if set != nil {
				certMapStrToI := set.(map[string]interface{})

				if v, ok := certMapStrToI["certificate"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					certificateInt := &ves_io_schema_views.ObjectRefType{}
					cert.Certificate = certificateInt

					for _, set := range sl {
						if set != nil {
							cMapToStrVal := set.(map[string]interface{})
							if val, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
								certificateInt.Name = val.(string)
							}
							if val, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								certificateInt.Namespace = val.(string)
							}

							if val, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								certificateInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	//gateways
	if v, ok := d.GetOk("gateways"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		gateways := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewGateways{}
		createSpec.Gateways = gateways
		for _, set := range sl {
			if set != nil {
				gatewaysMapStrToI := set.(map[string]interface{})

				if v, ok := gatewaysMapStrToI["perimeter_re"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					perimeterRe := &ves_io_schema_uztna_views_uztna_domain_view.DVCloudGatewayAdvertisement{}
					gateways.PerimeterRe = perimeterRe
					for _, set := range sl {
						if set != nil {
							perimeterReMapStrToI := set.(map[string]interface{})

							cloudGatewayChoiceTypeFound := false

							if v, ok := perimeterReMapStrToI["all_cloud"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true

								if v.(bool) {
									cloudGatewayChoiceInt := &ves_io_schema_uztna_views_uztna_domain_view.DVCloudGatewayAdvertisement_AllCloud{}
									cloudGatewayChoiceInt.AllCloud = &ves_io_schema.Empty{}
									perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt
								}

							}

						}
					}

				}

				if v, ok := gatewaysMapStrToI["private_gateway"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					privateGateway := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewPrivateGateways{}
					gateways.PrivateGateway = privateGateway
					for _, set := range sl {
						if set != nil {
							privateGatewayMapStrToI := set.(map[string]interface{})

							if v, ok := privateGatewayMapStrToI["uztna_gateway"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								uztnaGatewayInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								privateGateway.UztnaGateway = uztnaGatewayInt
								for i, ps := range sl {

									ugMapToStrVal := ps.(map[string]interface{})
									uztnaGatewayInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := ugMapToStrVal["name"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Name = v.(string)
									}

									if v, ok := ugMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Namespace = v.(string)
									}

									if v, ok := ugMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	//lease_pool
	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewLeasePoolList{}
		createSpec.LeasePool = leasePool
		for _, set := range sl {
			if set != nil {
				leasePoolMapStrToI := set.(map[string]interface{})

				ipaddressTypeTypeFound := false

				if v, ok := leasePoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewLeasePoolList_Ipv4Leasepool{}
					ipaddressTypeInt.Ipv4Leasepool = &ves_io_schema_views.ObjectRefType{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	//policy
	if v, ok := d.GetOk("policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policy := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewPolicy{}
		createSpec.Policy = policy
		for _, set := range sl {
			if set != nil {
				policyMapStrToI := set.(map[string]interface{})

				if v, ok := policyMapStrToI["policy_name"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policyNameInt := &ves_io_schema_views.ObjectRefType{}
					policy.PolicyName = policyNameInt

					for _, set := range sl {
						if set != nil {
							pnMapToStrVal := set.(map[string]interface{})
							if val, ok := pnMapToStrVal["name"]; ok && !isIntfNil(v) {
								policyNameInt.Name = val.(string)
							}
							if val, ok := pnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								policyNameInt.Namespace = val.(string)
							}

							if val, ok := pnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								policyNameInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaDomainView object with struct: %+v", createReq)

	createUztnaDomainViewResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_views_uztna_domain_view.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaDomainView: %s", err)
	}
	d.SetId(createUztnaDomainViewResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaDomainViewRead(d, meta)
}

func resourceVolterraUztnaDomainViewRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_views_uztna_domain_view.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaDomainView %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaDomainView %q: %s", d.Id(), err)
	}
	return setUztnaDomainViewFields(client, d, resp)
}

func setUztnaDomainViewFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaDomainViewUpdate updates UztnaDomainView resource
func resourceVolterraUztnaDomainViewUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_views_uztna_domain_view.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_views_uztna_domain_view.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("access_url"); ok && !isIntfNil(v) {

		updateSpec.AccessUrl =
			v.(string)

	}

	if v, ok := d.GetOk("cert"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cert := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewCertificate{}
		updateSpec.Cert = cert
		for _, set := range sl {
			if set != nil {
				certMapStrToI := set.(map[string]interface{})

				if v, ok := certMapStrToI["certificate"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					certificateInt := &ves_io_schema_views.ObjectRefType{}
					cert.Certificate = certificateInt

					for _, set := range sl {
						if set != nil {
							cMapToStrVal := set.(map[string]interface{})
							if val, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
								certificateInt.Name = val.(string)
							}
							if val, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								certificateInt.Namespace = val.(string)
							}

							if val, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								certificateInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("gateways"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		gateways := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewGateways{}
		updateSpec.Gateways = gateways
		for _, set := range sl {
			if set != nil {
				gatewaysMapStrToI := set.(map[string]interface{})

				if v, ok := gatewaysMapStrToI["perimeter_re"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					perimeterRe := &ves_io_schema_uztna_views_uztna_domain_view.DVCloudGatewayAdvertisement{}
					gateways.PerimeterRe = perimeterRe
					for _, set := range sl {
						if set != nil {
							perimeterReMapStrToI := set.(map[string]interface{})

							cloudGatewayChoiceTypeFound := false

							if v, ok := perimeterReMapStrToI["all_cloud"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true

								if v.(bool) {
									cloudGatewayChoiceInt := &ves_io_schema_uztna_views_uztna_domain_view.DVCloudGatewayAdvertisement_AllCloud{}
									cloudGatewayChoiceInt.AllCloud = &ves_io_schema.Empty{}
									perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt
								}

							}

						}
					}

				}

				if v, ok := gatewaysMapStrToI["private_gateway"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					privateGateway := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewPrivateGateways{}
					gateways.PrivateGateway = privateGateway
					for _, set := range sl {
						if set != nil {
							privateGatewayMapStrToI := set.(map[string]interface{})

							if v, ok := privateGatewayMapStrToI["uztna_gateway"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								uztnaGatewayInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								privateGateway.UztnaGateway = uztnaGatewayInt
								for i, ps := range sl {

									ugMapToStrVal := ps.(map[string]interface{})
									uztnaGatewayInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := ugMapToStrVal["name"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Name = v.(string)
									}

									if v, ok := ugMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Namespace = v.(string)
									}

									if v, ok := ugMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										uztnaGatewayInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewLeasePoolList{}
		updateSpec.LeasePool = leasePool
		for _, set := range sl {
			if set != nil {
				leasePoolMapStrToI := set.(map[string]interface{})

				ipaddressTypeTypeFound := false

				if v, ok := leasePoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewLeasePoolList_Ipv4Leasepool{}
					ipaddressTypeInt.Ipv4Leasepool = &ves_io_schema_views.ObjectRefType{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								ipaddressTypeInt.Ipv4Leasepool.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policy := &ves_io_schema_uztna_views_uztna_domain_view.DomainViewPolicy{}
		updateSpec.Policy = policy
		for _, set := range sl {
			if set != nil {
				policyMapStrToI := set.(map[string]interface{})

				if v, ok := policyMapStrToI["policy_name"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policyNameInt := &ves_io_schema_views.ObjectRefType{}
					policy.PolicyName = policyNameInt

					for _, set := range sl {
						if set != nil {
							pnMapToStrVal := set.(map[string]interface{})
							if val, ok := pnMapToStrVal["name"]; ok && !isIntfNil(v) {
								policyNameInt.Name = val.(string)
							}
							if val, ok := pnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								policyNameInt.Namespace = val.(string)
							}

							if val, ok := pnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								policyNameInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaDomainView obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_views_uztna_domain_view.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaDomainView: %s", err)
	}

	return resourceVolterraUztnaDomainViewRead(d, meta)
}

func resourceVolterraUztnaDomainViewDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_views_uztna_domain_view.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaDomainView %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaDomainView before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaDomainView obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_views_uztna_domain_view.ObjectType, namespace, name, opts...)
}

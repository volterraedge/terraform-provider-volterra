//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_views_uztna_application_view "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/views/uztna_application_view"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraUztnaApplicationView is implementation of Volterra's UztnaApplicationView resources
func resourceVolterraUztnaApplicationView() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaApplicationViewCreate,
		Read:   resourceVolterraUztnaApplicationViewRead,
		Update: resourceVolterraUztnaApplicationViewUpdate,
		Delete: resourceVolterraUztnaApplicationViewDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"app_tags": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"app_tags": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"fqdn": {
				Type:     schema.TypeString,
				Required: true,
			},

			"location": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"origin": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"origin_pool": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"snat_pool": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"port": {
				Type:     schema.TypeInt,
				Required: true,
			},

			"protocol": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"tcp": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaApplicationViewCreate creates UztnaApplicationView resource
func resourceVolterraUztnaApplicationViewCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_views_uztna_application_view.CreateSpecType{}
	createReq := &ves_io_schema_uztna_views_uztna_application_view.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//app_tags
	if v, ok := d.GetOk("app_tags"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTags := &ves_io_schema_uztna_views_uztna_application_view.ApplicationTags{}
		createSpec.AppTags = appTags
		for _, set := range sl {
			if set != nil {
				appTagsMapStrToI := set.(map[string]interface{})

				if v, ok := appTagsMapStrToI["app_tags"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appTagsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					appTags.AppTags = appTagsInt
					for i, ps := range sl {

						atMapToStrVal := ps.(map[string]interface{})
						appTagsInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := atMapToStrVal["name"]; ok && !isIntfNil(v) {
							appTagsInt[i].Name = v.(string)
						}

						if v, ok := atMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appTagsInt[i].Namespace = v.(string)
						}

						if v, ok := atMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appTagsInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	//fqdn
	if v, ok := d.GetOk("fqdn"); ok && !isIntfNil(v) {

		createSpec.Fqdn =
			v.(string)

	}

	//location
	if v, ok := d.GetOk("location"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		locationInt := &ves_io_schema_views.ObjectRefType{}
		createSpec.Location = locationInt

		for _, set := range sl {
			if set != nil {
				lMapToStrVal := set.(map[string]interface{})
				if val, ok := lMapToStrVal["name"]; ok && !isIntfNil(v) {
					locationInt.Name = val.(string)
				}
				if val, ok := lMapToStrVal["namespace"]; ok && !isIntfNil(v) {
					locationInt.Namespace = val.(string)
				}

				if val, ok := lMapToStrVal["tenant"]; ok && !isIntfNil(v) {
					locationInt.Tenant = val.(string)
				}
			}
		}

	}

	//origin
	if v, ok := d.GetOk("origin"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		origin := &ves_io_schema_uztna_views_uztna_application_view.Origin{}
		createSpec.Origin = origin
		for _, set := range sl {
			if set != nil {
				originMapStrToI := set.(map[string]interface{})

				if v, ok := originMapStrToI["origin_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originPoolInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					origin.OriginPool = originPoolInt
					for i, ps := range sl {

						opMapToStrVal := ps.(map[string]interface{})
						originPoolInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := opMapToStrVal["name"]; ok && !isIntfNil(v) {
							originPoolInt[i].Name = v.(string)
						}

						if v, ok := opMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							originPoolInt[i].Namespace = v.(string)
						}

						if v, ok := opMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							originPoolInt[i].Tenant = v.(string)
						}

					}

				}

				if v, ok := originMapStrToI["snat_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					snatPoolInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					origin.SnatPool = snatPoolInt
					for i, ps := range sl {

						spMapToStrVal := ps.(map[string]interface{})
						snatPoolInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := spMapToStrVal["name"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Name = v.(string)
						}

						if v, ok := spMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Namespace = v.(string)
						}

						if v, ok := spMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	//port
	if v, ok := d.GetOk("port"); ok && !isIntfNil(v) {

		createSpec.Port =
			uint32(v.(int))

	}

	//protocol
	if v, ok := d.GetOk("protocol"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protocol := &ves_io_schema_uztna_views_uztna_application_view.Protocol{}
		createSpec.Protocol = protocol
		for _, set := range sl {
			if set != nil {
				protocolMapStrToI := set.(map[string]interface{})

				protocolChoiceTypeFound := false

				if v, ok := protocolMapStrToI["tcp"]; ok && !isIntfNil(v) && !protocolChoiceTypeFound {

					protocolChoiceTypeFound = true

					if v.(bool) {
						protocolChoiceInt := &ves_io_schema_uztna_views_uztna_application_view.Protocol_TCP{}
						protocolChoiceInt.TCP = &ves_io_schema.Empty{}
						protocol.ProtocolChoice = protocolChoiceInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaApplicationView object with struct: %+v", createReq)

	createUztnaApplicationViewResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_views_uztna_application_view.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaApplicationView: %s", err)
	}
	d.SetId(createUztnaApplicationViewResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaApplicationViewRead(d, meta)
}

func resourceVolterraUztnaApplicationViewRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_views_uztna_application_view.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaApplicationView %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaApplicationView %q: %s", d.Id(), err)
	}
	return setUztnaApplicationViewFields(client, d, resp)
}

func setUztnaApplicationViewFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaApplicationViewUpdate updates UztnaApplicationView resource
func resourceVolterraUztnaApplicationViewUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_views_uztna_application_view.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_views_uztna_application_view.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("app_tags"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTags := &ves_io_schema_uztna_views_uztna_application_view.ApplicationTags{}
		updateSpec.AppTags = appTags
		for _, set := range sl {
			if set != nil {
				appTagsMapStrToI := set.(map[string]interface{})

				if v, ok := appTagsMapStrToI["app_tags"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appTagsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					appTags.AppTags = appTagsInt
					for i, ps := range sl {

						atMapToStrVal := ps.(map[string]interface{})
						appTagsInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := atMapToStrVal["name"]; ok && !isIntfNil(v) {
							appTagsInt[i].Name = v.(string)
						}

						if v, ok := atMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appTagsInt[i].Namespace = v.(string)
						}

						if v, ok := atMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appTagsInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("fqdn"); ok && !isIntfNil(v) {

		updateSpec.Fqdn =
			v.(string)

	}

	if v, ok := d.GetOk("location"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		locationInt := &ves_io_schema_views.ObjectRefType{}
		updateSpec.Location = locationInt

		for _, set := range sl {
			if set != nil {
				lMapToStrVal := set.(map[string]interface{})
				if val, ok := lMapToStrVal["name"]; ok && !isIntfNil(v) {
					locationInt.Name = val.(string)
				}
				if val, ok := lMapToStrVal["namespace"]; ok && !isIntfNil(v) {
					locationInt.Namespace = val.(string)
				}

				if val, ok := lMapToStrVal["tenant"]; ok && !isIntfNil(v) {
					locationInt.Tenant = val.(string)
				}
			}
		}

	}

	if v, ok := d.GetOk("origin"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		origin := &ves_io_schema_uztna_views_uztna_application_view.Origin{}
		updateSpec.Origin = origin
		for _, set := range sl {
			if set != nil {
				originMapStrToI := set.(map[string]interface{})

				if v, ok := originMapStrToI["origin_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originPoolInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					origin.OriginPool = originPoolInt
					for i, ps := range sl {

						opMapToStrVal := ps.(map[string]interface{})
						originPoolInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := opMapToStrVal["name"]; ok && !isIntfNil(v) {
							originPoolInt[i].Name = v.(string)
						}

						if v, ok := opMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							originPoolInt[i].Namespace = v.(string)
						}

						if v, ok := opMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							originPoolInt[i].Tenant = v.(string)
						}

					}

				}

				if v, ok := originMapStrToI["snat_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					snatPoolInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					origin.SnatPool = snatPoolInt
					for i, ps := range sl {

						spMapToStrVal := ps.(map[string]interface{})
						snatPoolInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := spMapToStrVal["name"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Name = v.(string)
						}

						if v, ok := spMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Namespace = v.(string)
						}

						if v, ok := spMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							snatPoolInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("port"); ok && !isIntfNil(v) {

		updateSpec.Port =
			uint32(v.(int))

	}

	if v, ok := d.GetOk("protocol"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protocol := &ves_io_schema_uztna_views_uztna_application_view.Protocol{}
		updateSpec.Protocol = protocol
		for _, set := range sl {
			if set != nil {
				protocolMapStrToI := set.(map[string]interface{})

				protocolChoiceTypeFound := false

				if v, ok := protocolMapStrToI["tcp"]; ok && !isIntfNil(v) && !protocolChoiceTypeFound {

					protocolChoiceTypeFound = true

					if v.(bool) {
						protocolChoiceInt := &ves_io_schema_uztna_views_uztna_application_view.Protocol_TCP{}
						protocolChoiceInt.TCP = &ves_io_schema.Empty{}
						protocol.ProtocolChoice = protocolChoiceInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaApplicationView obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_views_uztna_application_view.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaApplicationView: %s", err)
	}

	return resourceVolterraUztnaApplicationViewRead(d, meta)
}

func resourceVolterraUztnaApplicationViewDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_views_uztna_application_view.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaApplicationView %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaApplicationView before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaApplicationView obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_views_uztna_application_view.ObjectType, namespace, name, opts...)
}

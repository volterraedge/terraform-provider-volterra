//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	ves_io_schema_views_common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	ves_io_schema_views_http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	drift "github.com/volterraedge/terraform-provider-volterra/volterra/drift_detection"
	statemigration "github.com/volterraedge/terraform-provider-volterra/volterra/state_migration"
)

// resourceVolterraHttpLoadbalancer is implementation of Volterra's HttpLoadbalancer resources
func resourceVolterraHttpLoadbalancer() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraHttpLoadbalancerCreate,
		Read:   resourceVolterraHttpLoadbalancerRead,
		Update: resourceVolterraHttpLoadbalancerUpdate,
		Delete: resourceVolterraHttpLoadbalancerDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"cname": {
				Type:     schema.TypeString,
				Computed: true,
			},

			"add_location": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"advertise_custom": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"advertise_where": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"advertise_on_public": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"public_ip": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"site": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"network": {
													Type:     schema.TypeString,
													Required: true,
												},

												"site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"site_segment": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_network": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"default_v6_vip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_v6_vip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"default_vip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_vip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"virtual_network": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_site": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"network": {
													Type:     schema.TypeString,
													Required: true,
												},

												"virtual_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_site_segment": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"virtual_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_site_with_vip": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"network": {
													Type:     schema.TypeString,
													Required: true,
												},

												"virtual_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"vk8s_service": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"virtual_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"port": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"port_ranges": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"use_default_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"advertise_on_public": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"public_ip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"advertise_on_public_default_vip": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"do_not_advertise": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"api_specification": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_definition": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"validation_all_spec_endpoints": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"fall_through_mode_custom": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"action_report": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"action_skip": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"api_endpoint": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"base_path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"metadata": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"settings": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"oversized_body_fail_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"oversized_body_skip_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"property_validation_settings_custom": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"query_parameters": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"disallow_additional_parameters": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"validation_mode": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"response_validation_mode_active": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_properties": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enforcement_report": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"skip_response_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"skip_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"validation_mode_active": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"request_validation_properties": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"enforcement_block": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enforcement_report": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"validation_custom_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"fall_through_mode": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fall_through_mode_allow": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"fall_through_mode_custom": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"open_api_validation_rules": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"action_block": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"action_report": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"action_skip": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"api_endpoint": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"methods": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"path": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"api_group": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"base_path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"metadata": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"description": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"open_api_validation_rules": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_endpoint": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"api_group": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"base_path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"any_domain": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_domain": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"validation_mode": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"response_validation_mode_active": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"response_validation_properties": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"enforcement_report": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"skip_response_validation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"skip_validation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"validation_mode_active": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"request_validation_properties": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"enforcement_block": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"enforcement_report": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"settings": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"oversized_body_fail_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"oversized_body_skip_validation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"property_validation_settings_custom": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"query_parameters": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"allow_additional_parameters": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"disallow_additional_parameters": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"property_validation_settings_default": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"validation_disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"disable_api_definition": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_api_discovery": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_api_discovery": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_crawler": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_crawler_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"domains": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"domain": {
																Type:     schema.TypeString,
																Required: true,
															},

															"simple_login": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"password": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"blindfold_secret_info": {

																						Type:     schema.TypeList,
																						MaxItems: 1,
																						Optional: true,
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"decryption_provider": {
																									Type:     schema.TypeString,
																									Optional: true,
																								},

																								"location": {
																									Type:     schema.TypeString,
																									Required: true,
																								},

																								"store_provider": {
																									Type:     schema.TypeString,
																									Optional: true,
																								},
																							},
																						},
																					},

																					"clear_secret_info": {

																						Type:     schema.TypeList,
																						MaxItems: 1,
																						Optional: true,
																						Elem: &schema.Resource{
																							Schema: map[string]*schema.Schema{

																								"provider": {
																									Type:     schema.TypeString,
																									Optional: true,
																								},

																								"url": {
																									Type:     schema.TypeString,
																									Required: true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},

																		"user": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"disable_api_crawler": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"api_discovery_from_code_scan": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"code_base_integrations": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"all_repos": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"selected_repos": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_code_repo": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"code_base_integration": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"custom_api_auth_discovery": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_discovery_ref": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"default_api_auth_discovery": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"discovered_api_settings": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"purge_duration_for_inactive_discovered_apis": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"disable_learn_from_redirect_traffic": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_learn_from_redirect_traffic": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"api_protection_rules": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_endpoint_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"deny": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"api_endpoint_method": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"api_groups_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"deny": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"api_group": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"base_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"api_testing": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_header_value": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"domains": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"allow_destructive_methods": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"credentials": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"credential_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"api_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"basic_auth": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"password": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"user": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"bearer_token": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"token": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"login_endpoint": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"json_payload": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"method": {
																Type:     schema.TypeString,
																Required: true,
															},

															"path": {
																Type:     schema.TypeString,
																Required: true,
															},

															"token_response_key": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"admin": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"standard": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"domain": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"every_day": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"every_month": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"every_week": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"disable_api_testing": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"blocked_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv6_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"bot_defense": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_js_insert": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"js_insert_all_pages": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"javascript_location": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"js_insert_all_pages_except": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"javascript_location": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"js_insertion_rules": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"rules": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"javascript_location": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"javascript_mode": {
										Type:     schema.TypeString,
										Required: true,
									},

									"js_download_path": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable_mobile_sdk": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mobile_sdk_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile_identifier": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"protected_app_endpoints": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"mobile": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"web": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"web_mobile": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"mobile_identifier": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"any_domain": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"domain": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_value": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"regex_value": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"suffix_value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"flow_label": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"account_management": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"password_reset": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"authentication": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"login": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{},
																			},
																		},

																		"login_mfa": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"login_partner": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"logout": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"token_refresh": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"financial_services": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"apply": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"money_transfer": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"flight": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"checkin": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"profile_management": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"create": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"update": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"view": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"search": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"flight_search": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"product_search": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"reservation_search": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"room_search": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"shopping_gift_cards": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"gift_card_make_purchase_with_gift_card": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"gift_card_validation": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_add_to_cart": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_checkout": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_choose_seat": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_enter_drawing_submission": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_make_payment": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_order": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_price_inquiry": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_promo_code_validation": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_purchase_gift_card": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"shop_update_quantity": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"undefined_flow_label": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"allow_good_bots": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"mitigate_good_bots": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"http_methods": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"mitigation": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"block": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"body": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"status": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"flag": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"append_headers": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"auto_type_header_name": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"inference_header_name": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"no_headers": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},

															"redirect": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"uri": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"path": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"path": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"prefix": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"regex": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"protocol": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"regional_endpoint": {
							Type:     schema.TypeString,
							Required: true,
						},

						"timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"disable_bot_defense": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"captcha_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"enable_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"js_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"no_challenge": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"policy_based_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_captcha_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_js_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"rule_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"spec": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"arg_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"any_asn": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"body_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_captcha_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_javascript_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_selector": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"domain_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"expiration_timestamp": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"http_method": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"methods": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"suffix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"client_side_defense": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_js_insert": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"js_insert_all_pages": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"js_insert_all_pages_except": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"js_insertion_rules": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exclude_list": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"rules": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"domain": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"suffix_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"metadata": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"description": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"path": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"disable_client_side_defense": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"cors_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_credentials": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"allow_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_methods": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_origin": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allow_origin_regex": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"expose_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"maximum_age": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"csrf_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"all_load_balancer_domains": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"custom_domain_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"domains": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"data_guard_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"apply_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"skip_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"path": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"prefix": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"regex": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"ddos_mitigation_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"block": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ddos_client_source": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_numbers": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeInt,
													},
												},
											},
										},
									},

									"country_list": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"ja4_tls_fingerprint_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"tls_fingerprint_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"classes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"excluded_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"invert_match": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"ip_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"default_route_pools": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"endpoint_subsets": {
							Type:     schema.TypeMap,
							Optional: true,
						},

						"cluster": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"pool": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"priority": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"weight": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"domains": {

				Type: schema.TypeList,

				Required: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"graphql_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"exact_path": {
							Type:     schema.TypeString,
							Required: true,
						},

						"graphql_settings": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_batched_queries": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_depth": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_total_length": {
										Type:     schema.TypeInt,
										Required: true,
									},
								},
							},
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"method_get": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"method_post": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"cookie_stickiness": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"path": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"ignore_samesite": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_lax": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_strict": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ttl": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"least_active": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"random": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"ring_hash": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"hash_policy": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"add_httponly": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"ignore_httponly": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"path": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"ignore_samesite": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"samesite_lax": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"samesite_none": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"samesite_strict": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"add_secure": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"ignore_secure": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"ttl": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"header_name": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"source_ip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"terminal": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"round_robin": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"source_ip_stickiness": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_ip_reputation": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_ip_reputation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ip_threat_categories": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"jwt_validation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"action": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"block": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"report": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"jwks_config": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cleartext": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"mandatory_claims": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"claim_names": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"reserved_claims": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"audience": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"audiences": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"audience_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"issuer": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"issuer_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_enable": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"target": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"all_endpoint": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"api_groups": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_groups": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"base_paths": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"base_paths": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"token_location": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bearer_token": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"l7_ddos_protection": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ddos_policy_custom": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"ddos_policy_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"mitigation_block": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"mitigation_js_challenge": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"http": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"dns_volterra_managed": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"port_ranges": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"https": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"coalescing_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"default_coalescing": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"strict_coalescing": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"connection_idle_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"default_loadbalancer": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"non_default_loadbalancer": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_protocol_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"http_protocol_enable_v1_only": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_transformation": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"default_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"legacy_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"preserve_case_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"proper_case_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"http_protocol_enable_v1_v2": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"http_protocol_enable_v2_only": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"disable_path_normalize": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_path_normalize": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"port_ranges": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"append_server_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"default_header": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"pass_through": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"tls_cert_params": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"tls_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"https_auto_cert": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"coalescing_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"default_coalescing": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"strict_coalescing": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"connection_idle_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"default_loadbalancer": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"non_default_loadbalancer": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_protocol_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"http_protocol_enable_v1_only": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_transformation": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"default_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"legacy_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"preserve_case_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"proper_case_header_transformation": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"http_protocol_enable_v1_v2": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"http_protocol_enable_v2_only": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_mtls": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"use_mtls": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"client_certificate_optional": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"crl": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"no_crl": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"trusted_ca": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"trusted_ca_url": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"xfcc_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"xfcc_options": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"xfcc_header_elements": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"disable_path_normalize": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_path_normalize": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"port_ranges": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"append_server_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"default_header": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"pass_through": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"tls_config": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"custom_security": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cipher_suites": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"max_version": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"min_version": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"default_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"low_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"medium_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"disable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_malware_protection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"malware_protection_settings": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"malware_protection_rules": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"block": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"report": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"domain": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"any_domain": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"domain": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_value": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"regex_value": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"suffix_value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"http_methods": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"path": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"prefix": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"more_option": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"buffer_policy": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disabled": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_request_bytes": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"compression_params": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"content_length": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"content_type": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"disable_on_etag_header": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"remove_accept_encoding_header": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"custom_errors": {
							Type:     schema.TypeMap,
							Optional: true,
						},

						"disable_default_error_pages": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"idle_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"max_request_header_size": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"request_cookies_to_add": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"overwrite": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"secret_value": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"request_cookies_to_remove": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"request_headers_to_add": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"append": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"secret_value": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"request_headers_to_remove": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"response_cookies_to_add": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"add_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"ignore_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"add_expiry": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"ignore_expiry": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"add_httponly": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_httponly": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_max_age": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_age_value": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"overwrite": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"add_partitioned": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_partitioned": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"add_path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"ignore_path": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_samesite": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"samesite_lax": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"samesite_none": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"samesite_strict": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"add_secure": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_secure": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ignore_value": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"secret_value": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"response_cookies_to_remove": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"response_headers_to_add": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"append": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"secret_value": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"response_headers_to_remove": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"origin_server_subset_rule_list": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"origin_server_subset_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"any_asn": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"asn_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_numbers": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeInt,
													},
												},
											},
										},
									},

									"asn_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"asn_sets": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"country_codes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"any_ip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"ip_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"prefix_sets": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"ip_prefix_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"ip_prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"ipv6_prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"origin_server_subsets_action": {
										Type:     schema.TypeMap,
										Required: true,
									},

									"re_name_list": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"client_selector": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"expressions": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"none": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"protected_cookies": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"ignore_samesite": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_lax": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_strict": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"api_rate_limit": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_endpoint_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_endpoint_method": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"bypass_rate_limiting_rules": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bypass_rate_limiting_rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_selector": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"ip_threat_category_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ip_threat_categories": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"any_url": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"api_endpoint": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"api_groups": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_groups": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"base_path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"any_domain": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_domain": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"request_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"jwt_claims": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"custom_ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_url_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_group": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"base_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"disable_rate_limit": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"rate_limit": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_policies": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"policies": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"policies": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"rate_limiter": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action_block": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"hours": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"minutes": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"seconds": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"burst_multiplier": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"period_multiplier": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"total_number": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"unit": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"routes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_route_object": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"route_ref": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"direct_response_route": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"http_method": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"incoming_port": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_port_match": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"path": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"prefix": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"route_direct_response": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"response_body": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"response_code": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"redirect_route": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"http_method": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"incoming_port": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_port_match": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"path": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"prefix": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"route_redirect": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"host_redirect": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"proto_redirect": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"remove_all_params": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"replace_params": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"retain_all_params": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"path_redirect": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"prefix_rewrite": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"response_code": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"simple_route": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"advanced_options": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bot_defense_javascript_injection": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"javascript_location": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"javascript_tags": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"javascript_url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"tag_attributes": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"javascript_tag": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"tag_value": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"inherited_bot_defense_javascript_injection": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"buffer_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"disabled": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"max_request_bytes": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"common_buffering": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"do_not_retract_cluster": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"retract_cluster": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"cors_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"allow_credentials": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"allow_headers": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"allow_methods": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"allow_origin": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"allow_origin_regex": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"disabled": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"expose_headers": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"maximum_age": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"csrf_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"all_load_balancer_domains": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"custom_domain_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"domains": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disabled": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"disable_location_add": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"endpoint_subsets": {
													Type:     schema.TypeMap,
													Optional: true,
												},

												"common_hash_policy": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_hash_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_policy": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cookie": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"add_httponly": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"ignore_httponly": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"path": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"ignore_samesite": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"samesite_lax": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"samesite_none": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"samesite_strict": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"add_secure": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"ignore_secure": {

																						Type:     schema.TypeBool,
																						Optional: true,
																					},

																					"ttl": {
																						Type:     schema.TypeInt,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"header_name": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"source_ip": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"terminal": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"disable_mirroring": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"mirror_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"origin_pool": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"percent": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"denominator": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"numerator": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"priority": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"request_cookies_to_add": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"overwrite": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"secret_value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"request_cookies_to_remove": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"request_headers_to_add": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"append": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"secret_value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"request_headers_to_remove": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"response_cookies_to_add": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"add_domain": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"ignore_domain": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"add_expiry": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"ignore_expiry": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"add_httponly": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_httponly": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_max_age": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"max_age_value": {

																Type:     schema.TypeInt,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"overwrite": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"add_partitioned": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_partitioned": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"add_path": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"ignore_path": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_samesite": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"samesite_lax": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"samesite_none": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"samesite_strict": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"add_secure": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_secure": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ignore_value": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"secret_value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"response_cookies_to_remove": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"response_headers_to_add": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"append": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"secret_value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"value": {

																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"response_headers_to_remove": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"default_retry_policy": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"no_retry_policy": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"retry_policy": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"back_off": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"base_interval": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"max_interval": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"num_retries": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"per_try_timeout": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"retriable_status_codes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},

															"retry_condition": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_prefix_rewrite": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"prefix_rewrite": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"regex_rewrite": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"pattern": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"substitution": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"disable_spdy": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable_spdy": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"timeout": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"app_firewall": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"disable_waf": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"inherited_waf": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"disable_web_socket_config": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"web_socket_config": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"use_websocket": {
																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"headers": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"auto_host_rewrite": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_host_rewrite": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"host_rewrite": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"http_method": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"incoming_port": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_port_match": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"origin_pools": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"endpoint_subsets": {
													Type:     schema.TypeMap,
													Optional: true,
												},

												"cluster": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"pool": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"priority": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"weight": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"path": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"prefix": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"query_params": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"remove_all_params": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"replace_params": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"retain_all_params": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"sensitive_data_disclosure_rules": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"sensitive_data_types_in_response": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"body": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"fields": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"path": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"default_sensitive_data_policy": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"sensitive_data_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"sensitive_data_policy_ref": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"active_service_policies": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policies": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"no_service_policies": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"service_policies_from_namespace": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"slow_ddos_mitigation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"request_headers_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"disable_request_timeout": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"request_timeout": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"system_default_timeouts": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_threat_mesh": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_threat_mesh": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_trust_client_ip_headers": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_trust_client_ip_headers": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"client_ip_headers": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"trusted_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv6_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"user_id_client_ip": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"user_identification": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"app_firewall": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"disable_waf": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"waf_exclusion_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"methods": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"any_path": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"path_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"path_regex": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"app_firewall_detection_control": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exclude_attack_type_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_attack_type": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_bot_name_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bot_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_signature_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"signature_id": {
													Type:     schema.TypeInt,
													Required: true,
												},
											},
										},
									},

									"exclude_violation_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_violation": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"waf_skip_processing": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
		SchemaVersion: 2,
		StateUpgraders: []schema.StateUpgrader{
			{
				Type:    statemigration.ResourceHttpLoadbalancerInstanceResourceV1().CoreConfigSchema().ImpliedType(),
				Upgrade: statemigration.ResourceHttpLoadbalancerInstanceStateUpgradeV1,
				Version: 1,
			},
		},
	}
}

// resourceVolterraHttpLoadbalancerCreate creates HttpLoadbalancer resource
func resourceVolterraHttpLoadbalancerCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_http_loadbalancer.CreateSpecType{}
	createReq := &ves_io_schema_views_http_loadbalancer.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//add_location
	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		createSpec.AddLocation =
			v.(bool)

	}

	//advertise_choice

	advertiseChoiceTypeFound := false

	if v, ok := d.GetOk("advertise_custom"); ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_AdvertiseCustom{}
		advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
		createSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
					advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
					for i, set := range sl {
						if set != nil {
							advertiseWhere[i] = &ves_io_schema_views.WhereType{}
							advertiseWhereMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := advertiseWhereMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_AdvertiseOnPublic{}
								choiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											publicIp := &ves_io_schema_views.ObjectRefType{}
											choiceInt.AdvertiseOnPublic.PublicIp = publicIp
											for _, set := range sl {
												if set != nil {
													publicIpMapStrToI := set.(map[string]interface{})

													if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
														publicIp.Name = w.(string)
													}

													if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
														publicIp.Namespace = w.(string)
													}

													if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
														publicIp.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_Site{}
								choiceInt.Site = &ves_io_schema_views.WhereSite{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.Site.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.Site.Ipv6 = v.(string)

										}

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

										}

										if v, ok := cs["site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											site := &ves_io_schema_views.ObjectRefType{}
											choiceInt.Site.Site = site
											for _, set := range sl {
												if set != nil {
													siteMapStrToI := set.(map[string]interface{})

													if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
														site.Name = w.(string)
													}

													if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														site.Namespace = w.(string)
													}

													if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														site.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
								choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.SiteSegment.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.SiteSegment.Ipv6 = v.(string)

										}

										if v, ok := cs["segment"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											segment := &ves_io_schema_views.ObjectRefType{}
											choiceInt.SiteSegment.Segment = segment
											for _, set := range sl {
												if set != nil {
													segmentMapStrToI := set.(map[string]interface{})

													if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
														segment.Name = w.(string)
													}

													if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
														segment.Namespace = w.(string)
													}

													if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
														segment.Tenant = w.(string)
													}

												}
											}

										}

										if v, ok := cs["site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											site := &ves_io_schema_views.ObjectRefType{}
											choiceInt.SiteSegment.Site = site
											for _, set := range sl {
												if set != nil {
													siteMapStrToI := set.(map[string]interface{})

													if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
														site.Name = w.(string)
													}

													if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														site.Namespace = w.(string)
													}

													if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														site.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
								choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										v6VipChoiceTypeFound := false

										if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

											v6VipChoiceTypeFound = true

											if v.(bool) {
												v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
												v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
												choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
											}

										}

										if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

											v6VipChoiceTypeFound = true
											v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

											choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

											v6VipChoiceInt.SpecificV6Vip = v.(string)

										}

										vipChoiceTypeFound := false

										if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

											vipChoiceTypeFound = true

											if v.(bool) {
												vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
												vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
												choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
											}

										}

										if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

											vipChoiceTypeFound = true
											vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

											choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

											vipChoiceInt.SpecificVip = v.(string)

										}

										if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualNetwork := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
											for _, set := range sl {
												if set != nil {
													virtualNetworkMapStrToI := set.(map[string]interface{})

													if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualNetwork.Name = w.(string)
													}

													if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualNetwork.Namespace = w.(string)
													}

													if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualNetwork.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
								choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSite.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSiteSegment{}
								choiceInt.VirtualSiteSegment = &ves_io_schema_views.WhereVirtualSiteSegment{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteSegment.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteSegment.Ipv6 = v.(string)

										}

										if v, ok := cs["segment"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											segment := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteSegment.Segment = segment
											for _, set := range sl {
												if set != nil {
													segmentMapStrToI := set.(map[string]interface{})

													if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
														segment.Name = w.(string)
													}

													if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
														segment.Namespace = w.(string)
													}

													if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
														segment.Tenant = w.(string)
													}

												}
											}

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteSegment.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site_with_vip"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSiteWithVip{}
								choiceInt.VirtualSiteWithVip = &ves_io_schema_views.WhereVirtualSiteSpecifiedVIP{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Ipv6 = v.(string)

										}

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Network = ves_io_schema_views.SiteNetworkSpecifiedVIP(ves_io_schema_views.SiteNetworkSpecifiedVIP_value[v.(string)])

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteWithVip.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
								choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
											choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
											choiceInt.Vk8SService.Choice = choiceIntNew

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
											choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
											choiceInt.Vk8SService.Choice = choiceIntNew

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Tenant = v.(string)

													}

												}
											}

										}

									}
								}

							}

							portChoiceTypeFound := false

							if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_views.WhereType_Port{}

								advertiseWhere[i].PortChoice = portChoiceInt

								portChoiceInt.Port = uint32(v.(int))

							}

							if v, ok := advertiseWhereMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_views.WhereType_PortRanges{}

								advertiseWhere[i].PortChoice = portChoiceInt

								portChoiceInt.PortRanges = v.(string)

							}

							if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
									portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
									advertiseWhere[i].PortChoice = portChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("advertise_on_public"); ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_AdvertiseOnPublic{}
		advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
		createSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publicIp := &ves_io_schema_views.ObjectRefType{}
					advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
					for _, set := range sl {
						if set != nil {
							publicIpMapStrToI := set.(map[string]interface{})

							if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
								publicIp.Name = w.(string)
							}

							if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
								publicIp.Namespace = w.(string)
							}

							if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
								publicIp.Tenant = w.(string)
							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("advertise_on_public_default_vip"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{}
			advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
			createSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	if v, ok := d.GetOk("do_not_advertise"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DoNotAdvertise{}
			advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
			createSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	//api_definition_choice

	apiDefinitionChoiceTypeFound := false

	if v, ok := d.GetOk("api_specification"); ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ApiSpecification{}
		apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		createSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
					apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

					for _, set := range sl {
						if set != nil {
							adMapToStrVal := set.(map[string]interface{})
							if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Name = val.(string)
							}
							if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Namespace = val.(string)
							}

							if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Tenant = val.(string)
							}
						}
					}

				}

				validationTargetChoiceTypeFound := false

				if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
					validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
								for _, set := range sl {
									if set != nil {
										fallThroughModeMapStrToI := set.(map[string]interface{})

										fallThroughModeChoiceTypeFound := false

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true

											if v.(bool) {
												fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
												fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
												fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
											}

										}

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true
											fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
											fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
											fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
														fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
														for i, set := range sl {
															if set != nil {
																openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																openApiValidationRulesMapStrToI := set.(map[string]interface{})

																actionChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																		actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																		actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																		actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																conditionTypeChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																	conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field methods")
																					}
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.ApiGroup = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.BasePath = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	metadata := &ves_io_schema.MessageMetaType{}
																	openApiValidationRules[i].Metadata = metadata
																	for _, set := range sl {
																		if set != nil {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["settings"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
								for _, set := range sl {
									if set != nil {
										settingsMapStrToI := set.(map[string]interface{})

										oversizedBodyChoiceTypeFound := false

										if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
												oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
												oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										propertyValidationSettingsChoiceTypeFound := false

										if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true
											propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
											propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
											settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
														for _, set := range sl {
															if set != nil {
																queryParametersMapStrToI := set.(map[string]interface{})

																additionalParametersChoiceTypeFound := false

																if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																		additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

																if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																		additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true

											if v.(bool) {
												propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
												propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
												settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
											}

										}

									}
								}

							}

							if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
								for _, set := range sl {
									if set != nil {
										validationModeMapStrToI := set.(map[string]interface{})

										responseValidationModeChoiceTypeFound := false

										if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

											responseValidationModeChoiceTypeFound = true
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
											responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

														response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field response_validation_properties")
															}
															response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
														}
														responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

													}

													validationEnforcementTypeTypeFound := false

													if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
															validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
															responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

													if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
															validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
															responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

												}
											}

										}

										if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

											responseValidationModeChoiceTypeFound = true

											if v.(bool) {
												responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
												responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
												validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
											}

										}

										validationModeChoiceTypeFound := false

										if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

											validationModeChoiceTypeFound = true

											if v.(bool) {
												validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
												validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
												validationMode.ValidationModeChoice = validationModeChoiceInt
											}

										}

										if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

											validationModeChoiceTypeFound = true
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
											validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
											validationMode.ValidationModeChoice = validationModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

														request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field request_validation_properties")
															}
															request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
														}
														validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

													}

													validationEnforcementTypeTypeFound := false

													if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
															validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
															validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

													if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
															validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
															validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
					validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
								validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
								for _, set := range sl {
									if set != nil {
										fallThroughModeMapStrToI := set.(map[string]interface{})

										fallThroughModeChoiceTypeFound := false

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true

											if v.(bool) {
												fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
												fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
												fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
											}

										}

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true
											fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
											fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
											fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
														fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
														for i, set := range sl {
															if set != nil {
																openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																openApiValidationRulesMapStrToI := set.(map[string]interface{})

																actionChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																		actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																		actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																		actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																conditionTypeChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																	conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field methods")
																					}
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.ApiGroup = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.BasePath = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	metadata := &ves_io_schema.MessageMetaType{}
																	openApiValidationRules[i].Metadata = metadata
																	for _, set := range sl {
																		if set != nil {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
								validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
								for i, set := range sl {
									if set != nil {
										openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
										openApiValidationRulesMapStrToI := set.(map[string]interface{})

										conditionTypeChoiceTypeFound := false

										if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
											conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											conditionTypeChoiceInt.ApiGroup = v.(string)

										}

										if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											conditionTypeChoiceInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												openApiValidationRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

											openApiValidationRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											openApiValidationRules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
											openApiValidationRules[i].ValidationMode = validationMode
											for _, set := range sl {
												if set != nil {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																	response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field response_validation_properties")
																		}
																		response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																	}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																}

																validationEnforcementTypeTypeFound := false

																if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																		validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

																if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																		validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

															}
														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																	request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field request_validation_properties")
																		}
																		request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																	}
																	validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																}

																validationEnforcementTypeTypeFound := false

																if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																		validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																		validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

																if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																		validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																		validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["settings"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
								validationTargetChoiceInt.ValidationCustomList.Settings = settings
								for _, set := range sl {
									if set != nil {
										settingsMapStrToI := set.(map[string]interface{})

										oversizedBodyChoiceTypeFound := false

										if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
												oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
												oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										propertyValidationSettingsChoiceTypeFound := false

										if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true
											propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
											propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
											settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
														for _, set := range sl {
															if set != nil {
																queryParametersMapStrToI := set.(map[string]interface{})

																additionalParametersChoiceTypeFound := false

																if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																		additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

																if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																		additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true

											if v.(bool) {
												propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
												propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
												settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true

					if v.(bool) {
						validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
						validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
						apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_api_definition"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true

		if v.(bool) {
			apiDefinitionChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableApiDefinition{}
			apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
			createSpec.ApiDefinitionChoice = apiDefinitionChoiceInt
		}

	}

	//api_discovery_choice

	apiDiscoveryChoiceTypeFound := false

	if v, ok := d.GetOk("disable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true

		if v.(bool) {
			apiDiscoveryChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableApiDiscovery{}
			apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
			createSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_api_discovery"); ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableApiDiscovery{}
		apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		createSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_crawler"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiCrawler := &ves_io_schema_views_common_waf.ApiCrawler{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiCrawler = apiCrawler
					for _, set := range sl {
						if set != nil {
							apiCrawlerMapStrToI := set.(map[string]interface{})

							apiCrawlerTypeFound := false

							if v, ok := apiCrawlerMapStrToI["api_crawler_config"]; ok && !isIntfNil(v) && !apiCrawlerTypeFound {

								apiCrawlerTypeFound = true
								apiCrawlerInt := &ves_io_schema_views_common_waf.ApiCrawler_ApiCrawlerConfig{}
								apiCrawlerInt.ApiCrawlerConfig = &ves_io_schema_views_common_waf.ApiCrawlerConfiguration{}
								apiCrawler.ApiCrawler = apiCrawlerInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["domains"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											domains := make([]*ves_io_schema_views_common_waf.DomainConfiguration, len(sl))
											apiCrawlerInt.ApiCrawlerConfig.Domains = domains
											for i, set := range sl {
												if set != nil {
													domains[i] = &ves_io_schema_views_common_waf.DomainConfiguration{}
													domainsMapStrToI := set.(map[string]interface{})

													if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
														domains[i].Domain = w.(string)
													}

													if v, ok := domainsMapStrToI["simple_login"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														simpleLogin := &ves_io_schema_views_common_waf.SimpleLogin{}
														domains[i].SimpleLogin = simpleLogin
														for _, set := range sl {
															if set != nil {
																simpleLoginMapStrToI := set.(map[string]interface{})

																if v, ok := simpleLoginMapStrToI["password"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	password := &ves_io_schema.SecretType{}
																	simpleLogin.Password = password
																	for _, set := range sl {
																		if set != nil {
																			passwordMapStrToI := set.(map[string]interface{})

																			secretInfoOneofTypeFound := false

																			if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																				secretInfoOneofTypeFound = true
																				secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																				secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																				password.SecretInfoOneof = secretInfoOneofInt

																				sl := v.([]interface{})
																				for _, set := range sl {
																					if set != nil {
																						cs := set.(map[string]interface{})

																						if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																						}

																						if v, ok := cs["location"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																						}

																						if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																						}

																					}
																				}

																			}

																			if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																				secretInfoOneofTypeFound = true
																				secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																				secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																				password.SecretInfoOneof = secretInfoOneofInt

																				sl := v.([]interface{})
																				for _, set := range sl {
																					if set != nil {
																						cs := set.(map[string]interface{})

																						if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																						}

																						if v, ok := cs["url"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																						}

																					}
																				}

																			}

																		}
																	}

																}

																if w, ok := simpleLoginMapStrToI["user"]; ok && !isIntfNil(w) {
																	simpleLogin.User = w.(string)
																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := apiCrawlerMapStrToI["disable_api_crawler"]; ok && !isIntfNil(v) && !apiCrawlerTypeFound {

								apiCrawlerTypeFound = true

								if v.(bool) {
									apiCrawlerInt := &ves_io_schema_views_common_waf.ApiCrawler_DisableApiCrawler{}
									apiCrawlerInt.DisableApiCrawler = &ves_io_schema.Empty{}
									apiCrawler.ApiCrawler = apiCrawlerInt
								}

							}

						}
					}

				}

				if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
					for _, set := range sl {
						if set != nil {
							apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

							if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
								apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
								for i, set := range sl {
									if set != nil {
										codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
										codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

										apiReposChoiceTypeFound := false

										if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

											apiReposChoiceTypeFound = true

											if v.(bool) {
												apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
												apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
												codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
											}

										}

										if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

											apiReposChoiceTypeFound = true
											apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
											apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
											codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_code_repo")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

													}

												}
											}

										}

										if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
											codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

											for _, set := range sl {
												if set != nil {
													cbiMapToStrVal := set.(map[string]interface{})
													if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Name = val.(string)
													}
													if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Namespace = val.(string)
													}

													if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

						}
					}

				}

				apiDiscoverySettingsChoiceTypeFound := false

				if v, ok := cs["custom_api_auth_discovery"]; ok && !isIntfNil(v) && !apiDiscoverySettingsChoiceTypeFound {

					apiDiscoverySettingsChoiceTypeFound = true
					apiDiscoverySettingsChoiceInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_CustomApiAuthDiscovery{}
					apiDiscoverySettingsChoiceInt.CustomApiAuthDiscovery = &ves_io_schema_views_common_waf.ApiDiscoveryAdvancedSettings{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoverySettingsChoice = apiDiscoverySettingsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_discovery_ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiDiscoveryRefInt := &ves_io_schema_views.ObjectRefType{}
								apiDiscoverySettingsChoiceInt.CustomApiAuthDiscovery.ApiDiscoveryRef = apiDiscoveryRefInt

								for _, set := range sl {
									if set != nil {
										adrMapToStrVal := set.(map[string]interface{})
										if val, ok := adrMapToStrVal["name"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Name = val.(string)
										}
										if val, ok := adrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Namespace = val.(string)
										}

										if val, ok := adrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Tenant = val.(string)
										}
									}
								}

							}

						}
					}

				}

				if v, ok := cs["default_api_auth_discovery"]; ok && !isIntfNil(v) && !apiDiscoverySettingsChoiceTypeFound {

					apiDiscoverySettingsChoiceTypeFound = true

					if v.(bool) {
						apiDiscoverySettingsChoiceInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DefaultApiAuthDiscovery{}
						apiDiscoverySettingsChoiceInt.DefaultApiAuthDiscovery = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoverySettingsChoice = apiDiscoverySettingsChoiceInt
					}

				}

				if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
					for _, set := range sl {
						if set != nil {
							discoveredApiSettingsMapStrToI := set.(map[string]interface{})

							if w, ok := discoveredApiSettingsMapStrToI["purge_duration_for_inactive_discovered_apis"]; ok && !isIntfNil(w) {
								discoveredApiSettings.PurgeDurationForInactiveDiscoveredApis = uint32(w.(int))
							}

						}
					}

				}

				learnFromRedirectTrafficTypeFound := false

				if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
						learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
						learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

			}
		}

	}

	//api_protection_rules
	if v, ok := d.GetOk("api_protection_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
		createSpec.ApiProtectionRules = apiProtectionRules
		for _, set := range sl {
			if set != nil {
				apiProtectionRulesMapStrToI := set.(map[string]interface{})

				if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
					apiProtectionRules.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
								apiEndpointRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
												actionInt.Allow = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

										if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
												actionInt.Deny = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								apiEndpointRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
					apiProtectionRules.ApiGroupsRules = apiGroupsRules
					for i, set := range sl {
						if set != nil {
							apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
							apiGroupsRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
								apiGroupsRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
												actionInt.Allow = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

										if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
												actionInt.Deny = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

									}
								}

							}

							if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								apiGroupsRules[i].ApiGroup = w.(string)
							}

							if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								apiGroupsRules[i].BasePath = w.(string)
							}

							if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiGroupsRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiGroupsRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

								apiGroupsRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								apiGroupsRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiGroupsRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//api_testing_choice

	apiTestingChoiceTypeFound := false

	if v, ok := d.GetOk("api_testing"); ok && !isIntfNil(v) && !apiTestingChoiceTypeFound {

		apiTestingChoiceTypeFound = true
		apiTestingChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ApiTesting{}
		apiTestingChoiceInt.ApiTesting = &ves_io_schema_views_http_loadbalancer.ApiTesting{}
		createSpec.ApiTestingChoice = apiTestingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["custom_header_value"]; ok && !isIntfNil(v) {

					apiTestingChoiceInt.ApiTesting.CustomHeaderValue = v.(string)

				}

				if v, ok := cs["domains"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					domains := make([]*ves_io_schema_views_http_loadbalancer.DomainConfiguration, len(sl))
					apiTestingChoiceInt.ApiTesting.Domains = domains
					for i, set := range sl {
						if set != nil {
							domains[i] = &ves_io_schema_views_http_loadbalancer.DomainConfiguration{}
							domainsMapStrToI := set.(map[string]interface{})

							if w, ok := domainsMapStrToI["allow_destructive_methods"]; ok && !isIntfNil(w) {
								domains[i].AllowDestructiveMethods = w.(bool)
							}

							if v, ok := domainsMapStrToI["credentials"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								credentials := make([]*ves_io_schema_views_http_loadbalancer.Credentials, len(sl))
								domains[i].Credentials = credentials
								for i, set := range sl {
									if set != nil {
										credentials[i] = &ves_io_schema_views_http_loadbalancer.Credentials{}
										credentialsMapStrToI := set.(map[string]interface{})

										if w, ok := credentialsMapStrToI["credential_name"]; ok && !isIntfNil(w) {
											credentials[i].CredentialName = w.(string)
										}

										credentialsChoiceTypeFound := false

										if v, ok := credentialsMapStrToI["api_key"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_ApiKey{}
											credentialsChoiceInt.ApiKey = &ves_io_schema_views_http_loadbalancer.ApiKey{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.ApiKey.Key = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														value := &ves_io_schema.SecretType{}
														credentialsChoiceInt.ApiKey.Value = value
														for _, set := range sl {
															if set != nil {
																valueMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := valueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	value.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	value.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_BasicAuth{}
											credentialsChoiceInt.BasicAuth = &ves_io_schema_views_http_loadbalancer.BasicAuthentication{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["password"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														password := &ves_io_schema.SecretType{}
														credentialsChoiceInt.BasicAuth.Password = password
														for _, set := range sl {
															if set != nil {
																passwordMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := cs["user"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.BasicAuth.User = v.(string)

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_BearerToken{}
											credentialsChoiceInt.BearerToken = &ves_io_schema_views_http_loadbalancer.Bearer{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["token"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														token := &ves_io_schema.SecretType{}
														credentialsChoiceInt.BearerToken.Token = token
														for _, set := range sl {
															if set != nil {
																tokenMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	token.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	token.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["login_endpoint"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_LoginEndpoint{}
											credentialsChoiceInt.LoginEndpoint = &ves_io_schema_views_http_loadbalancer.LoginEndpoint{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["json_payload"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jsonPayload := &ves_io_schema.SecretType{}
														credentialsChoiceInt.LoginEndpoint.JsonPayload = jsonPayload
														for _, set := range sl {
															if set != nil {
																jsonPayloadMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := jsonPayloadMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	jsonPayload.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := jsonPayloadMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	jsonPayload.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := cs["method"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.Path = v.(string)

													}

													if v, ok := cs["token_response_key"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.TokenResponseKey = v.(string)

													}

												}
											}

										}

										roleChoiceTypeFound := false

										if v, ok := credentialsMapStrToI["admin"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

											roleChoiceTypeFound = true

											if v.(bool) {
												roleChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_Admin{}
												roleChoiceInt.Admin = &ves_io_schema.Empty{}
												credentials[i].RoleChoice = roleChoiceInt
											}

										}

										if v, ok := credentialsMapStrToI["standard"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

											roleChoiceTypeFound = true

											if v.(bool) {
												roleChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_Standard{}
												roleChoiceInt.Standard = &ves_io_schema.Empty{}
												credentials[i].RoleChoice = roleChoiceInt
											}

										}

									}
								}

							}

							if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
								domains[i].Domain = w.(string)
							}

						}
					}

				}

				frequencyChoiceTypeFound := false

				if v, ok := cs["every_day"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryDay{}
						frequencyChoiceInt.EveryDay = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

				if v, ok := cs["every_month"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryMonth{}
						frequencyChoiceInt.EveryMonth = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

				if v, ok := cs["every_week"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryWeek{}
						frequencyChoiceInt.EveryWeek = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_api_testing"); ok && !apiTestingChoiceTypeFound {

		apiTestingChoiceTypeFound = true

		if v.(bool) {
			apiTestingChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableApiTesting{}
			apiTestingChoiceInt.DisableApiTesting = &ves_io_schema.Empty{}
			createSpec.ApiTestingChoice = apiTestingChoiceInt
		}

	}

	//blocked_clients
	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.BlockedClients = blockedClients
		for i, set := range sl {
			if set != nil {
				blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				blockedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					blockedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					blockedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					blockedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	//bot_defense_choice

	botDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("bot_defense"); ok && !isIntfNil(v) && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_BotDefense{}
		botDefenseChoiceInt.BotDefense = &ves_io_schema_views_common_security.ShapeBotDefenseType{}
		createSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policy := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType{}
					botDefenseChoiceInt.BotDefense.Policy = policy
					for _, set := range sl {
						if set != nil {
							policyMapStrToI := set.(map[string]interface{})

							javaScriptChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableJsInsert{}
									javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPages{}
								javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

											javaScriptChoiceInt.JsInsertAllPages.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{}
								javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllWithExceptionsType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

											javaScriptChoiceInt.JsInsertAllPagesExcept.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertionRules{}
								javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.ShapeJavaScriptInsertType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["rules"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											rules := make([]*ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.Rules = rules
											for i, set := range sl {
												if set != nil {
													rules[i] = &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule{}
													rulesMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															rules[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														rules[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := rulesMapStrToI["javascript_location"]; ok && !isIntfNil(v) {

														rules[i].JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

													}

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														rules[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["javascript_mode"]; ok && !isIntfNil(v) {

								policy.JavascriptMode = ves_io_schema.JavaScriptMode(ves_io_schema.JavaScriptMode_value[v.(string)])

							}

							if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
								policy.JsDownloadPath = w.(string)
							}

							mobileSdkChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

								mobileSdkChoiceTypeFound = true

								if v.(bool) {
									mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableMobileSdk{}
									mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
									policy.MobileSdkChoice = mobileSdkChoiceInt
								}

							}

							if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

								mobileSdkChoiceTypeFound = true
								mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_MobileSdkConfig{}
								mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.MobileSDKConfigType{}
								policy.MobileSdkChoice = mobileSdkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
											mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
											for _, set := range sl {
												if set != nil {
													mobileIdentifierMapStrToI := set.(map[string]interface{})

													if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
														mobileIdentifier.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
																headersMapStrToI := set.(map[string]interface{})

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								protectedAppEndpoints := make([]*ves_io_schema_views_common_security.AppEndpointType, len(sl))
								policy.ProtectedAppEndpoints = protectedAppEndpoints
								for i, set := range sl {
									if set != nil {
										protectedAppEndpoints[i] = &ves_io_schema_views_common_security.AppEndpointType{}
										protectedAppEndpointsMapStrToI := set.(map[string]interface{})

										appTrafficTypeChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true

											if v.(bool) {
												appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Mobile{}
												appTrafficTypeChoiceInt.Mobile = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["web"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true

											if v.(bool) {
												appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Web{}
												appTrafficTypeChoiceInt.Web = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["web_mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true
											appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_WebMobile{}
											appTrafficTypeChoiceInt.WebMobile = &ves_io_schema_views_common_security.WebMobileTrafficType{}
											protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

														appTrafficTypeChoiceInt.WebMobile.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

													}

												}
											}

										}

										domainMatcherChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

											domainMatcherChoiceTypeFound = true

											if v.(bool) {
												domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AnyDomain{}
												domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

											domainMatcherChoiceTypeFound = true
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Domain{}
											domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
											protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.ExactValue = v.(string)

													}

													if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.RegexValue = v.(string)

													}

													if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.SuffixValue = v.(string)

													}

												}
											}

										}

										flowLabelChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

											flowLabelChoiceTypeFound = true
											flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_FlowLabel{}
											flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
											protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													flowLabelChoiceTypeFound := false

													if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
														flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
																		labelChoiceInt.Create = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
																		labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
														flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["login"]; ok && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true
																	labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
																	labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
																	flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			_ = set.(map[string]interface{})

																		}
																	}

																}

																if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
																		labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
																		labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
																		labelChoiceInt.Logout = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
																		labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
														flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
																		labelChoiceInt.Apply = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
																		labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
														flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
																		labelChoiceInt.Checkin = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
														flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
																		labelChoiceInt.Create = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
																		labelChoiceInt.Update = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
																		labelChoiceInt.View = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
														flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
																		labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
																		labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
																		labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
																		labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
														flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
																		labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
																		labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
																		labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
																		labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
																		labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
																		labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
																		labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
																		labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
																		labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
																		labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
																		labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
																		labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

											flowLabelChoiceTypeFound = true

											if v.(bool) {
												flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_UndefinedFlowLabel{}
												flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
											}

										}

										goodbotChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["allow_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

											goodbotChoiceTypeFound = true

											if v.(bool) {
												goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AllowGoodBots{}
												goodbotChoiceInt.AllowGoodBots = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["mitigate_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

											goodbotChoiceTypeFound = true

											if v.(bool) {
												goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_MitigateGoodBots{}
												goodbotChoiceInt.MitigateGoodBots = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											protectedAppEndpoints[i].Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

											http_methodsList := []ves_io_schema.BotHttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field http_methods")
												}
												http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
											}
											protectedAppEndpoints[i].HttpMethods = http_methodsList

										}

										if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											protectedAppEndpoints[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["mitigation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
											protectedAppEndpoints[i].Mitigation = mitigation
											for _, set := range sl {
												if set != nil {
													mitigationMapStrToI := set.(map[string]interface{})

													actionTypeTypeFound := false

													if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
														actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["body"]; ok && !isIntfNil(v) {

																	actionTypeInt.Block.Body = v.(string)

																}

																if v, ok := cs["status"]; ok && !isIntfNil(v) {

																	actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

																}

															}
														}

													}

													if v, ok := mitigationMapStrToI["flag"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Flag{}
														actionTypeInt.Flag = &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																sendHeadersChoiceTypeFound := false

																if v, ok := cs["append_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

																	sendHeadersChoiceTypeFound = true
																	sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_AppendHeaders{}
																	sendHeadersChoiceInt.AppendHeaders = &ves_io_schema_policy.ShapeBotFlagMitigationActionType{}
																	actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["auto_type_header_name"]; ok && !isIntfNil(v) {

																				sendHeadersChoiceInt.AppendHeaders.AutoTypeHeaderName = v.(string)

																			}

																			if v, ok := cs["inference_header_name"]; ok && !isIntfNil(v) {

																				sendHeadersChoiceInt.AppendHeaders.InferenceHeaderName = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["no_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

																	sendHeadersChoiceTypeFound = true

																	if v.(bool) {
																		sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_NoHeaders{}
																		sendHeadersChoiceInt.NoHeaders = &ves_io_schema.Empty{}
																		actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
														actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["uri"]; ok && !isIntfNil(v) {

																	actionTypeInt.Redirect.Uri = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											path := &ves_io_schema.PathMatcherType{}
											protectedAppEndpoints[i].Path = path
											for _, set := range sl {
												if set != nil {
													pathMapStrToI := set.(map[string]interface{})

													pathMatchTypeFound := false

													if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Path = v.(string)

													}

													if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Prefix = v.(string)

													}

													if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Regex = v.(string)

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["protocol"]; ok && !isIntfNil(v) {

											protectedAppEndpoints[i].Protocol = ves_io_schema_views_common_security.URLScheme(ves_io_schema_views_common_security.URLScheme_value[v.(string)])

										}

										if v, ok := protectedAppEndpointsMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											protectedAppEndpoints[i].QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["regional_endpoint"]; ok && !isIntfNil(v) {

					botDefenseChoiceInt.BotDefense.RegionalEndpoint = ves_io_schema_views_common_security.ShapeBotDefenseRegion(ves_io_schema_views_common_security.ShapeBotDefenseRegion_value[v.(string)])

				}

				if v, ok := cs["timeout"]; ok && !isIntfNil(v) {

					botDefenseChoiceInt.BotDefense.Timeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true

		if v.(bool) {
			botDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableBotDefense{}
			botDefenseChoiceInt.DisableBotDefense = &ves_io_schema.Empty{}
			createSpec.BotDefenseChoice = botDefenseChoiceInt
		}

	}

	//challenge_type

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			createSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				challengeChoiceTypeFound := false

				if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
						challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
						challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
						challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
					challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
					for _, set := range sl {
						if set != nil {
							ruleListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
								ruleList.Rules = rules
								for i, set := range sl {
									if set != nil {
										rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
										rulesMapStrToI := set.(map[string]interface{})

										if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											rules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
											rules[i].Spec = spec
											for _, set := range sl {
												if set != nil {
													specMapStrToI := set.(map[string]interface{})

													if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
														spec.ArgMatchers = argMatchers
														for i, set := range sl {
															if set != nil {
																argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																argMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	argMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	argMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	argMatchers[i].Name = w.(string)
																}

															}
														}

													}

													asnChoiceTypeFound := false

													if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true

														if v.(bool) {
															asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
															asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
															spec.AsnChoice = asnChoiceInt
														}

													}

													if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
														asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	asnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
														asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														bodyMatcher := &ves_io_schema_policy.MatcherType{}
														spec.BodyMatcher = bodyMatcher
														for _, set := range sl {
															if set != nil {
																bodyMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.ExactValues = ls
																}

																if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.RegexValues = ls
																}

																if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	bodyMatcher.Transformers = transformersList

																}

															}
														}

													}

													challengeActionTypeFound := false

													if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
															challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
															challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
															challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													clientChoiceTypeFound := false

													if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															spec.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														spec.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														spec.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
														spec.DomainMatcher = domainMatcher
														for _, set := range sl {
															if set != nil {
																domainMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.ExactValues = ls
																}

																if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.RegexValues = ls
																}

															}
														}

													}

													if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
														ts, err := parseTime(w.(string))
														if err != nil {
															return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
														}
														spec.ExpirationTimestamp = ts
													}

													if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														spec.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
														spec.HttpMethod = httpMethod
														for _, set := range sl {
															if set != nil {
																httpMethodMapStrToI := set.(map[string]interface{})

																if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	httpMethod.InvertMatcher = w.(bool)
																}

																if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field methods")
																		}
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	httpMethod.Methods = methodsList

																}

															}
														}

													}

													ipChoiceTypeFound := false

													if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true

														if v.(bool) {
															ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
															ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
															spec.IpChoice = ipChoiceInt
														}

													}

													if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
														ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
														ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema_policy.PathMatcherType{}
														spec.Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.ExactValues = ls
																}

																if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	path.InvertMatcher = w.(bool)
																}

																if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field prefix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.PrefixValues = ls
																}

																if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.RegexValues = ls
																}

																if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field suffix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.SuffixValues = ls
																}

																if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	path.Transformers = transformersList

																}

															}
														}

													}

													if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														spec.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

													tlsFingerprintChoiceTypeFound := false

													if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

														tlsFingerprintChoiceTypeFound = true
														tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
														tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
														spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																}

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																}

																if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//client_side_defense_choice

	clientSideDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("client_side_defense"); ok && !isIntfNil(v) && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true
		clientSideDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ClientSideDefense{}
		clientSideDefenseChoiceInt.ClientSideDefense = &ves_io_schema_views_common_security.ClientSideDefenseType{}
		createSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policy := &ves_io_schema_views_common_security.ClientSideDefensePolicyType{}
					clientSideDefenseChoiceInt.ClientSideDefense.Policy = policy
					for _, set := range sl {
						if set != nil {
							policyMapStrToI := set.(map[string]interface{})

							javaScriptChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_DisableJsInsert{}
									javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPages{}
									javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPagesExcept{}
								javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.CSDJavaScriptInsertAllWithExceptionsType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertionRules{}
								javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.CSDJavaScriptInsertType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["rules"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											rules := make([]*ves_io_schema_views_common_security.CSDJavaScriptInsertionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.Rules = rules
											for i, set := range sl {
												if set != nil {
													rules[i] = &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule{}
													rulesMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															rules[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														rules[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														rules[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true

		if v.(bool) {
			clientSideDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableClientSideDefense{}
			clientSideDefenseChoiceInt.DisableClientSideDefense = &ves_io_schema.Empty{}
			createSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt
		}

	}

	//cors_policy
	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		createSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	//csrf_policy
	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		createSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	//data_guard_rules
	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		createSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			if set != nil {
				dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
				dataGuardRulesMapStrToI := set.(map[string]interface{})

				actionChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
						actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
						actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				domainChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						dataGuardRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					dataGuardRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					path := &ves_io_schema.PathMatcherType{}
					dataGuardRules[i].Path = path
					for _, set := range sl {
						if set != nil {
							pathMapStrToI := set.(map[string]interface{})

							pathMatchTypeFound := false

							if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Path = v.(string)

							}

							if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Prefix = v.(string)

							}

							if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Regex = v.(string)

							}

						}
					}

				}

			}
		}

	}

	//ddos_mitigation_rules
	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		createSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			if set != nil {
				ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
				ddosMitigationRulesMapStrToI := set.(map[string]interface{})

				if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					ddosMitigationRules[i].ExpirationTimestamp = ts
				}

				if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					ddosMitigationRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				mitigationActionTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

					mitigationActionTypeFound = true

					if v.(bool) {
						mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
						mitigationActionInt.Block = &ves_io_schema.Empty{}
						ddosMitigationRules[i].MitigationAction = mitigationActionInt
					}

				}

				mitigationChoiceTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
					mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								asnList := &ves_io_schema_policy.AsnMatchList{}
								mitigationChoiceInt.DdosClientSource.AsnList = asnList
								for _, set := range sl {
									if set != nil {
										asnListMapStrToI := set.(map[string]interface{})

										if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
											ls := make([]uint32, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnList.AsNumbers = ls
										}

									}
								}

							}

							if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

								country_listList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_list")
									}
									country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								mitigationChoiceInt.DdosClientSource.CountryList = country_listList

							}

							if v, ok := cs["ja4_tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ja4TlsFingerprintMatcher := &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.Ja4TlsFingerprintMatcher = ja4TlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										ja4TlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := ja4TlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ja4TlsFingerprintMatcher.ExactValues = ls
										}

									}
								}

							}

							if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

											classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field classes")
												}
												classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
											}
											tlsFingerprintMatcher.Classes = classesList

										}

										if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExactValues = ls
										}

										if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExcludedValues = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
					mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

							}

						}
					}

				}

			}
		}

	}

	//default_route_pools
	if v, ok := d.GetOk("default_route_pools"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		defaultRoutePools := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
		createSpec.DefaultRoutePools = defaultRoutePools
		for i, set := range sl {
			if set != nil {
				defaultRoutePools[i] = &ves_io_schema_views.OriginPoolWithWeight{}
				defaultRoutePoolsMapStrToI := set.(map[string]interface{})

				if w, ok := defaultRoutePoolsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
					ms := map[string]string{}
					for k, v := range w.(map[string]interface{}) {
						ms[k] = v.(string)
					}
					defaultRoutePools[i].EndpointSubsets = ms
				}

				poolChoiceTypeFound := false

				if v, ok := defaultRoutePoolsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

					poolChoiceTypeFound = true
					poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
					poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
					defaultRoutePools[i].PoolChoice = poolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := defaultRoutePoolsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

					poolChoiceTypeFound = true
					poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
					poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
					defaultRoutePools[i].PoolChoice = poolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Tenant = v.(string)

							}

						}
					}

				}

				if w, ok := defaultRoutePoolsMapStrToI["priority"]; ok && !isIntfNil(w) {
					defaultRoutePools[i].Priority = uint32(w.(int))
				}

				if w, ok := defaultRoutePoolsMapStrToI["weight"]; ok && !isIntfNil(w) {
					defaultRoutePools[i].Weight = uint32(w.(int))
				}

			}
		}

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.Domains = ls

	}

	//graphql_rules
	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		createSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			if set != nil {
				graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
				graphqlRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						graphqlRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
					graphqlRules[i].ExactPath = w.(string)
				}

				if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
					graphqlRules[i].GraphqlSettings = graphqlSettings
					for _, set := range sl {
						if set != nil {
							graphqlSettingsMapStrToI := set.(map[string]interface{})

							allowIntrospectionQueriesChoiceTypeFound := false

							if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
									allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
									allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxBatchedQueries = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxDepth = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxTotalLength = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					graphqlRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				methodChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
						methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
						methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

			}
		}

	}

	//hash_policy_choice

	hashPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("cookie_stickiness"); ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true
		hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_CookieStickiness{}
		hashPolicyChoiceInt.CookieStickiness = &ves_io_schema_route.CookieForHashing{}
		createSpec.HashPolicyChoice = hashPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				httponlyTypeFound := false

				if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Httponly = httponlyInt
					}

				}

				if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Httponly = httponlyInt
					}

				}

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Name = v.(string)

				}

				if v, ok := cs["path"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Path = v.(string)

				}

				samesiteTypeFound := false

				if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Secure = secureInt
					}

				}

				if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Secure = secureInt
					}

				}

				if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Ttl = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("least_active"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_LeastActive{}
			hashPolicyChoiceInt.LeastActive = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("random"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_Random{}
			hashPolicyChoiceInt.Random = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("ring_hash"); ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true
		hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_RingHash{}
		hashPolicyChoiceInt.RingHash = &ves_io_schema_views_http_loadbalancer.HashPolicyListType{}
		createSpec.HashPolicyChoice = hashPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["hash_policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					hashPolicy := make([]*ves_io_schema_route.HashPolicyType, len(sl))
					hashPolicyChoiceInt.RingHash.HashPolicy = hashPolicy
					for i, set := range sl {
						if set != nil {
							hashPolicy[i] = &ves_io_schema_route.HashPolicyType{}
							hashPolicyMapStrToI := set.(map[string]interface{})

							policySpecifierTypeFound := false

							if v, ok := hashPolicyMapStrToI["cookie"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_Cookie{}
								policySpecifierInt.Cookie = &ves_io_schema_route.CookieForHashing{}
								hashPolicy[i].PolicySpecifier = policySpecifierInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										httponlyTypeFound := false

										if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

											httponlyTypeFound = true

											if v.(bool) {
												httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
												httponlyInt.AddHttponly = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Httponly = httponlyInt
											}

										}

										if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

											httponlyTypeFound = true

											if v.(bool) {
												httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
												httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Httponly = httponlyInt
											}

										}

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Name = v.(string)

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Path = v.(string)

										}

										samesiteTypeFound := false

										if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
												samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
												samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
												samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
												samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										secureTypeFound := false

										if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

											secureTypeFound = true

											if v.(bool) {
												secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
												secureInt.AddSecure = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Secure = secureInt
											}

										}

										if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

											secureTypeFound = true

											if v.(bool) {
												secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
												secureInt.IgnoreSecure = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Secure = secureInt
											}

										}

										if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Ttl = uint32(v.(int))

										}

									}
								}

							}

							if v, ok := hashPolicyMapStrToI["header_name"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_HeaderName{}

								hashPolicy[i].PolicySpecifier = policySpecifierInt

								policySpecifierInt.HeaderName = v.(string)

							}

							if v, ok := hashPolicyMapStrToI["source_ip"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_SourceIp{}

								hashPolicy[i].PolicySpecifier = policySpecifierInt

								policySpecifierInt.SourceIp = v.(bool)

							}

							if w, ok := hashPolicyMapStrToI["terminal"]; ok && !isIntfNil(w) {
								hashPolicy[i].Terminal = w.(bool)
							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("round_robin"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_RoundRobin{}
			hashPolicyChoiceInt.RoundRobin = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("source_ip_stickiness"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_SourceIpStickiness{}
			hashPolicyChoiceInt.SourceIpStickiness = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	//ip_reputation_choice

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			createSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		createSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

					ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
						}
						ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
					}
					ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

				}

			}
		}

	}

	//jwt_validation
	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		createSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			if set != nil {
				jwtValidationMapStrToI := set.(map[string]interface{})

				if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema.Action{}
					jwtValidation.Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Block{}
									actionChoiceInt.Block = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

							if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Report{}
									actionChoiceInt.Report = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

						}
					}

				}

				jwksConfigurationTypeFound := false

				if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

					jwksConfigurationTypeFound = true
					jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
					jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
					jwtValidation.JwksConfiguration = jwksConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

								jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
					jwtValidation.MandatoryClaims = mandatoryClaims
					for _, set := range sl {
						if set != nil {
							mandatoryClaimsMapStrToI := set.(map[string]interface{})

							if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field claim_names")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mandatoryClaims.ClaimNames = ls
							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
					jwtValidation.ReservedClaims = reservedClaims
					for _, set := range sl {
						if set != nil {
							reservedClaimsMapStrToI := set.(map[string]interface{})

							audienceValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true
								audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
								audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
								reservedClaims.AudienceValidation = audienceValidationInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field audiences")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											audienceValidationInt.Audience.Audiences = ls

										}

									}
								}

							}

							if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true

								if v.(bool) {
									audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
									audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
									reservedClaims.AudienceValidation = audienceValidationInt
								}

							}

							issuerValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true
								issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

								reservedClaims.IssuerValidation = issuerValidationInt

								issuerValidationInt.Issuer = v.(string)

							}

							if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true

								if v.(bool) {
									issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
									issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
									reservedClaims.IssuerValidation = issuerValidationInt
								}

							}

							validatePeriodTypeFound := false

							if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
									validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

							if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
									validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					target := &ves_io_schema_views_common_waf.Target{}
					jwtValidation.Target = target
					for _, set := range sl {
						if set != nil {
							targetMapStrToI := set.(map[string]interface{})

							targetTypeFound := false

							if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true

								if v.(bool) {
									targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
									targetInt.AllEndpoint = &ves_io_schema.Empty{}
									target.Target = targetInt
								}

							}

							if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
								targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field api_groups")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.ApiGroups.ApiGroups = ls

										}

									}
								}

							}

							if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
								targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field base_paths")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.BasePaths.BasePaths = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
					jwtValidation.TokenLocation = tokenLocation
					for _, set := range sl {
						if set != nil {
							tokenLocationMapStrToI := set.(map[string]interface{})

							tokenLocationTypeFound := false

							if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

								tokenLocationTypeFound = true

								if v.(bool) {
									tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
									tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
									tokenLocation.TokenLocation = tokenLocationInt
								}

							}

						}
					}

				}

			}
		}

	}

	//l7_ddos_protection
	if v, ok := d.GetOk("l7_ddos_protection"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		l7DdosProtection := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings{}
		createSpec.L7DdosProtection = l7DdosProtection
		for _, set := range sl {
			if set != nil {
				l7DdosProtectionMapStrToI := set.(map[string]interface{})

				ddosPolicyChoiceTypeFound := false

				if v, ok := l7DdosProtectionMapStrToI["ddos_policy_custom"]; ok && !isIntfNil(v) && !ddosPolicyChoiceTypeFound {

					ddosPolicyChoiceTypeFound = true
					ddosPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_DdosPolicyCustom{}
					ddosPolicyChoiceInt.DdosPolicyCustom = &ves_io_schema_views.ObjectRefType{}
					l7DdosProtection.DdosPolicyChoice = ddosPolicyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := l7DdosProtectionMapStrToI["ddos_policy_none"]; ok && !isIntfNil(v) && !ddosPolicyChoiceTypeFound {

					ddosPolicyChoiceTypeFound = true

					if v.(bool) {
						ddosPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_DdosPolicyNone{}
						ddosPolicyChoiceInt.DdosPolicyNone = &ves_io_schema.Empty{}
						l7DdosProtection.DdosPolicyChoice = ddosPolicyChoiceInt
					}

				}

				mitigationActionChoiceTypeFound := false

				if v, ok := l7DdosProtectionMapStrToI["mitigation_block"]; ok && !isIntfNil(v) && !mitigationActionChoiceTypeFound {

					mitigationActionChoiceTypeFound = true

					if v.(bool) {
						mitigationActionChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_MitigationBlock{}
						mitigationActionChoiceInt.MitigationBlock = &ves_io_schema.Empty{}
						l7DdosProtection.MitigationActionChoice = mitigationActionChoiceInt
					}

				}

				if v, ok := l7DdosProtectionMapStrToI["mitigation_js_challenge"]; ok && !isIntfNil(v) && !mitigationActionChoiceTypeFound {

					mitigationActionChoiceTypeFound = true
					mitigationActionChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_MitigationJsChallenge{}
					mitigationActionChoiceInt.MitigationJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					l7DdosProtection.MitigationActionChoice = mitigationActionChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	//loadbalancer_type

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("https"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.AddHsts = v.(bool)

				}

				if v, ok := cs["coalescing_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
					loadbalancerTypeInt.Https.CoalescingOptions = coalescingOptions
					for _, set := range sl {
						if set != nil {
							coalescingOptionsMapStrToI := set.(map[string]interface{})

							coalescingChoiceTypeFound := false

							if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
									coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

							if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
									coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["connection_idle_timeout"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.ConnectionIdleTimeout = uint32(v.(int))

				}

				defaultLbChoiceTypeFound := false

				if v, ok := cs["default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DefaultLoadbalancer{}
						defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["non_default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_NonDefaultLoadbalancer{}
						defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["http_protocol_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
					loadbalancerTypeInt.Https.HttpProtocolOptions = httpProtocolOptions
					for _, set := range sl {
						if set != nil {
							httpProtocolOptionsMapStrToI := set.(map[string]interface{})

							httpProtocolChoiceTypeFound := false

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true
								httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
								httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headerTransformation := &ves_io_schema.HeaderTransformationType{}
											httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
											for _, set := range sl {
												if set != nil {
													headerTransformationMapStrToI := set.(map[string]interface{})

													headerTransformationChoiceTypeFound := false

													if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
															headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
															headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
															headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
															headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
									httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
									httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

				}

				pathNormalizeChoiceTypeFound := false

				if v, ok := cs["disable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DisablePathNormalize{}
						pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				if v, ok := cs["enable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_EnablePathNormalize{}
						pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_Port{}

					loadbalancerTypeInt.Https.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_PortRanges{}

					loadbalancerTypeInt.Https.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

				serverHeaderChoiceTypeFound := false

				if v, ok := cs["append_server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_AppendServerName{}

					loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.AppendServerName = v.(string)

				}

				if v, ok := cs["default_header"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DefaultHeader{}
						serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["pass_through"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_PassThrough{}
						serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_ServerName{}

					loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.ServerName = v.(string)

				}

				tlsCertificatesChoiceTypeFound := false

				if v, ok := cs["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

					tlsCertificatesChoiceTypeFound = true
					tlsCertificatesChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_TlsCertParams{}
					tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
					loadbalancerTypeInt.Https.TlsCertificatesChoice = tlsCertificatesChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
								for i, ps := range sl {

									cMapToStrVal := ps.(map[string]interface{})
									certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
										certificatesInt[i].Name = v.(string)
									}

									if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										certificatesInt[i].Namespace = v.(string)
									}

									if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										certificatesInt[i].Tenant = v.(string)
									}

								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

					tlsCertificatesChoiceTypeFound = true
					tlsCertificatesChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_TlsParameters{}
					tlsCertificatesChoiceInt.TlsParameters = &ves_io_schema_views.DownstreamTlsParamsType{}
					loadbalancerTypeInt.Https.TlsCertificatesChoice = tlsCertificatesChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								tlsCertificatesChoiceInt.TlsParameters.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsParameters.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

				}

				if v, ok := cs["coalescing_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
					loadbalancerTypeInt.HttpsAutoCert.CoalescingOptions = coalescingOptions
					for _, set := range sl {
						if set != nil {
							coalescingOptionsMapStrToI := set.(map[string]interface{})

							coalescingChoiceTypeFound := false

							if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
									coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

							if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
									coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["connection_idle_timeout"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.ConnectionIdleTimeout = uint32(v.(int))

				}

				defaultLbChoiceTypeFound := false

				if v, ok := cs["default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultLoadbalancer{}
						defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["non_default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer{}
						defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["http_protocol_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
					loadbalancerTypeInt.HttpsAutoCert.HttpProtocolOptions = httpProtocolOptions
					for _, set := range sl {
						if set != nil {
							httpProtocolOptionsMapStrToI := set.(map[string]interface{})

							httpProtocolChoiceTypeFound := false

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true
								httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
								httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headerTransformation := &ves_io_schema.HeaderTransformationType{}
											httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
											for _, set := range sl {
												if set != nil {
													headerTransformationMapStrToI := set.(map[string]interface{})

													headerTransformationChoiceTypeFound := false

													if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
															headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
															headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
															headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
															headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
									httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
									httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

				}

				mtlsChoiceTypeFound := false

				if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

					mtlsChoiceTypeFound = true

					if v.(bool) {
						mtlsChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_NoMtls{}
						mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.MtlsChoice = mtlsChoiceInt
					}

				}

				if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

					mtlsChoiceTypeFound = true
					mtlsChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_UseMtls{}
					mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
					loadbalancerTypeInt.HttpsAutoCert.MtlsChoice = mtlsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

							}

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

											xfcc_header_elementsList := []ves_io_schema.XfccElement{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
												}
												xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
											}
											xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

										}

									}
								}

							}

						}
					}

				}

				pathNormalizeChoiceTypeFound := false

				if v, ok := cs["disable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DisablePathNormalize{}
						pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				if v, ok := cs["enable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_EnablePathNormalize{}
						pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_Port{}

					loadbalancerTypeInt.HttpsAutoCert.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_PortRanges{}

					loadbalancerTypeInt.HttpsAutoCert.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

				serverHeaderChoiceTypeFound := false

				if v, ok := cs["append_server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{}

					loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.AppendServerName = v.(string)

				}

				if v, ok := cs["default_header"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{}
						serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["pass_through"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{}
						serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{}

					loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.ServerName = v.(string)

				}

				if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsConfig := &ves_io_schema_views.TlsConfig{}
					loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
					for _, set := range sl {
						if set != nil {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											choiceInt.CustomSecurity.CipherSuites = ls

										}

										if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

											choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

										}

										if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

											choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

										}

									}
								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	//malicious_user_detection_choice

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	//malware_protection

	malwareProtectionTypeFound := false

	if v, ok := d.GetOk("disable_malware_protection"); ok && !malwareProtectionTypeFound {

		malwareProtectionTypeFound = true

		if v.(bool) {
			malwareProtectionInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableMalwareProtection{}
			malwareProtectionInt.DisableMalwareProtection = &ves_io_schema.Empty{}
			createSpec.MalwareProtection = malwareProtectionInt
		}

	}

	if v, ok := d.GetOk("malware_protection_settings"); ok && !isIntfNil(v) && !malwareProtectionTypeFound {

		malwareProtectionTypeFound = true
		malwareProtectionInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_MalwareProtectionSettings{}
		malwareProtectionInt.MalwareProtectionSettings = &ves_io_schema_views_common_security.MalwareProtectionPolicy{}
		createSpec.MalwareProtection = malwareProtectionInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["malware_protection_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					malwareProtectionRules := make([]*ves_io_schema_views_common_security.MalwareProtectionRule, len(sl))
					malwareProtectionInt.MalwareProtectionSettings.MalwareProtectionRules = malwareProtectionRules
					for i, set := range sl {
						if set != nil {
							malwareProtectionRules[i] = &ves_io_schema_views_common_security.MalwareProtectionRule{}
							malwareProtectionRulesMapStrToI := set.(map[string]interface{})

							if v, ok := malwareProtectionRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema.Action{}
								malwareProtectionRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionChoiceTypeFound := false

										if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

											actionChoiceTypeFound = true

											if v.(bool) {
												actionChoiceInt := &ves_io_schema.Action_Block{}
												actionChoiceInt.Block = &ves_io_schema.Empty{}
												action.ActionChoice = actionChoiceInt
											}

										}

										if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

											actionChoiceTypeFound = true

											if v.(bool) {
												actionChoiceInt := &ves_io_schema.Action_Report{}
												actionChoiceInt.Report = &ves_io_schema.Empty{}
												action.ActionChoice = actionChoiceInt
											}

										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["domain"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								domain := &ves_io_schema.DomainMatcherType{}
								malwareProtectionRules[i].Domain = domain
								for _, set := range sl {
									if set != nil {
										domainMapStrToI := set.(map[string]interface{})

										domainMatcherTypeFound := false

										if v, ok := domainMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherTypeFound {

											domainMatcherTypeFound = true
											domainMatcherInt := &ves_io_schema.DomainMatcherType_AnyDomain{}
											domainMatcherInt.AnyDomain = &ves_io_schema.Empty{}
											domain.DomainMatcher = domainMatcherInt

										}

										if v, ok := domainMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherTypeFound {

											domainMatcherTypeFound = true
											domainMatcherInt := &ves_io_schema.DomainMatcherType_Domain{}
											domainMatcherInt.Domain = &ves_io_schema.DomainType{}
											domain.DomainMatcher = domainMatcherInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.ExactValue = v.(string)

													}

													if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.RegexValue = v.(string)

													}

													if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.SuffixValue = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field http_methods")
									}
									http_methodsList = append(http_methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								malwareProtectionRules[i].HttpMethods = http_methodsList

							}

							if v, ok := malwareProtectionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								malwareProtectionRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								malwareProtectionRules[i].Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//more_option
	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		moreOption := &ves_io_schema_views_http_loadbalancer.AdvancedOptionsType{}
		createSpec.MoreOption = moreOption
		for _, set := range sl {
			if set != nil {
				moreOptionMapStrToI := set.(map[string]interface{})

				if v, ok := moreOptionMapStrToI["buffer_policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					bufferPolicy := &ves_io_schema.BufferConfigType{}
					moreOption.BufferPolicy = bufferPolicy
					for _, set := range sl {
						if set != nil {
							bufferPolicyMapStrToI := set.(map[string]interface{})

							if w, ok := bufferPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
								bufferPolicy.Disabled = w.(bool)
							}

							if w, ok := bufferPolicyMapStrToI["max_request_bytes"]; ok && !isIntfNil(w) {
								bufferPolicy.MaxRequestBytes = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := moreOptionMapStrToI["compression_params"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					compressionParams := &ves_io_schema_virtual_host.CompressionType{}
					moreOption.CompressionParams = compressionParams
					for _, set := range sl {
						if set != nil {
							compressionParamsMapStrToI := set.(map[string]interface{})

							if w, ok := compressionParamsMapStrToI["content_length"]; ok && !isIntfNil(w) {
								compressionParams.ContentLength = uint32(w.(int))
							}

							if w, ok := compressionParamsMapStrToI["content_type"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field content_type")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								compressionParams.ContentType = ls
							}

							if w, ok := compressionParamsMapStrToI["disable_on_etag_header"]; ok && !isIntfNil(w) {
								compressionParams.DisableOnEtagHeader = w.(bool)
							}

							if w, ok := compressionParamsMapStrToI["remove_accept_encoding_header"]; ok && !isIntfNil(w) {
								compressionParams.RemoveAcceptEncodingHeader = w.(bool)
							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["custom_errors"]; ok && !isIntfNil(w) {
					ms := map[uint32]string{}
					for k, v := range w.(map[string]interface{}) {
						val := v.(string)

						s, err := strconv.ParseUint(k, 10, 32)
						if err != nil {
							return fmt.Errorf("Error while decrypting custom_errors: %s", err)
						}
						key := uint32(s)
						ms[key] = val
					}
					moreOption.CustomErrors = ms
				}

				if w, ok := moreOptionMapStrToI["disable_default_error_pages"]; ok && !isIntfNil(w) {
					moreOption.DisableDefaultErrorPages = w.(bool)
				}

				if w, ok := moreOptionMapStrToI["idle_timeout"]; ok && !isIntfNil(w) {
					moreOption.IdleTimeout = uint32(w.(int))
				}

				if w, ok := moreOptionMapStrToI["max_request_header_size"]; ok && !isIntfNil(w) {
					moreOption.MaxRequestHeaderSize = uint32(w.(int))
				}

				if v, ok := moreOptionMapStrToI["request_cookies_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
					moreOption.RequestCookiesToAdd = requestCookiesToAdd
					for i, set := range sl {
						if set != nil {
							requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
							requestCookiesToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestCookiesToAdd[i].Name = w.(string)
							}

							if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
								requestCookiesToAdd[i].Overwrite = w.(bool)
							}

							valueChoiceTypeFound := false

							if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestCookiesToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

								requestCookiesToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["request_cookies_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.RequestCookiesToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
					moreOption.RequestHeadersToAdd = requestHeadersToAdd
					for i, set := range sl {
						if set != nil {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.RequestHeadersToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["response_cookies_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
					moreOption.ResponseCookiesToAdd = responseCookiesToAdd
					for i, set := range sl {
						if set != nil {
							responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
							responseCookiesToAddMapStrToI := set.(map[string]interface{})

							domainChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

								responseCookiesToAdd[i].DomainChoice = domainChoiceInt

								domainChoiceInt.AddDomain = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
									domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].DomainChoice = domainChoiceInt
								}

							}

							expiryChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

								expiryChoiceTypeFound = true
								expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

								responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

								expiryChoiceInt.AddExpiry = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

								expiryChoiceTypeFound = true

								if v.(bool) {
									expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
									expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
								}

							}

							httponlyChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

								httponlyChoiceTypeFound = true

								if v.(bool) {
									httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
									httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

								httponlyChoiceTypeFound = true

								if v.(bool) {
									httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
									httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
								}

							}

							maxAgeChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

								maxAgeChoiceTypeFound = true

								if v.(bool) {
									maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
									maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

								maxAgeChoiceTypeFound = true
								maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

								responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

								maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

							}

							if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseCookiesToAdd[i].Name = w.(string)
							}

							if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
								responseCookiesToAdd[i].Overwrite = w.(bool)
							}

							partitionedChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

								partitionedChoiceTypeFound = true

								if v.(bool) {
									partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
									partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

								partitionedChoiceTypeFound = true

								if v.(bool) {
									partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
									partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
								}

							}

							pathChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

								pathChoiceTypeFound = true
								pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

								responseCookiesToAdd[i].PathChoice = pathChoiceInt

								pathChoiceInt.AddPath = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

								pathChoiceTypeFound = true

								if v.(bool) {
									pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
									pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PathChoice = pathChoiceInt
								}

							}

							samesiteChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
									samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
									samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
									samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
									samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							secureChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

								secureChoiceTypeFound = true

								if v.(bool) {
									secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
									secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SecureChoice = secureChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

								secureChoiceTypeFound = true

								if v.(bool) {
									secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
									secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SecureChoice = secureChoiceInt
								}

							}

							valueChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true

								if v.(bool) {
									valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
									valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].ValueChoice = valueChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseCookiesToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

								responseCookiesToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["response_cookies_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.ResponseCookiesToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
					moreOption.ResponseHeadersToAdd = responseHeadersToAdd
					for i, set := range sl {
						if set != nil {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.ResponseHeadersToRemove = ls
				}

			}
		}

	}

	//origin_server_subset_rule_list
	if v, ok := d.GetOk("origin_server_subset_rule_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originServerSubsetRuleList := &ves_io_schema_views_http_loadbalancer.OriginServerSubsetRuleListType{}
		createSpec.OriginServerSubsetRuleList = originServerSubsetRuleList
		for _, set := range sl {
			if set != nil {
				originServerSubsetRuleListMapStrToI := set.(map[string]interface{})

				if v, ok := originServerSubsetRuleListMapStrToI["origin_server_subset_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originServerSubsetRules := make([]*ves_io_schema_policy.OriginServerSubsetRule, len(sl))
					originServerSubsetRuleList.OriginServerSubsetRules = originServerSubsetRules
					for i, set := range sl {
						if set != nil {
							originServerSubsetRules[i] = &ves_io_schema_policy.OriginServerSubsetRule{}
							originServerSubsetRulesMapStrToI := set.(map[string]interface{})

							asnChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AnyAsn{}
									asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
									originServerSubsetRules[i].AsnChoice = asnChoiceInt
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AsnList{}
								asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								originServerSubsetRules[i].AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

											ls := make([]uint32, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnChoiceInt.AsnList.AsNumbers = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AsnMatcher{}
								asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								originServerSubsetRules[i].AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
											for i, ps := range sl {

												asMapToStrVal := ps.(map[string]interface{})
												asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

												asnSetsInt[i].Kind = "bgp_asn_set"

												if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Name = v.(string)
												}

												if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Namespace = v.(string)
												}

												if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Tenant = v.(string)
												}

												if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_codes")
									}
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								originServerSubsetRules[i].CountryCodes = country_codesList

							}

							ipChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true

								if v.(bool) {
									ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AnyIp{}
									ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
									originServerSubsetRules[i].IpChoice = ipChoiceInt
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_IpMatcher{}
								ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								originServerSubsetRules[i].IpChoice = ipChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

											ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

										}

										if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
											for i, ps := range sl {

												psMapToStrVal := ps.(map[string]interface{})
												prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

												prefixSetsInt[i].Kind = "ip_prefix_set"

												if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Name = v.(string)
												}

												if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Namespace = v.(string)
												}

												if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Tenant = v.(string)
												}

												if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_IpPrefixList{}
								ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								originServerSubsetRules[i].IpChoice = ipChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

											ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

										}

										if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ipChoiceInt.IpPrefixList.IpPrefixes = ls

										}

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								originServerSubsetRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if w, ok := originServerSubsetRulesMapStrToI["origin_server_subsets_action"]; ok && !isIntfNil(w) {
								ms := map[string]string{}
								for k, v := range w.(map[string]interface{}) {
									ms[k] = v.(string)
								}
								originServerSubsetRules[i].OriginServerSubsetsAction = ms
							}

							if w, ok := originServerSubsetRulesMapStrToI["re_name_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field re_name_list")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								originServerSubsetRules[i].ReNameList = ls
							}

							selectorChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["client_selector"]; ok && !isIntfNil(v) && !selectorChoiceTypeFound {

								selectorChoiceTypeFound = true
								selectorChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_ClientSelector{}
								selectorChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								originServerSubsetRules[i].SelectorChoice = selectorChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											selectorChoiceInt.ClientSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["none"]; ok && !isIntfNil(v) && !selectorChoiceTypeFound {

								selectorChoiceTypeFound = true

								if v.(bool) {
									selectorChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_None{}
									selectorChoiceInt.None = &ves_io_schema.Empty{}
									originServerSubsetRules[i].SelectorChoice = selectorChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	//protected_cookies
	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		createSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			if set != nil {
				protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
				protectedCookiesMapStrToI := set.(map[string]interface{})

				cookieTamperingTypeFound := false

				if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
						cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
						cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				httponlyTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
					protectedCookies[i].Name = w.(string)
				}

				samesiteTypeFound := false

				if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

			}
		}

	}

	//rate_limit_choice

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
					ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
								ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
								for i, set := range sl {
									if set != nil {
										bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
										bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

										if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											clientMatcher := &ves_io_schema_policy.ClientMatcher{}
											bypassRateLimitingRules[i].ClientMatcher = clientMatcher
											for _, set := range sl {
												if set != nil {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																	ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
																		}
																		ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																	}
																	clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																}

															}
														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	ipAsnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															if set != nil {
																tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintMatcher.Classes = classesList

																}

																if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExactValues = ls
																}

																if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExcludedValues = ls
																}

															}
														}

													}

												}
											}

										}

										destinationTypeTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true

											if v.(bool) {
												destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
												destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DestinationType = destinationTypeInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
											destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														destinationTypeInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														destinationTypeInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
											destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_groups")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														destinationTypeInt.ApiGroups.ApiGroups = ls

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											destinationTypeInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

											bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestMatcher := &ves_io_schema_policy.RequestMatcher{}
											bypassRateLimitingRules[i].RequestMatcher = requestMatcher
											for _, set := range sl {
												if set != nil {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															if set != nil {
																jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																jwtClaimsMapStrToI := set.(map[string]interface{})

																if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	jwtClaims[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	jwtClaims[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																	jwtClaims[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
					for i, set := range sl {
						if set != nil {
							serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
							serverUrlRulesMapStrToI := set.(map[string]interface{})

							if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								serverUrlRules[i].ApiGroup = w.(string)
							}

							if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								serverUrlRules[i].BasePath = w.(string)
							}

							if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								serverUrlRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									serverUrlRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

								serverUrlRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								serverUrlRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			createSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				policyChoiceTypeFound := false

				if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true

					if v.(bool) {
						policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
						policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
					}

				}

				if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
					policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["policies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								policyChoiceInt.Policies.Policies = policiesInt
								for i, ps := range sl {

									pMapToStrVal := ps.(map[string]interface{})
									policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
										policiesInt[i].Name = v.(string)
									}

									if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										policiesInt[i].Namespace = v.(string)
									}

									if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										policiesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
					rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
					for _, set := range sl {
						if set != nil {
							rateLimiterMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rateLimiterMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_ActionBlock{}
								actionChoiceInt.ActionBlock = &ves_io_schema_rate_limiter.RateLimitBlockAction{}
								rateLimiter.ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										blockDurationChoiceTypeFound := false

										if v, ok := cs["hours"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Hours{}
											blockDurationChoiceInt.Hours = &ves_io_schema_rate_limiter.InputHours{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Hours.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["minutes"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Minutes{}
											blockDurationChoiceInt.Minutes = &ves_io_schema_rate_limiter.InputMinutes{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Minutes.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["seconds"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Seconds{}
											blockDurationChoiceInt.Seconds = &ves_io_schema_rate_limiter.InputSeconds{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Seconds.Duration = uint32(v.(int))

													}

												}
											}

										}

									}
								}

							}

							if v, ok := rateLimiterMapStrToI["disabled"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_Disabled{}
									actionChoiceInt.Disabled = &ves_io_schema.Empty{}
									rateLimiter.ActionChoice = actionChoiceInt
								}

							}

							if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.BurstMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["period_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.PeriodMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
								rateLimiter.TotalNumber = uint32(w.(int))
							}

							if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

								rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}
					}

				}

			}
		}

	}

	//routes
	if v, ok := d.GetOk("routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		routes := make([]*ves_io_schema_views_http_loadbalancer.RouteType, len(sl))
		createSpec.Routes = routes
		for i, set := range sl {
			if set != nil {
				routes[i] = &ves_io_schema_views_http_loadbalancer.RouteType{}
				routesMapStrToI := set.(map[string]interface{})

				choiceTypeFound := false

				if v, ok := routesMapStrToI["custom_route_object"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_CustomRouteObject{}
					choiceInt.CustomRouteObject = &ves_io_schema_views_http_loadbalancer.RouteTypeCustomRoute{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["route_ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeRefInt := &ves_io_schema_views.ObjectRefType{}
								choiceInt.CustomRouteObject.RouteRef = routeRefInt

								for _, set := range sl {
									if set != nil {
										rrMapToStrVal := set.(map[string]interface{})
										if val, ok := rrMapToStrVal["name"]; ok && !isIntfNil(v) {
											routeRefInt.Name = val.(string)
										}
										if val, ok := rrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
											routeRefInt.Namespace = val.(string)
										}

										if val, ok := rrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
											routeRefInt.Tenant = val.(string)
										}
									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["direct_response_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_DirectResponseRoute{}
					choiceInt.DirectResponseRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeDirectResponse{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.DirectResponseRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.DirectResponseRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.DirectResponseRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.DirectResponseRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["route_direct_response"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeDirectResponse := &ves_io_schema_route.RouteDirectResponse{}
								choiceInt.DirectResponseRoute.RouteDirectResponse = routeDirectResponse
								for _, set := range sl {
									if set != nil {
										routeDirectResponseMapStrToI := set.(map[string]interface{})

										if w, ok := routeDirectResponseMapStrToI["response_body"]; ok && !isIntfNil(w) {
											routeDirectResponse.ResponseBody = w.(string)
										}

										if w, ok := routeDirectResponseMapStrToI["response_code"]; ok && !isIntfNil(w) {
											routeDirectResponse.ResponseCode = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["redirect_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_RedirectRoute{}
					choiceInt.RedirectRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeRedirect{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.RedirectRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.RedirectRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.RedirectRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.RedirectRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["route_redirect"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeRedirect := &ves_io_schema_route.RouteRedirect{}
								choiceInt.RedirectRoute.RouteRedirect = routeRedirect
								for _, set := range sl {
									if set != nil {
										routeRedirectMapStrToI := set.(map[string]interface{})

										if w, ok := routeRedirectMapStrToI["host_redirect"]; ok && !isIntfNil(w) {
											routeRedirect.HostRedirect = w.(string)
										}

										if w, ok := routeRedirectMapStrToI["proto_redirect"]; ok && !isIntfNil(w) {
											routeRedirect.ProtoRedirect = w.(string)
										}

										queryParamsTypeFound := false

										if v, ok := routeRedirectMapStrToI["remove_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.RouteRedirect_RemoveAllParams{}
												queryParamsInt.RemoveAllParams = &ves_io_schema.Empty{}
												routeRedirect.QueryParams = queryParamsInt
											}

										}

										if v, ok := routeRedirectMapStrToI["replace_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true
											queryParamsInt := &ves_io_schema_route.RouteRedirect_ReplaceParams{}

											routeRedirect.QueryParams = queryParamsInt

											queryParamsInt.ReplaceParams = v.(string)

										}

										if v, ok := routeRedirectMapStrToI["retain_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.RouteRedirect_RetainAllParams{}
												queryParamsInt.RetainAllParams = &ves_io_schema.Empty{}
												routeRedirect.QueryParams = queryParamsInt
											}

										}

										redirectPathChoiceTypeFound := false

										if v, ok := routeRedirectMapStrToI["path_redirect"]; ok && !isIntfNil(v) && !redirectPathChoiceTypeFound {

											redirectPathChoiceTypeFound = true
											redirectPathChoiceInt := &ves_io_schema_route.RouteRedirect_PathRedirect{}

											routeRedirect.RedirectPathChoice = redirectPathChoiceInt

											redirectPathChoiceInt.PathRedirect = v.(string)

										}

										if v, ok := routeRedirectMapStrToI["prefix_rewrite"]; ok && !isIntfNil(v) && !redirectPathChoiceTypeFound {

											redirectPathChoiceTypeFound = true
											redirectPathChoiceInt := &ves_io_schema_route.RouteRedirect_PrefixRewrite{}

											routeRedirect.RedirectPathChoice = redirectPathChoiceInt

											redirectPathChoiceInt.PrefixRewrite = v.(string)

										}

										if w, ok := routeRedirectMapStrToI["response_code"]; ok && !isIntfNil(w) {
											routeRedirect.ResponseCode = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["simple_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_SimpleRoute{}
					choiceInt.SimpleRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeSimple{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["advanced_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advancedOptions := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions{}
								choiceInt.SimpleRoute.AdvancedOptions = advancedOptions
								for _, set := range sl {
									if set != nil {
										advancedOptionsMapStrToI := set.(map[string]interface{})

										botDefenseJavascriptInjectionChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["bot_defense_javascript_injection"]; ok && !isIntfNil(v) && !botDefenseJavascriptInjectionChoiceTypeFound {

											botDefenseJavascriptInjectionChoiceTypeFound = true
											botDefenseJavascriptInjectionChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection{}
											botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection = &ves_io_schema_route.BotDefenseJavascriptInjectionType{}
											advancedOptions.BotDefenseJavascriptInjectionChoice = botDefenseJavascriptInjectionChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

														botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection.JavascriptLocation = ves_io_schema_route.JavaScriptLocation(ves_io_schema_route.JavaScriptLocation_value[v.(string)])

													}

													if v, ok := cs["javascript_tags"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														javascriptTags := make([]*ves_io_schema_route.JavaScriptTag, len(sl))
														botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection.JavascriptTags = javascriptTags
														for i, set := range sl {
															if set != nil {
																javascriptTags[i] = &ves_io_schema_route.JavaScriptTag{}
																javascriptTagsMapStrToI := set.(map[string]interface{})

																if w, ok := javascriptTagsMapStrToI["javascript_url"]; ok && !isIntfNil(w) {
																	javascriptTags[i].JavascriptUrl = w.(string)
																}

																if v, ok := javascriptTagsMapStrToI["tag_attributes"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	tagAttributes := make([]*ves_io_schema_route.TagAttribute, len(sl))
																	javascriptTags[i].TagAttributes = tagAttributes
																	for i, set := range sl {
																		if set != nil {
																			tagAttributes[i] = &ves_io_schema_route.TagAttribute{}
																			tagAttributesMapStrToI := set.(map[string]interface{})

																			if v, ok := tagAttributesMapStrToI["javascript_tag"]; ok && !isIntfNil(v) {

																				tagAttributes[i].JavascriptTag = ves_io_schema_route.TagAttributeName(ves_io_schema_route.TagAttributeName_value[v.(string)])

																			}

																			if w, ok := tagAttributesMapStrToI["tag_value"]; ok && !isIntfNil(w) {
																				tagAttributes[i].TagValue = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["inherited_bot_defense_javascript_injection"]; ok && !isIntfNil(v) && !botDefenseJavascriptInjectionChoiceTypeFound {

											botDefenseJavascriptInjectionChoiceTypeFound = true

											if v.(bool) {
												botDefenseJavascriptInjectionChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection{}
												botDefenseJavascriptInjectionChoiceInt.InheritedBotDefenseJavascriptInjection = &ves_io_schema.Empty{}
												advancedOptions.BotDefenseJavascriptInjectionChoice = botDefenseJavascriptInjectionChoiceInt
											}

										}

										bufferChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["buffer_policy"]; ok && !isIntfNil(v) && !bufferChoiceTypeFound {

											bufferChoiceTypeFound = true
											bufferChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_BufferPolicy{}
											bufferChoiceInt.BufferPolicy = &ves_io_schema.BufferConfigType{}
											advancedOptions.BufferChoice = bufferChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["disabled"]; ok && !isIntfNil(v) {

														bufferChoiceInt.BufferPolicy.Disabled = v.(bool)

													}

													if v, ok := cs["max_request_bytes"]; ok && !isIntfNil(v) {

														bufferChoiceInt.BufferPolicy.MaxRequestBytes = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["common_buffering"]; ok && !isIntfNil(v) && !bufferChoiceTypeFound {

											bufferChoiceTypeFound = true

											if v.(bool) {
												bufferChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_CommonBuffering{}
												bufferChoiceInt.CommonBuffering = &ves_io_schema.Empty{}
												advancedOptions.BufferChoice = bufferChoiceInt
											}

										}

										clusterRetractChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["do_not_retract_cluster"]; ok && !isIntfNil(v) && !clusterRetractChoiceTypeFound {

											clusterRetractChoiceTypeFound = true

											if v.(bool) {
												clusterRetractChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DoNotRetractCluster{}
												clusterRetractChoiceInt.DoNotRetractCluster = &ves_io_schema.Empty{}
												advancedOptions.ClusterRetractChoice = clusterRetractChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["retract_cluster"]; ok && !isIntfNil(v) && !clusterRetractChoiceTypeFound {

											clusterRetractChoiceTypeFound = true

											if v.(bool) {
												clusterRetractChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RetractCluster{}
												clusterRetractChoiceInt.RetractCluster = &ves_io_schema.Empty{}
												advancedOptions.ClusterRetractChoice = clusterRetractChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["cors_policy"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											corsPolicy := &ves_io_schema.CorsPolicy{}
											advancedOptions.CorsPolicy = corsPolicy
											for _, set := range sl {
												if set != nil {
													corsPolicyMapStrToI := set.(map[string]interface{})

													if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
														corsPolicy.AllowCredentials = w.(bool)
													}

													if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
														corsPolicy.AllowHeaders = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
														corsPolicy.AllowMethods = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														corsPolicy.AllowOrigin = ls
													}

													if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														corsPolicy.AllowOriginRegex = ls
													}

													if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
														corsPolicy.Disabled = w.(bool)
													}

													if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
														corsPolicy.ExposeHeaders = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
														corsPolicy.MaximumAge = int32(w.(int))
													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["csrf_policy"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											csrfPolicy := &ves_io_schema.CsrfPolicy{}
											advancedOptions.CsrfPolicy = csrfPolicy
											for _, set := range sl {
												if set != nil {
													csrfPolicyMapStrToI := set.(map[string]interface{})

													allowedDomainsTypeFound := false

													if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true

														if v.(bool) {
															allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
															allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
															csrfPolicy.AllowedDomains = allowedDomainsInt
														}

													}

													if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true
														allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
														allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
														csrfPolicy.AllowedDomains = allowedDomainsInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["domains"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field domains")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	allowedDomainsInt.CustomDomainList.Domains = ls

																}

															}
														}

													}

													if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true

														if v.(bool) {
															allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
															allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
															csrfPolicy.AllowedDomains = allowedDomainsInt
														}

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["disable_location_add"]; ok && !isIntfNil(w) {
											advancedOptions.DisableLocationAdd = w.(bool)
										}

										if w, ok := advancedOptionsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											advancedOptions.EndpointSubsets = ms
										}

										hashPolicyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["common_hash_policy"]; ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

											hashPolicyChoiceTypeFound = true

											if v.(bool) {
												hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_CommonHashPolicy{}
												hashPolicyChoiceInt.CommonHashPolicy = &ves_io_schema.Empty{}
												advancedOptions.HashPolicyChoice = hashPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["specific_hash_policy"]; ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

											hashPolicyChoiceTypeFound = true
											hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_SpecificHashPolicy{}
											hashPolicyChoiceInt.SpecificHashPolicy = &ves_io_schema_views_http_loadbalancer.HashPolicyListType{}
											advancedOptions.HashPolicyChoice = hashPolicyChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_policy"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														hashPolicy := make([]*ves_io_schema_route.HashPolicyType, len(sl))
														hashPolicyChoiceInt.SpecificHashPolicy.HashPolicy = hashPolicy
														for i, set := range sl {
															if set != nil {
																hashPolicy[i] = &ves_io_schema_route.HashPolicyType{}
																hashPolicyMapStrToI := set.(map[string]interface{})

																policySpecifierTypeFound := false

																if v, ok := hashPolicyMapStrToI["cookie"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_Cookie{}
																	policySpecifierInt.Cookie = &ves_io_schema_route.CookieForHashing{}
																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			httponlyTypeFound := false

																			if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

																				httponlyTypeFound = true

																				if v.(bool) {
																					httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
																					httponlyInt.AddHttponly = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Httponly = httponlyInt
																				}

																			}

																			if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

																				httponlyTypeFound = true

																				if v.(bool) {
																					httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
																					httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Httponly = httponlyInt
																				}

																			}

																			if v, ok := cs["name"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Name = v.(string)

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Path = v.(string)

																			}

																			samesiteTypeFound := false

																			if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
																					samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
																					samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
																					samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
																					samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			secureTypeFound := false

																			if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

																				secureTypeFound = true

																				if v.(bool) {
																					secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
																					secureInt.AddSecure = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Secure = secureInt
																				}

																			}

																			if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

																				secureTypeFound = true

																				if v.(bool) {
																					secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
																					secureInt.IgnoreSecure = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Secure = secureInt
																				}

																			}

																			if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Ttl = uint32(v.(int))

																			}

																		}
																	}

																}

																if v, ok := hashPolicyMapStrToI["header_name"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_HeaderName{}

																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	policySpecifierInt.HeaderName = v.(string)

																}

																if v, ok := hashPolicyMapStrToI["source_ip"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_SourceIp{}

																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	policySpecifierInt.SourceIp = v.(bool)

																}

																if w, ok := hashPolicyMapStrToI["terminal"]; ok && !isIntfNil(w) {
																	hashPolicy[i].Terminal = w.(bool)
																}

															}
														}

													}

												}
											}

										}

										mirroringChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_mirroring"]; ok && !isIntfNil(v) && !mirroringChoiceTypeFound {

											mirroringChoiceTypeFound = true

											if v.(bool) {
												mirroringChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableMirroring{}
												mirroringChoiceInt.DisableMirroring = &ves_io_schema.Empty{}
												advancedOptions.MirroringChoice = mirroringChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["mirror_policy"]; ok && !isIntfNil(v) && !mirroringChoiceTypeFound {

											mirroringChoiceTypeFound = true
											mirroringChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_MirrorPolicy{}
											mirroringChoiceInt.MirrorPolicy = &ves_io_schema_views_http_loadbalancer.MirrorPolicyType{}
											advancedOptions.MirroringChoice = mirroringChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["origin_pool"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														originPoolInt := &ves_io_schema_views.ObjectRefType{}
														mirroringChoiceInt.MirrorPolicy.OriginPool = originPoolInt

														for _, set := range sl {
															if set != nil {
																opMapToStrVal := set.(map[string]interface{})
																if val, ok := opMapToStrVal["name"]; ok && !isIntfNil(v) {
																	originPoolInt.Name = val.(string)
																}
																if val, ok := opMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	originPoolInt.Namespace = val.(string)
																}

																if val, ok := opMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	originPoolInt.Tenant = val.(string)
																}
															}
														}

													}

													if v, ok := cs["percent"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														percent := &ves_io_schema.FractionalPercent{}
														mirroringChoiceInt.MirrorPolicy.Percent = percent
														for _, set := range sl {
															if set != nil {
																percentMapStrToI := set.(map[string]interface{})

																if v, ok := percentMapStrToI["denominator"]; ok && !isIntfNil(v) {

																	percent.Denominator = ves_io_schema.DenominatorType(ves_io_schema.DenominatorType_value[v.(string)])

																}

																if w, ok := percentMapStrToI["numerator"]; ok && !isIntfNil(w) {
																	percent.Numerator = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["priority"]; ok && !isIntfNil(v) {

											advancedOptions.Priority = ves_io_schema.RoutingPriority(ves_io_schema.RoutingPriority_value[v.(string)])

										}

										if v, ok := advancedOptionsMapStrToI["request_cookies_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
											advancedOptions.RequestCookiesToAdd = requestCookiesToAdd
											for i, set := range sl {
												if set != nil {
													requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
													requestCookiesToAddMapStrToI := set.(map[string]interface{})

													if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														requestCookiesToAdd[i].Name = w.(string)
													}

													if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
														requestCookiesToAdd[i].Overwrite = w.(bool)
													}

													valueChoiceTypeFound := false

													if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														requestCookiesToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

														requestCookiesToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["request_cookies_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.RequestCookiesToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
											advancedOptions.RequestHeadersToAdd = requestHeadersToAdd
											for i, set := range sl {
												if set != nil {
													requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
													requestHeadersToAddMapStrToI := set.(map[string]interface{})

													if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
														requestHeadersToAdd[i].Append = w.(bool)
													}

													if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														requestHeadersToAdd[i].Name = w.(string)
													}

													valueChoiceTypeFound := false

													if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														requestHeadersToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

														requestHeadersToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.RequestHeadersToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["response_cookies_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
											advancedOptions.ResponseCookiesToAdd = responseCookiesToAdd
											for i, set := range sl {
												if set != nil {
													responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
													responseCookiesToAddMapStrToI := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

														responseCookiesToAdd[i].DomainChoice = domainChoiceInt

														domainChoiceInt.AddDomain = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
															domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].DomainChoice = domainChoiceInt
														}

													}

													expiryChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

														expiryChoiceTypeFound = true
														expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

														responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

														expiryChoiceInt.AddExpiry = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

														expiryChoiceTypeFound = true

														if v.(bool) {
															expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
															expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
														}

													}

													httponlyChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

														httponlyChoiceTypeFound = true

														if v.(bool) {
															httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
															httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

														httponlyChoiceTypeFound = true

														if v.(bool) {
															httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
															httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
														}

													}

													maxAgeChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

														maxAgeChoiceTypeFound = true

														if v.(bool) {
															maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
															maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

														maxAgeChoiceTypeFound = true
														maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

														responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

														maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

													}

													if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														responseCookiesToAdd[i].Name = w.(string)
													}

													if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
														responseCookiesToAdd[i].Overwrite = w.(bool)
													}

													partitionedChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

														partitionedChoiceTypeFound = true

														if v.(bool) {
															partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
															partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

														partitionedChoiceTypeFound = true

														if v.(bool) {
															partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
															partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
														}

													}

													pathChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

														pathChoiceTypeFound = true
														pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

														responseCookiesToAdd[i].PathChoice = pathChoiceInt

														pathChoiceInt.AddPath = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

														pathChoiceTypeFound = true

														if v.(bool) {
															pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
															pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PathChoice = pathChoiceInt
														}

													}

													samesiteChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
															samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
															samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
															samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
															samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													secureChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

														secureChoiceTypeFound = true

														if v.(bool) {
															secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
															secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SecureChoice = secureChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

														secureChoiceTypeFound = true

														if v.(bool) {
															secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
															secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SecureChoice = secureChoiceInt
														}

													}

													valueChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true

														if v.(bool) {
															valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
															valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].ValueChoice = valueChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														responseCookiesToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

														responseCookiesToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["response_cookies_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.ResponseCookiesToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
											advancedOptions.ResponseHeadersToAdd = responseHeadersToAdd
											for i, set := range sl {
												if set != nil {
													responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
													responseHeadersToAddMapStrToI := set.(map[string]interface{})

													if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
														responseHeadersToAdd[i].Append = w.(bool)
													}

													if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														responseHeadersToAdd[i].Name = w.(string)
													}

													valueChoiceTypeFound := false

													if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														responseHeadersToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

														responseHeadersToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.ResponseHeadersToRemove = ls
										}

										retryPolicyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["default_retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true

											if v.(bool) {
												retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DefaultRetryPolicy{}
												retryPolicyChoiceInt.DefaultRetryPolicy = &ves_io_schema.Empty{}
												advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["no_retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true

											if v.(bool) {
												retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_NoRetryPolicy{}
												retryPolicyChoiceInt.NoRetryPolicy = &ves_io_schema.Empty{}
												advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true
											retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RetryPolicy{}
											retryPolicyChoiceInt.RetryPolicy = &ves_io_schema.RetryPolicyType{}
											advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["back_off"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														backOff := &ves_io_schema.RetryBackOff{}
														retryPolicyChoiceInt.RetryPolicy.BackOff = backOff
														for _, set := range sl {
															if set != nil {
																backOffMapStrToI := set.(map[string]interface{})

																if w, ok := backOffMapStrToI["base_interval"]; ok && !isIntfNil(w) {
																	backOff.BaseInterval = uint32(w.(int))
																}

																if w, ok := backOffMapStrToI["max_interval"]; ok && !isIntfNil(w) {
																	backOff.MaxInterval = uint32(w.(int))
																}

															}
														}

													}

													if v, ok := cs["num_retries"]; ok && !isIntfNil(v) {

														retryPolicyChoiceInt.RetryPolicy.NumRetries = uint32(v.(int))

													}

													if v, ok := cs["per_try_timeout"]; ok && !isIntfNil(v) {

														retryPolicyChoiceInt.RetryPolicy.PerTryTimeout = uint32(v.(int))

													}

													if v, ok := cs["retriable_status_codes"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														retryPolicyChoiceInt.RetryPolicy.RetriableStatusCodes = ls

													}

													if v, ok := cs["retry_condition"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field retry_condition")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														retryPolicyChoiceInt.RetryPolicy.RetryCondition = ls

													}

												}
											}

										}

										rewriteChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_prefix_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true

											if v.(bool) {
												rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisablePrefixRewrite{}
												rewriteChoiceInt.DisablePrefixRewrite = &ves_io_schema.Empty{}
												advancedOptions.RewriteChoice = rewriteChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["prefix_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true
											rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_PrefixRewrite{}

											advancedOptions.RewriteChoice = rewriteChoiceInt

											rewriteChoiceInt.PrefixRewrite = v.(string)

										}

										if v, ok := advancedOptionsMapStrToI["regex_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true
											rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RegexRewrite{}
											rewriteChoiceInt.RegexRewrite = &ves_io_schema.RegexMatchRewrite{}
											advancedOptions.RewriteChoice = rewriteChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["pattern"]; ok && !isIntfNil(v) {

														rewriteChoiceInt.RegexRewrite.Pattern = v.(string)

													}

													if v, ok := cs["substitution"]; ok && !isIntfNil(v) {

														rewriteChoiceInt.RegexRewrite.Substitution = v.(string)

													}

												}
											}

										}

										spdyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_spdy"]; ok && !isIntfNil(v) && !spdyChoiceTypeFound {

											spdyChoiceTypeFound = true

											if v.(bool) {
												spdyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableSpdy{}
												spdyChoiceInt.DisableSpdy = &ves_io_schema.Empty{}
												advancedOptions.SpdyChoice = spdyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["enable_spdy"]; ok && !isIntfNil(v) && !spdyChoiceTypeFound {

											spdyChoiceTypeFound = true

											if v.(bool) {
												spdyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_EnableSpdy{}
												spdyChoiceInt.EnableSpdy = &ves_io_schema.Empty{}
												advancedOptions.SpdyChoice = spdyChoiceInt
											}

										}

										if w, ok := advancedOptionsMapStrToI["timeout"]; ok && !isIntfNil(w) {
											advancedOptions.Timeout = uint32(w.(int))
										}

										wafChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true
											wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_AppFirewall{}
											wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
											advancedOptions.WafChoice = wafChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true

											if v.(bool) {
												wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableWaf{}
												wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
												advancedOptions.WafChoice = wafChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["inherited_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true

											if v.(bool) {
												wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_InheritedWaf{}
												wafChoiceInt.InheritedWaf = &ves_io_schema.Empty{}
												advancedOptions.WafChoice = wafChoiceInt
											}

										}

										websocketChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_web_socket_config"]; ok && !isIntfNil(v) && !websocketChoiceTypeFound {

											websocketChoiceTypeFound = true

											if v.(bool) {
												websocketChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableWebSocketConfig{}
												websocketChoiceInt.DisableWebSocketConfig = &ves_io_schema.Empty{}
												advancedOptions.WebsocketChoice = websocketChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["web_socket_config"]; ok && !isIntfNil(v) && !websocketChoiceTypeFound {

											websocketChoiceTypeFound = true
											websocketChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_WebSocketConfig{}
											websocketChoiceInt.WebSocketConfig = &ves_io_schema_route.WebsocketConfigType{}
											advancedOptions.WebsocketChoice = websocketChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["use_websocket"]; ok && !isIntfNil(v) {

														websocketChoiceInt.WebSocketConfig.UseWebsocket = v.(bool)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.SimpleRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							hostRewriteParamsTypeFound := false

							if v, ok := cs["auto_host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true

								if v.(bool) {
									hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_AutoHostRewrite{}
									hostRewriteParamsInt.AutoHostRewrite = &ves_io_schema.Empty{}
									choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt
								}

							}

							if v, ok := cs["disable_host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true

								if v.(bool) {
									hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_DisableHostRewrite{}
									hostRewriteParamsInt.DisableHostRewrite = &ves_io_schema.Empty{}
									choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt
								}

							}

							if v, ok := cs["host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true
								hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_HostRewrite{}

								choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt

								hostRewriteParamsInt.HostRewrite = v.(string)

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.SimpleRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.SimpleRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["origin_pools"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								originPools := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
								choiceInt.SimpleRoute.OriginPools = originPools
								for i, set := range sl {
									if set != nil {
										originPools[i] = &ves_io_schema_views.OriginPoolWithWeight{}
										originPoolsMapStrToI := set.(map[string]interface{})

										if w, ok := originPoolsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											originPools[i].EndpointSubsets = ms
										}

										poolChoiceTypeFound := false

										if v, ok := originPoolsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
											poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
											originPools[i].PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := originPoolsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
											poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
											originPools[i].PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Tenant = v.(string)

													}

												}
											}

										}

										if w, ok := originPoolsMapStrToI["priority"]; ok && !isIntfNil(w) {
											originPools[i].Priority = uint32(w.(int))
										}

										if w, ok := originPoolsMapStrToI["weight"]; ok && !isIntfNil(w) {
											originPools[i].Weight = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.SimpleRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := &ves_io_schema_route.QueryParamsSimpleRoute{}
								choiceInt.SimpleRoute.QueryParams = queryParams
								for _, set := range sl {
									if set != nil {
										queryParamsMapStrToI := set.(map[string]interface{})

										queryParamsTypeFound := false

										if v, ok := queryParamsMapStrToI["remove_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_RemoveAllParams{}
												queryParamsInt.RemoveAllParams = &ves_io_schema.Empty{}
												queryParams.QueryParams = queryParamsInt
											}

										}

										if v, ok := queryParamsMapStrToI["replace_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true
											queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_ReplaceParams{}

											queryParams.QueryParams = queryParamsInt

											queryParamsInt.ReplaceParams = v.(string)

										}

										if v, ok := queryParamsMapStrToI["retain_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_RetainAllParams{}
												queryParamsInt.RetainAllParams = &ves_io_schema.Empty{}
												queryParams.QueryParams = queryParamsInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//sensitive_data_disclosure_rules
	if v, ok := d.GetOk("sensitive_data_disclosure_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		sensitiveDataDisclosureRules := &ves_io_schema_views_http_loadbalancer.SensitiveDataDisclosureRules{}
		createSpec.SensitiveDataDisclosureRules = sensitiveDataDisclosureRules
		for _, set := range sl {
			if set != nil {
				sensitiveDataDisclosureRulesMapStrToI := set.(map[string]interface{})

				if v, ok := sensitiveDataDisclosureRulesMapStrToI["sensitive_data_types_in_response"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataTypesInResponse := make([]*ves_io_schema_views_http_loadbalancer.SensitiveDataTypes, len(sl))
					sensitiveDataDisclosureRules.SensitiveDataTypesInResponse = sensitiveDataTypesInResponse
					for i, set := range sl {
						if set != nil {
							sensitiveDataTypesInResponse[i] = &ves_io_schema_views_http_loadbalancer.SensitiveDataTypes{}
							sensitiveDataTypesInResponseMapStrToI := set.(map[string]interface{})

							if v, ok := sensitiveDataTypesInResponseMapStrToI["body"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								body := &ves_io_schema_views_http_loadbalancer.BodySectionMaskingOptions{}
								sensitiveDataTypesInResponse[i].Body = body
								for _, set := range sl {
									if set != nil {
										bodyMapStrToI := set.(map[string]interface{})

										if w, ok := bodyMapStrToI["fields"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field fields")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											body.Fields = ls
										}

									}
								}

							}

							typeConditionTypeChoiceTypeFound := false

							if v, ok := sensitiveDataTypesInResponseMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !typeConditionTypeChoiceTypeFound {

								typeConditionTypeChoiceTypeFound = true
								typeConditionTypeChoiceInt := &ves_io_schema_views_http_loadbalancer.SensitiveDataTypes_ApiEndpoint{}
								typeConditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								sensitiveDataTypesInResponse[i].TypeConditionTypeChoice = typeConditionTypeChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											typeConditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											typeConditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//sensitive_data_policy_choice

	sensitiveDataPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("default_sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true

		if v.(bool) {
			sensitiveDataPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DefaultSensitiveDataPolicy{}
			sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
			createSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("sensitive_data_policy"); ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true
		sensitiveDataPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_SensitiveDataPolicy{}
		sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
		createSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
					sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

					for _, set := range sl {
						if set != nil {
							sdprMapToStrVal := set.(map[string]interface{})
							if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Name = val.(string)
							}
							if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Namespace = val.(string)
							}

							if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	//service_policy_choice

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		createSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policies"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policiesInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policiesInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policiesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	//slow_ddos_mitigation_choice

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	//threat_mesh_choice

	threatMeshChoiceTypeFound := false

	if v, ok := d.GetOk("disable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableThreatMesh{}
			threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
			createSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableThreatMesh{}
			threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
			createSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	//trust_client_ip_headers_choice

	trustClientIpHeadersChoiceTypeFound := false

	if v, ok := d.GetOk("disable_trust_client_ip_headers"); ok && !trustClientIpHeadersChoiceTypeFound {

		trustClientIpHeadersChoiceTypeFound = true

		if v.(bool) {
			trustClientIpHeadersChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableTrustClientIpHeaders{}
			trustClientIpHeadersChoiceInt.DisableTrustClientIpHeaders = &ves_io_schema.Empty{}
			createSpec.TrustClientIpHeadersChoice = trustClientIpHeadersChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_trust_client_ip_headers"); ok && !isIntfNil(v) && !trustClientIpHeadersChoiceTypeFound {

		trustClientIpHeadersChoiceTypeFound = true
		trustClientIpHeadersChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_EnableTrustClientIpHeaders{}
		trustClientIpHeadersChoiceInt.EnableTrustClientIpHeaders = &ves_io_schema_virtual_host.ClientIPHeaders{}
		createSpec.TrustClientIpHeadersChoice = trustClientIpHeadersChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["client_ip_headers"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field client_ip_headers")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					trustClientIpHeadersChoiceInt.EnableTrustClientIpHeaders.ClientIpHeaders = ls

				}

			}
		}

	}

	//trusted_clients
	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.TrustedClients = trustedClients
		for i, set := range sl {
			if set != nil {
				trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				trustedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					trustedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					trustedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					trustedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	//user_id_choice

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			createSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		createSpec.UserIdChoice = userIdChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Tenant = v.(string)

				}

			}
		}

	}

	//waf_choice

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !isIntfNil(v) && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		createSpec.WafChoice = wafChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Tenant = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_http_loadbalancer.CreateSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			createSpec.WafChoice = wafChoiceInt
		}

	}

	//waf_exclusion_rules
	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		createSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra HttpLoadbalancer object with struct: %+v", createReq)

	createHttpLoadbalancerResp, err := client.CreateObject(context.Background(), ves_io_schema_views_http_loadbalancer.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating HttpLoadbalancer: %s", err)
	}
	d.SetId(createHttpLoadbalancerResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraHttpLoadbalancerRead(d, meta)
}

func resourceVolterraHttpLoadbalancerRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_http_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] HttpLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra HttpLoadbalancer %q: %s", d.Id(), err)
	}
	return setHttpLoadbalancerFields(client, d, resp)
}

func setHttpLoadbalancerFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	spec := resp.GetObjSpec().(*ves_io_schema_views_http_loadbalancer.SpecType)
	d.Set("cname", spec.GcSpec.GetHostName())

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	drift.DriftDetectionSpec(d, resp)

	return nil
}

// resourceVolterraHttpLoadbalancerUpdate updates HttpLoadbalancer resource
func resourceVolterraHttpLoadbalancerUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_http_loadbalancer.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		updateSpec.AddLocation =
			v.(bool)

	}

	advertiseChoiceTypeFound := false

	if v, ok := d.GetOk("advertise_custom"); ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_AdvertiseCustom{}
		advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
		updateSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
					advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
					for i, set := range sl {
						if set != nil {
							advertiseWhere[i] = &ves_io_schema_views.WhereType{}
							advertiseWhereMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := advertiseWhereMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_AdvertiseOnPublic{}
								choiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											publicIp := &ves_io_schema_views.ObjectRefType{}
											choiceInt.AdvertiseOnPublic.PublicIp = publicIp
											for _, set := range sl {
												if set != nil {
													publicIpMapStrToI := set.(map[string]interface{})

													if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
														publicIp.Name = w.(string)
													}

													if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
														publicIp.Namespace = w.(string)
													}

													if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
														publicIp.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_Site{}
								choiceInt.Site = &ves_io_schema_views.WhereSite{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.Site.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.Site.Ipv6 = v.(string)

										}

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

										}

										if v, ok := cs["site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											site := &ves_io_schema_views.ObjectRefType{}
											choiceInt.Site.Site = site
											for _, set := range sl {
												if set != nil {
													siteMapStrToI := set.(map[string]interface{})

													if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
														site.Name = w.(string)
													}

													if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														site.Namespace = w.(string)
													}

													if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														site.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
								choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.SiteSegment.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.SiteSegment.Ipv6 = v.(string)

										}

										if v, ok := cs["segment"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											segment := &ves_io_schema_views.ObjectRefType{}
											choiceInt.SiteSegment.Segment = segment
											for _, set := range sl {
												if set != nil {
													segmentMapStrToI := set.(map[string]interface{})

													if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
														segment.Name = w.(string)
													}

													if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
														segment.Namespace = w.(string)
													}

													if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
														segment.Tenant = w.(string)
													}

												}
											}

										}

										if v, ok := cs["site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											site := &ves_io_schema_views.ObjectRefType{}
											choiceInt.SiteSegment.Site = site
											for _, set := range sl {
												if set != nil {
													siteMapStrToI := set.(map[string]interface{})

													if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
														site.Name = w.(string)
													}

													if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														site.Namespace = w.(string)
													}

													if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														site.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
								choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										v6VipChoiceTypeFound := false

										if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

											v6VipChoiceTypeFound = true

											if v.(bool) {
												v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
												v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
												choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
											}

										}

										if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

											v6VipChoiceTypeFound = true
											v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

											choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

											v6VipChoiceInt.SpecificV6Vip = v.(string)

										}

										vipChoiceTypeFound := false

										if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

											vipChoiceTypeFound = true

											if v.(bool) {
												vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
												vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
												choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
											}

										}

										if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

											vipChoiceTypeFound = true
											vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

											choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

											vipChoiceInt.SpecificVip = v.(string)

										}

										if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualNetwork := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
											for _, set := range sl {
												if set != nil {
													virtualNetworkMapStrToI := set.(map[string]interface{})

													if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualNetwork.Name = w.(string)
													}

													if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualNetwork.Namespace = w.(string)
													}

													if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualNetwork.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
								choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSite.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSiteSegment{}
								choiceInt.VirtualSiteSegment = &ves_io_schema_views.WhereVirtualSiteSegment{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteSegment.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteSegment.Ipv6 = v.(string)

										}

										if v, ok := cs["segment"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											segment := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteSegment.Segment = segment
											for _, set := range sl {
												if set != nil {
													segmentMapStrToI := set.(map[string]interface{})

													if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
														segment.Name = w.(string)
													}

													if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
														segment.Namespace = w.(string)
													}

													if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
														segment.Tenant = w.(string)
													}

												}
											}

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteSegment.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["virtual_site_with_vip"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_VirtualSiteWithVip{}
								choiceInt.VirtualSiteWithVip = &ves_io_schema_views.WhereVirtualSiteSpecifiedVIP{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ip"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Ipv6 = v.(string)

										}

										if v, ok := cs["network"]; ok && !isIntfNil(v) {

											choiceInt.VirtualSiteWithVip.Network = ves_io_schema_views.SiteNetworkSpecifiedVIP(ves_io_schema_views.SiteNetworkSpecifiedVIP_value[v.(string)])

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualSite := &ves_io_schema_views.ObjectRefType{}
											choiceInt.VirtualSiteWithVip.VirtualSite = virtualSite
											for _, set := range sl {
												if set != nil {
													virtualSiteMapStrToI := set.(map[string]interface{})

													if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
														virtualSite.Name = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
														virtualSite.Namespace = w.(string)
													}

													if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
														virtualSite.Tenant = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
								choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
								advertiseWhere[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
											choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
											choiceInt.Vk8SService.Choice = choiceIntNew

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														choiceIntNew.Site.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
											choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
											choiceInt.Vk8SService.Choice = choiceIntNew

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														choiceIntNew.VirtualSite.Tenant = v.(string)

													}

												}
											}

										}

									}
								}

							}

							portChoiceTypeFound := false

							if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_views.WhereType_Port{}

								advertiseWhere[i].PortChoice = portChoiceInt

								portChoiceInt.Port = uint32(v.(int))

							}

							if v, ok := advertiseWhereMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_views.WhereType_PortRanges{}

								advertiseWhere[i].PortChoice = portChoiceInt

								portChoiceInt.PortRanges = v.(string)

							}

							if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
									portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
									advertiseWhere[i].PortChoice = portChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("advertise_on_public"); ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{}
		advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
		updateSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publicIp := &ves_io_schema_views.ObjectRefType{}
					advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
					for _, set := range sl {
						if set != nil {
							publicIpMapStrToI := set.(map[string]interface{})

							if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
								publicIp.Name = w.(string)
							}

							if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
								publicIp.Namespace = w.(string)
							}

							if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
								publicIp.Tenant = w.(string)
							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("advertise_on_public_default_vip"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{}
			advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
			updateSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	if v, ok := d.GetOk("do_not_advertise"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DoNotAdvertise{}
			advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
			updateSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	apiDefinitionChoiceTypeFound := false

	if v, ok := d.GetOk("api_specification"); ok && !isIntfNil(v) && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true
		apiDefinitionChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ApiSpecification{}
		apiDefinitionChoiceInt.ApiSpecification = &ves_io_schema_views_common_waf.APISpecificationSettings{}
		updateSpec.ApiDefinitionChoice = apiDefinitionChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_definition"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiDefinitionIntNew := &ves_io_schema_views.ObjectRefType{}
					apiDefinitionChoiceInt.ApiSpecification.ApiDefinition = apiDefinitionIntNew

					for _, set := range sl {
						if set != nil {
							adMapToStrVal := set.(map[string]interface{})
							if val, ok := adMapToStrVal["name"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Name = val.(string)
							}
							if val, ok := adMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Namespace = val.(string)
							}

							if val, ok := adMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								apiDefinitionIntNew.Tenant = val.(string)
							}
						}
					}

				}

				validationTargetChoiceTypeFound := false

				if v, ok := cs["validation_all_spec_endpoints"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{}
					validationTargetChoiceInt.ValidationAllSpecEndpoints = &ves_io_schema_views_common_waf.OpenApiValidationAllSpecEndpointsSettings{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.FallThroughMode = fallThroughMode
								for _, set := range sl {
									if set != nil {
										fallThroughModeMapStrToI := set.(map[string]interface{})

										fallThroughModeChoiceTypeFound := false

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true

											if v.(bool) {
												fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
												fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
												fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
											}

										}

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true
											fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
											fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
											fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
														fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
														for i, set := range sl {
															if set != nil {
																openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																openApiValidationRulesMapStrToI := set.(map[string]interface{})

																actionChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																		actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																		actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																		actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																conditionTypeChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																	conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field methods")
																					}
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.ApiGroup = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.BasePath = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	metadata := &ves_io_schema.MessageMetaType{}
																	openApiValidationRules[i].Metadata = metadata
																	for _, set := range sl {
																		if set != nil {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["settings"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.Settings = settings
								for _, set := range sl {
									if set != nil {
										settingsMapStrToI := set.(map[string]interface{})

										oversizedBodyChoiceTypeFound := false

										if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
												oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
												oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										propertyValidationSettingsChoiceTypeFound := false

										if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true
											propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
											propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
											settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
														for _, set := range sl {
															if set != nil {
																queryParametersMapStrToI := set.(map[string]interface{})

																additionalParametersChoiceTypeFound := false

																if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																		additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

																if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																		additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true

											if v.(bool) {
												propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
												propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
												settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
											}

										}

									}
								}

							}

							if v, ok := cs["validation_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
								validationTargetChoiceInt.ValidationAllSpecEndpoints.ValidationMode = validationMode
								for _, set := range sl {
									if set != nil {
										validationModeMapStrToI := set.(map[string]interface{})

										responseValidationModeChoiceTypeFound := false

										if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

											responseValidationModeChoiceTypeFound = true
											responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
											responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
											validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

														response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field response_validation_properties")
															}
															response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
														}
														responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

													}

													validationEnforcementTypeTypeFound := false

													if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
															validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
															responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

													if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
															validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
															responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

												}
											}

										}

										if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

											responseValidationModeChoiceTypeFound = true

											if v.(bool) {
												responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
												responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
												validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
											}

										}

										validationModeChoiceTypeFound := false

										if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

											validationModeChoiceTypeFound = true

											if v.(bool) {
												validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
												validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
												validationMode.ValidationModeChoice = validationModeChoiceInt
											}

										}

										if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

											validationModeChoiceTypeFound = true
											validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
											validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
											validationMode.ValidationModeChoice = validationModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

														request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field request_validation_properties")
															}
															request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
														}
														validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

													}

													validationEnforcementTypeTypeFound := false

													if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
															validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
															validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

													if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

														validationEnforcementTypeTypeFound = true

														if v.(bool) {
															validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
															validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
															validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["validation_custom_list"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true
					validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationCustomList{}
					validationTargetChoiceInt.ValidationCustomList = &ves_io_schema_views_common_waf.ValidateApiBySpecRule{}
					apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["fall_through_mode"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								fallThroughMode := &ves_io_schema_views_common_waf.OpenApiFallThroughMode{}
								validationTargetChoiceInt.ValidationCustomList.FallThroughMode = fallThroughMode
								for _, set := range sl {
									if set != nil {
										fallThroughModeMapStrToI := set.(map[string]interface{})

										fallThroughModeChoiceTypeFound := false

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_allow"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true

											if v.(bool) {
												fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeAllow{}
												fallThroughModeChoiceInt.FallThroughModeAllow = &ves_io_schema.Empty{}
												fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt
											}

										}

										if v, ok := fallThroughModeMapStrToI["fall_through_mode_custom"]; ok && !isIntfNil(v) && !fallThroughModeChoiceTypeFound {

											fallThroughModeChoiceTypeFound = true
											fallThroughModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiFallThroughMode_FallThroughModeCustom{}
											fallThroughModeChoiceInt.FallThroughModeCustom = &ves_io_schema_views_common_waf.CustomFallThroughMode{}
											fallThroughMode.FallThroughModeChoice = fallThroughModeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														openApiValidationRules := make([]*ves_io_schema_views_common_waf.FallThroughRule, len(sl))
														fallThroughModeChoiceInt.FallThroughModeCustom.OpenApiValidationRules = openApiValidationRules
														for i, set := range sl {
															if set != nil {
																openApiValidationRules[i] = &ves_io_schema_views_common_waf.FallThroughRule{}
																openApiValidationRulesMapStrToI := set.(map[string]interface{})

																actionChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionBlock{}
																		actionChoiceInt.ActionBlock = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionReport{}
																		actionChoiceInt.ActionReport = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["action_skip"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

																	actionChoiceTypeFound = true

																	if v.(bool) {
																		actionChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ActionSkip{}
																		actionChoiceInt.ActionSkip = &ves_io_schema.Empty{}
																		openApiValidationRules[i].ActionChoice = actionChoiceInt
																	}

																}

																conditionTypeChoiceTypeFound := false

																if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiEndpoint{}
																	conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																				methodsList := []ves_io_schema.HttpMethod{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field methods")
																					}
																					methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																				}
																				conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

																			}

																		}
																	}

																}

																if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_ApiGroup{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.ApiGroup = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

																	conditionTypeChoiceTypeFound = true
																	conditionTypeChoiceInt := &ves_io_schema_views_common_waf.FallThroughRule_BasePath{}

																	openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

																	conditionTypeChoiceInt.BasePath = v.(string)

																}

																if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	metadata := &ves_io_schema.MessageMetaType{}
																	openApiValidationRules[i].Metadata = metadata
																	for _, set := range sl {
																		if set != nil {
																			metadataMapStrToI := set.(map[string]interface{})

																			if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																				metadata.Description = w.(string)
																			}

																			if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																				metadata.Name = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["open_api_validation_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								openApiValidationRules := make([]*ves_io_schema_views_common_waf.OpenApiValidationRule, len(sl))
								validationTargetChoiceInt.ValidationCustomList.OpenApiValidationRules = openApiValidationRules
								for i, set := range sl {
									if set != nil {
										openApiValidationRules[i] = &ves_io_schema_views_common_waf.OpenApiValidationRule{}
										openApiValidationRulesMapStrToI := set.(map[string]interface{})

										conditionTypeChoiceTypeFound := false

										if v, ok := openApiValidationRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiEndpoint{}
											conditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														conditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														conditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["api_group"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_ApiGroup{}

											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											conditionTypeChoiceInt.ApiGroup = v.(string)

										}

										if v, ok := openApiValidationRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !conditionTypeChoiceTypeFound {

											conditionTypeChoiceTypeFound = true
											conditionTypeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_BasePath{}

											openApiValidationRules[i].ConditionTypeChoice = conditionTypeChoiceInt

											conditionTypeChoiceInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := openApiValidationRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												openApiValidationRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationRule_SpecificDomain{}

											openApiValidationRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := openApiValidationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											openApiValidationRules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := openApiValidationRulesMapStrToI["validation_mode"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											validationMode := &ves_io_schema_views_common_waf.OpenApiValidationMode{}
											openApiValidationRules[i].ValidationMode = validationMode
											for _, set := range sl {
												if set != nil {
													validationModeMapStrToI := set.(map[string]interface{})

													responseValidationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["response_validation_mode_active"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true
														responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ResponseValidationModeActive{}
														responseValidationModeChoiceInt.ResponseValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse{}
														validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["response_validation_properties"]; ok && !isIntfNil(v) {

																	response_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field response_validation_properties")
																		}
																		response_validation_propertiesList = append(response_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																	}
																	responseValidationModeChoiceInt.ResponseValidationModeActive.ResponseValidationProperties = response_validation_propertiesList

																}

																validationEnforcementTypeTypeFound := false

																if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{}
																		validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

																if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{}
																		validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																		responseValidationModeChoiceInt.ResponseValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

															}
														}

													}

													if v, ok := validationModeMapStrToI["skip_response_validation"]; ok && !isIntfNil(v) && !responseValidationModeChoiceTypeFound {

														responseValidationModeChoiceTypeFound = true

														if v.(bool) {
															responseValidationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipResponseValidation{}
															responseValidationModeChoiceInt.SkipResponseValidation = &ves_io_schema.Empty{}
															validationMode.ResponseValidationModeChoice = responseValidationModeChoiceInt
														}

													}

													validationModeChoiceTypeFound := false

													if v, ok := validationModeMapStrToI["skip_validation"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true

														if v.(bool) {
															validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_SkipValidation{}
															validationModeChoiceInt.SkipValidation = &ves_io_schema.Empty{}
															validationMode.ValidationModeChoice = validationModeChoiceInt
														}

													}

													if v, ok := validationModeMapStrToI["validation_mode_active"]; ok && !isIntfNil(v) && !validationModeChoiceTypeFound {

														validationModeChoiceTypeFound = true
														validationModeChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationMode_ValidationModeActive{}
														validationModeChoiceInt.ValidationModeActive = &ves_io_schema_views_common_waf.OpenApiValidationModeActive{}
														validationMode.ValidationModeChoice = validationModeChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["request_validation_properties"]; ok && !isIntfNil(v) {

																	request_validation_propertiesList := []ves_io_schema.OpenApiValidationProperties{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field request_validation_properties")
																		}
																		request_validation_propertiesList = append(request_validation_propertiesList, ves_io_schema.OpenApiValidationProperties(ves_io_schema.OpenApiValidationProperties_value[j.(string)]))
																	}
																	validationModeChoiceInt.ValidationModeActive.RequestValidationProperties = request_validation_propertiesList

																}

																validationEnforcementTypeTypeFound := false

																if v, ok := cs["enforcement_block"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementBlock{}
																		validationEnforcementTypeInt.EnforcementBlock = &ves_io_schema.Empty{}
																		validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

																if v, ok := cs["enforcement_report"]; ok && !isIntfNil(v) && !validationEnforcementTypeTypeFound {

																	validationEnforcementTypeTypeFound = true

																	if v.(bool) {
																		validationEnforcementTypeInt := &ves_io_schema_views_common_waf.OpenApiValidationModeActive_EnforcementReport{}
																		validationEnforcementTypeInt.EnforcementReport = &ves_io_schema.Empty{}
																		validationModeChoiceInt.ValidationModeActive.ValidationEnforcementType = validationEnforcementTypeInt
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["settings"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								settings := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings{}
								validationTargetChoiceInt.ValidationCustomList.Settings = settings
								for _, set := range sl {
									if set != nil {
										settingsMapStrToI := set.(map[string]interface{})

										oversizedBodyChoiceTypeFound := false

										if v, ok := settingsMapStrToI["oversized_body_fail_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{}
												oversizedBodyChoiceInt.OversizedBodyFailValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										if v, ok := settingsMapStrToI["oversized_body_skip_validation"]; ok && !isIntfNil(v) && !oversizedBodyChoiceTypeFound {

											oversizedBodyChoiceTypeFound = true

											if v.(bool) {
												oversizedBodyChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{}
												oversizedBodyChoiceInt.OversizedBodySkipValidation = &ves_io_schema.Empty{}
												settings.OversizedBodyChoice = oversizedBodyChoiceInt
											}

										}

										propertyValidationSettingsChoiceTypeFound := false

										if v, ok := settingsMapStrToI["property_validation_settings_custom"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true
											propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{}
											propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom = &ves_io_schema_views_common_waf.ValidationPropertySetting{}
											settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["query_parameters"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParameters := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters{}
														propertyValidationSettingsChoiceInt.PropertyValidationSettingsCustom.QueryParameters = queryParameters
														for _, set := range sl {
															if set != nil {
																queryParametersMapStrToI := set.(map[string]interface{})

																additionalParametersChoiceTypeFound := false

																if v, ok := queryParametersMapStrToI["allow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{}
																		additionalParametersChoiceInt.AllowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

																if v, ok := queryParametersMapStrToI["disallow_additional_parameters"]; ok && !isIntfNil(v) && !additionalParametersChoiceTypeFound {

																	additionalParametersChoiceTypeFound = true

																	if v.(bool) {
																		additionalParametersChoiceInt := &ves_io_schema_views_common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{}
																		additionalParametersChoiceInt.DisallowAdditionalParameters = &ves_io_schema.Empty{}
																		queryParameters.AdditionalParametersChoice = additionalParametersChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := settingsMapStrToI["property_validation_settings_default"]; ok && !isIntfNil(v) && !propertyValidationSettingsChoiceTypeFound {

											propertyValidationSettingsChoiceTypeFound = true

											if v.(bool) {
												propertyValidationSettingsChoiceInt := &ves_io_schema_views_common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{}
												propertyValidationSettingsChoiceInt.PropertyValidationSettingsDefault = &ves_io_schema.Empty{}
												settings.PropertyValidationSettingsChoice = propertyValidationSettingsChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["validation_disabled"]; ok && !isIntfNil(v) && !validationTargetChoiceTypeFound {

					validationTargetChoiceTypeFound = true

					if v.(bool) {
						validationTargetChoiceInt := &ves_io_schema_views_common_waf.APISpecificationSettings_ValidationDisabled{}
						validationTargetChoiceInt.ValidationDisabled = &ves_io_schema.Empty{}
						apiDefinitionChoiceInt.ApiSpecification.ValidationTargetChoice = validationTargetChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_api_definition"); ok && !apiDefinitionChoiceTypeFound {

		apiDefinitionChoiceTypeFound = true

		if v.(bool) {
			apiDefinitionChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableApiDefinition{}
			apiDefinitionChoiceInt.DisableApiDefinition = &ves_io_schema.Empty{}
			updateSpec.ApiDefinitionChoice = apiDefinitionChoiceInt
		}

	}

	apiDiscoveryChoiceTypeFound := false

	if v, ok := d.GetOk("disable_api_discovery"); ok && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true

		if v.(bool) {
			apiDiscoveryChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableApiDiscovery{}
			apiDiscoveryChoiceInt.DisableApiDiscovery = &ves_io_schema.Empty{}
			updateSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_api_discovery"); ok && !isIntfNil(v) && !apiDiscoveryChoiceTypeFound {

		apiDiscoveryChoiceTypeFound = true
		apiDiscoveryChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableApiDiscovery{}
		apiDiscoveryChoiceInt.EnableApiDiscovery = &ves_io_schema_views_common_waf.ApiDiscoverySetting{}
		updateSpec.ApiDiscoveryChoice = apiDiscoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_crawler"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiCrawler := &ves_io_schema_views_common_waf.ApiCrawler{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiCrawler = apiCrawler
					for _, set := range sl {
						if set != nil {
							apiCrawlerMapStrToI := set.(map[string]interface{})

							apiCrawlerTypeFound := false

							if v, ok := apiCrawlerMapStrToI["api_crawler_config"]; ok && !isIntfNil(v) && !apiCrawlerTypeFound {

								apiCrawlerTypeFound = true
								apiCrawlerInt := &ves_io_schema_views_common_waf.ApiCrawler_ApiCrawlerConfig{}
								apiCrawlerInt.ApiCrawlerConfig = &ves_io_schema_views_common_waf.ApiCrawlerConfiguration{}
								apiCrawler.ApiCrawler = apiCrawlerInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["domains"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											domains := make([]*ves_io_schema_views_common_waf.DomainConfiguration, len(sl))
											apiCrawlerInt.ApiCrawlerConfig.Domains = domains
											for i, set := range sl {
												if set != nil {
													domains[i] = &ves_io_schema_views_common_waf.DomainConfiguration{}
													domainsMapStrToI := set.(map[string]interface{})

													if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
														domains[i].Domain = w.(string)
													}

													if v, ok := domainsMapStrToI["simple_login"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														simpleLogin := &ves_io_schema_views_common_waf.SimpleLogin{}
														domains[i].SimpleLogin = simpleLogin
														for _, set := range sl {
															if set != nil {
																simpleLoginMapStrToI := set.(map[string]interface{})

																if v, ok := simpleLoginMapStrToI["password"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	password := &ves_io_schema.SecretType{}
																	simpleLogin.Password = password
																	for _, set := range sl {
																		if set != nil {
																			passwordMapStrToI := set.(map[string]interface{})

																			secretInfoOneofTypeFound := false

																			if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																				secretInfoOneofTypeFound = true
																				secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																				secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																				password.SecretInfoOneof = secretInfoOneofInt

																				sl := v.([]interface{})
																				for _, set := range sl {
																					if set != nil {
																						cs := set.(map[string]interface{})

																						if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																						}

																						if v, ok := cs["location"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																						}

																						if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																						}

																					}
																				}

																			}

																			if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																				secretInfoOneofTypeFound = true
																				secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																				secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																				password.SecretInfoOneof = secretInfoOneofInt

																				sl := v.([]interface{})
																				for _, set := range sl {
																					if set != nil {
																						cs := set.(map[string]interface{})

																						if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																						}

																						if v, ok := cs["url"]; ok && !isIntfNil(v) {

																							secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																						}

																					}
																				}

																			}

																		}
																	}

																}

																if w, ok := simpleLoginMapStrToI["user"]; ok && !isIntfNil(w) {
																	simpleLogin.User = w.(string)
																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := apiCrawlerMapStrToI["disable_api_crawler"]; ok && !isIntfNil(v) && !apiCrawlerTypeFound {

								apiCrawlerTypeFound = true

								if v.(bool) {
									apiCrawlerInt := &ves_io_schema_views_common_waf.ApiCrawler_DisableApiCrawler{}
									apiCrawlerInt.DisableApiCrawler = &ves_io_schema.Empty{}
									apiCrawler.ApiCrawler = apiCrawlerInt
								}

							}

						}
					}

				}

				if v, ok := cs["api_discovery_from_code_scan"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiDiscoveryFromCodeScan := &ves_io_schema_views_common_waf.ApiDiscoveryFromCodeScan{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoveryFromCodeScan = apiDiscoveryFromCodeScan
					for _, set := range sl {
						if set != nil {
							apiDiscoveryFromCodeScanMapStrToI := set.(map[string]interface{})

							if v, ok := apiDiscoveryFromCodeScanMapStrToI["code_base_integrations"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								codeBaseIntegrations := make([]*ves_io_schema_views_common_waf.CodeBaseIntegrationSelection, len(sl))
								apiDiscoveryFromCodeScan.CodeBaseIntegrations = codeBaseIntegrations
								for i, set := range sl {
									if set != nil {
										codeBaseIntegrations[i] = &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection{}
										codeBaseIntegrationsMapStrToI := set.(map[string]interface{})

										apiReposChoiceTypeFound := false

										if v, ok := codeBaseIntegrationsMapStrToI["all_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

											apiReposChoiceTypeFound = true

											if v.(bool) {
												apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_AllRepos{}
												apiReposChoiceInt.AllRepos = &ves_io_schema.Empty{}
												codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt
											}

										}

										if v, ok := codeBaseIntegrationsMapStrToI["selected_repos"]; ok && !isIntfNil(v) && !apiReposChoiceTypeFound {

											apiReposChoiceTypeFound = true
											apiReposChoiceInt := &ves_io_schema_views_common_waf.CodeBaseIntegrationSelection_SelectedRepos{}
											apiReposChoiceInt.SelectedRepos = &ves_io_schema_views_common_waf.ApiCodeRepos{}
											codeBaseIntegrations[i].ApiReposChoice = apiReposChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_code_repo"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_code_repo")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														apiReposChoiceInt.SelectedRepos.ApiCodeRepo = ls

													}

												}
											}

										}

										if v, ok := codeBaseIntegrationsMapStrToI["code_base_integration"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											codeBaseIntegrationInt := &ves_io_schema_views.ObjectRefType{}
											codeBaseIntegrations[i].CodeBaseIntegration = codeBaseIntegrationInt

											for _, set := range sl {
												if set != nil {
													cbiMapToStrVal := set.(map[string]interface{})
													if val, ok := cbiMapToStrVal["name"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Name = val.(string)
													}
													if val, ok := cbiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Namespace = val.(string)
													}

													if val, ok := cbiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														codeBaseIntegrationInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

						}
					}

				}

				apiDiscoverySettingsChoiceTypeFound := false

				if v, ok := cs["custom_api_auth_discovery"]; ok && !isIntfNil(v) && !apiDiscoverySettingsChoiceTypeFound {

					apiDiscoverySettingsChoiceTypeFound = true
					apiDiscoverySettingsChoiceInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_CustomApiAuthDiscovery{}
					apiDiscoverySettingsChoiceInt.CustomApiAuthDiscovery = &ves_io_schema_views_common_waf.ApiDiscoveryAdvancedSettings{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoverySettingsChoice = apiDiscoverySettingsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_discovery_ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiDiscoveryRefInt := &ves_io_schema_views.ObjectRefType{}
								apiDiscoverySettingsChoiceInt.CustomApiAuthDiscovery.ApiDiscoveryRef = apiDiscoveryRefInt

								for _, set := range sl {
									if set != nil {
										adrMapToStrVal := set.(map[string]interface{})
										if val, ok := adrMapToStrVal["name"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Name = val.(string)
										}
										if val, ok := adrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Namespace = val.(string)
										}

										if val, ok := adrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
											apiDiscoveryRefInt.Tenant = val.(string)
										}
									}
								}

							}

						}
					}

				}

				if v, ok := cs["default_api_auth_discovery"]; ok && !isIntfNil(v) && !apiDiscoverySettingsChoiceTypeFound {

					apiDiscoverySettingsChoiceTypeFound = true

					if v.(bool) {
						apiDiscoverySettingsChoiceInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DefaultApiAuthDiscovery{}
						apiDiscoverySettingsChoiceInt.DefaultApiAuthDiscovery = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.ApiDiscoverySettingsChoice = apiDiscoverySettingsChoiceInt
					}

				}

				if v, ok := cs["discovered_api_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
					apiDiscoveryChoiceInt.EnableApiDiscovery.DiscoveredApiSettings = discoveredApiSettings
					for _, set := range sl {
						if set != nil {
							discoveredApiSettingsMapStrToI := set.(map[string]interface{})

							if w, ok := discoveredApiSettingsMapStrToI["purge_duration_for_inactive_discovered_apis"]; ok && !isIntfNil(w) {
								discoveredApiSettings.PurgeDurationForInactiveDiscoveredApis = uint32(w.(int))
							}

						}
					}

				}

				learnFromRedirectTrafficTypeFound := false

				if v, ok := cs["disable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{}
						learnFromRedirectTrafficInt.DisableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := cs["enable_learn_from_redirect_traffic"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_views_common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{}
						learnFromRedirectTrafficInt.EnableLearnFromRedirectTraffic = &ves_io_schema.Empty{}
						apiDiscoveryChoiceInt.EnableApiDiscovery.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("api_protection_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiProtectionRules := &ves_io_schema_views_common_waf.APIProtectionRules{}
		updateSpec.ApiProtectionRules = apiProtectionRules
		for _, set := range sl {
			if set != nil {
				apiProtectionRulesMapStrToI := set.(map[string]interface{})

				if v, ok := apiProtectionRulesMapStrToI["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.APIEndpointProtectionRule, len(sl))
					apiProtectionRules.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.APIEndpointProtectionRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
								apiEndpointRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
												actionInt.Allow = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

										if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
												actionInt.Deny = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.APIEndpointProtectionRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := apiEndpointRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								apiEndpointRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := apiProtectionRulesMapStrToI["api_groups_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiGroupsRules := make([]*ves_io_schema_views_common_waf.APIGroupProtectionRule, len(sl))
					apiProtectionRules.ApiGroupsRules = apiGroupsRules
					for i, set := range sl {
						if set != nil {
							apiGroupsRules[i] = &ves_io_schema_views_common_waf.APIGroupProtectionRule{}
							apiGroupsRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiGroupsRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_views_common_waf.APIProtectionRuleAction{}
								apiGroupsRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Allow{}
												actionInt.Allow = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

										if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true

											if v.(bool) {
												actionInt := &ves_io_schema_views_common_waf.APIProtectionRuleAction_Deny{}
												actionInt.Deny = &ves_io_schema.Empty{}
												action.Action = actionInt
											}

										}

									}
								}

							}

							if w, ok := apiGroupsRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								apiGroupsRules[i].ApiGroup = w.(string)
							}

							if w, ok := apiGroupsRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								apiGroupsRules[i].BasePath = w.(string)
							}

							if v, ok := apiGroupsRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiGroupsRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiGroupsRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiGroupsRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiGroupsRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.APIGroupProtectionRule_SpecificDomain{}

								apiGroupsRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							if v, ok := apiGroupsRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								apiGroupsRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := apiGroupsRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiGroupsRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	apiTestingChoiceTypeFound := false

	if v, ok := d.GetOk("api_testing"); ok && !isIntfNil(v) && !apiTestingChoiceTypeFound {

		apiTestingChoiceTypeFound = true
		apiTestingChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ApiTesting{}
		apiTestingChoiceInt.ApiTesting = &ves_io_schema_views_http_loadbalancer.ApiTesting{}
		updateSpec.ApiTestingChoice = apiTestingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["custom_header_value"]; ok && !isIntfNil(v) {

					apiTestingChoiceInt.ApiTesting.CustomHeaderValue = v.(string)

				}

				if v, ok := cs["domains"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					domains := make([]*ves_io_schema_views_http_loadbalancer.DomainConfiguration, len(sl))
					apiTestingChoiceInt.ApiTesting.Domains = domains
					for i, set := range sl {
						if set != nil {
							domains[i] = &ves_io_schema_views_http_loadbalancer.DomainConfiguration{}
							domainsMapStrToI := set.(map[string]interface{})

							if w, ok := domainsMapStrToI["allow_destructive_methods"]; ok && !isIntfNil(w) {
								domains[i].AllowDestructiveMethods = w.(bool)
							}

							if v, ok := domainsMapStrToI["credentials"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								credentials := make([]*ves_io_schema_views_http_loadbalancer.Credentials, len(sl))
								domains[i].Credentials = credentials
								for i, set := range sl {
									if set != nil {
										credentials[i] = &ves_io_schema_views_http_loadbalancer.Credentials{}
										credentialsMapStrToI := set.(map[string]interface{})

										if w, ok := credentialsMapStrToI["credential_name"]; ok && !isIntfNil(w) {
											credentials[i].CredentialName = w.(string)
										}

										credentialsChoiceTypeFound := false

										if v, ok := credentialsMapStrToI["api_key"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_ApiKey{}
											credentialsChoiceInt.ApiKey = &ves_io_schema_views_http_loadbalancer.ApiKey{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.ApiKey.Key = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														value := &ves_io_schema.SecretType{}
														credentialsChoiceInt.ApiKey.Value = value
														for _, set := range sl {
															if set != nil {
																valueMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := valueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	value.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	value.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_BasicAuth{}
											credentialsChoiceInt.BasicAuth = &ves_io_schema_views_http_loadbalancer.BasicAuthentication{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["password"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														password := &ves_io_schema.SecretType{}
														credentialsChoiceInt.BasicAuth.Password = password
														for _, set := range sl {
															if set != nil {
																passwordMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := cs["user"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.BasicAuth.User = v.(string)

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_BearerToken{}
											credentialsChoiceInt.BearerToken = &ves_io_schema_views_http_loadbalancer.Bearer{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["token"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														token := &ves_io_schema.SecretType{}
														credentialsChoiceInt.BearerToken.Token = token
														for _, set := range sl {
															if set != nil {
																tokenMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	token.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	token.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := credentialsMapStrToI["login_endpoint"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

											credentialsChoiceTypeFound = true
											credentialsChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_LoginEndpoint{}
											credentialsChoiceInt.LoginEndpoint = &ves_io_schema_views_http_loadbalancer.LoginEndpoint{}
											credentials[i].CredentialsChoice = credentialsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["json_payload"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jsonPayload := &ves_io_schema.SecretType{}
														credentialsChoiceInt.LoginEndpoint.JsonPayload = jsonPayload
														for _, set := range sl {
															if set != nil {
																jsonPayloadMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := jsonPayloadMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	jsonPayload.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := jsonPayloadMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	jsonPayload.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := cs["method"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.Path = v.(string)

													}

													if v, ok := cs["token_response_key"]; ok && !isIntfNil(v) {

														credentialsChoiceInt.LoginEndpoint.TokenResponseKey = v.(string)

													}

												}
											}

										}

										roleChoiceTypeFound := false

										if v, ok := credentialsMapStrToI["admin"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

											roleChoiceTypeFound = true

											if v.(bool) {
												roleChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_Admin{}
												roleChoiceInt.Admin = &ves_io_schema.Empty{}
												credentials[i].RoleChoice = roleChoiceInt
											}

										}

										if v, ok := credentialsMapStrToI["standard"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

											roleChoiceTypeFound = true

											if v.(bool) {
												roleChoiceInt := &ves_io_schema_views_http_loadbalancer.Credentials_Standard{}
												roleChoiceInt.Standard = &ves_io_schema.Empty{}
												credentials[i].RoleChoice = roleChoiceInt
											}

										}

									}
								}

							}

							if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
								domains[i].Domain = w.(string)
							}

						}
					}

				}

				frequencyChoiceTypeFound := false

				if v, ok := cs["every_day"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryDay{}
						frequencyChoiceInt.EveryDay = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

				if v, ok := cs["every_month"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryMonth{}
						frequencyChoiceInt.EveryMonth = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

				if v, ok := cs["every_week"]; ok && !isIntfNil(v) && !frequencyChoiceTypeFound {

					frequencyChoiceTypeFound = true

					if v.(bool) {
						frequencyChoiceInt := &ves_io_schema_views_http_loadbalancer.ApiTesting_EveryWeek{}
						frequencyChoiceInt.EveryWeek = &ves_io_schema.Empty{}
						apiTestingChoiceInt.ApiTesting.FrequencyChoice = frequencyChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_api_testing"); ok && !apiTestingChoiceTypeFound {

		apiTestingChoiceTypeFound = true

		if v.(bool) {
			apiTestingChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableApiTesting{}
			apiTestingChoiceInt.DisableApiTesting = &ves_io_schema.Empty{}
			updateSpec.ApiTestingChoice = apiTestingChoiceInt
		}

	}

	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.BlockedClients = blockedClients
		for i, set := range sl {
			if set != nil {
				blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				blockedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					blockedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					blockedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					blockedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	botDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("bot_defense"); ok && !isIntfNil(v) && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true
		botDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_BotDefense{}
		botDefenseChoiceInt.BotDefense = &ves_io_schema_views_common_security.ShapeBotDefenseType{}
		updateSpec.BotDefenseChoice = botDefenseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policy := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType{}
					botDefenseChoiceInt.BotDefense.Policy = policy
					for _, set := range sl {
						if set != nil {
							policyMapStrToI := set.(map[string]interface{})

							javaScriptChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableJsInsert{}
									javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPages{}
								javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

											javaScriptChoiceInt.JsInsertAllPages.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{}
								javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.ShapeJavaScriptInsertAllWithExceptionsType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

											javaScriptChoiceInt.JsInsertAllPagesExcept.JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_JsInsertionRules{}
								javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.ShapeJavaScriptInsertType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["rules"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											rules := make([]*ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.Rules = rules
											for i, set := range sl {
												if set != nil {
													rules[i] = &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule{}
													rulesMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															rules[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptInsertionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														rules[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := rulesMapStrToI["javascript_location"]; ok && !isIntfNil(v) {

														rules[i].JavascriptLocation = ves_io_schema_views_common_security.JavaScriptLocation(ves_io_schema_views_common_security.JavaScriptLocation_value[v.(string)])

													}

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														rules[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["javascript_mode"]; ok && !isIntfNil(v) {

								policy.JavascriptMode = ves_io_schema.JavaScriptMode(ves_io_schema.JavaScriptMode_value[v.(string)])

							}

							if w, ok := policyMapStrToI["js_download_path"]; ok && !isIntfNil(w) {
								policy.JsDownloadPath = w.(string)
							}

							mobileSdkChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_mobile_sdk"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

								mobileSdkChoiceTypeFound = true

								if v.(bool) {
									mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_DisableMobileSdk{}
									mobileSdkChoiceInt.DisableMobileSdk = &ves_io_schema.Empty{}
									policy.MobileSdkChoice = mobileSdkChoiceInt
								}

							}

							if v, ok := policyMapStrToI["mobile_sdk_config"]; ok && !isIntfNil(v) && !mobileSdkChoiceTypeFound {

								mobileSdkChoiceTypeFound = true
								mobileSdkChoiceInt := &ves_io_schema_views_common_security.ShapeBotDefensePolicyType_MobileSdkConfig{}
								mobileSdkChoiceInt.MobileSdkConfig = &ves_io_schema_views_common_security.MobileSDKConfigType{}
								policy.MobileSdkChoice = mobileSdkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											mobileIdentifier := &ves_io_schema_views_common_security.MobileTrafficIdentifierType{}
											mobileSdkChoiceInt.MobileSdkConfig.MobileIdentifier = mobileIdentifier
											for _, set := range sl {
												if set != nil {
													mobileIdentifierMapStrToI := set.(map[string]interface{})

													if v, ok := mobileIdentifierMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherTypeBasic, len(sl))
														mobileIdentifier.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherTypeBasic{}
																headersMapStrToI := set.(map[string]interface{})

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherTypeBasic_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["protected_app_endpoints"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								protectedAppEndpoints := make([]*ves_io_schema_views_common_security.AppEndpointType, len(sl))
								policy.ProtectedAppEndpoints = protectedAppEndpoints
								for i, set := range sl {
									if set != nil {
										protectedAppEndpoints[i] = &ves_io_schema_views_common_security.AppEndpointType{}
										protectedAppEndpointsMapStrToI := set.(map[string]interface{})

										appTrafficTypeChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true

											if v.(bool) {
												appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Mobile{}
												appTrafficTypeChoiceInt.Mobile = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["web"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true

											if v.(bool) {
												appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Web{}
												appTrafficTypeChoiceInt.Web = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["web_mobile"]; ok && !isIntfNil(v) && !appTrafficTypeChoiceTypeFound {

											appTrafficTypeChoiceTypeFound = true
											appTrafficTypeChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_WebMobile{}
											appTrafficTypeChoiceInt.WebMobile = &ves_io_schema_views_common_security.WebMobileTrafficType{}
											protectedAppEndpoints[i].AppTrafficTypeChoice = appTrafficTypeChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["mobile_identifier"]; ok && !isIntfNil(v) {

														appTrafficTypeChoiceInt.WebMobile.MobileIdentifier = ves_io_schema_views_common_security.MobileIdentifier(ves_io_schema_views_common_security.MobileIdentifier_value[v.(string)])

													}

												}
											}

										}

										domainMatcherChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

											domainMatcherChoiceTypeFound = true

											if v.(bool) {
												domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AnyDomain{}
												domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

											domainMatcherChoiceTypeFound = true
											domainMatcherChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_Domain{}
											domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
											protectedAppEndpoints[i].DomainMatcherChoice = domainMatcherChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.ExactValue = v.(string)

													}

													if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.RegexValue = v.(string)

													}

													if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

														domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.SuffixValue = v.(string)

													}

												}
											}

										}

										flowLabelChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

											flowLabelChoiceTypeFound = true
											flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_FlowLabel{}
											flowLabelChoiceInt.FlowLabel = &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType{}
											protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													flowLabelChoiceTypeFound := false

													if v, ok := cs["account_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_AccountManagement{}
														flowLabelChoiceIntNew.AccountManagement = &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_Create{}
																		labelChoiceInt.Create = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["password_reset"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAccountManagementChoiceType_PasswordReset{}
																		labelChoiceInt.PasswordReset = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.AccountManagement.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["authentication"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Authentication{}
														flowLabelChoiceIntNew.Authentication = &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["login"]; ok && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true
																	labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Login{}
																	labelChoiceInt.Login = &ves_io_schema.BotDefenseTransactionResult{}
																	flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			_ = set.(map[string]interface{})

																		}
																	}

																}

																if v, ok := cs["login_mfa"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginMfa{}
																		labelChoiceInt.LoginMfa = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["login_partner"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_LoginPartner{}
																		labelChoiceInt.LoginPartner = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["logout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_Logout{}
																		labelChoiceInt.Logout = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["token_refresh"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelAuthenticationChoiceType_TokenRefresh{}
																		labelChoiceInt.TokenRefresh = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Authentication.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["financial_services"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_FinancialServices{}
														flowLabelChoiceIntNew.FinancialServices = &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["apply"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_Apply{}
																		labelChoiceInt.Apply = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["money_transfer"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFinancialServicesChoiceType_MoneyTransfer{}
																		labelChoiceInt.MoneyTransfer = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.FinancialServices.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["flight"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Flight{}
														flowLabelChoiceIntNew.Flight = &ves_io_schema.BotDefenseFlowLabelFlightChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["checkin"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelFlightChoiceType_Checkin{}
																		labelChoiceInt.Checkin = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Flight.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["profile_management"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ProfileManagement{}
														flowLabelChoiceIntNew.ProfileManagement = &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["create"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Create{}
																		labelChoiceInt.Create = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["update"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_Update{}
																		labelChoiceInt.Update = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["view"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelProfileManagementChoiceType_View{}
																		labelChoiceInt.View = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ProfileManagement.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["search"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_Search{}
														flowLabelChoiceIntNew.Search = &ves_io_schema.BotDefenseFlowLabelSearchChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["flight_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_FlightSearch{}
																		labelChoiceInt.FlightSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["product_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ProductSearch{}
																		labelChoiceInt.ProductSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["reservation_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_ReservationSearch{}
																		labelChoiceInt.ReservationSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["room_search"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelSearchChoiceType_RoomSearch{}
																		labelChoiceInt.RoomSearch = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.Search.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := cs["shopping_gift_cards"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

														flowLabelChoiceTypeFound = true
														flowLabelChoiceIntNew := &ves_io_schema.BotDefenseFlowLabelCategoriesChoiceType_ShoppingGiftCards{}
														flowLabelChoiceIntNew.ShoppingGiftCards = &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType{}
														flowLabelChoiceInt.FlowLabel.FlowLabelChoice = flowLabelChoiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																labelChoiceTypeFound := false

																if v, ok := cs["gift_card_make_purchase_with_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardMakePurchaseWithGiftCard{}
																		labelChoiceInt.GiftCardMakePurchaseWithGiftCard = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["gift_card_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_GiftCardValidation{}
																		labelChoiceInt.GiftCardValidation = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_add_to_cart"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopAddToCart{}
																		labelChoiceInt.ShopAddToCart = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_checkout"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopCheckout{}
																		labelChoiceInt.ShopCheckout = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_choose_seat"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopChooseSeat{}
																		labelChoiceInt.ShopChooseSeat = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_enter_drawing_submission"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopEnterDrawingSubmission{}
																		labelChoiceInt.ShopEnterDrawingSubmission = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_make_payment"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopMakePayment{}
																		labelChoiceInt.ShopMakePayment = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_order"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopOrder{}
																		labelChoiceInt.ShopOrder = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_price_inquiry"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPriceInquiry{}
																		labelChoiceInt.ShopPriceInquiry = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_promo_code_validation"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPromoCodeValidation{}
																		labelChoiceInt.ShopPromoCodeValidation = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_purchase_gift_card"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopPurchaseGiftCard{}
																		labelChoiceInt.ShopPurchaseGiftCard = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

																if v, ok := cs["shop_update_quantity"]; ok && !isIntfNil(v) && !labelChoiceTypeFound {

																	labelChoiceTypeFound = true

																	if v.(bool) {
																		labelChoiceInt := &ves_io_schema.BotDefenseFlowLabelShoppingGiftCardsChoiceType_ShopUpdateQuantity{}
																		labelChoiceInt.ShopUpdateQuantity = &ves_io_schema.Empty{}
																		flowLabelChoiceIntNew.ShoppingGiftCards.LabelChoice = labelChoiceInt
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["undefined_flow_label"]; ok && !isIntfNil(v) && !flowLabelChoiceTypeFound {

											flowLabelChoiceTypeFound = true

											if v.(bool) {
												flowLabelChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_UndefinedFlowLabel{}
												flowLabelChoiceInt.UndefinedFlowLabel = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].FlowLabelChoice = flowLabelChoiceInt
											}

										}

										goodbotChoiceTypeFound := false

										if v, ok := protectedAppEndpointsMapStrToI["allow_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

											goodbotChoiceTypeFound = true

											if v.(bool) {
												goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_AllowGoodBots{}
												goodbotChoiceInt.AllowGoodBots = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["mitigate_good_bots"]; ok && !isIntfNil(v) && !goodbotChoiceTypeFound {

											goodbotChoiceTypeFound = true

											if v.(bool) {
												goodbotChoiceInt := &ves_io_schema_views_common_security.AppEndpointType_MitigateGoodBots{}
												goodbotChoiceInt.MitigateGoodBots = &ves_io_schema.Empty{}
												protectedAppEndpoints[i].GoodbotChoice = goodbotChoiceInt
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											protectedAppEndpoints[i].Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["http_methods"]; ok && !isIntfNil(v) {

											http_methodsList := []ves_io_schema.BotHttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field http_methods")
												}
												http_methodsList = append(http_methodsList, ves_io_schema.BotHttpMethod(ves_io_schema.BotHttpMethod_value[j.(string)]))
											}
											protectedAppEndpoints[i].HttpMethods = http_methodsList

										}

										if v, ok := protectedAppEndpointsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											protectedAppEndpoints[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["mitigation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
											protectedAppEndpoints[i].Mitigation = mitigation
											for _, set := range sl {
												if set != nil {
													mitigationMapStrToI := set.(map[string]interface{})

													actionTypeTypeFound := false

													if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
														actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["body"]; ok && !isIntfNil(v) {

																	actionTypeInt.Block.Body = v.(string)

																}

																if v, ok := cs["status"]; ok && !isIntfNil(v) {

																	actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

																}

															}
														}

													}

													if v, ok := mitigationMapStrToI["flag"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Flag{}
														actionTypeInt.Flag = &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																sendHeadersChoiceTypeFound := false

																if v, ok := cs["append_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

																	sendHeadersChoiceTypeFound = true
																	sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_AppendHeaders{}
																	sendHeadersChoiceInt.AppendHeaders = &ves_io_schema_policy.ShapeBotFlagMitigationActionType{}
																	actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["auto_type_header_name"]; ok && !isIntfNil(v) {

																				sendHeadersChoiceInt.AppendHeaders.AutoTypeHeaderName = v.(string)

																			}

																			if v, ok := cs["inference_header_name"]; ok && !isIntfNil(v) {

																				sendHeadersChoiceInt.AppendHeaders.InferenceHeaderName = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["no_headers"]; ok && !isIntfNil(v) && !sendHeadersChoiceTypeFound {

																	sendHeadersChoiceTypeFound = true

																	if v.(bool) {
																		sendHeadersChoiceInt := &ves_io_schema_policy.ShapeBotFlagMitigationActionChoiceType_NoHeaders{}
																		sendHeadersChoiceInt.NoHeaders = &ves_io_schema.Empty{}
																		actionTypeInt.Flag.SendHeadersChoice = sendHeadersChoiceInt
																	}

																}

															}
														}

													}

													if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

														actionTypeTypeFound = true
														actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
														actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
														mitigation.ActionType = actionTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["uri"]; ok && !isIntfNil(v) {

																	actionTypeInt.Redirect.Uri = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["path"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											path := &ves_io_schema.PathMatcherType{}
											protectedAppEndpoints[i].Path = path
											for _, set := range sl {
												if set != nil {
													pathMapStrToI := set.(map[string]interface{})

													pathMatchTypeFound := false

													if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Path = v.(string)

													}

													if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Prefix = v.(string)

													}

													if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

														pathMatchTypeFound = true
														pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

														path.PathMatch = pathMatchInt

														pathMatchInt.Regex = v.(string)

													}

												}
											}

										}

										if v, ok := protectedAppEndpointsMapStrToI["protocol"]; ok && !isIntfNil(v) {

											protectedAppEndpoints[i].Protocol = ves_io_schema_views_common_security.URLScheme(ves_io_schema_views_common_security.URLScheme_value[v.(string)])

										}

										if v, ok := protectedAppEndpointsMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											protectedAppEndpoints[i].QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["regional_endpoint"]; ok && !isIntfNil(v) {

					botDefenseChoiceInt.BotDefense.RegionalEndpoint = ves_io_schema_views_common_security.ShapeBotDefenseRegion(ves_io_schema_views_common_security.ShapeBotDefenseRegion_value[v.(string)])

				}

				if v, ok := cs["timeout"]; ok && !isIntfNil(v) {

					botDefenseChoiceInt.BotDefense.Timeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_bot_defense"); ok && !botDefenseChoiceTypeFound {

		botDefenseChoiceTypeFound = true

		if v.(bool) {
			botDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableBotDefense{}
			botDefenseChoiceInt.DisableBotDefense = &ves_io_schema.Empty{}
			updateSpec.BotDefenseChoice = botDefenseChoiceInt
		}

	}

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			updateSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				challengeChoiceTypeFound := false

				if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
						challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
						challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
						challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
					challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
					for _, set := range sl {
						if set != nil {
							ruleListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
								ruleList.Rules = rules
								for i, set := range sl {
									if set != nil {
										rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
										rulesMapStrToI := set.(map[string]interface{})

										if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											rules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
											rules[i].Spec = spec
											for _, set := range sl {
												if set != nil {
													specMapStrToI := set.(map[string]interface{})

													if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
														spec.ArgMatchers = argMatchers
														for i, set := range sl {
															if set != nil {
																argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																argMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	argMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	argMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	argMatchers[i].Name = w.(string)
																}

															}
														}

													}

													asnChoiceTypeFound := false

													if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true

														if v.(bool) {
															asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
															asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
															spec.AsnChoice = asnChoiceInt
														}

													}

													if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
														asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	asnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
														asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														bodyMatcher := &ves_io_schema_policy.MatcherType{}
														spec.BodyMatcher = bodyMatcher
														for _, set := range sl {
															if set != nil {
																bodyMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.ExactValues = ls
																}

																if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.RegexValues = ls
																}

																if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	bodyMatcher.Transformers = transformersList

																}

															}
														}

													}

													challengeActionTypeFound := false

													if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
															challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
															challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
															challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													clientChoiceTypeFound := false

													if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															spec.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														spec.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														spec.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
														spec.DomainMatcher = domainMatcher
														for _, set := range sl {
															if set != nil {
																domainMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.ExactValues = ls
																}

																if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.RegexValues = ls
																}

															}
														}

													}

													if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
														ts, err := parseTime(w.(string))
														if err != nil {
															return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
														}
														spec.ExpirationTimestamp = ts
													}

													if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														spec.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
														spec.HttpMethod = httpMethod
														for _, set := range sl {
															if set != nil {
																httpMethodMapStrToI := set.(map[string]interface{})

																if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	httpMethod.InvertMatcher = w.(bool)
																}

																if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field methods")
																		}
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	httpMethod.Methods = methodsList

																}

															}
														}

													}

													ipChoiceTypeFound := false

													if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true

														if v.(bool) {
															ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
															ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
															spec.IpChoice = ipChoiceInt
														}

													}

													if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
														ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
														ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema_policy.PathMatcherType{}
														spec.Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.ExactValues = ls
																}

																if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	path.InvertMatcher = w.(bool)
																}

																if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field prefix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.PrefixValues = ls
																}

																if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.RegexValues = ls
																}

																if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field suffix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.SuffixValues = ls
																}

																if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	path.Transformers = transformersList

																}

															}
														}

													}

													if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														spec.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

													tlsFingerprintChoiceTypeFound := false

													if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

														tlsFingerprintChoiceTypeFound = true
														tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
														tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
														spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																}

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																}

																if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	clientSideDefenseChoiceTypeFound := false

	if v, ok := d.GetOk("client_side_defense"); ok && !isIntfNil(v) && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true
		clientSideDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ClientSideDefense{}
		clientSideDefenseChoiceInt.ClientSideDefense = &ves_io_schema_views_common_security.ClientSideDefenseType{}
		updateSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policy := &ves_io_schema_views_common_security.ClientSideDefensePolicyType{}
					clientSideDefenseChoiceInt.ClientSideDefense.Policy = policy
					for _, set := range sl {
						if set != nil {
							policyMapStrToI := set.(map[string]interface{})

							javaScriptChoiceTypeFound := false

							if v, ok := policyMapStrToI["disable_js_insert"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_DisableJsInsert{}
									javaScriptChoiceInt.DisableJsInsert = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true

								if v.(bool) {
									javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPages{}
									javaScriptChoiceInt.JsInsertAllPages = &ves_io_schema.Empty{}
									policy.JavaScriptChoice = javaScriptChoiceInt
								}

							}

							if v, ok := policyMapStrToI["js_insert_all_pages_except"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertAllPagesExcept{}
								javaScriptChoiceInt.JsInsertAllPagesExcept = &ves_io_schema_views_common_security.CSDJavaScriptInsertAllWithExceptionsType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertAllPagesExcept.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := policyMapStrToI["js_insertion_rules"]; ok && !isIntfNil(v) && !javaScriptChoiceTypeFound {

								javaScriptChoiceTypeFound = true
								javaScriptChoiceInt := &ves_io_schema_views_common_security.ClientSideDefensePolicyType_JsInsertionRules{}
								javaScriptChoiceInt.JsInsertionRules = &ves_io_schema_views_common_security.CSDJavaScriptInsertType{}
								policy.JavaScriptChoice = javaScriptChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["exclude_list"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											excludeList := make([]*ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.ExcludeList = excludeList
											for i, set := range sl {
												if set != nil {
													excludeList[i] = &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule{}
													excludeListMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := excludeListMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := excludeListMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.ShapeJavaScriptExclusionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														excludeList[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														excludeList[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := excludeListMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														excludeList[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["rules"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											rules := make([]*ves_io_schema_views_common_security.CSDJavaScriptInsertionRule, len(sl))
											javaScriptChoiceInt.JsInsertionRules.Rules = rules
											for i, set := range sl {
												if set != nil {
													rules[i] = &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule{}
													rulesMapStrToI := set.(map[string]interface{})

													domainMatcherChoiceTypeFound := false

													if v, ok := rulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true

														if v.(bool) {
															domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_AnyDomain{}
															domainMatcherChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															rules[i].DomainMatcherChoice = domainMatcherChoiceInt
														}

													}

													if v, ok := rulesMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherChoiceTypeFound {

														domainMatcherChoiceTypeFound = true
														domainMatcherChoiceInt := &ves_io_schema_views_common_security.CSDJavaScriptInsertionRule_Domain{}
														domainMatcherChoiceInt.Domain = &ves_io_schema.DomainType{}
														rules[i].DomainMatcherChoice = domainMatcherChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																domainChoiceTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.RegexValue = v.(string)

																}

																if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

																	domainChoiceTypeFound = true
																	domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

																	domainMatcherChoiceInt.Domain.DomainChoice = domainChoiceInt

																	domainChoiceInt.SuffixValue = v.(string)

																}

															}
														}

													}

													if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														metadata := &ves_io_schema.MessageMetaType{}
														rules[i].Metadata = metadata
														for _, set := range sl {
															if set != nil {
																metadataMapStrToI := set.(map[string]interface{})

																if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
																	metadata.Description = w.(string)
																}

																if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
																	metadata.Name = w.(string)
																}

															}
														}

													}

													if v, ok := rulesMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema.PathMatcherType{}
														rules[i].Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																pathMatchTypeFound := false

																if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Path = v.(string)

																}

																if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Prefix = v.(string)

																}

																if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

																	pathMatchTypeFound = true
																	pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

																	path.PathMatch = pathMatchInt

																	pathMatchInt.Regex = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_client_side_defense"); ok && !clientSideDefenseChoiceTypeFound {

		clientSideDefenseChoiceTypeFound = true

		if v.(bool) {
			clientSideDefenseChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableClientSideDefense{}
			clientSideDefenseChoiceInt.DisableClientSideDefense = &ves_io_schema.Empty{}
			updateSpec.ClientSideDefenseChoice = clientSideDefenseChoiceInt
		}

	}

	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		updateSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		updateSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		updateSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			if set != nil {
				dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
				dataGuardRulesMapStrToI := set.(map[string]interface{})

				actionChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
						actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
						actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				domainChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						dataGuardRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					dataGuardRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					path := &ves_io_schema.PathMatcherType{}
					dataGuardRules[i].Path = path
					for _, set := range sl {
						if set != nil {
							pathMapStrToI := set.(map[string]interface{})

							pathMatchTypeFound := false

							if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Path = v.(string)

							}

							if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Prefix = v.(string)

							}

							if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Regex = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		updateSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			if set != nil {
				ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
				ddosMitigationRulesMapStrToI := set.(map[string]interface{})

				if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					ddosMitigationRules[i].ExpirationTimestamp = ts
				}

				if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					ddosMitigationRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				mitigationActionTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

					mitigationActionTypeFound = true

					if v.(bool) {
						mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
						mitigationActionInt.Block = &ves_io_schema.Empty{}
						ddosMitigationRules[i].MitigationAction = mitigationActionInt
					}

				}

				mitigationChoiceTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
					mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								asnList := &ves_io_schema_policy.AsnMatchList{}
								mitigationChoiceInt.DdosClientSource.AsnList = asnList
								for _, set := range sl {
									if set != nil {
										asnListMapStrToI := set.(map[string]interface{})

										if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
											ls := make([]uint32, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnList.AsNumbers = ls
										}

									}
								}

							}

							if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

								country_listList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_list")
									}
									country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								mitigationChoiceInt.DdosClientSource.CountryList = country_listList

							}

							if v, ok := cs["ja4_tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ja4TlsFingerprintMatcher := &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.Ja4TlsFingerprintMatcher = ja4TlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										ja4TlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := ja4TlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ja4TlsFingerprintMatcher.ExactValues = ls
										}

									}
								}

							}

							if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

											classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field classes")
												}
												classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
											}
											tlsFingerprintMatcher.Classes = classesList

										}

										if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExactValues = ls
										}

										if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExcludedValues = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
					mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("default_route_pools"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		defaultRoutePools := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
		updateSpec.DefaultRoutePools = defaultRoutePools
		for i, set := range sl {
			if set != nil {
				defaultRoutePools[i] = &ves_io_schema_views.OriginPoolWithWeight{}
				defaultRoutePoolsMapStrToI := set.(map[string]interface{})

				if w, ok := defaultRoutePoolsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
					ms := map[string]string{}
					for k, v := range w.(map[string]interface{}) {
						ms[k] = v.(string)
					}
					defaultRoutePools[i].EndpointSubsets = ms
				}

				poolChoiceTypeFound := false

				if v, ok := defaultRoutePoolsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

					poolChoiceTypeFound = true
					poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
					poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
					defaultRoutePools[i].PoolChoice = poolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								poolChoiceInt.Cluster.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := defaultRoutePoolsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

					poolChoiceTypeFound = true
					poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
					poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
					defaultRoutePools[i].PoolChoice = poolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								poolChoiceInt.Pool.Tenant = v.(string)

							}

						}
					}

				}

				if w, ok := defaultRoutePoolsMapStrToI["priority"]; ok && !isIntfNil(w) {
					defaultRoutePools[i].Priority = uint32(w.(int))
				}

				if w, ok := defaultRoutePoolsMapStrToI["weight"]; ok && !isIntfNil(w) {
					defaultRoutePools[i].Weight = uint32(w.(int))
				}

			}
		}

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.Domains = ls

	}

	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		updateSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			if set != nil {
				graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
				graphqlRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						graphqlRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
					graphqlRules[i].ExactPath = w.(string)
				}

				if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
					graphqlRules[i].GraphqlSettings = graphqlSettings
					for _, set := range sl {
						if set != nil {
							graphqlSettingsMapStrToI := set.(map[string]interface{})

							allowIntrospectionQueriesChoiceTypeFound := false

							if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
									allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
									allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxBatchedQueries = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxDepth = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxTotalLength = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					graphqlRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				methodChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
						methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
						methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

			}
		}

	}

	hashPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("cookie_stickiness"); ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true
		hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_CookieStickiness{}
		hashPolicyChoiceInt.CookieStickiness = &ves_io_schema_route.CookieForHashing{}
		updateSpec.HashPolicyChoice = hashPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				httponlyTypeFound := false

				if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Httponly = httponlyInt
					}

				}

				if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Httponly = httponlyInt
					}

				}

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Name = v.(string)

				}

				if v, ok := cs["path"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Path = v.(string)

				}

				samesiteTypeFound := false

				if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Secure = secureInt
					}

				}

				if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						hashPolicyChoiceInt.CookieStickiness.Secure = secureInt
					}

				}

				if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

					hashPolicyChoiceInt.CookieStickiness.Ttl = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("least_active"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_LeastActive{}
			hashPolicyChoiceInt.LeastActive = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("random"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_Random{}
			hashPolicyChoiceInt.Random = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("ring_hash"); ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true
		hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_RingHash{}
		hashPolicyChoiceInt.RingHash = &ves_io_schema_views_http_loadbalancer.HashPolicyListType{}
		updateSpec.HashPolicyChoice = hashPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["hash_policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					hashPolicy := make([]*ves_io_schema_route.HashPolicyType, len(sl))
					hashPolicyChoiceInt.RingHash.HashPolicy = hashPolicy
					for i, set := range sl {
						if set != nil {
							hashPolicy[i] = &ves_io_schema_route.HashPolicyType{}
							hashPolicyMapStrToI := set.(map[string]interface{})

							policySpecifierTypeFound := false

							if v, ok := hashPolicyMapStrToI["cookie"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_Cookie{}
								policySpecifierInt.Cookie = &ves_io_schema_route.CookieForHashing{}
								hashPolicy[i].PolicySpecifier = policySpecifierInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										httponlyTypeFound := false

										if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

											httponlyTypeFound = true

											if v.(bool) {
												httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
												httponlyInt.AddHttponly = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Httponly = httponlyInt
											}

										}

										if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

											httponlyTypeFound = true

											if v.(bool) {
												httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
												httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Httponly = httponlyInt
											}

										}

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Name = v.(string)

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Path = v.(string)

										}

										samesiteTypeFound := false

										if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
												samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
												samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
												samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

											samesiteTypeFound = true

											if v.(bool) {
												samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
												samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Samesite = samesiteInt
											}

										}

										secureTypeFound := false

										if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

											secureTypeFound = true

											if v.(bool) {
												secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
												secureInt.AddSecure = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Secure = secureInt
											}

										}

										if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

											secureTypeFound = true

											if v.(bool) {
												secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
												secureInt.IgnoreSecure = &ves_io_schema.Empty{}
												policySpecifierInt.Cookie.Secure = secureInt
											}

										}

										if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

											policySpecifierInt.Cookie.Ttl = uint32(v.(int))

										}

									}
								}

							}

							if v, ok := hashPolicyMapStrToI["header_name"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_HeaderName{}

								hashPolicy[i].PolicySpecifier = policySpecifierInt

								policySpecifierInt.HeaderName = v.(string)

							}

							if v, ok := hashPolicyMapStrToI["source_ip"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

								policySpecifierTypeFound = true
								policySpecifierInt := &ves_io_schema_route.HashPolicyType_SourceIp{}

								hashPolicy[i].PolicySpecifier = policySpecifierInt

								policySpecifierInt.SourceIp = v.(bool)

							}

							if w, ok := hashPolicyMapStrToI["terminal"]; ok && !isIntfNil(w) {
								hashPolicy[i].Terminal = w.(bool)
							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("round_robin"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_RoundRobin{}
			hashPolicyChoiceInt.RoundRobin = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("source_ip_stickiness"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_SourceIpStickiness{}
			hashPolicyChoiceInt.SourceIpStickiness = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			updateSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		updateSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

					ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
						}
						ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
					}
					ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

				}

			}
		}

	}

	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		updateSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			if set != nil {
				jwtValidationMapStrToI := set.(map[string]interface{})

				if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema.Action{}
					jwtValidation.Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Block{}
									actionChoiceInt.Block = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

							if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Report{}
									actionChoiceInt.Report = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

						}
					}

				}

				jwksConfigurationTypeFound := false

				if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

					jwksConfigurationTypeFound = true
					jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
					jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
					jwtValidation.JwksConfiguration = jwksConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

								jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
					jwtValidation.MandatoryClaims = mandatoryClaims
					for _, set := range sl {
						if set != nil {
							mandatoryClaimsMapStrToI := set.(map[string]interface{})

							if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field claim_names")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mandatoryClaims.ClaimNames = ls
							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
					jwtValidation.ReservedClaims = reservedClaims
					for _, set := range sl {
						if set != nil {
							reservedClaimsMapStrToI := set.(map[string]interface{})

							audienceValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true
								audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
								audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
								reservedClaims.AudienceValidation = audienceValidationInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field audiences")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											audienceValidationInt.Audience.Audiences = ls

										}

									}
								}

							}

							if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true

								if v.(bool) {
									audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
									audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
									reservedClaims.AudienceValidation = audienceValidationInt
								}

							}

							issuerValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true
								issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

								reservedClaims.IssuerValidation = issuerValidationInt

								issuerValidationInt.Issuer = v.(string)

							}

							if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true

								if v.(bool) {
									issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
									issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
									reservedClaims.IssuerValidation = issuerValidationInt
								}

							}

							validatePeriodTypeFound := false

							if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
									validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

							if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
									validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					target := &ves_io_schema_views_common_waf.Target{}
					jwtValidation.Target = target
					for _, set := range sl {
						if set != nil {
							targetMapStrToI := set.(map[string]interface{})

							targetTypeFound := false

							if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true

								if v.(bool) {
									targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
									targetInt.AllEndpoint = &ves_io_schema.Empty{}
									target.Target = targetInt
								}

							}

							if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
								targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field api_groups")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.ApiGroups.ApiGroups = ls

										}

									}
								}

							}

							if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
								targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field base_paths")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.BasePaths.BasePaths = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
					jwtValidation.TokenLocation = tokenLocation
					for _, set := range sl {
						if set != nil {
							tokenLocationMapStrToI := set.(map[string]interface{})

							tokenLocationTypeFound := false

							if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

								tokenLocationTypeFound = true

								if v.(bool) {
									tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
									tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
									tokenLocation.TokenLocation = tokenLocationInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("l7_ddos_protection"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		l7DdosProtection := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings{}
		updateSpec.L7DdosProtection = l7DdosProtection
		for _, set := range sl {
			if set != nil {
				l7DdosProtectionMapStrToI := set.(map[string]interface{})

				ddosPolicyChoiceTypeFound := false

				if v, ok := l7DdosProtectionMapStrToI["ddos_policy_custom"]; ok && !isIntfNil(v) && !ddosPolicyChoiceTypeFound {

					ddosPolicyChoiceTypeFound = true
					ddosPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_DdosPolicyCustom{}
					ddosPolicyChoiceInt.DdosPolicyCustom = &ves_io_schema_views.ObjectRefType{}
					l7DdosProtection.DdosPolicyChoice = ddosPolicyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								ddosPolicyChoiceInt.DdosPolicyCustom.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := l7DdosProtectionMapStrToI["ddos_policy_none"]; ok && !isIntfNil(v) && !ddosPolicyChoiceTypeFound {

					ddosPolicyChoiceTypeFound = true

					if v.(bool) {
						ddosPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_DdosPolicyNone{}
						ddosPolicyChoiceInt.DdosPolicyNone = &ves_io_schema.Empty{}
						l7DdosProtection.DdosPolicyChoice = ddosPolicyChoiceInt
					}

				}

				mitigationActionChoiceTypeFound := false

				if v, ok := l7DdosProtectionMapStrToI["mitigation_block"]; ok && !isIntfNil(v) && !mitigationActionChoiceTypeFound {

					mitigationActionChoiceTypeFound = true

					if v.(bool) {
						mitigationActionChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_MitigationBlock{}
						mitigationActionChoiceInt.MitigationBlock = &ves_io_schema.Empty{}
						l7DdosProtection.MitigationActionChoice = mitigationActionChoiceInt
					}

				}

				if v, ok := l7DdosProtectionMapStrToI["mitigation_js_challenge"]; ok && !isIntfNil(v) && !mitigationActionChoiceTypeFound {

					mitigationActionChoiceTypeFound = true
					mitigationActionChoiceInt := &ves_io_schema_views_http_loadbalancer.L7DDoSProtectionSettings_MitigationJsChallenge{}
					mitigationActionChoiceInt.MitigationJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					l7DdosProtection.MitigationActionChoice = mitigationActionChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								mitigationActionChoiceInt.MitigationJsChallenge.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("https"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.AddHsts = v.(bool)

				}

				if v, ok := cs["coalescing_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
					loadbalancerTypeInt.Https.CoalescingOptions = coalescingOptions
					for _, set := range sl {
						if set != nil {
							coalescingOptionsMapStrToI := set.(map[string]interface{})

							coalescingChoiceTypeFound := false

							if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
									coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

							if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
									coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["connection_idle_timeout"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.ConnectionIdleTimeout = uint32(v.(int))

				}

				defaultLbChoiceTypeFound := false

				if v, ok := cs["default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DefaultLoadbalancer{}
						defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["non_default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_NonDefaultLoadbalancer{}
						defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["http_protocol_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
					loadbalancerTypeInt.Https.HttpProtocolOptions = httpProtocolOptions
					for _, set := range sl {
						if set != nil {
							httpProtocolOptionsMapStrToI := set.(map[string]interface{})

							httpProtocolChoiceTypeFound := false

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true
								httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
								httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headerTransformation := &ves_io_schema.HeaderTransformationType{}
											httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
											for _, set := range sl {
												if set != nil {
													headerTransformationMapStrToI := set.(map[string]interface{})

													headerTransformationChoiceTypeFound := false

													if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
															headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
															headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
															headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
															headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
									httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
									httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

				}

				pathNormalizeChoiceTypeFound := false

				if v, ok := cs["disable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DisablePathNormalize{}
						pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				if v, ok := cs["enable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_EnablePathNormalize{}
						pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_Port{}

					loadbalancerTypeInt.Https.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_PortRanges{}

					loadbalancerTypeInt.Https.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

				serverHeaderChoiceTypeFound := false

				if v, ok := cs["append_server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_AppendServerName{}

					loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.AppendServerName = v.(string)

				}

				if v, ok := cs["default_header"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_DefaultHeader{}
						serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["pass_through"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_PassThrough{}
						serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
						loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_ServerName{}

					loadbalancerTypeInt.Https.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.ServerName = v.(string)

				}

				tlsCertificatesChoiceTypeFound := false

				if v, ok := cs["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

					tlsCertificatesChoiceTypeFound = true
					tlsCertificatesChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_TlsCertParams{}
					tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
					loadbalancerTypeInt.Https.TlsCertificatesChoice = tlsCertificatesChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
								for i, ps := range sl {

									cMapToStrVal := ps.(map[string]interface{})
									certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
										certificatesInt[i].Name = v.(string)
									}

									if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										certificatesInt[i].Namespace = v.(string)
									}

									if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										certificatesInt[i].Tenant = v.(string)
									}

								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

					tlsCertificatesChoiceTypeFound = true
					tlsCertificatesChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttps_TlsParameters{}
					tlsCertificatesChoiceInt.TlsParameters = &ves_io_schema_views.DownstreamTlsParamsType{}
					loadbalancerTypeInt.Https.TlsCertificatesChoice = tlsCertificatesChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								tlsCertificatesChoiceInt.TlsParameters.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsCertificatesChoiceInt.TlsParameters.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

				}

				if v, ok := cs["coalescing_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
					loadbalancerTypeInt.HttpsAutoCert.CoalescingOptions = coalescingOptions
					for _, set := range sl {
						if set != nil {
							coalescingOptionsMapStrToI := set.(map[string]interface{})

							coalescingChoiceTypeFound := false

							if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
									coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

							if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

								coalescingChoiceTypeFound = true

								if v.(bool) {
									coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
									coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
									coalescingOptions.CoalescingChoice = coalescingChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["connection_idle_timeout"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.ConnectionIdleTimeout = uint32(v.(int))

				}

				defaultLbChoiceTypeFound := false

				if v, ok := cs["default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultLoadbalancer{}
						defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["non_default_loadbalancer"]; ok && !isIntfNil(v) && !defaultLbChoiceTypeFound {

					defaultLbChoiceTypeFound = true

					if v.(bool) {
						defaultLbChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer{}
						defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.DefaultLbChoice = defaultLbChoiceInt
					}

				}

				if v, ok := cs["http_protocol_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
					loadbalancerTypeInt.HttpsAutoCert.HttpProtocolOptions = httpProtocolOptions
					for _, set := range sl {
						if set != nil {
							httpProtocolOptionsMapStrToI := set.(map[string]interface{})

							httpProtocolChoiceTypeFound := false

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true
								httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
								httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headerTransformation := &ves_io_schema.HeaderTransformationType{}
											httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
											for _, set := range sl {
												if set != nil {
													headerTransformationMapStrToI := set.(map[string]interface{})

													headerTransformationChoiceTypeFound := false

													if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
															headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
															headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
															headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

													if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

														headerTransformationChoiceTypeFound = true

														if v.(bool) {
															headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
															headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
															headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
									httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

							if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

								httpProtocolChoiceTypeFound = true

								if v.(bool) {
									httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
									httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
									httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

				}

				mtlsChoiceTypeFound := false

				if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

					mtlsChoiceTypeFound = true

					if v.(bool) {
						mtlsChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_NoMtls{}
						mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.MtlsChoice = mtlsChoiceInt
					}

				}

				if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

					mtlsChoiceTypeFound = true
					mtlsChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_UseMtls{}
					mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
					loadbalancerTypeInt.HttpsAutoCert.MtlsChoice = mtlsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

							}

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											crlChoiceInt.Crl.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

											xfcc_header_elementsList := []ves_io_schema.XfccElement{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
												}
												xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
											}
											xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

										}

									}
								}

							}

						}
					}

				}

				pathNormalizeChoiceTypeFound := false

				if v, ok := cs["disable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DisablePathNormalize{}
						pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				if v, ok := cs["enable_path_normalize"]; ok && !isIntfNil(v) && !pathNormalizeChoiceTypeFound {

					pathNormalizeChoiceTypeFound = true

					if v.(bool) {
						pathNormalizeChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_EnablePathNormalize{}
						pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.PathNormalizeChoice = pathNormalizeChoiceInt
					}

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_Port{}

					loadbalancerTypeInt.HttpsAutoCert.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_PortRanges{}

					loadbalancerTypeInt.HttpsAutoCert.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

				serverHeaderChoiceTypeFound := false

				if v, ok := cs["append_server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{}

					loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.AppendServerName = v.(string)

				}

				if v, ok := cs["default_header"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{}
						serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["pass_through"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true

					if v.(bool) {
						serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{}
						serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
						loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt
					}

				}

				if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

					serverHeaderChoiceTypeFound = true
					serverHeaderChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{}

					loadbalancerTypeInt.HttpsAutoCert.ServerHeaderChoice = serverHeaderChoiceInt

					serverHeaderChoiceInt.ServerName = v.(string)

				}

				if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsConfig := &ves_io_schema_views.TlsConfig{}
					loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
					for _, set := range sl {
						if set != nil {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											choiceInt.CustomSecurity.CipherSuites = ls

										}

										if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

											choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

										}

										if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

											choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

										}

									}
								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	malwareProtectionTypeFound := false

	if v, ok := d.GetOk("disable_malware_protection"); ok && !malwareProtectionTypeFound {

		malwareProtectionTypeFound = true

		if v.(bool) {
			malwareProtectionInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableMalwareProtection{}
			malwareProtectionInt.DisableMalwareProtection = &ves_io_schema.Empty{}
			updateSpec.MalwareProtection = malwareProtectionInt
		}

	}

	if v, ok := d.GetOk("malware_protection_settings"); ok && !isIntfNil(v) && !malwareProtectionTypeFound {

		malwareProtectionTypeFound = true
		malwareProtectionInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_MalwareProtectionSettings{}
		malwareProtectionInt.MalwareProtectionSettings = &ves_io_schema_views_common_security.MalwareProtectionPolicy{}
		updateSpec.MalwareProtection = malwareProtectionInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["malware_protection_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					malwareProtectionRules := make([]*ves_io_schema_views_common_security.MalwareProtectionRule, len(sl))
					malwareProtectionInt.MalwareProtectionSettings.MalwareProtectionRules = malwareProtectionRules
					for i, set := range sl {
						if set != nil {
							malwareProtectionRules[i] = &ves_io_schema_views_common_security.MalwareProtectionRule{}
							malwareProtectionRulesMapStrToI := set.(map[string]interface{})

							if v, ok := malwareProtectionRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema.Action{}
								malwareProtectionRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionChoiceTypeFound := false

										if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

											actionChoiceTypeFound = true

											if v.(bool) {
												actionChoiceInt := &ves_io_schema.Action_Block{}
												actionChoiceInt.Block = &ves_io_schema.Empty{}
												action.ActionChoice = actionChoiceInt
											}

										}

										if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

											actionChoiceTypeFound = true

											if v.(bool) {
												actionChoiceInt := &ves_io_schema.Action_Report{}
												actionChoiceInt.Report = &ves_io_schema.Empty{}
												action.ActionChoice = actionChoiceInt
											}

										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["domain"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								domain := &ves_io_schema.DomainMatcherType{}
								malwareProtectionRules[i].Domain = domain
								for _, set := range sl {
									if set != nil {
										domainMapStrToI := set.(map[string]interface{})

										domainMatcherTypeFound := false

										if v, ok := domainMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainMatcherTypeFound {

											domainMatcherTypeFound = true
											domainMatcherInt := &ves_io_schema.DomainMatcherType_AnyDomain{}
											domainMatcherInt.AnyDomain = &ves_io_schema.Empty{}
											domain.DomainMatcher = domainMatcherInt

										}

										if v, ok := domainMapStrToI["domain"]; ok && !isIntfNil(v) && !domainMatcherTypeFound {

											domainMatcherTypeFound = true
											domainMatcherInt := &ves_io_schema.DomainMatcherType_Domain{}
											domainMatcherInt.Domain = &ves_io_schema.DomainType{}
											domain.DomainMatcher = domainMatcherInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_ExactValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.ExactValue = v.(string)

													}

													if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_RegexValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.RegexValue = v.(string)

													}

													if v, ok := cs["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.DomainType_SuffixValue{}

														domainMatcherInt.Domain.DomainChoice = domainChoiceInt

														domainChoiceInt.SuffixValue = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["http_methods"]; ok && !isIntfNil(v) {

								http_methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field http_methods")
									}
									http_methodsList = append(http_methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								malwareProtectionRules[i].HttpMethods = http_methodsList

							}

							if v, ok := malwareProtectionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								malwareProtectionRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := malwareProtectionRulesMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								malwareProtectionRules[i].Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		moreOption := &ves_io_schema_views_http_loadbalancer.AdvancedOptionsType{}
		updateSpec.MoreOption = moreOption
		for _, set := range sl {
			if set != nil {
				moreOptionMapStrToI := set.(map[string]interface{})

				if v, ok := moreOptionMapStrToI["buffer_policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					bufferPolicy := &ves_io_schema.BufferConfigType{}
					moreOption.BufferPolicy = bufferPolicy
					for _, set := range sl {
						if set != nil {
							bufferPolicyMapStrToI := set.(map[string]interface{})

							if w, ok := bufferPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
								bufferPolicy.Disabled = w.(bool)
							}

							if w, ok := bufferPolicyMapStrToI["max_request_bytes"]; ok && !isIntfNil(w) {
								bufferPolicy.MaxRequestBytes = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := moreOptionMapStrToI["compression_params"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					compressionParams := &ves_io_schema_virtual_host.CompressionType{}
					moreOption.CompressionParams = compressionParams
					for _, set := range sl {
						if set != nil {
							compressionParamsMapStrToI := set.(map[string]interface{})

							if w, ok := compressionParamsMapStrToI["content_length"]; ok && !isIntfNil(w) {
								compressionParams.ContentLength = uint32(w.(int))
							}

							if w, ok := compressionParamsMapStrToI["content_type"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field content_type")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								compressionParams.ContentType = ls
							}

							if w, ok := compressionParamsMapStrToI["disable_on_etag_header"]; ok && !isIntfNil(w) {
								compressionParams.DisableOnEtagHeader = w.(bool)
							}

							if w, ok := compressionParamsMapStrToI["remove_accept_encoding_header"]; ok && !isIntfNil(w) {
								compressionParams.RemoveAcceptEncodingHeader = w.(bool)
							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["custom_errors"]; ok && !isIntfNil(w) {
					ms := map[uint32]string{}
					for k, v := range w.(map[string]interface{}) {
						val := v.(string)

						s, err := strconv.ParseUint(k, 10, 32)
						if err != nil {
							return fmt.Errorf("Error while decrypting custom_errors: %s", err)
						}
						key := uint32(s)
						ms[key] = val
					}
					moreOption.CustomErrors = ms
				}

				if w, ok := moreOptionMapStrToI["disable_default_error_pages"]; ok && !isIntfNil(w) {
					moreOption.DisableDefaultErrorPages = w.(bool)
				}

				if w, ok := moreOptionMapStrToI["idle_timeout"]; ok && !isIntfNil(w) {
					moreOption.IdleTimeout = uint32(w.(int))
				}

				if w, ok := moreOptionMapStrToI["max_request_header_size"]; ok && !isIntfNil(w) {
					moreOption.MaxRequestHeaderSize = uint32(w.(int))
				}

				if v, ok := moreOptionMapStrToI["request_cookies_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
					moreOption.RequestCookiesToAdd = requestCookiesToAdd
					for i, set := range sl {
						if set != nil {
							requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
							requestCookiesToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestCookiesToAdd[i].Name = w.(string)
							}

							if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
								requestCookiesToAdd[i].Overwrite = w.(bool)
							}

							valueChoiceTypeFound := false

							if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestCookiesToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

								requestCookiesToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["request_cookies_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.RequestCookiesToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
					moreOption.RequestHeadersToAdd = requestHeadersToAdd
					for i, set := range sl {
						if set != nil {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.RequestHeadersToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["response_cookies_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
					moreOption.ResponseCookiesToAdd = responseCookiesToAdd
					for i, set := range sl {
						if set != nil {
							responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
							responseCookiesToAddMapStrToI := set.(map[string]interface{})

							domainChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

								responseCookiesToAdd[i].DomainChoice = domainChoiceInt

								domainChoiceInt.AddDomain = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
									domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].DomainChoice = domainChoiceInt
								}

							}

							expiryChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

								expiryChoiceTypeFound = true
								expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

								responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

								expiryChoiceInt.AddExpiry = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

								expiryChoiceTypeFound = true

								if v.(bool) {
									expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
									expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
								}

							}

							httponlyChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

								httponlyChoiceTypeFound = true

								if v.(bool) {
									httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
									httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

								httponlyChoiceTypeFound = true

								if v.(bool) {
									httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
									httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
								}

							}

							maxAgeChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

								maxAgeChoiceTypeFound = true

								if v.(bool) {
									maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
									maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

								maxAgeChoiceTypeFound = true
								maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

								responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

								maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

							}

							if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseCookiesToAdd[i].Name = w.(string)
							}

							if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
								responseCookiesToAdd[i].Overwrite = w.(bool)
							}

							partitionedChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

								partitionedChoiceTypeFound = true

								if v.(bool) {
									partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
									partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

								partitionedChoiceTypeFound = true

								if v.(bool) {
									partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
									partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
								}

							}

							pathChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

								pathChoiceTypeFound = true
								pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

								responseCookiesToAdd[i].PathChoice = pathChoiceInt

								pathChoiceInt.AddPath = v.(string)

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

								pathChoiceTypeFound = true

								if v.(bool) {
									pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
									pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].PathChoice = pathChoiceInt
								}

							}

							samesiteChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
									samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
									samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
									samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

								samesiteChoiceTypeFound = true

								if v.(bool) {
									samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
									samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
								}

							}

							secureChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

								secureChoiceTypeFound = true

								if v.(bool) {
									secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
									secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SecureChoice = secureChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

								secureChoiceTypeFound = true

								if v.(bool) {
									secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
									secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].SecureChoice = secureChoiceInt
								}

							}

							valueChoiceTypeFound := false

							if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true

								if v.(bool) {
									valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
									valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
									responseCookiesToAdd[i].ValueChoice = valueChoiceInt
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseCookiesToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

								responseCookiesToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["response_cookies_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.ResponseCookiesToRemove = ls
				}

				if v, ok := moreOptionMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
					moreOption.ResponseHeadersToAdd = responseHeadersToAdd
					for i, set := range sl {
						if set != nil {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}
					}

				}

				if w, ok := moreOptionMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					moreOption.ResponseHeadersToRemove = ls
				}

			}
		}

	}

	if v, ok := d.GetOk("origin_server_subset_rule_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originServerSubsetRuleList := &ves_io_schema_views_http_loadbalancer.OriginServerSubsetRuleListType{}
		updateSpec.OriginServerSubsetRuleList = originServerSubsetRuleList
		for _, set := range sl {
			if set != nil {
				originServerSubsetRuleListMapStrToI := set.(map[string]interface{})

				if v, ok := originServerSubsetRuleListMapStrToI["origin_server_subset_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originServerSubsetRules := make([]*ves_io_schema_policy.OriginServerSubsetRule, len(sl))
					originServerSubsetRuleList.OriginServerSubsetRules = originServerSubsetRules
					for i, set := range sl {
						if set != nil {
							originServerSubsetRules[i] = &ves_io_schema_policy.OriginServerSubsetRule{}
							originServerSubsetRulesMapStrToI := set.(map[string]interface{})

							asnChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AnyAsn{}
									asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
									originServerSubsetRules[i].AsnChoice = asnChoiceInt
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AsnList{}
								asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								originServerSubsetRules[i].AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

											ls := make([]uint32, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnChoiceInt.AsnList.AsNumbers = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AsnMatcher{}
								asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								originServerSubsetRules[i].AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
											for i, ps := range sl {

												asMapToStrVal := ps.(map[string]interface{})
												asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

												asnSetsInt[i].Kind = "bgp_asn_set"

												if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Name = v.(string)
												}

												if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Namespace = v.(string)
												}

												if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Tenant = v.(string)
												}

												if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
													asnSetsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["country_codes"]; ok && !isIntfNil(v) {

								country_codesList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_codes")
									}
									country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								originServerSubsetRules[i].CountryCodes = country_codesList

							}

							ipChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true

								if v.(bool) {
									ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_AnyIp{}
									ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
									originServerSubsetRules[i].IpChoice = ipChoiceInt
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_IpMatcher{}
								ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								originServerSubsetRules[i].IpChoice = ipChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

											ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

										}

										if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
											for i, ps := range sl {

												psMapToStrVal := ps.(map[string]interface{})
												prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

												prefixSetsInt[i].Kind = "ip_prefix_set"

												if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Name = v.(string)
												}

												if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Namespace = v.(string)
												}

												if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Tenant = v.(string)
												}

												if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
													prefixSetsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_IpPrefixList{}
								ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								originServerSubsetRules[i].IpChoice = ipChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

											ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

										}

										if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ipChoiceInt.IpPrefixList.IpPrefixes = ls

										}

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								originServerSubsetRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if w, ok := originServerSubsetRulesMapStrToI["origin_server_subsets_action"]; ok && !isIntfNil(w) {
								ms := map[string]string{}
								for k, v := range w.(map[string]interface{}) {
									ms[k] = v.(string)
								}
								originServerSubsetRules[i].OriginServerSubsetsAction = ms
							}

							if w, ok := originServerSubsetRulesMapStrToI["re_name_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field re_name_list")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								originServerSubsetRules[i].ReNameList = ls
							}

							selectorChoiceTypeFound := false

							if v, ok := originServerSubsetRulesMapStrToI["client_selector"]; ok && !isIntfNil(v) && !selectorChoiceTypeFound {

								selectorChoiceTypeFound = true
								selectorChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_ClientSelector{}
								selectorChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								originServerSubsetRules[i].SelectorChoice = selectorChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											selectorChoiceInt.ClientSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := originServerSubsetRulesMapStrToI["none"]; ok && !isIntfNil(v) && !selectorChoiceTypeFound {

								selectorChoiceTypeFound = true

								if v.(bool) {
									selectorChoiceInt := &ves_io_schema_policy.OriginServerSubsetRule_None{}
									selectorChoiceInt.None = &ves_io_schema.Empty{}
									originServerSubsetRules[i].SelectorChoice = selectorChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		updateSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			if set != nil {
				protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
				protectedCookiesMapStrToI := set.(map[string]interface{})

				cookieTamperingTypeFound := false

				if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
						cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
						cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				httponlyTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
					protectedCookies[i].Name = w.(string)
				}

				samesiteTypeFound := false

				if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

			}
		}

	}

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
					ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
								ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
								for i, set := range sl {
									if set != nil {
										bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
										bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

										if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											clientMatcher := &ves_io_schema_policy.ClientMatcher{}
											bypassRateLimitingRules[i].ClientMatcher = clientMatcher
											for _, set := range sl {
												if set != nil {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																	ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
																		}
																		ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																	}
																	clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																}

															}
														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	ipAsnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															if set != nil {
																tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintMatcher.Classes = classesList

																}

																if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExactValues = ls
																}

																if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExcludedValues = ls
																}

															}
														}

													}

												}
											}

										}

										destinationTypeTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true

											if v.(bool) {
												destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
												destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DestinationType = destinationTypeInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
											destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														destinationTypeInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														destinationTypeInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
											destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_groups")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														destinationTypeInt.ApiGroups.ApiGroups = ls

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											destinationTypeInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

											bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestMatcher := &ves_io_schema_policy.RequestMatcher{}
											bypassRateLimitingRules[i].RequestMatcher = requestMatcher
											for _, set := range sl {
												if set != nil {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															if set != nil {
																jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																jwtClaimsMapStrToI := set.(map[string]interface{})

																if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	jwtClaims[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	jwtClaims[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																	jwtClaims[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
					for i, set := range sl {
						if set != nil {
							serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
							serverUrlRulesMapStrToI := set.(map[string]interface{})

							if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								serverUrlRules[i].ApiGroup = w.(string)
							}

							if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								serverUrlRules[i].BasePath = w.(string)
							}

							if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								serverUrlRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									serverUrlRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

								serverUrlRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								serverUrlRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			updateSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				policyChoiceTypeFound := false

				if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true

					if v.(bool) {
						policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
						policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
					}

				}

				if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
					policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["policies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								policyChoiceInt.Policies.Policies = policiesInt
								for i, ps := range sl {

									pMapToStrVal := ps.(map[string]interface{})
									policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
										policiesInt[i].Name = v.(string)
									}

									if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										policiesInt[i].Namespace = v.(string)
									}

									if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										policiesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
					rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
					for _, set := range sl {
						if set != nil {
							rateLimiterMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rateLimiterMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_ActionBlock{}
								actionChoiceInt.ActionBlock = &ves_io_schema_rate_limiter.RateLimitBlockAction{}
								rateLimiter.ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										blockDurationChoiceTypeFound := false

										if v, ok := cs["hours"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Hours{}
											blockDurationChoiceInt.Hours = &ves_io_schema_rate_limiter.InputHours{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Hours.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["minutes"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Minutes{}
											blockDurationChoiceInt.Minutes = &ves_io_schema_rate_limiter.InputMinutes{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Minutes.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["seconds"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Seconds{}
											blockDurationChoiceInt.Seconds = &ves_io_schema_rate_limiter.InputSeconds{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Seconds.Duration = uint32(v.(int))

													}

												}
											}

										}

									}
								}

							}

							if v, ok := rateLimiterMapStrToI["disabled"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_Disabled{}
									actionChoiceInt.Disabled = &ves_io_schema.Empty{}
									rateLimiter.ActionChoice = actionChoiceInt
								}

							}

							if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.BurstMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["period_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.PeriodMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
								rateLimiter.TotalNumber = uint32(w.(int))
							}

							if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

								rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		routes := make([]*ves_io_schema_views_http_loadbalancer.RouteType, len(sl))
		updateSpec.Routes = routes
		for i, set := range sl {
			if set != nil {
				routes[i] = &ves_io_schema_views_http_loadbalancer.RouteType{}
				routesMapStrToI := set.(map[string]interface{})

				choiceTypeFound := false

				if v, ok := routesMapStrToI["custom_route_object"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_CustomRouteObject{}
					choiceInt.CustomRouteObject = &ves_io_schema_views_http_loadbalancer.RouteTypeCustomRoute{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["route_ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeRefInt := &ves_io_schema_views.ObjectRefType{}
								choiceInt.CustomRouteObject.RouteRef = routeRefInt

								for _, set := range sl {
									if set != nil {
										rrMapToStrVal := set.(map[string]interface{})
										if val, ok := rrMapToStrVal["name"]; ok && !isIntfNil(v) {
											routeRefInt.Name = val.(string)
										}
										if val, ok := rrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
											routeRefInt.Namespace = val.(string)
										}

										if val, ok := rrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
											routeRefInt.Tenant = val.(string)
										}
									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["direct_response_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_DirectResponseRoute{}
					choiceInt.DirectResponseRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeDirectResponse{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.DirectResponseRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.DirectResponseRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.DirectResponseRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.DirectResponseRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["route_direct_response"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeDirectResponse := &ves_io_schema_route.RouteDirectResponse{}
								choiceInt.DirectResponseRoute.RouteDirectResponse = routeDirectResponse
								for _, set := range sl {
									if set != nil {
										routeDirectResponseMapStrToI := set.(map[string]interface{})

										if w, ok := routeDirectResponseMapStrToI["response_body"]; ok && !isIntfNil(w) {
											routeDirectResponse.ResponseBody = w.(string)
										}

										if w, ok := routeDirectResponseMapStrToI["response_code"]; ok && !isIntfNil(w) {
											routeDirectResponse.ResponseCode = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["redirect_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_RedirectRoute{}
					choiceInt.RedirectRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeRedirect{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.RedirectRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.RedirectRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.RedirectRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.RedirectRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["route_redirect"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								routeRedirect := &ves_io_schema_route.RouteRedirect{}
								choiceInt.RedirectRoute.RouteRedirect = routeRedirect
								for _, set := range sl {
									if set != nil {
										routeRedirectMapStrToI := set.(map[string]interface{})

										if w, ok := routeRedirectMapStrToI["host_redirect"]; ok && !isIntfNil(w) {
											routeRedirect.HostRedirect = w.(string)
										}

										if w, ok := routeRedirectMapStrToI["proto_redirect"]; ok && !isIntfNil(w) {
											routeRedirect.ProtoRedirect = w.(string)
										}

										queryParamsTypeFound := false

										if v, ok := routeRedirectMapStrToI["remove_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.RouteRedirect_RemoveAllParams{}
												queryParamsInt.RemoveAllParams = &ves_io_schema.Empty{}
												routeRedirect.QueryParams = queryParamsInt
											}

										}

										if v, ok := routeRedirectMapStrToI["replace_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true
											queryParamsInt := &ves_io_schema_route.RouteRedirect_ReplaceParams{}

											routeRedirect.QueryParams = queryParamsInt

											queryParamsInt.ReplaceParams = v.(string)

										}

										if v, ok := routeRedirectMapStrToI["retain_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.RouteRedirect_RetainAllParams{}
												queryParamsInt.RetainAllParams = &ves_io_schema.Empty{}
												routeRedirect.QueryParams = queryParamsInt
											}

										}

										redirectPathChoiceTypeFound := false

										if v, ok := routeRedirectMapStrToI["path_redirect"]; ok && !isIntfNil(v) && !redirectPathChoiceTypeFound {

											redirectPathChoiceTypeFound = true
											redirectPathChoiceInt := &ves_io_schema_route.RouteRedirect_PathRedirect{}

											routeRedirect.RedirectPathChoice = redirectPathChoiceInt

											redirectPathChoiceInt.PathRedirect = v.(string)

										}

										if v, ok := routeRedirectMapStrToI["prefix_rewrite"]; ok && !isIntfNil(v) && !redirectPathChoiceTypeFound {

											redirectPathChoiceTypeFound = true
											redirectPathChoiceInt := &ves_io_schema_route.RouteRedirect_PrefixRewrite{}

											routeRedirect.RedirectPathChoice = redirectPathChoiceInt

											redirectPathChoiceInt.PrefixRewrite = v.(string)

										}

										if w, ok := routeRedirectMapStrToI["response_code"]; ok && !isIntfNil(w) {
											routeRedirect.ResponseCode = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if v, ok := routesMapStrToI["simple_route"]; ok && !isIntfNil(v) && !choiceTypeFound {

					choiceTypeFound = true
					choiceInt := &ves_io_schema_views_http_loadbalancer.RouteType_SimpleRoute{}
					choiceInt.SimpleRoute = &ves_io_schema_views_http_loadbalancer.RouteTypeSimple{}
					routes[i].Choice = choiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["advanced_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advancedOptions := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions{}
								choiceInt.SimpleRoute.AdvancedOptions = advancedOptions
								for _, set := range sl {
									if set != nil {
										advancedOptionsMapStrToI := set.(map[string]interface{})

										botDefenseJavascriptInjectionChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["bot_defense_javascript_injection"]; ok && !isIntfNil(v) && !botDefenseJavascriptInjectionChoiceTypeFound {

											botDefenseJavascriptInjectionChoiceTypeFound = true
											botDefenseJavascriptInjectionChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection{}
											botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection = &ves_io_schema_route.BotDefenseJavascriptInjectionType{}
											advancedOptions.BotDefenseJavascriptInjectionChoice = botDefenseJavascriptInjectionChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["javascript_location"]; ok && !isIntfNil(v) {

														botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection.JavascriptLocation = ves_io_schema_route.JavaScriptLocation(ves_io_schema_route.JavaScriptLocation_value[v.(string)])

													}

													if v, ok := cs["javascript_tags"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														javascriptTags := make([]*ves_io_schema_route.JavaScriptTag, len(sl))
														botDefenseJavascriptInjectionChoiceInt.BotDefenseJavascriptInjection.JavascriptTags = javascriptTags
														for i, set := range sl {
															if set != nil {
																javascriptTags[i] = &ves_io_schema_route.JavaScriptTag{}
																javascriptTagsMapStrToI := set.(map[string]interface{})

																if w, ok := javascriptTagsMapStrToI["javascript_url"]; ok && !isIntfNil(w) {
																	javascriptTags[i].JavascriptUrl = w.(string)
																}

																if v, ok := javascriptTagsMapStrToI["tag_attributes"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	tagAttributes := make([]*ves_io_schema_route.TagAttribute, len(sl))
																	javascriptTags[i].TagAttributes = tagAttributes
																	for i, set := range sl {
																		if set != nil {
																			tagAttributes[i] = &ves_io_schema_route.TagAttribute{}
																			tagAttributesMapStrToI := set.(map[string]interface{})

																			if v, ok := tagAttributesMapStrToI["javascript_tag"]; ok && !isIntfNil(v) {

																				tagAttributes[i].JavascriptTag = ves_io_schema_route.TagAttributeName(ves_io_schema_route.TagAttributeName_value[v.(string)])

																			}

																			if w, ok := tagAttributesMapStrToI["tag_value"]; ok && !isIntfNil(w) {
																				tagAttributes[i].TagValue = w.(string)
																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["inherited_bot_defense_javascript_injection"]; ok && !isIntfNil(v) && !botDefenseJavascriptInjectionChoiceTypeFound {

											botDefenseJavascriptInjectionChoiceTypeFound = true

											if v.(bool) {
												botDefenseJavascriptInjectionChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection{}
												botDefenseJavascriptInjectionChoiceInt.InheritedBotDefenseJavascriptInjection = &ves_io_schema.Empty{}
												advancedOptions.BotDefenseJavascriptInjectionChoice = botDefenseJavascriptInjectionChoiceInt
											}

										}

										bufferChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["buffer_policy"]; ok && !isIntfNil(v) && !bufferChoiceTypeFound {

											bufferChoiceTypeFound = true
											bufferChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_BufferPolicy{}
											bufferChoiceInt.BufferPolicy = &ves_io_schema.BufferConfigType{}
											advancedOptions.BufferChoice = bufferChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["disabled"]; ok && !isIntfNil(v) {

														bufferChoiceInt.BufferPolicy.Disabled = v.(bool)

													}

													if v, ok := cs["max_request_bytes"]; ok && !isIntfNil(v) {

														bufferChoiceInt.BufferPolicy.MaxRequestBytes = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["common_buffering"]; ok && !isIntfNil(v) && !bufferChoiceTypeFound {

											bufferChoiceTypeFound = true

											if v.(bool) {
												bufferChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_CommonBuffering{}
												bufferChoiceInt.CommonBuffering = &ves_io_schema.Empty{}
												advancedOptions.BufferChoice = bufferChoiceInt
											}

										}

										clusterRetractChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["do_not_retract_cluster"]; ok && !isIntfNil(v) && !clusterRetractChoiceTypeFound {

											clusterRetractChoiceTypeFound = true

											if v.(bool) {
												clusterRetractChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DoNotRetractCluster{}
												clusterRetractChoiceInt.DoNotRetractCluster = &ves_io_schema.Empty{}
												advancedOptions.ClusterRetractChoice = clusterRetractChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["retract_cluster"]; ok && !isIntfNil(v) && !clusterRetractChoiceTypeFound {

											clusterRetractChoiceTypeFound = true

											if v.(bool) {
												clusterRetractChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RetractCluster{}
												clusterRetractChoiceInt.RetractCluster = &ves_io_schema.Empty{}
												advancedOptions.ClusterRetractChoice = clusterRetractChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["cors_policy"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											corsPolicy := &ves_io_schema.CorsPolicy{}
											advancedOptions.CorsPolicy = corsPolicy
											for _, set := range sl {
												if set != nil {
													corsPolicyMapStrToI := set.(map[string]interface{})

													if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
														corsPolicy.AllowCredentials = w.(bool)
													}

													if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
														corsPolicy.AllowHeaders = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
														corsPolicy.AllowMethods = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														corsPolicy.AllowOrigin = ls
													}

													if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														corsPolicy.AllowOriginRegex = ls
													}

													if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
														corsPolicy.Disabled = w.(bool)
													}

													if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
														corsPolicy.ExposeHeaders = w.(string)
													}

													if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
														corsPolicy.MaximumAge = int32(w.(int))
													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["csrf_policy"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											csrfPolicy := &ves_io_schema.CsrfPolicy{}
											advancedOptions.CsrfPolicy = csrfPolicy
											for _, set := range sl {
												if set != nil {
													csrfPolicyMapStrToI := set.(map[string]interface{})

													allowedDomainsTypeFound := false

													if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true

														if v.(bool) {
															allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
															allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
															csrfPolicy.AllowedDomains = allowedDomainsInt
														}

													}

													if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true
														allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
														allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
														csrfPolicy.AllowedDomains = allowedDomainsInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["domains"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field domains")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	allowedDomainsInt.CustomDomainList.Domains = ls

																}

															}
														}

													}

													if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

														allowedDomainsTypeFound = true

														if v.(bool) {
															allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
															allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
															csrfPolicy.AllowedDomains = allowedDomainsInt
														}

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["disable_location_add"]; ok && !isIntfNil(w) {
											advancedOptions.DisableLocationAdd = w.(bool)
										}

										if w, ok := advancedOptionsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											advancedOptions.EndpointSubsets = ms
										}

										hashPolicyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["common_hash_policy"]; ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

											hashPolicyChoiceTypeFound = true

											if v.(bool) {
												hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_CommonHashPolicy{}
												hashPolicyChoiceInt.CommonHashPolicy = &ves_io_schema.Empty{}
												advancedOptions.HashPolicyChoice = hashPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["specific_hash_policy"]; ok && !isIntfNil(v) && !hashPolicyChoiceTypeFound {

											hashPolicyChoiceTypeFound = true
											hashPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_SpecificHashPolicy{}
											hashPolicyChoiceInt.SpecificHashPolicy = &ves_io_schema_views_http_loadbalancer.HashPolicyListType{}
											advancedOptions.HashPolicyChoice = hashPolicyChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_policy"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														hashPolicy := make([]*ves_io_schema_route.HashPolicyType, len(sl))
														hashPolicyChoiceInt.SpecificHashPolicy.HashPolicy = hashPolicy
														for i, set := range sl {
															if set != nil {
																hashPolicy[i] = &ves_io_schema_route.HashPolicyType{}
																hashPolicyMapStrToI := set.(map[string]interface{})

																policySpecifierTypeFound := false

																if v, ok := hashPolicyMapStrToI["cookie"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_Cookie{}
																	policySpecifierInt.Cookie = &ves_io_schema_route.CookieForHashing{}
																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			httponlyTypeFound := false

																			if v, ok := cs["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

																				httponlyTypeFound = true

																				if v.(bool) {
																					httponlyInt := &ves_io_schema_route.CookieForHashing_AddHttponly{}
																					httponlyInt.AddHttponly = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Httponly = httponlyInt
																				}

																			}

																			if v, ok := cs["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

																				httponlyTypeFound = true

																				if v.(bool) {
																					httponlyInt := &ves_io_schema_route.CookieForHashing_IgnoreHttponly{}
																					httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Httponly = httponlyInt
																				}

																			}

																			if v, ok := cs["name"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Name = v.(string)

																			}

																			if v, ok := cs["path"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Path = v.(string)

																			}

																			samesiteTypeFound := false

																			if v, ok := cs["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_IgnoreSamesite{}
																					samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteLax{}
																					samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteNone{}
																					samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			if v, ok := cs["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

																				samesiteTypeFound = true

																				if v.(bool) {
																					samesiteInt := &ves_io_schema_route.CookieForHashing_SamesiteStrict{}
																					samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Samesite = samesiteInt
																				}

																			}

																			secureTypeFound := false

																			if v, ok := cs["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

																				secureTypeFound = true

																				if v.(bool) {
																					secureInt := &ves_io_schema_route.CookieForHashing_AddSecure{}
																					secureInt.AddSecure = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Secure = secureInt
																				}

																			}

																			if v, ok := cs["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

																				secureTypeFound = true

																				if v.(bool) {
																					secureInt := &ves_io_schema_route.CookieForHashing_IgnoreSecure{}
																					secureInt.IgnoreSecure = &ves_io_schema.Empty{}
																					policySpecifierInt.Cookie.Secure = secureInt
																				}

																			}

																			if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

																				policySpecifierInt.Cookie.Ttl = uint32(v.(int))

																			}

																		}
																	}

																}

																if v, ok := hashPolicyMapStrToI["header_name"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_HeaderName{}

																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	policySpecifierInt.HeaderName = v.(string)

																}

																if v, ok := hashPolicyMapStrToI["source_ip"]; ok && !isIntfNil(v) && !policySpecifierTypeFound {

																	policySpecifierTypeFound = true
																	policySpecifierInt := &ves_io_schema_route.HashPolicyType_SourceIp{}

																	hashPolicy[i].PolicySpecifier = policySpecifierInt

																	policySpecifierInt.SourceIp = v.(bool)

																}

																if w, ok := hashPolicyMapStrToI["terminal"]; ok && !isIntfNil(w) {
																	hashPolicy[i].Terminal = w.(bool)
																}

															}
														}

													}

												}
											}

										}

										mirroringChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_mirroring"]; ok && !isIntfNil(v) && !mirroringChoiceTypeFound {

											mirroringChoiceTypeFound = true

											if v.(bool) {
												mirroringChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableMirroring{}
												mirroringChoiceInt.DisableMirroring = &ves_io_schema.Empty{}
												advancedOptions.MirroringChoice = mirroringChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["mirror_policy"]; ok && !isIntfNil(v) && !mirroringChoiceTypeFound {

											mirroringChoiceTypeFound = true
											mirroringChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_MirrorPolicy{}
											mirroringChoiceInt.MirrorPolicy = &ves_io_schema_views_http_loadbalancer.MirrorPolicyType{}
											advancedOptions.MirroringChoice = mirroringChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["origin_pool"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														originPoolInt := &ves_io_schema_views.ObjectRefType{}
														mirroringChoiceInt.MirrorPolicy.OriginPool = originPoolInt

														for _, set := range sl {
															if set != nil {
																opMapToStrVal := set.(map[string]interface{})
																if val, ok := opMapToStrVal["name"]; ok && !isIntfNil(v) {
																	originPoolInt.Name = val.(string)
																}
																if val, ok := opMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	originPoolInt.Namespace = val.(string)
																}

																if val, ok := opMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	originPoolInt.Tenant = val.(string)
																}
															}
														}

													}

													if v, ok := cs["percent"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														percent := &ves_io_schema.FractionalPercent{}
														mirroringChoiceInt.MirrorPolicy.Percent = percent
														for _, set := range sl {
															if set != nil {
																percentMapStrToI := set.(map[string]interface{})

																if v, ok := percentMapStrToI["denominator"]; ok && !isIntfNil(v) {

																	percent.Denominator = ves_io_schema.DenominatorType(ves_io_schema.DenominatorType_value[v.(string)])

																}

																if w, ok := percentMapStrToI["numerator"]; ok && !isIntfNil(w) {
																	percent.Numerator = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["priority"]; ok && !isIntfNil(v) {

											advancedOptions.Priority = ves_io_schema.RoutingPriority(ves_io_schema.RoutingPriority_value[v.(string)])

										}

										if v, ok := advancedOptionsMapStrToI["request_cookies_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
											advancedOptions.RequestCookiesToAdd = requestCookiesToAdd
											for i, set := range sl {
												if set != nil {
													requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
													requestCookiesToAddMapStrToI := set.(map[string]interface{})

													if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														requestCookiesToAdd[i].Name = w.(string)
													}

													if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
														requestCookiesToAdd[i].Overwrite = w.(bool)
													}

													valueChoiceTypeFound := false

													if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														requestCookiesToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

														requestCookiesToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["request_cookies_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.RequestCookiesToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
											advancedOptions.RequestHeadersToAdd = requestHeadersToAdd
											for i, set := range sl {
												if set != nil {
													requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
													requestHeadersToAddMapStrToI := set.(map[string]interface{})

													if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
														requestHeadersToAdd[i].Append = w.(bool)
													}

													if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														requestHeadersToAdd[i].Name = w.(string)
													}

													valueChoiceTypeFound := false

													if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														requestHeadersToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

														requestHeadersToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.RequestHeadersToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["response_cookies_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
											advancedOptions.ResponseCookiesToAdd = responseCookiesToAdd
											for i, set := range sl {
												if set != nil {
													responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
													responseCookiesToAddMapStrToI := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

														responseCookiesToAdd[i].DomainChoice = domainChoiceInt

														domainChoiceInt.AddDomain = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
															domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].DomainChoice = domainChoiceInt
														}

													}

													expiryChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

														expiryChoiceTypeFound = true
														expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

														responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

														expiryChoiceInt.AddExpiry = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

														expiryChoiceTypeFound = true

														if v.(bool) {
															expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
															expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
														}

													}

													httponlyChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

														httponlyChoiceTypeFound = true

														if v.(bool) {
															httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
															httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

														httponlyChoiceTypeFound = true

														if v.(bool) {
															httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
															httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
														}

													}

													maxAgeChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

														maxAgeChoiceTypeFound = true

														if v.(bool) {
															maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
															maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

														maxAgeChoiceTypeFound = true
														maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

														responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

														maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

													}

													if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														responseCookiesToAdd[i].Name = w.(string)
													}

													if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
														responseCookiesToAdd[i].Overwrite = w.(bool)
													}

													partitionedChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

														partitionedChoiceTypeFound = true

														if v.(bool) {
															partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
															partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

														partitionedChoiceTypeFound = true

														if v.(bool) {
															partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
															partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
														}

													}

													pathChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

														pathChoiceTypeFound = true
														pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

														responseCookiesToAdd[i].PathChoice = pathChoiceInt

														pathChoiceInt.AddPath = v.(string)

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

														pathChoiceTypeFound = true

														if v.(bool) {
															pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
															pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].PathChoice = pathChoiceInt
														}

													}

													samesiteChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
															samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
															samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
															samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

														samesiteChoiceTypeFound = true

														if v.(bool) {
															samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
															samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
														}

													}

													secureChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

														secureChoiceTypeFound = true

														if v.(bool) {
															secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
															secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SecureChoice = secureChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

														secureChoiceTypeFound = true

														if v.(bool) {
															secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
															secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].SecureChoice = secureChoiceInt
														}

													}

													valueChoiceTypeFound := false

													if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true

														if v.(bool) {
															valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
															valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
															responseCookiesToAdd[i].ValueChoice = valueChoiceInt
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														responseCookiesToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

														responseCookiesToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["response_cookies_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.ResponseCookiesToRemove = ls
										}

										if v, ok := advancedOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
											advancedOptions.ResponseHeadersToAdd = responseHeadersToAdd
											for i, set := range sl {
												if set != nil {
													responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
													responseHeadersToAddMapStrToI := set.(map[string]interface{})

													if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
														responseHeadersToAdd[i].Append = w.(bool)
													}

													if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
														responseHeadersToAdd[i].Name = w.(string)
													}

													valueChoiceTypeFound := false

													if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
														valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
														responseHeadersToAdd[i].ValueChoice = valueChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

														valueChoiceTypeFound = true
														valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

														responseHeadersToAdd[i].ValueChoice = valueChoiceInt

														valueChoiceInt.Value = v.(string)

													}

												}
											}

										}

										if w, ok := advancedOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											advancedOptions.ResponseHeadersToRemove = ls
										}

										retryPolicyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["default_retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true

											if v.(bool) {
												retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DefaultRetryPolicy{}
												retryPolicyChoiceInt.DefaultRetryPolicy = &ves_io_schema.Empty{}
												advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["no_retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true

											if v.(bool) {
												retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_NoRetryPolicy{}
												retryPolicyChoiceInt.NoRetryPolicy = &ves_io_schema.Empty{}
												advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["retry_policy"]; ok && !isIntfNil(v) && !retryPolicyChoiceTypeFound {

											retryPolicyChoiceTypeFound = true
											retryPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RetryPolicy{}
											retryPolicyChoiceInt.RetryPolicy = &ves_io_schema.RetryPolicyType{}
											advancedOptions.RetryPolicyChoice = retryPolicyChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["back_off"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														backOff := &ves_io_schema.RetryBackOff{}
														retryPolicyChoiceInt.RetryPolicy.BackOff = backOff
														for _, set := range sl {
															if set != nil {
																backOffMapStrToI := set.(map[string]interface{})

																if w, ok := backOffMapStrToI["base_interval"]; ok && !isIntfNil(w) {
																	backOff.BaseInterval = uint32(w.(int))
																}

																if w, ok := backOffMapStrToI["max_interval"]; ok && !isIntfNil(w) {
																	backOff.MaxInterval = uint32(w.(int))
																}

															}
														}

													}

													if v, ok := cs["num_retries"]; ok && !isIntfNil(v) {

														retryPolicyChoiceInt.RetryPolicy.NumRetries = uint32(v.(int))

													}

													if v, ok := cs["per_try_timeout"]; ok && !isIntfNil(v) {

														retryPolicyChoiceInt.RetryPolicy.PerTryTimeout = uint32(v.(int))

													}

													if v, ok := cs["retriable_status_codes"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														retryPolicyChoiceInt.RetryPolicy.RetriableStatusCodes = ls

													}

													if v, ok := cs["retry_condition"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field retry_condition")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														retryPolicyChoiceInt.RetryPolicy.RetryCondition = ls

													}

												}
											}

										}

										rewriteChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_prefix_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true

											if v.(bool) {
												rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisablePrefixRewrite{}
												rewriteChoiceInt.DisablePrefixRewrite = &ves_io_schema.Empty{}
												advancedOptions.RewriteChoice = rewriteChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["prefix_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true
											rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_PrefixRewrite{}

											advancedOptions.RewriteChoice = rewriteChoiceInt

											rewriteChoiceInt.PrefixRewrite = v.(string)

										}

										if v, ok := advancedOptionsMapStrToI["regex_rewrite"]; ok && !isIntfNil(v) && !rewriteChoiceTypeFound {

											rewriteChoiceTypeFound = true
											rewriteChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_RegexRewrite{}
											rewriteChoiceInt.RegexRewrite = &ves_io_schema.RegexMatchRewrite{}
											advancedOptions.RewriteChoice = rewriteChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["pattern"]; ok && !isIntfNil(v) {

														rewriteChoiceInt.RegexRewrite.Pattern = v.(string)

													}

													if v, ok := cs["substitution"]; ok && !isIntfNil(v) {

														rewriteChoiceInt.RegexRewrite.Substitution = v.(string)

													}

												}
											}

										}

										spdyChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_spdy"]; ok && !isIntfNil(v) && !spdyChoiceTypeFound {

											spdyChoiceTypeFound = true

											if v.(bool) {
												spdyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableSpdy{}
												spdyChoiceInt.DisableSpdy = &ves_io_schema.Empty{}
												advancedOptions.SpdyChoice = spdyChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["enable_spdy"]; ok && !isIntfNil(v) && !spdyChoiceTypeFound {

											spdyChoiceTypeFound = true

											if v.(bool) {
												spdyChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_EnableSpdy{}
												spdyChoiceInt.EnableSpdy = &ves_io_schema.Empty{}
												advancedOptions.SpdyChoice = spdyChoiceInt
											}

										}

										if w, ok := advancedOptionsMapStrToI["timeout"]; ok && !isIntfNil(w) {
											advancedOptions.Timeout = uint32(w.(int))
										}

										wafChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true
											wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_AppFirewall{}
											wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
											advancedOptions.WafChoice = wafChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														wafChoiceInt.AppFirewall.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := advancedOptionsMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true

											if v.(bool) {
												wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableWaf{}
												wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
												advancedOptions.WafChoice = wafChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["inherited_waf"]; ok && !isIntfNil(v) && !wafChoiceTypeFound {

											wafChoiceTypeFound = true

											if v.(bool) {
												wafChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_InheritedWaf{}
												wafChoiceInt.InheritedWaf = &ves_io_schema.Empty{}
												advancedOptions.WafChoice = wafChoiceInt
											}

										}

										websocketChoiceTypeFound := false

										if v, ok := advancedOptionsMapStrToI["disable_web_socket_config"]; ok && !isIntfNil(v) && !websocketChoiceTypeFound {

											websocketChoiceTypeFound = true

											if v.(bool) {
												websocketChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_DisableWebSocketConfig{}
												websocketChoiceInt.DisableWebSocketConfig = &ves_io_schema.Empty{}
												advancedOptions.WebsocketChoice = websocketChoiceInt
											}

										}

										if v, ok := advancedOptionsMapStrToI["web_socket_config"]; ok && !isIntfNil(v) && !websocketChoiceTypeFound {

											websocketChoiceTypeFound = true
											websocketChoiceInt := &ves_io_schema_views_http_loadbalancer.RouteSimpleAdvancedOptions_WebSocketConfig{}
											websocketChoiceInt.WebSocketConfig = &ves_io_schema_route.WebsocketConfigType{}
											advancedOptions.WebsocketChoice = websocketChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["use_websocket"]; ok && !isIntfNil(v) {

														websocketChoiceInt.WebSocketConfig.UseWebsocket = v.(bool)

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								choiceInt.SimpleRoute.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

							hostRewriteParamsTypeFound := false

							if v, ok := cs["auto_host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true

								if v.(bool) {
									hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_AutoHostRewrite{}
									hostRewriteParamsInt.AutoHostRewrite = &ves_io_schema.Empty{}
									choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt
								}

							}

							if v, ok := cs["disable_host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true

								if v.(bool) {
									hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_DisableHostRewrite{}
									hostRewriteParamsInt.DisableHostRewrite = &ves_io_schema.Empty{}
									choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt
								}

							}

							if v, ok := cs["host_rewrite"]; ok && !isIntfNil(v) && !hostRewriteParamsTypeFound {

								hostRewriteParamsTypeFound = true
								hostRewriteParamsInt := &ves_io_schema_views_http_loadbalancer.RouteTypeSimple_HostRewrite{}

								choiceInt.SimpleRoute.HostRewriteParams = hostRewriteParamsInt

								hostRewriteParamsInt.HostRewrite = v.(string)

							}

							if v, ok := cs["http_method"]; ok && !isIntfNil(v) {

								choiceInt.SimpleRoute.HttpMethod = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

							}

							if v, ok := cs["incoming_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								incomingPort := &ves_io_schema.PortMatcherType{}
								choiceInt.SimpleRoute.IncomingPort = incomingPort
								for _, set := range sl {
									if set != nil {
										incomingPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := incomingPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												incomingPort.PortMatch = portMatchInt
											}

										}

										if v, ok := incomingPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := incomingPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											incomingPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							if v, ok := cs["origin_pools"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								originPools := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
								choiceInt.SimpleRoute.OriginPools = originPools
								for i, set := range sl {
									if set != nil {
										originPools[i] = &ves_io_schema_views.OriginPoolWithWeight{}
										originPoolsMapStrToI := set.(map[string]interface{})

										if w, ok := originPoolsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											originPools[i].EndpointSubsets = ms
										}

										poolChoiceTypeFound := false

										if v, ok := originPoolsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
											poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
											originPools[i].PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														poolChoiceInt.Cluster.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := originPoolsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
											poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
											originPools[i].PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														poolChoiceInt.Pool.Tenant = v.(string)

													}

												}
											}

										}

										if w, ok := originPoolsMapStrToI["priority"]; ok && !isIntfNil(w) {
											originPools[i].Priority = uint32(w.(int))
										}

										if w, ok := originPoolsMapStrToI["weight"]; ok && !isIntfNil(w) {
											originPools[i].Weight = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["path"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								path := &ves_io_schema.PathMatcherType{}
								choiceInt.SimpleRoute.Path = path
								for _, set := range sl {
									if set != nil {
										pathMapStrToI := set.(map[string]interface{})

										pathMatchTypeFound := false

										if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Path = v.(string)

										}

										if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Prefix = v.(string)

										}

										if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

											pathMatchTypeFound = true
											pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

											path.PathMatch = pathMatchInt

											pathMatchInt.Regex = v.(string)

										}

									}
								}

							}

							if v, ok := cs["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := &ves_io_schema_route.QueryParamsSimpleRoute{}
								choiceInt.SimpleRoute.QueryParams = queryParams
								for _, set := range sl {
									if set != nil {
										queryParamsMapStrToI := set.(map[string]interface{})

										queryParamsTypeFound := false

										if v, ok := queryParamsMapStrToI["remove_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_RemoveAllParams{}
												queryParamsInt.RemoveAllParams = &ves_io_schema.Empty{}
												queryParams.QueryParams = queryParamsInt
											}

										}

										if v, ok := queryParamsMapStrToI["replace_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true
											queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_ReplaceParams{}

											queryParams.QueryParams = queryParamsInt

											queryParamsInt.ReplaceParams = v.(string)

										}

										if v, ok := queryParamsMapStrToI["retain_all_params"]; ok && !isIntfNil(v) && !queryParamsTypeFound {

											queryParamsTypeFound = true

											if v.(bool) {
												queryParamsInt := &ves_io_schema_route.QueryParamsSimpleRoute_RetainAllParams{}
												queryParamsInt.RetainAllParams = &ves_io_schema.Empty{}
												queryParams.QueryParams = queryParamsInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("sensitive_data_disclosure_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		sensitiveDataDisclosureRules := &ves_io_schema_views_http_loadbalancer.SensitiveDataDisclosureRules{}
		updateSpec.SensitiveDataDisclosureRules = sensitiveDataDisclosureRules
		for _, set := range sl {
			if set != nil {
				sensitiveDataDisclosureRulesMapStrToI := set.(map[string]interface{})

				if v, ok := sensitiveDataDisclosureRulesMapStrToI["sensitive_data_types_in_response"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataTypesInResponse := make([]*ves_io_schema_views_http_loadbalancer.SensitiveDataTypes, len(sl))
					sensitiveDataDisclosureRules.SensitiveDataTypesInResponse = sensitiveDataTypesInResponse
					for i, set := range sl {
						if set != nil {
							sensitiveDataTypesInResponse[i] = &ves_io_schema_views_http_loadbalancer.SensitiveDataTypes{}
							sensitiveDataTypesInResponseMapStrToI := set.(map[string]interface{})

							if v, ok := sensitiveDataTypesInResponseMapStrToI["body"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								body := &ves_io_schema_views_http_loadbalancer.BodySectionMaskingOptions{}
								sensitiveDataTypesInResponse[i].Body = body
								for _, set := range sl {
									if set != nil {
										bodyMapStrToI := set.(map[string]interface{})

										if w, ok := bodyMapStrToI["fields"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field fields")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											body.Fields = ls
										}

									}
								}

							}

							typeConditionTypeChoiceTypeFound := false

							if v, ok := sensitiveDataTypesInResponseMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !typeConditionTypeChoiceTypeFound {

								typeConditionTypeChoiceTypeFound = true
								typeConditionTypeChoiceInt := &ves_io_schema_views_http_loadbalancer.SensitiveDataTypes_ApiEndpoint{}
								typeConditionTypeChoiceInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
								sensitiveDataTypesInResponse[i].TypeConditionTypeChoice = typeConditionTypeChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											typeConditionTypeChoiceInt.ApiEndpoint.Methods = methodsList

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											typeConditionTypeChoiceInt.ApiEndpoint.Path = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	sensitiveDataPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("default_sensitive_data_policy"); ok && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true

		if v.(bool) {
			sensitiveDataPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DefaultSensitiveDataPolicy{}
			sensitiveDataPolicyChoiceInt.DefaultSensitiveDataPolicy = &ves_io_schema.Empty{}
			updateSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("sensitive_data_policy"); ok && !isIntfNil(v) && !sensitiveDataPolicyChoiceTypeFound {

		sensitiveDataPolicyChoiceTypeFound = true
		sensitiveDataPolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_SensitiveDataPolicy{}
		sensitiveDataPolicyChoiceInt.SensitiveDataPolicy = &ves_io_schema_views_common_security.SensitiveDataPolicySettings{}
		updateSpec.SensitiveDataPolicyChoice = sensitiveDataPolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["sensitive_data_policy_ref"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataPolicyRefInt := &ves_io_schema_views.ObjectRefType{}
					sensitiveDataPolicyChoiceInt.SensitiveDataPolicy.SensitiveDataPolicyRef = sensitiveDataPolicyRefInt

					for _, set := range sl {
						if set != nil {
							sdprMapToStrVal := set.(map[string]interface{})
							if val, ok := sdprMapToStrVal["name"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Name = val.(string)
							}
							if val, ok := sdprMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Namespace = val.(string)
							}

							if val, ok := sdprMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								sensitiveDataPolicyRefInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		updateSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policies"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policiesInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policiesInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policiesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	threatMeshChoiceTypeFound := false

	if v, ok := d.GetOk("disable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableThreatMesh{}
			threatMeshChoiceInt.DisableThreatMesh = &ves_io_schema.Empty{}
			updateSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_threat_mesh"); ok && !threatMeshChoiceTypeFound {

		threatMeshChoiceTypeFound = true

		if v.(bool) {
			threatMeshChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableThreatMesh{}
			threatMeshChoiceInt.EnableThreatMesh = &ves_io_schema.Empty{}
			updateSpec.ThreatMeshChoice = threatMeshChoiceInt
		}

	}

	trustClientIpHeadersChoiceTypeFound := false

	if v, ok := d.GetOk("disable_trust_client_ip_headers"); ok && !trustClientIpHeadersChoiceTypeFound {

		trustClientIpHeadersChoiceTypeFound = true

		if v.(bool) {
			trustClientIpHeadersChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableTrustClientIpHeaders{}
			trustClientIpHeadersChoiceInt.DisableTrustClientIpHeaders = &ves_io_schema.Empty{}
			updateSpec.TrustClientIpHeadersChoice = trustClientIpHeadersChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_trust_client_ip_headers"); ok && !isIntfNil(v) && !trustClientIpHeadersChoiceTypeFound {

		trustClientIpHeadersChoiceTypeFound = true
		trustClientIpHeadersChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_EnableTrustClientIpHeaders{}
		trustClientIpHeadersChoiceInt.EnableTrustClientIpHeaders = &ves_io_schema_virtual_host.ClientIPHeaders{}
		updateSpec.TrustClientIpHeadersChoice = trustClientIpHeadersChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["client_ip_headers"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field client_ip_headers")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					trustClientIpHeadersChoiceInt.EnableTrustClientIpHeaders.ClientIpHeaders = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.TrustedClients = trustedClients
		for i, set := range sl {
			if set != nil {
				trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				trustedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					trustedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					trustedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					trustedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			updateSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		updateSpec.UserIdChoice = userIdChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Tenant = v.(string)

				}

			}
		}

	}

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !isIntfNil(v) && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		updateSpec.WafChoice = wafChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Tenant = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_http_loadbalancer.ReplaceSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			updateSpec.WafChoice = wafChoiceInt
		}

	}

	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		updateSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra HttpLoadbalancer obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_http_loadbalancer.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating HttpLoadbalancer: %s", err)
	}

	return resourceVolterraHttpLoadbalancerRead(d, meta)
}

func resourceVolterraHttpLoadbalancerDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_http_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] HttpLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra HttpLoadbalancer before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra HttpLoadbalancer obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_views_http_loadbalancer.ObjectType, namespace, name, opts...)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_site_mesh_group "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group"
)

// resourceVolterraSiteMeshGroup is implementation of Volterra's SiteMeshGroup resources
func resourceVolterraSiteMeshGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraSiteMeshGroupCreate,
		Read:   resourceVolterraSiteMeshGroupRead,
		Update: resourceVolterraSiteMeshGroupUpdate,
		Delete: resourceVolterraSiteMeshGroupDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"hub": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"tunnel_type": {
				Type:     schema.TypeString,
				Required: true,
			},

			"type": {
				Type:     schema.TypeString,
				Required: true,
			},

			"virtual_site": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraSiteMeshGroupCreate creates SiteMeshGroup resource
func resourceVolterraSiteMeshGroupCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_site_mesh_group.CreateSpecType{}
	createReq := &ves_io_schema_site_mesh_group.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//hub
	if v, ok := d.GetOk("hub"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		hubInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.Hub = hubInt
		for i, ps := range sl {

			hMapToStrVal := ps.(map[string]interface{})
			hubInt[i] = &ves_io_schema.ObjectRefType{}

			hubInt[i].Kind = "site_mesh_group"

			if v, ok := hMapToStrVal["name"]; ok && !isIntfNil(v) {
				hubInt[i].Name = v.(string)
			}

			if v, ok := hMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				hubInt[i].Namespace = v.(string)
			}

			if v, ok := hMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				hubInt[i].Tenant = v.(string)
			}

			if v, ok := hMapToStrVal["uid"]; ok && !isIntfNil(v) {
				hubInt[i].Uid = v.(string)
			}

		}

	}

	//tunnel_type
	if v, ok := d.GetOk("tunnel_type"); ok && !isIntfNil(v) {

		createSpec.TunnelType = ves_io_schema.SiteToSiteTunnelType(ves_io_schema.SiteToSiteTunnelType_value[v.(string)])

	}

	//type
	if v, ok := d.GetOk("type"); ok && !isIntfNil(v) {

		createSpec.Type = ves_io_schema_site_mesh_group.SiteMeshGroupType(ves_io_schema_site_mesh_group.SiteMeshGroupType_value[v.(string)])

	}

	//virtual_site
	if v, ok := d.GetOk("virtual_site"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		virtualSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.VirtualSite = virtualSiteInt
		for i, ps := range sl {

			vsMapToStrVal := ps.(map[string]interface{})
			virtualSiteInt[i] = &ves_io_schema.ObjectRefType{}

			virtualSiteInt[i].Kind = "virtual_site"

			if v, ok := vsMapToStrVal["name"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Name = v.(string)
			}

			if v, ok := vsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Namespace = v.(string)
			}

			if v, ok := vsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Tenant = v.(string)
			}

			if v, ok := vsMapToStrVal["uid"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Uid = v.(string)
			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra SiteMeshGroup object with struct: %+v", createReq)

	createSiteMeshGroupResp, err := client.CreateObject(context.Background(), ves_io_schema_site_mesh_group.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating SiteMeshGroup: %s", err)
	}
	d.SetId(createSiteMeshGroupResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraSiteMeshGroupRead(d, meta)
}

func resourceVolterraSiteMeshGroupRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_site_mesh_group.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SiteMeshGroup %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SiteMeshGroup %q: %s", d.Id(), err)
	}
	return setSiteMeshGroupFields(client, d, resp)
}

func setSiteMeshGroupFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraSiteMeshGroupUpdate updates SiteMeshGroup resource
func resourceVolterraSiteMeshGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_site_mesh_group.ReplaceSpecType{}
	updateReq := &ves_io_schema_site_mesh_group.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("hub"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		hubInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.Hub = hubInt
		for i, ps := range sl {

			hMapToStrVal := ps.(map[string]interface{})
			hubInt[i] = &ves_io_schema.ObjectRefType{}

			hubInt[i].Kind = "site_mesh_group"

			if v, ok := hMapToStrVal["name"]; ok && !isIntfNil(v) {
				hubInt[i].Name = v.(string)
			}

			if v, ok := hMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				hubInt[i].Namespace = v.(string)
			}

			if v, ok := hMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				hubInt[i].Tenant = v.(string)
			}

			if v, ok := hMapToStrVal["uid"]; ok && !isIntfNil(v) {
				hubInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("tunnel_type"); ok && !isIntfNil(v) {

		updateSpec.TunnelType = ves_io_schema.SiteToSiteTunnelType(ves_io_schema.SiteToSiteTunnelType_value[v.(string)])

	}

	if v, ok := d.GetOk("type"); ok && !isIntfNil(v) {

		updateSpec.Type = ves_io_schema_site_mesh_group.SiteMeshGroupType(ves_io_schema_site_mesh_group.SiteMeshGroupType_value[v.(string)])

	}

	if v, ok := d.GetOk("virtual_site"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		virtualSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.VirtualSite = virtualSiteInt
		for i, ps := range sl {

			vsMapToStrVal := ps.(map[string]interface{})
			virtualSiteInt[i] = &ves_io_schema.ObjectRefType{}

			virtualSiteInt[i].Kind = "virtual_site"

			if v, ok := vsMapToStrVal["name"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Name = v.(string)
			}

			if v, ok := vsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Namespace = v.(string)
			}

			if v, ok := vsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Tenant = v.(string)
			}

			if v, ok := vsMapToStrVal["uid"]; ok && !isIntfNil(v) {
				virtualSiteInt[i].Uid = v.(string)
			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra SiteMeshGroup obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_site_mesh_group.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating SiteMeshGroup: %s", err)
	}

	return resourceVolterraSiteMeshGroupRead(d, meta)
}

func resourceVolterraSiteMeshGroupDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_site_mesh_group.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SiteMeshGroup %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SiteMeshGroup before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra SiteMeshGroup obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_site_mesh_group.ObjectType, namespace, name)
}

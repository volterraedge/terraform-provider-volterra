//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_advertise_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy"
)

// resourceVolterraAdvertisePolicy is implementation of Volterra's AdvertisePolicy resources
func resourceVolterraAdvertisePolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraAdvertisePolicyCreate,
		Read:   resourceVolterraAdvertisePolicyRead,
		Update: resourceVolterraAdvertisePolicyUpdate,
		Delete: resourceVolterraAdvertisePolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"address": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"port": {

				Type:     schema.TypeInt,
				Optional: true,
			},

			"port_ranges": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"protocol": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"public_ip": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"skip_xff_append": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"tls_parameters": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"client_certificate_optional": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"client_certificate_required": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"no_client_certificate": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"common_params": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cipher_suites": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"maximum_protocol_version": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"minimum_protocol_version": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"validation_params": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"skip_hostname_verification": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"trusted_ca_list": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"verify_subject_alt_names": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"xfcc_header_elements": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"where": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_network": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraAdvertisePolicyCreate creates AdvertisePolicy resource
func resourceVolterraAdvertisePolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_advertise_policy.CreateSpecType{}
	createReq := &ves_io_schema_advertise_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//address
	if v, ok := d.GetOk("address"); ok && !isIntfNil(v) {

		createSpec.Address =
			v.(string)

	}

	//port_choice

	portChoiceTypeFound := false

	if v, ok := d.GetOk("port"); ok && !isIntfNil(v) && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_advertise_policy.CreateSpecType_Port{}

		createSpec.PortChoice = portChoiceInt

		portChoiceInt.Port = uint32(v.(int))

	}

	if v, ok := d.GetOk("port_ranges"); ok && !isIntfNil(v) && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_advertise_policy.CreateSpecType_PortRanges{}

		createSpec.PortChoice = portChoiceInt

		portChoiceInt.PortRanges = v.(string)

	}

	//protocol
	if v, ok := d.GetOk("protocol"); ok && !isIntfNil(v) {

		createSpec.Protocol =
			v.(string)

	}

	//public_ip
	if v, ok := d.GetOk("public_ip"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		publicIpInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.PublicIp = publicIpInt
		for i, ps := range sl {

			piMapToStrVal := ps.(map[string]interface{})
			publicIpInt[i] = &ves_io_schema.ObjectRefType{}

			publicIpInt[i].Kind = "public_ip"

			if v, ok := piMapToStrVal["name"]; ok && !isIntfNil(v) {
				publicIpInt[i].Name = v.(string)
			}

			if v, ok := piMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				publicIpInt[i].Namespace = v.(string)
			}

			if v, ok := piMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				publicIpInt[i].Tenant = v.(string)
			}

			if v, ok := piMapToStrVal["uid"]; ok && !isIntfNil(v) {
				publicIpInt[i].Uid = v.(string)
			}

		}

	}

	//skip_xff_append
	if v, ok := d.GetOk("skip_xff_append"); ok && !isIntfNil(v) {

		createSpec.SkipXffAppend =
			v.(bool)

	}

	//tls_parameters
	if v, ok := d.GetOk("tls_parameters"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		tlsParameters := &ves_io_schema.DownstreamTlsParamsType{}
		createSpec.TlsParameters = tlsParameters
		for _, set := range sl {
			if set != nil {
				tlsParametersMapStrToI := set.(map[string]interface{})

				clientCertificateVerifyChoiceTypeFound := false

				if v, ok := tlsParametersMapStrToI["client_certificate_optional"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_ClientCertificateOptional{}
					clientCertificateVerifyChoiceInt.ClientCertificateOptional = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["client_certificate_required"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_ClientCertificateRequired{}
					clientCertificateVerifyChoiceInt.ClientCertificateRequired = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["no_client_certificate"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_NoClientCertificate{}
					clientCertificateVerifyChoiceInt.NoClientCertificate = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["common_params"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					commonParams := &ves_io_schema.TlsParamsType{}
					tlsParameters.CommonParams = commonParams
					for _, set := range sl {
						if set != nil {
							commonParamsMapStrToI := set.(map[string]interface{})

							if w, ok := commonParamsMapStrToI["cipher_suites"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								commonParams.CipherSuites = ls
							}

							if v, ok := commonParamsMapStrToI["maximum_protocol_version"]; ok && !isIntfNil(v) {

								commonParams.MaximumProtocolVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := commonParamsMapStrToI["minimum_protocol_version"]; ok && !isIntfNil(v) {

								commonParams.MinimumProtocolVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := commonParamsMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								commonParams.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := commonParamsMapStrToI["validation_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								validationParams := &ves_io_schema.TlsValidationParamsType{}
								commonParams.ValidationParams = validationParams
								for _, set := range sl {
									if set != nil {
										validationParamsMapStrToI := set.(map[string]interface{})

										if w, ok := validationParamsMapStrToI["skip_hostname_verification"]; ok && !isIntfNil(w) {
											validationParams.SkipHostnameVerification = w.(bool)
										}

										trustedCaChoiceTypeFound := false

										if v, ok := validationParamsMapStrToI["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema.TlsValidationParamsType_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema.TrustedCAList{}
											validationParams.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["trusted_ca_list"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														trustedCaListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														trustedCaChoiceInt.TrustedCa.TrustedCaList = trustedCaListInt
														for i, ps := range sl {

															tclMapToStrVal := ps.(map[string]interface{})
															trustedCaListInt[i] = &ves_io_schema.ObjectRefType{}

															trustedCaListInt[i].Kind = "trusted_ca_list"

															if v, ok := tclMapToStrVal["name"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Name = v.(string)
															}

															if v, ok := tclMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Namespace = v.(string)
															}

															if v, ok := tclMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Tenant = v.(string)
															}

															if v, ok := tclMapToStrVal["uid"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := validationParamsMapStrToI["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema.TlsValidationParamsType_TrustedCaUrl{}

											validationParams.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										if w, ok := validationParamsMapStrToI["verify_subject_alt_names"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field verify_subject_alt_names")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											validationParams.VerifySubjectAltNames = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := tlsParametersMapStrToI["xfcc_header_elements"]; ok && !isIntfNil(v) {

					xfcc_header_elementsList := []ves_io_schema.XfccElement{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
						}
						xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
					}
					tlsParameters.XfccHeaderElements = xfcc_header_elementsList

				}

			}
		}

	}

	//where
	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.NetworkSiteRefSelector{}
		createSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualNetwork{}
					refOrSelectorInt.VirtualNetwork = &ves_io_schema.NetworkRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualNetwork.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra AdvertisePolicy object with struct: %+v", createReq)

	createAdvertisePolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_advertise_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating AdvertisePolicy: %s", err)
	}
	d.SetId(createAdvertisePolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraAdvertisePolicyRead(d, meta)
}

func resourceVolterraAdvertisePolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_advertise_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AdvertisePolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AdvertisePolicy %q: %s", d.Id(), err)
	}
	return setAdvertisePolicyFields(client, d, resp)
}

func setAdvertisePolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraAdvertisePolicyUpdate updates AdvertisePolicy resource
func resourceVolterraAdvertisePolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_advertise_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_advertise_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("address"); ok && !isIntfNil(v) {

		updateSpec.Address =
			v.(string)

	}

	portChoiceTypeFound := false

	if v, ok := d.GetOk("port"); ok && !isIntfNil(v) && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_advertise_policy.ReplaceSpecType_Port{}

		updateSpec.PortChoice = portChoiceInt

		portChoiceInt.Port = uint32(v.(int))

	}

	if v, ok := d.GetOk("port_ranges"); ok && !isIntfNil(v) && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_advertise_policy.ReplaceSpecType_PortRanges{}

		updateSpec.PortChoice = portChoiceInt

		portChoiceInt.PortRanges = v.(string)

	}

	if v, ok := d.GetOk("protocol"); ok && !isIntfNil(v) {

		updateSpec.Protocol =
			v.(string)

	}

	if v, ok := d.GetOk("public_ip"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		publicIpInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.PublicIp = publicIpInt
		for i, ps := range sl {

			piMapToStrVal := ps.(map[string]interface{})
			publicIpInt[i] = &ves_io_schema.ObjectRefType{}

			publicIpInt[i].Kind = "public_ip"

			if v, ok := piMapToStrVal["name"]; ok && !isIntfNil(v) {
				publicIpInt[i].Name = v.(string)
			}

			if v, ok := piMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				publicIpInt[i].Namespace = v.(string)
			}

			if v, ok := piMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				publicIpInt[i].Tenant = v.(string)
			}

			if v, ok := piMapToStrVal["uid"]; ok && !isIntfNil(v) {
				publicIpInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("skip_xff_append"); ok && !isIntfNil(v) {

		updateSpec.SkipXffAppend =
			v.(bool)

	}

	if v, ok := d.GetOk("tls_parameters"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		tlsParameters := &ves_io_schema.DownstreamTlsParamsType{}
		updateSpec.TlsParameters = tlsParameters
		for _, set := range sl {
			if set != nil {
				tlsParametersMapStrToI := set.(map[string]interface{})

				clientCertificateVerifyChoiceTypeFound := false

				if v, ok := tlsParametersMapStrToI["client_certificate_optional"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_ClientCertificateOptional{}
					clientCertificateVerifyChoiceInt.ClientCertificateOptional = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["client_certificate_required"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_ClientCertificateRequired{}
					clientCertificateVerifyChoiceInt.ClientCertificateRequired = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["no_client_certificate"]; ok && !isIntfNil(v) && !clientCertificateVerifyChoiceTypeFound {

					clientCertificateVerifyChoiceTypeFound = true
					clientCertificateVerifyChoiceInt := &ves_io_schema.DownstreamTlsParamsType_NoClientCertificate{}
					clientCertificateVerifyChoiceInt.NoClientCertificate = &ves_io_schema.Empty{}
					tlsParameters.ClientCertificateVerifyChoice = clientCertificateVerifyChoiceInt

				}

				if v, ok := tlsParametersMapStrToI["common_params"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					commonParams := &ves_io_schema.TlsParamsType{}
					tlsParameters.CommonParams = commonParams
					for _, set := range sl {
						if set != nil {
							commonParamsMapStrToI := set.(map[string]interface{})

							if w, ok := commonParamsMapStrToI["cipher_suites"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								commonParams.CipherSuites = ls
							}

							if v, ok := commonParamsMapStrToI["maximum_protocol_version"]; ok && !isIntfNil(v) {

								commonParams.MaximumProtocolVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := commonParamsMapStrToI["minimum_protocol_version"]; ok && !isIntfNil(v) {

								commonParams.MinimumProtocolVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := commonParamsMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								commonParams.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := commonParamsMapStrToI["validation_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								validationParams := &ves_io_schema.TlsValidationParamsType{}
								commonParams.ValidationParams = validationParams
								for _, set := range sl {
									if set != nil {
										validationParamsMapStrToI := set.(map[string]interface{})

										if w, ok := validationParamsMapStrToI["skip_hostname_verification"]; ok && !isIntfNil(w) {
											validationParams.SkipHostnameVerification = w.(bool)
										}

										trustedCaChoiceTypeFound := false

										if v, ok := validationParamsMapStrToI["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema.TlsValidationParamsType_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema.TrustedCAList{}
											validationParams.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["trusted_ca_list"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														trustedCaListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														trustedCaChoiceInt.TrustedCa.TrustedCaList = trustedCaListInt
														for i, ps := range sl {

															tclMapToStrVal := ps.(map[string]interface{})
															trustedCaListInt[i] = &ves_io_schema.ObjectRefType{}

															trustedCaListInt[i].Kind = "trusted_ca_list"

															if v, ok := tclMapToStrVal["name"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Name = v.(string)
															}

															if v, ok := tclMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Namespace = v.(string)
															}

															if v, ok := tclMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Tenant = v.(string)
															}

															if v, ok := tclMapToStrVal["uid"]; ok && !isIntfNil(v) {
																trustedCaListInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := validationParamsMapStrToI["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema.TlsValidationParamsType_TrustedCaUrl{}

											validationParams.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										if w, ok := validationParamsMapStrToI["verify_subject_alt_names"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field verify_subject_alt_names")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											validationParams.VerifySubjectAltNames = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := tlsParametersMapStrToI["xfcc_header_elements"]; ok && !isIntfNil(v) {

					xfcc_header_elementsList := []ves_io_schema.XfccElement{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
						}
						xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
					}
					tlsParameters.XfccHeaderElements = xfcc_header_elementsList

				}

			}
		}

	}

	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.NetworkSiteRefSelector{}
		updateSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualNetwork{}
					refOrSelectorInt.VirtualNetwork = &ves_io_schema.NetworkRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualNetwork.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra AdvertisePolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_advertise_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating AdvertisePolicy: %s", err)
	}

	return resourceVolterraAdvertisePolicyRead(d, meta)
}

func resourceVolterraAdvertisePolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_advertise_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AdvertisePolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AdvertisePolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra AdvertisePolicy obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_advertise_policy.ObjectType, namespace, name, opts...)
}

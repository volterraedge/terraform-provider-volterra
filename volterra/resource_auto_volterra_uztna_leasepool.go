//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_uztna_leasepool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_leasepool"
)

// resourceVolterraUztnaLeasepool is implementation of Volterra's UztnaLeasepool resources
func resourceVolterraUztnaLeasepool() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaLeasepoolCreate,
		Read:   resourceVolterraUztnaLeasepoolRead,
		Update: resourceVolterraUztnaLeasepoolUpdate,
		Delete: resourceVolterraUztnaLeasepoolDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"lease_pool": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"end_address": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"ipv6": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"start_address": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"ipv6": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"network": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"plen": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"prefix": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"ipv6": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"plen": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"prefix": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaLeasepoolCreate creates UztnaLeasepool resource
func resourceVolterraUztnaLeasepoolCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_uztna_leasepool.CreateSpecType{}
	createReq := &ves_io_schema_uztna_uztna_leasepool.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//lease_pool
	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := make([]*ves_io_schema_uztna_uztna_leasepool.LeasePool, len(sl))
		createSpec.LeasePool = leasePool
		for i, set := range sl {
			leasePool[i] = &ves_io_schema_uztna_uztna_leasepool.LeasePool{}
			leasePoolMapStrToI := set.(map[string]interface{})

			if v, ok := leasePoolMapStrToI["end_address"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				endAddress := &ves_io_schema.IpAddressType{}
				leasePool[i].EndAddress = endAddress
				for _, set := range sl {
					endAddressMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := endAddressMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						endAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := endAddressMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						endAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

			if v, ok := leasePoolMapStrToI["start_address"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				startAddress := &ves_io_schema.IpAddressType{}
				leasePool[i].StartAddress = startAddress
				for _, set := range sl {
					startAddressMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := startAddressMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						startAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := startAddressMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						startAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

		}

	}

	//network
	if v, ok := d.GetOk("network"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		network := make([]*ves_io_schema.IpSubnetType, len(sl))
		createSpec.Network = network
		for i, set := range sl {
			network[i] = &ves_io_schema.IpSubnetType{}
			networkMapStrToI := set.(map[string]interface{})

			verTypeFound := false

			if v, ok := networkMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpSubnetType_Ipv4{}
				verInt.Ipv4 = &ves_io_schema.Ipv4SubnetType{}
				network[i].Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["plen"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Plen = uint32(v.(int))

					}

					if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Prefix = v.(string)

					}

				}

			}

			if v, ok := networkMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpSubnetType_Ipv6{}
				verInt.Ipv6 = &ves_io_schema.Ipv6SubnetType{}
				network[i].Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["plen"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Plen = uint32(v.(int))

					}

					if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Prefix = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaLeasepool object with struct: %+v", createReq)

	createUztnaLeasepoolResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaLeasepool: %s", err)
	}
	d.SetId(createUztnaLeasepoolResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaLeasepoolRead(d, meta)
}

func resourceVolterraUztnaLeasepoolRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaLeasepool %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaLeasepool %q: %s", d.Id(), err)
	}
	return setUztnaLeasepoolFields(client, d, resp)
}

func setUztnaLeasepoolFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaLeasepoolUpdate updates UztnaLeasepool resource
func resourceVolterraUztnaLeasepoolUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_uztna_leasepool.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_uztna_leasepool.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := make([]*ves_io_schema_uztna_uztna_leasepool.LeasePool, len(sl))
		updateSpec.LeasePool = leasePool
		for i, set := range sl {
			leasePool[i] = &ves_io_schema_uztna_uztna_leasepool.LeasePool{}
			leasePoolMapStrToI := set.(map[string]interface{})

			if v, ok := leasePoolMapStrToI["end_address"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				endAddress := &ves_io_schema.IpAddressType{}
				leasePool[i].EndAddress = endAddress
				for _, set := range sl {
					endAddressMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := endAddressMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						endAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := endAddressMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						endAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

			if v, ok := leasePoolMapStrToI["start_address"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				startAddress := &ves_io_schema.IpAddressType{}
				leasePool[i].StartAddress = startAddress
				for _, set := range sl {
					startAddressMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := startAddressMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						startAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := startAddressMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						startAddress.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("network"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		network := make([]*ves_io_schema.IpSubnetType, len(sl))
		updateSpec.Network = network
		for i, set := range sl {
			network[i] = &ves_io_schema.IpSubnetType{}
			networkMapStrToI := set.(map[string]interface{})

			verTypeFound := false

			if v, ok := networkMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpSubnetType_Ipv4{}
				verInt.Ipv4 = &ves_io_schema.Ipv4SubnetType{}
				network[i].Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["plen"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Plen = uint32(v.(int))

					}

					if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Prefix = v.(string)

					}

				}

			}

			if v, ok := networkMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpSubnetType_Ipv6{}
				verInt.Ipv6 = &ves_io_schema.Ipv6SubnetType{}
				network[i].Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["plen"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Plen = uint32(v.(int))

					}

					if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Prefix = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaLeasepool obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaLeasepool: %s", err)
	}

	return resourceVolterraUztnaLeasepoolRead(d, meta)
}

func resourceVolterraUztnaLeasepoolDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaLeasepool %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaLeasepool before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaLeasepool obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_uztna_leasepool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_leasepool"
)

// resourceVolterraUztnaLeasepool is implementation of Volterra's UztnaLeasepool resources
func resourceVolterraUztnaLeasepool() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaLeasepoolCreate,
		Read:   resourceVolterraUztnaLeasepoolRead,
		Update: resourceVolterraUztnaLeasepoolUpdate,
		Delete: resourceVolterraUztnaLeasepoolDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"ip_version": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4_vip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"prefix": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"vip4_range": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"end_address": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"addr": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"start_address": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"addr": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaLeasepoolCreate creates UztnaLeasepool resource
func resourceVolterraUztnaLeasepoolCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_uztna_leasepool.CreateSpecType{}
	createReq := &ves_io_schema_uztna_uztna_leasepool.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//ip_version
	if v, ok := d.GetOk("ip_version"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipVersion := &ves_io_schema_uztna_uztna_leasepool.IPVersion{}
		createSpec.IpVersion = ipVersion
		for _, set := range sl {
			if set != nil {
				ipVersionMapStrToI := set.(map[string]interface{})

				ipVipTypeFound := false

				if v, ok := ipVersionMapStrToI["ipv4_vip"]; ok && !isIntfNil(v) && !ipVipTypeFound {

					ipVipTypeFound = true
					ipVipInt := &ves_io_schema_uztna_uztna_leasepool.IPVersion_Ipv4Vip{}
					ipVipInt.Ipv4Vip = &ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolConfig{}
					ipVersion.IpVip = ipVipInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefix")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipVipInt.Ipv4Vip.Prefix = ls

							}

							if v, ok := cs["vip4_range"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								vip4Range := make([]*ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolRange, len(sl))
								ipVipInt.Ipv4Vip.Vip4Range = vip4Range
								for i, set := range sl {
									if set != nil {
										vip4Range[i] = &ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolRange{}
										vip4RangeMapStrToI := set.(map[string]interface{})

										if v, ok := vip4RangeMapStrToI["end_address"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											endAddress := &ves_io_schema.Ipv4AddressType{}
											vip4Range[i].EndAddress = endAddress
											for _, set := range sl {
												if set != nil {
													endAddressMapStrToI := set.(map[string]interface{})

													if w, ok := endAddressMapStrToI["addr"]; ok && !isIntfNil(w) {
														endAddress.Addr = w.(string)
													}

												}
											}

										}

										if v, ok := vip4RangeMapStrToI["start_address"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											startAddress := &ves_io_schema.Ipv4AddressType{}
											vip4Range[i].StartAddress = startAddress
											for _, set := range sl {
												if set != nil {
													startAddressMapStrToI := set.(map[string]interface{})

													if w, ok := startAddressMapStrToI["addr"]; ok && !isIntfNil(w) {
														startAddress.Addr = w.(string)
													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaLeasepool object with struct: %+v", createReq)

	createUztnaLeasepoolResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaLeasepool: %s", err)
	}
	d.SetId(createUztnaLeasepoolResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaLeasepoolRead(d, meta)
}

func resourceVolterraUztnaLeasepoolRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaLeasepool %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaLeasepool %q: %s", d.Id(), err)
	}
	return setUztnaLeasepoolFields(client, d, resp)
}

func setUztnaLeasepoolFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaLeasepoolUpdate updates UztnaLeasepool resource
func resourceVolterraUztnaLeasepoolUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_uztna_leasepool.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_uztna_leasepool.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("ip_version"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipVersion := &ves_io_schema_uztna_uztna_leasepool.IPVersion{}
		updateSpec.IpVersion = ipVersion
		for _, set := range sl {
			if set != nil {
				ipVersionMapStrToI := set.(map[string]interface{})

				ipVipTypeFound := false

				if v, ok := ipVersionMapStrToI["ipv4_vip"]; ok && !isIntfNil(v) && !ipVipTypeFound {

					ipVipTypeFound = true
					ipVipInt := &ves_io_schema_uztna_uztna_leasepool.IPVersion_Ipv4Vip{}
					ipVipInt.Ipv4Vip = &ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolConfig{}
					ipVersion.IpVip = ipVipInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefix")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipVipInt.Ipv4Vip.Prefix = ls

							}

							if v, ok := cs["vip4_range"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								vip4Range := make([]*ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolRange, len(sl))
								ipVipInt.Ipv4Vip.Vip4Range = vip4Range
								for i, set := range sl {
									if set != nil {
										vip4Range[i] = &ves_io_schema_uztna_uztna_leasepool.IPV4LeasePoolRange{}
										vip4RangeMapStrToI := set.(map[string]interface{})

										if v, ok := vip4RangeMapStrToI["end_address"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											endAddress := &ves_io_schema.Ipv4AddressType{}
											vip4Range[i].EndAddress = endAddress
											for _, set := range sl {
												if set != nil {
													endAddressMapStrToI := set.(map[string]interface{})

													if w, ok := endAddressMapStrToI["addr"]; ok && !isIntfNil(w) {
														endAddress.Addr = w.(string)
													}

												}
											}

										}

										if v, ok := vip4RangeMapStrToI["start_address"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											startAddress := &ves_io_schema.Ipv4AddressType{}
											vip4Range[i].StartAddress = startAddress
											for _, set := range sl {
												if set != nil {
													startAddressMapStrToI := set.(map[string]interface{})

													if w, ok := startAddressMapStrToI["addr"]; ok && !isIntfNil(w) {
														startAddress.Addr = w.(string)
													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaLeasepool obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaLeasepool: %s", err)
	}

	return resourceVolterraUztnaLeasepoolRead(d, meta)
}

func resourceVolterraUztnaLeasepoolDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaLeasepool %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaLeasepool before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaLeasepool obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_uztna_leasepool.ObjectType, namespace, name, opts...)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_uztna_flow "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_flow"
)

// resourceVolterraUztnaFlow is implementation of Volterra's UztnaFlow resources
func resourceVolterraUztnaFlow() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaFlowCreate,
		Read:   resourceVolterraUztnaFlowRead,
		Update: resourceVolterraUztnaFlowUpdate,
		Delete: resourceVolterraUztnaFlowDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"flow_type": {

				Type:     schema.TypeSet,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"geo_match": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"match_cri": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_geo_location_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"saml_message": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"application_tag": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"saml_app_tag": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"provider_metadata": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"idp_provider_metadata": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"service_provider_metadata": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"service_provider_properties": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"audience_uri": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"uniform_resource_locator": {

																Type:     schema.TypeSet,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"uniform_resource_name": {

																Type:     schema.TypeSet,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"host_name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"urn": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"force_authentication": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"relay_state": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"sign_authentication_request": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"no_auth_req": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"sign_auth": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"certificate": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"type": {
													Type:     schema.TypeString,
													Required: true,
												},

												"want_encrypted_assertion": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"encrypt_req": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"certificate": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"no_encrypt_req": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"want_signed_assertion": {
													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaFlowCreate creates UztnaFlow resource
func resourceVolterraUztnaFlowCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_uztna_flow.CreateSpecType{}
	createReq := &ves_io_schema_uztna_uztna_flow.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//flow_type
	if v, ok := d.GetOk("flow_type"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		flowType := &ves_io_schema_uztna_uztna_flow.FlowType{}
		createSpec.FlowType = flowType
		for _, set := range sl {
			flowTypeMapStrToI := set.(map[string]interface{})

			flowTypeChoiceTypeFound := false

			if v, ok := flowTypeMapStrToI["geo_match"]; ok && !isIntfNil(v) && !flowTypeChoiceTypeFound {

				flowTypeChoiceTypeFound = true
				flowTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.FlowType_GeoMatch{}
				flowTypeChoiceInt.GeoMatch = &ves_io_schema_uztna_uztna_flow.GeoMatch{}
				flowType.FlowTypeChoice = flowTypeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["match_cri"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						matchCri := make([]*ves_io_schema_uztna_uztna_flow.MatchingCriteria, len(sl))
						flowTypeChoiceInt.GeoMatch.MatchCri = matchCri
						for i, set := range sl {
							matchCri[i] = &ves_io_schema_uztna_uztna_flow.MatchingCriteria{}
							matchCriMapStrToI := set.(map[string]interface{})

							if v, ok := matchCriMapStrToI["custom_geo_location_selector"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								customGeoLocationSelector := &ves_io_schema.LabelSelectorType{}
								matchCri[i].CustomGeoLocationSelector = customGeoLocationSelector
								for _, set := range sl {
									customGeoLocationSelectorMapStrToI := set.(map[string]interface{})

									if w, ok := customGeoLocationSelectorMapStrToI["expressions"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										customGeoLocationSelector.Expressions = ls
									}

								}

							}

						}

					}

				}

			}

			if v, ok := flowTypeMapStrToI["saml_message"]; ok && !isIntfNil(v) && !flowTypeChoiceTypeFound {

				flowTypeChoiceTypeFound = true
				flowTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.FlowType_SamlMessage{}
				flowTypeChoiceInt.SamlMessage = &ves_io_schema_uztna_uztna_flow.SAMLMessage{}
				flowType.FlowTypeChoice = flowTypeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["application_tag"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						applicationTag := &ves_io_schema_uztna_uztna_flow.ApplicationTagging{}
						flowTypeChoiceInt.SamlMessage.ApplicationTag = applicationTag
						for _, set := range sl {
							applicationTagMapStrToI := set.(map[string]interface{})

							if w, ok := applicationTagMapStrToI["saml_app_tag"]; ok && !isIntfNil(w) {
								applicationTag.SamlAppTag = w.(string)
							}

						}

					}

					if v, ok := cs["provider_metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						providerMetadata := &ves_io_schema_uztna_uztna_flow.ProviderMetadata{}
						flowTypeChoiceInt.SamlMessage.ProviderMetadata = providerMetadata
						for _, set := range sl {
							providerMetadataMapStrToI := set.(map[string]interface{})

							if w, ok := providerMetadataMapStrToI["idp_provider_metadata"]; ok && !isIntfNil(w) {
								providerMetadata.IdpProviderMetadata = w.(string)
							}

							if w, ok := providerMetadataMapStrToI["service_provider_metadata"]; ok && !isIntfNil(w) {
								providerMetadata.ServiceProviderMetadata = w.(string)
							}

						}

					}

					if v, ok := cs["service_provider_properties"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						serviceProviderProperties := &ves_io_schema_uztna_uztna_flow.ServiceProviderProperties{}
						flowTypeChoiceInt.SamlMessage.ServiceProviderProperties = serviceProviderProperties
						for _, set := range sl {
							serviceProviderPropertiesMapStrToI := set.(map[string]interface{})

							if v, ok := serviceProviderPropertiesMapStrToI["audience_uri"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								audienceUri := &ves_io_schema_uztna_uztna_flow.AudienceUri{}
								serviceProviderProperties.AudienceUri = audienceUri
								for _, set := range sl {
									audienceUriMapStrToI := set.(map[string]interface{})

									audienceUriChoiceTypeFound := false

									if v, ok := audienceUriMapStrToI["uniform_resource_locator"]; ok && !isIntfNil(v) && !audienceUriChoiceTypeFound {

										audienceUriChoiceTypeFound = true
										audienceUriChoiceInt := &ves_io_schema_uztna_uztna_flow.AudienceUri_UniformResourceLocator{}
										audienceUriChoiceInt.UniformResourceLocator = &ves_io_schema_uztna_uztna_flow.UniformResourceLocator{}
										audienceUri.AudienceUriChoice = audienceUriChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceLocator.Url = v.(string)

											}

										}

									}

									if v, ok := audienceUriMapStrToI["uniform_resource_name"]; ok && !isIntfNil(v) && !audienceUriChoiceTypeFound {

										audienceUriChoiceTypeFound = true
										audienceUriChoiceInt := &ves_io_schema_uztna_uztna_flow.AudienceUri_UniformResourceName{}
										audienceUriChoiceInt.UniformResourceName = &ves_io_schema_uztna_uztna_flow.UniformResourceName{}
										audienceUri.AudienceUriChoice = audienceUriChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["host_name"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceName.HostName = v.(string)

											}

											if v, ok := cs["urn"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceName.Urn = v.(string)

											}

										}

									}

								}

							}

							if w, ok := serviceProviderPropertiesMapStrToI["force_authentication"]; ok && !isIntfNil(w) {
								serviceProviderProperties.ForceAuthentication = w.(bool)
							}

							if w, ok := serviceProviderPropertiesMapStrToI["relay_state"]; ok && !isIntfNil(w) {
								serviceProviderProperties.RelayState = w.(string)
							}

							if v, ok := serviceProviderPropertiesMapStrToI["sign_authentication_request"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								signAuthenticationRequest := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest{}
								serviceProviderProperties.SignAuthenticationRequest = signAuthenticationRequest
								for _, set := range sl {
									signAuthenticationRequestMapStrToI := set.(map[string]interface{})

									signAuthTypeChoiceTypeFound := false

									if v, ok := signAuthenticationRequestMapStrToI["no_auth_req"]; ok && !isIntfNil(v) && !signAuthTypeChoiceTypeFound {

										signAuthTypeChoiceTypeFound = true

										if v.(bool) {
											signAuthTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest_NoAuthReq{}
											signAuthTypeChoiceInt.NoAuthReq = &ves_io_schema.Empty{}
											signAuthenticationRequest.SignAuthTypeChoice = signAuthTypeChoiceInt
										}

									}

									if v, ok := signAuthenticationRequestMapStrToI["sign_auth"]; ok && !isIntfNil(v) && !signAuthTypeChoiceTypeFound {

										signAuthTypeChoiceTypeFound = true
										signAuthTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest_SignAuth{}
										signAuthTypeChoiceInt.SignAuth = &ves_io_schema_uztna_uztna_flow.Certificate{}
										signAuthenticationRequest.SignAuthTypeChoice = signAuthTypeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												signAuthTypeChoiceInt.SignAuth.Certificate = certificateInt
												for i, ps := range sl {

													cMapToStrVal := ps.(map[string]interface{})
													certificateInt[i] = &ves_io_schema.ObjectRefType{}

													certificateInt[i].Kind = "certificate"

													if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
														certificateInt[i].Name = v.(string)
													}

													if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														certificateInt[i].Namespace = v.(string)
													}

													if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														certificateInt[i].Tenant = v.(string)
													}

													if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
														certificateInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

								}

							}

							if v, ok := serviceProviderPropertiesMapStrToI["type"]; ok && !isIntfNil(v) {

								serviceProviderProperties.Type = ves_io_schema_uztna_uztna_flow.AssertionConsumerServiceBinding(ves_io_schema_uztna_uztna_flow.AssertionConsumerServiceBinding_value[v.(string)])

							}

							if v, ok := serviceProviderPropertiesMapStrToI["want_encrypted_assertion"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								wantEncryptedAssertion := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest{}
								serviceProviderProperties.WantEncryptedAssertion = wantEncryptedAssertion
								for _, set := range sl {
									wantEncryptedAssertionMapStrToI := set.(map[string]interface{})

									wantEncryptedRequestTypeFound := false

									if v, ok := wantEncryptedAssertionMapStrToI["encrypt_req"]; ok && !isIntfNil(v) && !wantEncryptedRequestTypeFound {

										wantEncryptedRequestTypeFound = true
										wantEncryptedRequestInt := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest_EncryptReq{}
										wantEncryptedRequestInt.EncryptReq = &ves_io_schema_uztna_uztna_flow.Certificate{}
										wantEncryptedAssertion.WantEncryptedRequest = wantEncryptedRequestInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												wantEncryptedRequestInt.EncryptReq.Certificate = certificateInt
												for i, ps := range sl {

													cMapToStrVal := ps.(map[string]interface{})
													certificateInt[i] = &ves_io_schema.ObjectRefType{}

													certificateInt[i].Kind = "certificate"

													if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
														certificateInt[i].Name = v.(string)
													}

													if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														certificateInt[i].Namespace = v.(string)
													}

													if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														certificateInt[i].Tenant = v.(string)
													}

													if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
														certificateInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := wantEncryptedAssertionMapStrToI["no_encrypt_req"]; ok && !isIntfNil(v) && !wantEncryptedRequestTypeFound {

										wantEncryptedRequestTypeFound = true

										if v.(bool) {
											wantEncryptedRequestInt := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest_NoEncryptReq{}
											wantEncryptedRequestInt.NoEncryptReq = &ves_io_schema.Empty{}
											wantEncryptedAssertion.WantEncryptedRequest = wantEncryptedRequestInt
										}

									}

								}

							}

							if w, ok := serviceProviderPropertiesMapStrToI["want_signed_assertion"]; ok && !isIntfNil(w) {
								serviceProviderProperties.WantSignedAssertion = w.(bool)
							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaFlow object with struct: %+v", createReq)

	createUztnaFlowResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_uztna_flow.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaFlow: %s", err)
	}
	d.SetId(createUztnaFlowResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaFlowRead(d, meta)
}

func resourceVolterraUztnaFlowRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_flow.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaFlow %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaFlow %q: %s", d.Id(), err)
	}
	return setUztnaFlowFields(client, d, resp)
}

func setUztnaFlowFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaFlowUpdate updates UztnaFlow resource
func resourceVolterraUztnaFlowUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_uztna_flow.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_uztna_flow.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("flow_type"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		flowType := &ves_io_schema_uztna_uztna_flow.FlowType{}
		updateSpec.FlowType = flowType
		for _, set := range sl {
			flowTypeMapStrToI := set.(map[string]interface{})

			flowTypeChoiceTypeFound := false

			if v, ok := flowTypeMapStrToI["geo_match"]; ok && !isIntfNil(v) && !flowTypeChoiceTypeFound {

				flowTypeChoiceTypeFound = true
				flowTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.FlowType_GeoMatch{}
				flowTypeChoiceInt.GeoMatch = &ves_io_schema_uztna_uztna_flow.GeoMatch{}
				flowType.FlowTypeChoice = flowTypeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["match_cri"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						matchCri := make([]*ves_io_schema_uztna_uztna_flow.MatchingCriteria, len(sl))
						flowTypeChoiceInt.GeoMatch.MatchCri = matchCri
						for i, set := range sl {
							matchCri[i] = &ves_io_schema_uztna_uztna_flow.MatchingCriteria{}
							matchCriMapStrToI := set.(map[string]interface{})

							if v, ok := matchCriMapStrToI["custom_geo_location_selector"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								customGeoLocationSelector := &ves_io_schema.LabelSelectorType{}
								matchCri[i].CustomGeoLocationSelector = customGeoLocationSelector
								for _, set := range sl {
									customGeoLocationSelectorMapStrToI := set.(map[string]interface{})

									if w, ok := customGeoLocationSelectorMapStrToI["expressions"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										customGeoLocationSelector.Expressions = ls
									}

								}

							}

						}

					}

				}

			}

			if v, ok := flowTypeMapStrToI["saml_message"]; ok && !isIntfNil(v) && !flowTypeChoiceTypeFound {

				flowTypeChoiceTypeFound = true
				flowTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.FlowType_SamlMessage{}
				flowTypeChoiceInt.SamlMessage = &ves_io_schema_uztna_uztna_flow.SAMLMessage{}
				flowType.FlowTypeChoice = flowTypeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["application_tag"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						applicationTag := &ves_io_schema_uztna_uztna_flow.ApplicationTagging{}
						flowTypeChoiceInt.SamlMessage.ApplicationTag = applicationTag
						for _, set := range sl {
							applicationTagMapStrToI := set.(map[string]interface{})

							if w, ok := applicationTagMapStrToI["saml_app_tag"]; ok && !isIntfNil(w) {
								applicationTag.SamlAppTag = w.(string)
							}

						}

					}

					if v, ok := cs["provider_metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						providerMetadata := &ves_io_schema_uztna_uztna_flow.ProviderMetadata{}
						flowTypeChoiceInt.SamlMessage.ProviderMetadata = providerMetadata
						for _, set := range sl {
							providerMetadataMapStrToI := set.(map[string]interface{})

							if w, ok := providerMetadataMapStrToI["idp_provider_metadata"]; ok && !isIntfNil(w) {
								providerMetadata.IdpProviderMetadata = w.(string)
							}

							if w, ok := providerMetadataMapStrToI["service_provider_metadata"]; ok && !isIntfNil(w) {
								providerMetadata.ServiceProviderMetadata = w.(string)
							}

						}

					}

					if v, ok := cs["service_provider_properties"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						serviceProviderProperties := &ves_io_schema_uztna_uztna_flow.ServiceProviderProperties{}
						flowTypeChoiceInt.SamlMessage.ServiceProviderProperties = serviceProviderProperties
						for _, set := range sl {
							serviceProviderPropertiesMapStrToI := set.(map[string]interface{})

							if v, ok := serviceProviderPropertiesMapStrToI["audience_uri"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								audienceUri := &ves_io_schema_uztna_uztna_flow.AudienceUri{}
								serviceProviderProperties.AudienceUri = audienceUri
								for _, set := range sl {
									audienceUriMapStrToI := set.(map[string]interface{})

									audienceUriChoiceTypeFound := false

									if v, ok := audienceUriMapStrToI["uniform_resource_locator"]; ok && !isIntfNil(v) && !audienceUriChoiceTypeFound {

										audienceUriChoiceTypeFound = true
										audienceUriChoiceInt := &ves_io_schema_uztna_uztna_flow.AudienceUri_UniformResourceLocator{}
										audienceUriChoiceInt.UniformResourceLocator = &ves_io_schema_uztna_uztna_flow.UniformResourceLocator{}
										audienceUri.AudienceUriChoice = audienceUriChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceLocator.Url = v.(string)

											}

										}

									}

									if v, ok := audienceUriMapStrToI["uniform_resource_name"]; ok && !isIntfNil(v) && !audienceUriChoiceTypeFound {

										audienceUriChoiceTypeFound = true
										audienceUriChoiceInt := &ves_io_schema_uztna_uztna_flow.AudienceUri_UniformResourceName{}
										audienceUriChoiceInt.UniformResourceName = &ves_io_schema_uztna_uztna_flow.UniformResourceName{}
										audienceUri.AudienceUriChoice = audienceUriChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["host_name"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceName.HostName = v.(string)

											}

											if v, ok := cs["urn"]; ok && !isIntfNil(v) {

												audienceUriChoiceInt.UniformResourceName.Urn = v.(string)

											}

										}

									}

								}

							}

							if w, ok := serviceProviderPropertiesMapStrToI["force_authentication"]; ok && !isIntfNil(w) {
								serviceProviderProperties.ForceAuthentication = w.(bool)
							}

							if w, ok := serviceProviderPropertiesMapStrToI["relay_state"]; ok && !isIntfNil(w) {
								serviceProviderProperties.RelayState = w.(string)
							}

							if v, ok := serviceProviderPropertiesMapStrToI["sign_authentication_request"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								signAuthenticationRequest := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest{}
								serviceProviderProperties.SignAuthenticationRequest = signAuthenticationRequest
								for _, set := range sl {
									signAuthenticationRequestMapStrToI := set.(map[string]interface{})

									signAuthTypeChoiceTypeFound := false

									if v, ok := signAuthenticationRequestMapStrToI["no_auth_req"]; ok && !isIntfNil(v) && !signAuthTypeChoiceTypeFound {

										signAuthTypeChoiceTypeFound = true

										if v.(bool) {
											signAuthTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest_NoAuthReq{}
											signAuthTypeChoiceInt.NoAuthReq = &ves_io_schema.Empty{}
											signAuthenticationRequest.SignAuthTypeChoice = signAuthTypeChoiceInt
										}

									}

									if v, ok := signAuthenticationRequestMapStrToI["sign_auth"]; ok && !isIntfNil(v) && !signAuthTypeChoiceTypeFound {

										signAuthTypeChoiceTypeFound = true
										signAuthTypeChoiceInt := &ves_io_schema_uztna_uztna_flow.SignAuthenticationRequest_SignAuth{}
										signAuthTypeChoiceInt.SignAuth = &ves_io_schema_uztna_uztna_flow.Certificate{}
										signAuthenticationRequest.SignAuthTypeChoice = signAuthTypeChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												signAuthTypeChoiceInt.SignAuth.Certificate = certificateInt
												for i, ps := range sl {

													cMapToStrVal := ps.(map[string]interface{})
													certificateInt[i] = &ves_io_schema.ObjectRefType{}

													certificateInt[i].Kind = "certificate"

													if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
														certificateInt[i].Name = v.(string)
													}

													if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														certificateInt[i].Namespace = v.(string)
													}

													if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														certificateInt[i].Tenant = v.(string)
													}

													if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
														certificateInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

								}

							}

							if v, ok := serviceProviderPropertiesMapStrToI["type"]; ok && !isIntfNil(v) {

								serviceProviderProperties.Type = ves_io_schema_uztna_uztna_flow.AssertionConsumerServiceBinding(ves_io_schema_uztna_uztna_flow.AssertionConsumerServiceBinding_value[v.(string)])

							}

							if v, ok := serviceProviderPropertiesMapStrToI["want_encrypted_assertion"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								wantEncryptedAssertion := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest{}
								serviceProviderProperties.WantEncryptedAssertion = wantEncryptedAssertion
								for _, set := range sl {
									wantEncryptedAssertionMapStrToI := set.(map[string]interface{})

									wantEncryptedRequestTypeFound := false

									if v, ok := wantEncryptedAssertionMapStrToI["encrypt_req"]; ok && !isIntfNil(v) && !wantEncryptedRequestTypeFound {

										wantEncryptedRequestTypeFound = true
										wantEncryptedRequestInt := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest_EncryptReq{}
										wantEncryptedRequestInt.EncryptReq = &ves_io_schema_uztna_uztna_flow.Certificate{}
										wantEncryptedAssertion.WantEncryptedRequest = wantEncryptedRequestInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												wantEncryptedRequestInt.EncryptReq.Certificate = certificateInt
												for i, ps := range sl {

													cMapToStrVal := ps.(map[string]interface{})
													certificateInt[i] = &ves_io_schema.ObjectRefType{}

													certificateInt[i].Kind = "certificate"

													if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
														certificateInt[i].Name = v.(string)
													}

													if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														certificateInt[i].Namespace = v.(string)
													}

													if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														certificateInt[i].Tenant = v.(string)
													}

													if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
														certificateInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

									if v, ok := wantEncryptedAssertionMapStrToI["no_encrypt_req"]; ok && !isIntfNil(v) && !wantEncryptedRequestTypeFound {

										wantEncryptedRequestTypeFound = true

										if v.(bool) {
											wantEncryptedRequestInt := &ves_io_schema_uztna_uztna_flow.WantEncryptedRequest_NoEncryptReq{}
											wantEncryptedRequestInt.NoEncryptReq = &ves_io_schema.Empty{}
											wantEncryptedAssertion.WantEncryptedRequest = wantEncryptedRequestInt
										}

									}

								}

							}

							if w, ok := serviceProviderPropertiesMapStrToI["want_signed_assertion"]; ok && !isIntfNil(w) {
								serviceProviderProperties.WantSignedAssertion = w.(bool)
							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaFlow obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_uztna_flow.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaFlow: %s", err)
	}

	return resourceVolterraUztnaFlowRead(d, meta)
}

func resourceVolterraUztnaFlowDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_flow.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaFlow %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaFlow before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaFlow obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_uztna_flow.ObjectType, namespace, name)
}

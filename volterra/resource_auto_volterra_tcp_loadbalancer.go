//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_tcp_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer"
	drift "github.com/volterraedge/terraform-provider-volterra/volterra/drift_detection"
)

// resourceVolterraTcpLoadbalancer is implementation of Volterra's TcpLoadbalancer resources
func resourceVolterraTcpLoadbalancer() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraTcpLoadbalancerCreate,
		Read:   resourceVolterraTcpLoadbalancerRead,
		Update: resourceVolterraTcpLoadbalancerUpdate,
		Delete: resourceVolterraTcpLoadbalancerDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"cname": {
				Type:     schema.TypeString,
				Computed: true,
			},

			"advertise_custom": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"advertise_where": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cloud_edge_segment": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cloud_edge": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"segment": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv4_vip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6_vip": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"site": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"network": {
													Type:     schema.TypeString,
													Required: true,
												},

												"site": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"site_segment": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"site": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_network": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"default_v6_vip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_v6_vip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"default_vip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_vip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"virtual_network": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_site": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"network": {
													Type:     schema.TypeString,
													Required: true,
												},

												"virtual_site": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"virtual_site_segment": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ipv6": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"segment": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"virtual_site": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"vk8s_service": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"site": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"virtual_site": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"port": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"use_default_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"advertise_on_public": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"public_ip": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"advertise_on_public_default_vip": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"do_not_advertise": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"do_not_retract_cluster": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"retract_cluster": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"dns_volterra_managed": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"domains": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"hash_policy_choice_least_active": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"hash_policy_choice_random": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"hash_policy_choice_round_robin": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"hash_policy_choice_source_ip_stickiness": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"idle_timeout": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"tcp": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"tls_tcp": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"tls_cert_params": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"crl": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"tls_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"crl": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"tls_tcp_auto_cert": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"no_mtls": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"use_mtls": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"crl": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"no_crl": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"trusted_ca": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"trusted_ca_url": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"xfcc_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"xfcc_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"xfcc_header_elements": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"tls_config": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"custom_security": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cipher_suites": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"max_version": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"min_version": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"default_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"low_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"medium_security": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"origin_pools_weights": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"endpoint_subsets": {
							Type:     schema.TypeMap,
							Optional: true,
						},

						"cluster": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"pool": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"priority": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"weight": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"listen_port": {

				Type:     schema.TypeInt,
				Optional: true,
			},

			"port_ranges": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"active_service_policies": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policies": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"no_service_policies": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"service_policies_from_namespace": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"default_lb_with_sni": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"no_sni": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"sni": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraTcpLoadbalancerCreate creates TcpLoadbalancer resource
func resourceVolterraTcpLoadbalancerCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType{}
	createReq := &ves_io_schema_views_tcp_loadbalancer.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//advertise_choice

	advertiseChoiceTypeFound := false

	if v, ok := d.GetOk("advertise_custom"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_AdvertiseCustom{}
		advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
		createSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
				advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
				for i, set := range sl {
					advertiseWhere[i] = &ves_io_schema_views.WhereType{}
					advertiseWhereMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_Site{}
						choiceInt.Site = &ves_io_schema_views.WhereSite{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.Site.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								choiceInt.Site.Ipv6 = v.(string)

							}

							if v, ok := cs["network"]; ok && !isIntfNil(v) {

								choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

							}

							if v, ok := cs["site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								site := &ves_io_schema_views.ObjectRefType{}
								choiceInt.Site.Site = site
								for _, set := range sl {
									siteMapStrToI := set.(map[string]interface{})

									if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
										site.Name = w.(string)
									}

									if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										site.Namespace = w.(string)
									}

									if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										site.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
						choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.SiteSegment.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								choiceInt.SiteSegment.Ipv6 = v.(string)

							}

							if v, ok := cs["segment"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								segment := &ves_io_schema_views.ObjectRefType{}
								choiceInt.SiteSegment.Segment = segment
								for _, set := range sl {
									segmentMapStrToI := set.(map[string]interface{})

									if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
										segment.Name = w.(string)
									}

									if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
										segment.Namespace = w.(string)
									}

									if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
										segment.Tenant = w.(string)
									}

								}

							}

							if v, ok := cs["site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								site := &ves_io_schema_views.ObjectRefType{}
								choiceInt.SiteSegment.Site = site
								for _, set := range sl {
									siteMapStrToI := set.(map[string]interface{})

									if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
										site.Name = w.(string)
									}

									if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										site.Namespace = w.(string)
									}

									if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										site.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
						choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							v6VipChoiceTypeFound := false

							if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

								v6VipChoiceTypeFound = true

								if v.(bool) {
									v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
									v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
									choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
								}

							}

							if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

								v6VipChoiceTypeFound = true
								v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

								choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

								v6VipChoiceInt.SpecificV6Vip = v.(string)

							}

							vipChoiceTypeFound := false

							if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

								vipChoiceTypeFound = true

								if v.(bool) {
									vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
									vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
									choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
								}

							}

							if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

								vipChoiceTypeFound = true
								vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

								choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

								vipChoiceInt.SpecificVip = v.(string)

							}

							if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualNetwork := &ves_io_schema_views.ObjectRefType{}
								choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
								for _, set := range sl {
									virtualNetworkMapStrToI := set.(map[string]interface{})

									if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
										virtualNetwork.Name = w.(string)
									}

									if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
										virtualNetwork.Namespace = w.(string)
									}

									if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
										virtualNetwork.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
						choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["network"]; ok && !isIntfNil(v) {

								choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

							}

							if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualSite := &ves_io_schema_views.ObjectRefType{}
								choiceInt.VirtualSite.VirtualSite = virtualSite
								for _, set := range sl {
									virtualSiteMapStrToI := set.(map[string]interface{})

									if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
										virtualSite.Name = w.(string)
									}

									if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										virtualSite.Namespace = w.(string)
									}

									if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										virtualSite.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
						choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
								choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
								choiceInt.Vk8SService.Choice = choiceIntNew

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
								choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
								choiceInt.Vk8SService.Choice = choiceIntNew

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Tenant = v.(string)

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_views.WhereType_Port{}

						advertiseWhere[i].PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
							portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
							advertiseWhere[i].PortChoice = portChoiceInt
						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("advertise_on_public"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_AdvertiseOnPublic{}
		advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
		createSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicIp := &ves_io_schema_views.ObjectRefType{}
				advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
				for _, set := range sl {
					publicIpMapStrToI := set.(map[string]interface{})

					if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
						publicIp.Name = w.(string)
					}

					if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
						publicIp.Namespace = w.(string)
					}

					if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
						publicIp.Tenant = w.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("advertise_on_public_default_vip"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{}
			advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
			createSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	if v, ok := d.GetOk("do_not_advertise"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_DoNotAdvertise{}
			advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
			createSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	//cluster_retract_choice

	clusterRetractChoiceTypeFound := false

	if v, ok := d.GetOk("do_not_retract_cluster"); ok && !clusterRetractChoiceTypeFound {

		clusterRetractChoiceTypeFound = true

		if v.(bool) {
			clusterRetractChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_DoNotRetractCluster{}
			clusterRetractChoiceInt.DoNotRetractCluster = &ves_io_schema.Empty{}
			createSpec.ClusterRetractChoice = clusterRetractChoiceInt
		}

	}

	if v, ok := d.GetOk("retract_cluster"); ok && !clusterRetractChoiceTypeFound {

		clusterRetractChoiceTypeFound = true

		if v.(bool) {
			clusterRetractChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_RetractCluster{}
			clusterRetractChoiceInt.RetractCluster = &ves_io_schema.Empty{}
			createSpec.ClusterRetractChoice = clusterRetractChoiceInt
		}

	}

	//dns_volterra_managed
	if v, ok := d.GetOk("dns_volterra_managed"); ok && !isIntfNil(v) {

		createSpec.DnsVolterraManaged =
			v.(bool)

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		createSpec.Domains = ls

	}

	//hash_policy_choice

	hashPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("hash_policy_choice_least_active"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_HashPolicyChoiceLeastActive{}
			hashPolicyChoiceInt.HashPolicyChoiceLeastActive = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_random"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRandom{}
			hashPolicyChoiceInt.HashPolicyChoiceRandom = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_round_robin"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRoundRobin{}
			hashPolicyChoiceInt.HashPolicyChoiceRoundRobin = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_source_ip_stickiness"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_HashPolicyChoiceSourceIpStickiness{}
			hashPolicyChoiceInt.HashPolicyChoiceSourceIpStickiness = &ves_io_schema.Empty{}
			createSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	//idle_timeout
	if v, ok := d.GetOk("idle_timeout"); ok && !isIntfNil(v) {

		createSpec.IdleTimeout =
			uint32(v.(int))

	}

	//loadbalancer_type

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("tcp"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true

		if v.(bool) {
			loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_Tcp{}
			loadbalancerTypeInt.Tcp = &ves_io_schema.Empty{}
			createSpec.LoadbalancerType = loadbalancerTypeInt
		}

	}

	if v, ok := d.GetOk("tls_tcp"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_TlsTcp{}
		loadbalancerTypeInt.TlsTcp = &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			tlsCertificatesChoiceTypeFound := false

			if v, ok := cs["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

				tlsCertificatesChoiceTypeFound = true
				tlsCertificatesChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP_TlsCertParams{}
				tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
				loadbalancerTypeInt.TlsTcp.TlsCertificatesChoice = tlsCertificatesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
						for i, ps := range sl {

							cMapToStrVal := ps.(map[string]interface{})
							certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
								certificatesInt[i].Name = v.(string)
							}

							if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								certificatesInt[i].Namespace = v.(string)
							}

							if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								certificatesInt[i].Tenant = v.(string)
							}

						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
						tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

										xfcc_header_elementsList := []ves_io_schema.XfccElement{}
										for _, j := range v.([]interface{}) {
											xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
										}
										xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

									}

								}

							}

						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

				tlsCertificatesChoiceTypeFound = true
				tlsCertificatesChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP_TlsParameters{}
				tlsCertificatesChoiceInt.TlsParameters = &ves_io_schema_views.DownstreamTlsParamsType{}
				loadbalancerTypeInt.TlsTcp.TlsCertificatesChoice = tlsCertificatesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
						tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

										xfcc_header_elementsList := []ves_io_schema.XfccElement{}
										for _, j := range v.([]interface{}) {
											xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
										}
										xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

									}

								}

							}

						}

					}

					if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsCertificatesChoiceInt.TlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
								ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
								ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsCertificatesChoiceInt.TlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("tls_tcp_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_TlsTcpAutoCert{}
		loadbalancerTypeInt.TlsTcpAutoCert = &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			mtlsChoiceTypeFound := false

			if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

				mtlsChoiceTypeFound = true

				if v.(bool) {
					mtlsChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_NoMtls{}
					mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
					loadbalancerTypeInt.TlsTcpAutoCert.MtlsChoice = mtlsChoiceInt
				}

			}

			if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

				mtlsChoiceTypeFound = true
				mtlsChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_UseMtls{}
				mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
				loadbalancerTypeInt.TlsTcpAutoCert.MtlsChoice = mtlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					crlChoiceTypeFound := false

					if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

						crlChoiceTypeFound = true
						crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
						crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
						mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

						crlChoiceTypeFound = true

						if v.(bool) {
							crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
							crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
							mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
						}

					}

					trustedCaChoiceTypeFound := false

					if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

						trustedCaChoiceTypeFound = true
						trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
						trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
						mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

						trustedCaChoiceTypeFound = true
						trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

						mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

						trustedCaChoiceInt.TrustedCaUrl = v.(string)

					}

					xfccHeaderTypeFound := false

					if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

						xfccHeaderTypeFound = true

						if v.(bool) {
							xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
							xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
							mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
						}

					}

					if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

						xfccHeaderTypeFound = true
						xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
						xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
						mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

								xfcc_header_elementsList := []ves_io_schema.XfccElement{}
								for _, j := range v.([]interface{}) {
									xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
								}
								xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

							}

						}

					}

				}

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views.TlsConfig{}
				loadbalancerTypeInt.TlsTcpAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
						choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
						tlsConfig.Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								choiceInt.CustomSecurity.CipherSuites = ls

							}

							if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

								choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

								choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

						}

					}

					if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
							choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
							choiceInt.LowSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
							choiceInt.MediumSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	//origin_pools_weights
	if v, ok := d.GetOk("origin_pools_weights"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originPoolsWeights := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
		createSpec.OriginPoolsWeights = originPoolsWeights
		for i, set := range sl {
			originPoolsWeights[i] = &ves_io_schema_views.OriginPoolWithWeight{}
			originPoolsWeightsMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolsWeightsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
				ms := map[string]string{}
				for k, v := range w.(map[string]interface{}) {
					ms[k] = v.(string)
				}
				originPoolsWeights[i].EndpointSubsets = ms
			}

			poolChoiceTypeFound := false

			if v, ok := originPoolsWeightsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

				poolChoiceTypeFound = true
				poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
				poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
				originPoolsWeights[i].PoolChoice = poolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Tenant = v.(string)

					}

				}

			}

			if v, ok := originPoolsWeightsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

				poolChoiceTypeFound = true
				poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
				poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
				originPoolsWeights[i].PoolChoice = poolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Tenant = v.(string)

					}

				}

			}

			if w, ok := originPoolsWeightsMapStrToI["priority"]; ok && !isIntfNil(w) {
				originPoolsWeights[i].Priority = uint32(w.(int))
			}

			if w, ok := originPoolsWeightsMapStrToI["weight"]; ok && !isIntfNil(w) {
				originPoolsWeights[i].Weight = uint32(w.(int))
			}

		}

	}

	//port_choice

	portChoiceTypeFound := false

	if v, ok := d.GetOk("listen_port"); ok && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_ListenPort{}

		createSpec.PortChoice = portChoiceInt

		portChoiceInt.ListenPort = uint32(v.(int))

	}

	if v, ok := d.GetOk("port_ranges"); ok && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_PortRanges{}

		createSpec.PortChoice = portChoiceInt

		portChoiceInt.PortRanges = v.(string)

	}

	//service_policy_choice

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_tcp_loadbalancer.ServicePolicyList{}
		createSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policies"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
				for i, ps := range sl {

					pMapToStrVal := ps.(map[string]interface{})
					policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
						policiesInt[i].Name = v.(string)
					}

					if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						policiesInt[i].Namespace = v.(string)
					}

					if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						policiesInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	//sni_default_lb_choice

	sniDefaultLbChoiceTypeFound := false

	if v, ok := d.GetOk("default_lb_with_sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_DefaultLbWithSni{}
			sniDefaultLbChoiceInt.DefaultLbWithSni = &ves_io_schema.Empty{}
			createSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("no_sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_NoSni{}
			sniDefaultLbChoiceInt.NoSni = &ves_io_schema.Empty{}
			createSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.CreateSpecType_Sni{}
			sniDefaultLbChoiceInt.Sni = &ves_io_schema.Empty{}
			createSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra TcpLoadbalancer object with struct: %+v", createReq)

	createTcpLoadbalancerResp, err := client.CreateObject(context.Background(), ves_io_schema_views_tcp_loadbalancer.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating TcpLoadbalancer: %s", err)
	}
	d.SetId(createTcpLoadbalancerResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraTcpLoadbalancerRead(d, meta)
}

func resourceVolterraTcpLoadbalancerRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_tcp_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] TcpLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra TcpLoadbalancer %q: %s", d.Id(), err)
	}
	return setTcpLoadbalancerFields(client, d, resp)
}

func setTcpLoadbalancerFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	spec := resp.GetObjSpec().(*ves_io_schema_views_tcp_loadbalancer.SpecType)
	d.Set("cname", spec.GcSpec.GetHostName())

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	drift.DriftDetectionTcpLoadbalancer(d,resp)

	return nil
}

// resourceVolterraTcpLoadbalancerUpdate updates TcpLoadbalancer resource
func resourceVolterraTcpLoadbalancerUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_tcp_loadbalancer.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	advertiseChoiceTypeFound := false

	if v, ok := d.GetOk("advertise_custom"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_AdvertiseCustom{}
		advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
		updateSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
				advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
				for i, set := range sl {
					advertiseWhere[i] = &ves_io_schema_views.WhereType{}
					advertiseWhereMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_Site{}
						choiceInt.Site = &ves_io_schema_views.WhereSite{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.Site.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								choiceInt.Site.Ipv6 = v.(string)

							}

							if v, ok := cs["network"]; ok && !isIntfNil(v) {

								choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

							}

							if v, ok := cs["site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								site := &ves_io_schema_views.ObjectRefType{}
								choiceInt.Site.Site = site
								for _, set := range sl {
									siteMapStrToI := set.(map[string]interface{})

									if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
										site.Name = w.(string)
									}

									if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										site.Namespace = w.(string)
									}

									if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										site.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
						choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.SiteSegment.Ip = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								choiceInt.SiteSegment.Ipv6 = v.(string)

							}

							if v, ok := cs["segment"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								segment := &ves_io_schema_views.ObjectRefType{}
								choiceInt.SiteSegment.Segment = segment
								for _, set := range sl {
									segmentMapStrToI := set.(map[string]interface{})

									if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
										segment.Name = w.(string)
									}

									if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
										segment.Namespace = w.(string)
									}

									if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
										segment.Tenant = w.(string)
									}

								}

							}

							if v, ok := cs["site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								site := &ves_io_schema_views.ObjectRefType{}
								choiceInt.SiteSegment.Site = site
								for _, set := range sl {
									siteMapStrToI := set.(map[string]interface{})

									if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
										site.Name = w.(string)
									}

									if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										site.Namespace = w.(string)
									}

									if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										site.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
						choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							v6VipChoiceTypeFound := false

							if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

								v6VipChoiceTypeFound = true

								if v.(bool) {
									v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
									v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
									choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
								}

							}

							if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

								v6VipChoiceTypeFound = true
								v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

								choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

								v6VipChoiceInt.SpecificV6Vip = v.(string)

							}

							vipChoiceTypeFound := false

							if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

								vipChoiceTypeFound = true

								if v.(bool) {
									vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
									vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
									choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
								}

							}

							if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

								vipChoiceTypeFound = true
								vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

								choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

								vipChoiceInt.SpecificVip = v.(string)

							}

							if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualNetwork := &ves_io_schema_views.ObjectRefType{}
								choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
								for _, set := range sl {
									virtualNetworkMapStrToI := set.(map[string]interface{})

									if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
										virtualNetwork.Name = w.(string)
									}

									if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
										virtualNetwork.Namespace = w.(string)
									}

									if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
										virtualNetwork.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
						choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["network"]; ok && !isIntfNil(v) {

								choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

							}

							if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualSite := &ves_io_schema_views.ObjectRefType{}
								choiceInt.VirtualSite.VirtualSite = virtualSite
								for _, set := range sl {
									virtualSiteMapStrToI := set.(map[string]interface{})

									if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
										virtualSite.Name = w.(string)
									}

									if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
										virtualSite.Namespace = w.(string)
									}

									if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
										virtualSite.Tenant = w.(string)
									}

								}

							}

						}

					}

					if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
						choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
						advertiseWhere[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
								choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
								choiceInt.Vk8SService.Choice = choiceIntNew

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										choiceIntNew.Site.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
								choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
								choiceInt.Vk8SService.Choice = choiceIntNew

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										choiceIntNew.VirtualSite.Tenant = v.(string)

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_views.WhereType_Port{}

						advertiseWhere[i].PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
							portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
							advertiseWhere[i].PortChoice = portChoiceInt
						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("advertise_on_public"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true
		advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{}
		advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
		updateSpec.AdvertiseChoice = advertiseChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicIp := &ves_io_schema_views.ObjectRefType{}
				advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
				for _, set := range sl {
					publicIpMapStrToI := set.(map[string]interface{})

					if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
						publicIp.Name = w.(string)
					}

					if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
						publicIp.Namespace = w.(string)
					}

					if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
						publicIp.Tenant = w.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("advertise_on_public_default_vip"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{}
			advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
			updateSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	if v, ok := d.GetOk("do_not_advertise"); ok && !advertiseChoiceTypeFound {

		advertiseChoiceTypeFound = true

		if v.(bool) {
			advertiseChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_DoNotAdvertise{}
			advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
			updateSpec.AdvertiseChoice = advertiseChoiceInt
		}

	}

	clusterRetractChoiceTypeFound := false

	if v, ok := d.GetOk("do_not_retract_cluster"); ok && !clusterRetractChoiceTypeFound {

		clusterRetractChoiceTypeFound = true

		if v.(bool) {
			clusterRetractChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_DoNotRetractCluster{}
			clusterRetractChoiceInt.DoNotRetractCluster = &ves_io_schema.Empty{}
			updateSpec.ClusterRetractChoice = clusterRetractChoiceInt
		}

	}

	if v, ok := d.GetOk("retract_cluster"); ok && !clusterRetractChoiceTypeFound {

		clusterRetractChoiceTypeFound = true

		if v.(bool) {
			clusterRetractChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_RetractCluster{}
			clusterRetractChoiceInt.RetractCluster = &ves_io_schema.Empty{}
			updateSpec.ClusterRetractChoice = clusterRetractChoiceInt
		}

	}

	if v, ok := d.GetOk("dns_volterra_managed"); ok && !isIntfNil(v) {

		updateSpec.DnsVolterraManaged =
			v.(bool)

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		updateSpec.Domains = ls

	}

	hashPolicyChoiceTypeFound := false

	if v, ok := d.GetOk("hash_policy_choice_least_active"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceLeastActive{}
			hashPolicyChoiceInt.HashPolicyChoiceLeastActive = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_random"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRandom{}
			hashPolicyChoiceInt.HashPolicyChoiceRandom = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_round_robin"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRoundRobin{}
			hashPolicyChoiceInt.HashPolicyChoiceRoundRobin = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("hash_policy_choice_source_ip_stickiness"); ok && !hashPolicyChoiceTypeFound {

		hashPolicyChoiceTypeFound = true

		if v.(bool) {
			hashPolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{}
			hashPolicyChoiceInt.HashPolicyChoiceSourceIpStickiness = &ves_io_schema.Empty{}
			updateSpec.HashPolicyChoice = hashPolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("idle_timeout"); ok && !isIntfNil(v) {

		updateSpec.IdleTimeout =
			uint32(v.(int))

	}

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("tcp"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true

		if v.(bool) {
			loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_Tcp{}
			loadbalancerTypeInt.Tcp = &ves_io_schema.Empty{}
			updateSpec.LoadbalancerType = loadbalancerTypeInt
		}

	}

	if v, ok := d.GetOk("tls_tcp"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_TlsTcp{}
		loadbalancerTypeInt.TlsTcp = &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			tlsCertificatesChoiceTypeFound := false

			if v, ok := cs["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

				tlsCertificatesChoiceTypeFound = true
				tlsCertificatesChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP_TlsCertParams{}
				tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
				loadbalancerTypeInt.TlsTcp.TlsCertificatesChoice = tlsCertificatesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
						tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
						for i, ps := range sl {

							cMapToStrVal := ps.(map[string]interface{})
							certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

							if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
								certificatesInt[i].Name = v.(string)
							}

							if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								certificatesInt[i].Namespace = v.(string)
							}

							if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								certificatesInt[i].Tenant = v.(string)
							}

						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
						tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

										xfcc_header_elementsList := []ves_io_schema.XfccElement{}
										for _, j := range v.([]interface{}) {
											xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
										}
										xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

									}

								}

							}

						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

				tlsCertificatesChoiceTypeFound = true
				tlsCertificatesChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCP_TlsParameters{}
				tlsCertificatesChoiceInt.TlsParameters = &ves_io_schema_views.DownstreamTlsParamsType{}
				loadbalancerTypeInt.TlsTcp.TlsCertificatesChoice = tlsCertificatesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
						tlsCertificatesChoiceInt.TlsParameters.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							crlChoiceTypeFound := false

							if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true
								crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
								crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										crlChoiceInt.Crl.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

								crlChoiceTypeFound = true

								if v.(bool) {
									crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
									crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
								}

							}

							trustedCaChoiceTypeFound := false

							if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
								trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["name"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Name = v.(string)

									}

									if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

									}

									if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

										trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

									}

								}

							}

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

								trustedCaChoiceTypeFound = true
								trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

								mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

								trustedCaChoiceInt.TrustedCaUrl = v.(string)

							}

							xfccHeaderTypeFound := false

							if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true

								if v.(bool) {
									xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
									xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
									mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
								}

							}

							if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

								xfccHeaderTypeFound = true
								xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
								xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
								mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

										xfcc_header_elementsList := []ves_io_schema.XfccElement{}
										for _, j := range v.([]interface{}) {
											xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
										}
										xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

									}

								}

							}

						}

					}

					if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsCertificatesChoiceInt.TlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if _, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
								ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if _, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
								ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsCertificatesChoiceInt.TlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("tls_tcp_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_TlsTcpAutoCert{}
		loadbalancerTypeInt.TlsTcpAutoCert = &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			mtlsChoiceTypeFound := false

			if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

				mtlsChoiceTypeFound = true

				if v.(bool) {
					mtlsChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_NoMtls{}
					mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
					loadbalancerTypeInt.TlsTcpAutoCert.MtlsChoice = mtlsChoiceInt
				}

			}

			if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

				mtlsChoiceTypeFound = true
				mtlsChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_UseMtls{}
				mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
				loadbalancerTypeInt.TlsTcpAutoCert.MtlsChoice = mtlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					crlChoiceTypeFound := false

					if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

						crlChoiceTypeFound = true
						crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
						crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
						mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								crlChoiceInt.Crl.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

						crlChoiceTypeFound = true

						if v.(bool) {
							crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
							crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
							mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
						}

					}

					trustedCaChoiceTypeFound := false

					if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

						trustedCaChoiceTypeFound = true
						trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
						trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
						mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

						trustedCaChoiceTypeFound = true
						trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

						mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

						trustedCaChoiceInt.TrustedCaUrl = v.(string)

					}

					xfccHeaderTypeFound := false

					if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

						xfccHeaderTypeFound = true

						if v.(bool) {
							xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
							xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
							mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
						}

					}

					if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

						xfccHeaderTypeFound = true
						xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
						xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
						mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

								xfcc_header_elementsList := []ves_io_schema.XfccElement{}
								for _, j := range v.([]interface{}) {
									xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
								}
								xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

							}

						}

					}

				}

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views.TlsConfig{}
				loadbalancerTypeInt.TlsTcpAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
						choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
						tlsConfig.Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								choiceInt.CustomSecurity.CipherSuites = ls

							}

							if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

								choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

								choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

						}

					}

					if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
							choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
							choiceInt.LowSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
							choiceInt.MediumSecurity = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("origin_pools"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originPoolsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
		updateSpec.OriginPools = originPoolsInt
		for i, ps := range sl {

			opMapToStrVal := ps.(map[string]interface{})
			originPoolsInt[i] = &ves_io_schema_views.ObjectRefType{}

			if v, ok := opMapToStrVal["name"]; ok && !isIntfNil(v) {
				originPoolsInt[i].Name = v.(string)
			}

			if v, ok := opMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				originPoolsInt[i].Namespace = v.(string)
			}

			if v, ok := opMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				originPoolsInt[i].Tenant = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("origin_pools_weights"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originPoolsWeights := make([]*ves_io_schema_views.OriginPoolWithWeight, len(sl))
		updateSpec.OriginPoolsWeights = originPoolsWeights
		for i, set := range sl {
			originPoolsWeights[i] = &ves_io_schema_views.OriginPoolWithWeight{}
			originPoolsWeightsMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolsWeightsMapStrToI["endpoint_subsets"]; ok && !isIntfNil(w) {
				ms := map[string]string{}
				for k, v := range w.(map[string]interface{}) {
					ms[k] = v.(string)
				}
				originPoolsWeights[i].EndpointSubsets = ms
			}

			poolChoiceTypeFound := false

			if v, ok := originPoolsWeightsMapStrToI["cluster"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

				poolChoiceTypeFound = true
				poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Cluster{}
				poolChoiceInt.Cluster = &ves_io_schema_views.ObjectRefType{}
				originPoolsWeights[i].PoolChoice = poolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						poolChoiceInt.Cluster.Tenant = v.(string)

					}

				}

			}

			if v, ok := originPoolsWeightsMapStrToI["pool"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

				poolChoiceTypeFound = true
				poolChoiceInt := &ves_io_schema_views.OriginPoolWithWeight_Pool{}
				poolChoiceInt.Pool = &ves_io_schema_views.ObjectRefType{}
				originPoolsWeights[i].PoolChoice = poolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						poolChoiceInt.Pool.Tenant = v.(string)

					}

				}

			}

			if w, ok := originPoolsWeightsMapStrToI["priority"]; ok && !isIntfNil(w) {
				originPoolsWeights[i].Priority = uint32(w.(int))
			}

			if w, ok := originPoolsWeightsMapStrToI["weight"]; ok && !isIntfNil(w) {
				originPoolsWeights[i].Weight = uint32(w.(int))
			}

		}

	}

	portChoiceTypeFound := false

	if v, ok := d.GetOk("listen_port"); ok && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_ListenPort{}

		updateSpec.PortChoice = portChoiceInt

		portChoiceInt.ListenPort = uint32(v.(int))

	}

	if v, ok := d.GetOk("port_ranges"); ok && !portChoiceTypeFound {

		portChoiceTypeFound = true
		portChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_PortRanges{}

		updateSpec.PortChoice = portChoiceInt

		portChoiceInt.PortRanges = v.(string)

	}

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_tcp_loadbalancer.ServicePolicyList{}
		updateSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policies"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
				for i, ps := range sl {

					pMapToStrVal := ps.(map[string]interface{})
					policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
						policiesInt[i].Name = v.(string)
					}

					if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						policiesInt[i].Namespace = v.(string)
					}

					if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						policiesInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	sniDefaultLbChoiceTypeFound := false

	if v, ok := d.GetOk("default_lb_with_sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_DefaultLbWithSni{}
			sniDefaultLbChoiceInt.DefaultLbWithSni = &ves_io_schema.Empty{}
			updateSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("no_sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_NoSni{}
			sniDefaultLbChoiceInt.NoSni = &ves_io_schema.Empty{}
			updateSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("sni"); ok && !sniDefaultLbChoiceTypeFound {

		sniDefaultLbChoiceTypeFound = true

		if v.(bool) {
			sniDefaultLbChoiceInt := &ves_io_schema_views_tcp_loadbalancer.ReplaceSpecType_Sni{}
			sniDefaultLbChoiceInt.Sni = &ves_io_schema.Empty{}
			updateSpec.SniDefaultLbChoice = sniDefaultLbChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra TcpLoadbalancer obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_tcp_loadbalancer.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating TcpLoadbalancer: %s", err)
	}

	return resourceVolterraTcpLoadbalancerRead(d, meta)
}

func resourceVolterraTcpLoadbalancerDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_tcp_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] TcpLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra TcpLoadbalancer before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra TcpLoadbalancer obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_views_tcp_loadbalancer.ObjectType, namespace, name)
}

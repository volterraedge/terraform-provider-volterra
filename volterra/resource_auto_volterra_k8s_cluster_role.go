//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_k8s_cluster_role "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role"
)

// resourceVolterraK8SClusterRole is implementation of Volterra's K8SClusterRole resources
func resourceVolterraK8SClusterRole() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraK8SClusterRoleCreate,
		Read:   resourceVolterraK8SClusterRoleRead,
		Update: resourceVolterraK8SClusterRoleUpdate,
		Delete: resourceVolterraK8SClusterRoleDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"k8s_cluster_role_selector": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expressions": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"policy_rule_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy_rule": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"non_resource_url_list": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"urls": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"verbs": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"resource_list": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_groups": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"resource_instances": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"resource_types": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"verbs": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"yaml": {

				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

// resourceVolterraK8SClusterRoleCreate creates K8SClusterRole resource
func resourceVolterraK8SClusterRoleCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_k8s_cluster_role.CreateSpecType{}
	createReq := &ves_io_schema_k8s_cluster_role.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//rule_choice

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("k8s_cluster_role_selector"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.CreateSpecType_K8SClusterRoleSelector{}
		ruleChoiceInt.K8SClusterRoleSelector = &ves_io_schema.LabelSelectorType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.K8SClusterRoleSelector.Expressions = ls

			}

		}

	}

	if v, ok := d.GetOk("policy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.CreateSpecType_PolicyRuleList{}
		ruleChoiceInt.PolicyRuleList = &ves_io_schema_k8s_cluster_role.PolicyRuleListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policy_rule"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policyRule := make([]*ves_io_schema_k8s_cluster_role.PolicyRuleType, len(sl))
				ruleChoiceInt.PolicyRuleList.PolicyRule = policyRule
				for i, set := range sl {
					policyRule[i] = &ves_io_schema_k8s_cluster_role.PolicyRuleType{}
					policyRuleMapStrToI := set.(map[string]interface{})

					resourceChoiceTypeFound := false

					if v, ok := policyRuleMapStrToI["non_resource_url_list"]; ok && !isIntfNil(v) && !resourceChoiceTypeFound {

						resourceChoiceTypeFound = true
						resourceChoiceInt := &ves_io_schema_k8s_cluster_role.PolicyRuleType_NonResourceUrlList{}
						resourceChoiceInt.NonResourceUrlList = &ves_io_schema_k8s_cluster_role.NonResourceURLListType{}
						policyRule[i].ResourceChoice = resourceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["urls"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.NonResourceUrlList.Urls = ls

							}

							if v, ok := cs["verbs"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.NonResourceUrlList.Verbs = ls

							}

						}

					}

					if v, ok := policyRuleMapStrToI["resource_list"]; ok && !isIntfNil(v) && !resourceChoiceTypeFound {

						resourceChoiceTypeFound = true
						resourceChoiceInt := &ves_io_schema_k8s_cluster_role.PolicyRuleType_ResourceList{}
						resourceChoiceInt.ResourceList = &ves_io_schema_k8s_cluster_role.ResourceListType{}
						policyRule[i].ResourceChoice = resourceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ApiGroups = ls

							}

							if v, ok := cs["resource_instances"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ResourceInstances = ls

							}

							if v, ok := cs["resource_types"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ResourceTypes = ls

							}

							if v, ok := cs["verbs"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.Verbs = ls

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("yaml"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.CreateSpecType_Yaml{}

		createSpec.RuleChoice = ruleChoiceInt

		ruleChoiceInt.Yaml = v.(string)

	}

	log.Printf("[DEBUG] Creating Volterra K8SClusterRole object with struct: %+v", createReq)

	createK8SClusterRoleResp, err := client.CreateObject(context.Background(), ves_io_schema_k8s_cluster_role.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating K8SClusterRole: %s", err)
	}
	d.SetId(createK8SClusterRoleResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraK8SClusterRoleRead(d, meta)
}

func resourceVolterraK8SClusterRoleRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_k8s_cluster_role.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] K8SClusterRole %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra K8SClusterRole %q: %s", d.Id(), err)
	}
	return setK8SClusterRoleFields(client, d, resp)
}

func setK8SClusterRoleFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraK8SClusterRoleUpdate updates K8SClusterRole resource
func resourceVolterraK8SClusterRoleUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_k8s_cluster_role.ReplaceSpecType{}
	updateReq := &ves_io_schema_k8s_cluster_role.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("k8s_cluster_role_selector"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.ReplaceSpecType_K8SClusterRoleSelector{}
		ruleChoiceInt.K8SClusterRoleSelector = &ves_io_schema.LabelSelectorType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.K8SClusterRoleSelector.Expressions = ls

			}

		}

	}

	if v, ok := d.GetOk("policy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.ReplaceSpecType_PolicyRuleList{}
		ruleChoiceInt.PolicyRuleList = &ves_io_schema_k8s_cluster_role.PolicyRuleListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["policy_rule"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				policyRule := make([]*ves_io_schema_k8s_cluster_role.PolicyRuleType, len(sl))
				ruleChoiceInt.PolicyRuleList.PolicyRule = policyRule
				for i, set := range sl {
					policyRule[i] = &ves_io_schema_k8s_cluster_role.PolicyRuleType{}
					policyRuleMapStrToI := set.(map[string]interface{})

					resourceChoiceTypeFound := false

					if v, ok := policyRuleMapStrToI["non_resource_url_list"]; ok && !isIntfNil(v) && !resourceChoiceTypeFound {

						resourceChoiceTypeFound = true
						resourceChoiceInt := &ves_io_schema_k8s_cluster_role.PolicyRuleType_NonResourceUrlList{}
						resourceChoiceInt.NonResourceUrlList = &ves_io_schema_k8s_cluster_role.NonResourceURLListType{}
						policyRule[i].ResourceChoice = resourceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["urls"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.NonResourceUrlList.Urls = ls

							}

							if v, ok := cs["verbs"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.NonResourceUrlList.Verbs = ls

							}

						}

					}

					if v, ok := policyRuleMapStrToI["resource_list"]; ok && !isIntfNil(v) && !resourceChoiceTypeFound {

						resourceChoiceTypeFound = true
						resourceChoiceInt := &ves_io_schema_k8s_cluster_role.PolicyRuleType_ResourceList{}
						resourceChoiceInt.ResourceList = &ves_io_schema_k8s_cluster_role.ResourceListType{}
						policyRule[i].ResourceChoice = resourceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ApiGroups = ls

							}

							if v, ok := cs["resource_instances"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ResourceInstances = ls

							}

							if v, ok := cs["resource_types"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.ResourceTypes = ls

							}

							if v, ok := cs["verbs"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								resourceChoiceInt.ResourceList.Verbs = ls

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("yaml"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_k8s_cluster_role.ReplaceSpecType_Yaml{}

		updateSpec.RuleChoice = ruleChoiceInt

		ruleChoiceInt.Yaml = v.(string)

	}

	log.Printf("[DEBUG] Updating Volterra K8SClusterRole obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_k8s_cluster_role.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating K8SClusterRole: %s", err)
	}

	return resourceVolterraK8SClusterRoleRead(d, meta)
}

func resourceVolterraK8SClusterRoleDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_k8s_cluster_role.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] K8SClusterRole %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra K8SClusterRole before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra K8SClusterRole obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_k8s_cluster_role.ObjectType, namespace, name)
}

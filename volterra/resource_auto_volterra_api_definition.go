//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_api_definition "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition"
)

// resourceVolterraApiDefinition is implementation of Volterra's ApiDefinition resources
func resourceVolterraApiDefinition() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraApiDefinitionCreate,
		Read:   resourceVolterraApiDefinitionRead,
		Update: resourceVolterraApiDefinitionUpdate,
		Delete: resourceVolterraApiDefinitionDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"api_inventory_exclusion_list": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"method": {
							Type:     schema.TypeString,
							Required: true,
						},

						"path": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"api_inventory_inclusion_list": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"method": {
							Type:     schema.TypeString,
							Required: true,
						},

						"path": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"non_api_endpoints": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"method": {
							Type:     schema.TypeString,
							Required: true,
						},

						"path": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"mixed_schema_origin": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"strict_schema_origin": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"swagger_specs": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

// resourceVolterraApiDefinitionCreate creates ApiDefinition resource
func resourceVolterraApiDefinitionCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_api_definition.CreateSpecType{}
	createReq := &ves_io_schema_views_api_definition.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//api_inventory_exclusion_list
	if v, ok := d.GetOk("api_inventory_exclusion_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiInventoryExclusionList := make([]*ves_io_schema_views.ApiOperation, len(sl))
		createSpec.ApiInventoryExclusionList = apiInventoryExclusionList
		for i, set := range sl {
			if set != nil {
				apiInventoryExclusionList[i] = &ves_io_schema_views.ApiOperation{}
				apiInventoryExclusionListMapStrToI := set.(map[string]interface{})

				if v, ok := apiInventoryExclusionListMapStrToI["method"]; ok && !isIntfNil(v) {

					apiInventoryExclusionList[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := apiInventoryExclusionListMapStrToI["path"]; ok && !isIntfNil(w) {
					apiInventoryExclusionList[i].Path = w.(string)
				}

			}
		}

	}

	//api_inventory_inclusion_list
	if v, ok := d.GetOk("api_inventory_inclusion_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiInventoryInclusionList := make([]*ves_io_schema_views.ApiOperation, len(sl))
		createSpec.ApiInventoryInclusionList = apiInventoryInclusionList
		for i, set := range sl {
			if set != nil {
				apiInventoryInclusionList[i] = &ves_io_schema_views.ApiOperation{}
				apiInventoryInclusionListMapStrToI := set.(map[string]interface{})

				if v, ok := apiInventoryInclusionListMapStrToI["method"]; ok && !isIntfNil(v) {

					apiInventoryInclusionList[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := apiInventoryInclusionListMapStrToI["path"]; ok && !isIntfNil(w) {
					apiInventoryInclusionList[i].Path = w.(string)
				}

			}
		}

	}

	//non_api_endpoints
	if v, ok := d.GetOk("non_api_endpoints"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		nonApiEndpoints := make([]*ves_io_schema_views.ApiOperation, len(sl))
		createSpec.NonApiEndpoints = nonApiEndpoints
		for i, set := range sl {
			if set != nil {
				nonApiEndpoints[i] = &ves_io_schema_views.ApiOperation{}
				nonApiEndpointsMapStrToI := set.(map[string]interface{})

				if v, ok := nonApiEndpointsMapStrToI["method"]; ok && !isIntfNil(v) {

					nonApiEndpoints[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := nonApiEndpointsMapStrToI["path"]; ok && !isIntfNil(w) {
					nonApiEndpoints[i].Path = w.(string)
				}

			}
		}

	}

	//schema_updates_strategy

	schemaUpdatesStrategyTypeFound := false

	if v, ok := d.GetOk("mixed_schema_origin"); ok && !schemaUpdatesStrategyTypeFound {

		schemaUpdatesStrategyTypeFound = true

		if v.(bool) {
			schemaUpdatesStrategyInt := &ves_io_schema_views_api_definition.CreateSpecType_MixedSchemaOrigin{}
			schemaUpdatesStrategyInt.MixedSchemaOrigin = &ves_io_schema.Empty{}
			createSpec.SchemaUpdatesStrategy = schemaUpdatesStrategyInt
		}

	}

	if v, ok := d.GetOk("strict_schema_origin"); ok && !schemaUpdatesStrategyTypeFound {

		schemaUpdatesStrategyTypeFound = true

		if v.(bool) {
			schemaUpdatesStrategyInt := &ves_io_schema_views_api_definition.CreateSpecType_StrictSchemaOrigin{}
			schemaUpdatesStrategyInt.StrictSchemaOrigin = &ves_io_schema.Empty{}
			createSpec.SchemaUpdatesStrategy = schemaUpdatesStrategyInt
		}

	}

	//swagger_specs
	if v, ok := d.GetOk("swagger_specs"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		createSpec.SwaggerSpecs = ls

	}

	log.Printf("[DEBUG] Creating Volterra ApiDefinition object with struct: %+v", createReq)

	createApiDefinitionResp, err := client.CreateObject(context.Background(), ves_io_schema_views_api_definition.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating ApiDefinition: %s", err)
	}
	d.SetId(createApiDefinitionResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraApiDefinitionRead(d, meta)
}

func resourceVolterraApiDefinitionRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_api_definition.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ApiDefinition %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ApiDefinition %q: %s", d.Id(), err)
	}
	return setApiDefinitionFields(client, d, resp)
}

func setApiDefinitionFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraApiDefinitionUpdate updates ApiDefinition resource
func resourceVolterraApiDefinitionUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_api_definition.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_api_definition.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("api_inventory_exclusion_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiInventoryExclusionList := make([]*ves_io_schema_views.ApiOperation, len(sl))
		updateSpec.ApiInventoryExclusionList = apiInventoryExclusionList
		for i, set := range sl {
			if set != nil {
				apiInventoryExclusionList[i] = &ves_io_schema_views.ApiOperation{}
				apiInventoryExclusionListMapStrToI := set.(map[string]interface{})

				if v, ok := apiInventoryExclusionListMapStrToI["method"]; ok && !isIntfNil(v) {

					apiInventoryExclusionList[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := apiInventoryExclusionListMapStrToI["path"]; ok && !isIntfNil(w) {
					apiInventoryExclusionList[i].Path = w.(string)
				}

			}
		}

	}

	if v, ok := d.GetOk("api_inventory_inclusion_list"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apiInventoryInclusionList := make([]*ves_io_schema_views.ApiOperation, len(sl))
		updateSpec.ApiInventoryInclusionList = apiInventoryInclusionList
		for i, set := range sl {
			if set != nil {
				apiInventoryInclusionList[i] = &ves_io_schema_views.ApiOperation{}
				apiInventoryInclusionListMapStrToI := set.(map[string]interface{})

				if v, ok := apiInventoryInclusionListMapStrToI["method"]; ok && !isIntfNil(v) {

					apiInventoryInclusionList[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := apiInventoryInclusionListMapStrToI["path"]; ok && !isIntfNil(w) {
					apiInventoryInclusionList[i].Path = w.(string)
				}

			}
		}

	}

	if v, ok := d.GetOk("non_api_endpoints"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		nonApiEndpoints := make([]*ves_io_schema_views.ApiOperation, len(sl))
		updateSpec.NonApiEndpoints = nonApiEndpoints
		for i, set := range sl {
			if set != nil {
				nonApiEndpoints[i] = &ves_io_schema_views.ApiOperation{}
				nonApiEndpointsMapStrToI := set.(map[string]interface{})

				if v, ok := nonApiEndpointsMapStrToI["method"]; ok && !isIntfNil(v) {

					nonApiEndpoints[i].Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

				}

				if w, ok := nonApiEndpointsMapStrToI["path"]; ok && !isIntfNil(w) {
					nonApiEndpoints[i].Path = w.(string)
				}

			}
		}

	}

	schemaUpdatesStrategyTypeFound := false

	if v, ok := d.GetOk("mixed_schema_origin"); ok && !schemaUpdatesStrategyTypeFound {

		schemaUpdatesStrategyTypeFound = true

		if v.(bool) {
			schemaUpdatesStrategyInt := &ves_io_schema_views_api_definition.ReplaceSpecType_MixedSchemaOrigin{}
			schemaUpdatesStrategyInt.MixedSchemaOrigin = &ves_io_schema.Empty{}
			updateSpec.SchemaUpdatesStrategy = schemaUpdatesStrategyInt
		}

	}

	if v, ok := d.GetOk("strict_schema_origin"); ok && !schemaUpdatesStrategyTypeFound {

		schemaUpdatesStrategyTypeFound = true

		if v.(bool) {
			schemaUpdatesStrategyInt := &ves_io_schema_views_api_definition.ReplaceSpecType_StrictSchemaOrigin{}
			schemaUpdatesStrategyInt.StrictSchemaOrigin = &ves_io_schema.Empty{}
			updateSpec.SchemaUpdatesStrategy = schemaUpdatesStrategyInt
		}

	}

	if v, ok := d.GetOk("swagger_specs"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		updateSpec.SwaggerSpecs = ls

	}

	log.Printf("[DEBUG] Updating Volterra ApiDefinition obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_api_definition.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating ApiDefinition: %s", err)
	}

	return resourceVolterraApiDefinitionRead(d, meta)
}

func resourceVolterraApiDefinitionDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_api_definition.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ApiDefinition %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ApiDefinition before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra ApiDefinition obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_views_api_definition.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_enhanced_firewall_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/enhanced_firewall_policy"
	ves_io_schema_network_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy"
	ves_io_schema_network_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraEnhancedFirewallPolicy is implementation of Volterra's EnhancedFirewallPolicy resources
func resourceVolterraEnhancedFirewallPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraEnhancedFirewallPolicyCreate,
		Read:   resourceVolterraEnhancedFirewallPolicyRead,
		Update: resourceVolterraEnhancedFirewallPolicyUpdate,
		Delete: resourceVolterraEnhancedFirewallPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"allow_all": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"allowed_destinations": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv6_prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"allowed_sources": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv6_prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"denied_destinations": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv6_prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"denied_sources": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv6_prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"prefix": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"deny_all": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"rule_list": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"rules": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"allow": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"deny": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"insert_service": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"nfv_service": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"advanced_action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"action": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"all_destinations": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"all_sli_vips": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"all_slo_vips": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"destination_aws_vpc_ids": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"vpc_id": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"destination_ip_prefix_set": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"destination_label_selector": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"expressions": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"destination_prefix_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv6_prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"inside_destinations": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"outside_destinations": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"label_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"keys": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"all_sources": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"inside_sources": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"outside_sources": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"source_aws_vpc_ids": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"vpc_id": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"source_ip_prefix_set": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"source_label_selector": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"expressions": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"source_prefix_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv6_prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"prefixes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"all_tcp_traffic": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"all_traffic": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"all_udp_traffic": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"applications": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"applications": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"protocol_port_range": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"port_ranges": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"protocol": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"segment_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"dst_any": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"dst_segments": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"segments": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"intra_segment": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"src_any": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"src_segments": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"segments": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraEnhancedFirewallPolicyCreate creates EnhancedFirewallPolicy resource
func resourceVolterraEnhancedFirewallPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_enhanced_firewall_policy.CreateSpecType{}
	createReq := &ves_io_schema_enhanced_firewall_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//rule_choice

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_AllowAll{}
			ruleChoiceInt.AllowAll = &ves_io_schema.Empty{}
			createSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("allowed_destinations"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_AllowedDestinations{}
		ruleChoiceInt.AllowedDestinations = &ves_io_schema.PrefixListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedDestinations.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedDestinations.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("allowed_sources"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_AllowedSources{}
		ruleChoiceInt.AllowedSources = &ves_io_schema.PrefixListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedSources.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedSources.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("denied_destinations"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_DeniedDestinations{}
		ruleChoiceInt.DeniedDestinations = &ves_io_schema.PrefixListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedDestinations.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedDestinations.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("denied_sources"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_DeniedSources{}
		ruleChoiceInt.DeniedSources = &ves_io_schema.PrefixListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedSources.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedSources.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("deny_all"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_DenyAll{}
			ruleChoiceInt.DenyAll = &ves_io_schema.Empty{}
			createSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.CreateSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleListType{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rules := make([]*ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType, len(sl))
					ruleChoiceInt.RuleList.Rules = rules
					for i, set := range sl {
						if set != nil {
							rules[i] = &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType{}
							rulesMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rulesMapStrToI["allow"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Allow{}
									actionChoiceInt.Allow = &ves_io_schema.Empty{}
									rules[i].ActionChoice = actionChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["deny"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Deny{}
									actionChoiceInt.Deny = &ves_io_schema.Empty{}
									rules[i].ActionChoice = actionChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["insert_service"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsertService{}
								actionChoiceInt.InsertService = &ves_io_schema_enhanced_firewall_policy.ServiceActionType{}
								rules[i].ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["nfv_service"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											nfvServiceInt := &ves_io_schema_views.ObjectRefType{}
											actionChoiceInt.InsertService.NfvService = nfvServiceInt

											for _, set := range sl {
												if set != nil {
													nsMapToStrVal := set.(map[string]interface{})
													if val, ok := nsMapToStrVal["name"]; ok && !isIntfNil(v) {
														nfvServiceInt.Name = val.(string)
													}
													if val, ok := nsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														nfvServiceInt.Namespace = val.(string)
													}

													if val, ok := nsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														nfvServiceInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["advanced_action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advancedAction := &ves_io_schema_network_policy_rule.NetworkPolicyRuleAdvancedAction{}
								rules[i].AdvancedAction = advancedAction
								for _, set := range sl {
									if set != nil {
										advancedActionMapStrToI := set.(map[string]interface{})

										if v, ok := advancedActionMapStrToI["action"]; ok && !isIntfNil(v) {

											advancedAction.Action = ves_io_schema_network_policy_rule.LogAction(ves_io_schema_network_policy_rule.LogAction_value[v.(string)])

										}

									}
								}

							}

							destinationChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllDestinations{}
									destinationChoiceInt.AllDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_sli_vips"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSliVips{}
									destinationChoiceInt.AllSliVips = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_slo_vips"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSloVips{}
									destinationChoiceInt.AllSloVips = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["destination_aws_vpc_ids"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds{}
								destinationChoiceInt.DestinationAwsVpcIds = &ves_io_schema.AwsVpcList{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["vpc_id"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field vpc_id")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationAwsVpcIds.VpcId = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_ip_prefix_set"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet{}
								destinationChoiceInt.DestinationIpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											destinationChoiceInt.DestinationIpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_label_selector"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationLabelSelector{}
								destinationChoiceInt.DestinationLabelSelector = &ves_io_schema.LabelSelectorType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationLabelSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_prefix_list"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationPrefixList{}
								destinationChoiceInt.DestinationPrefixList = &ves_io_schema_views.PrefixStringListType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationPrefixList.Ipv6Prefixes = ls

										}

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationPrefixList.Prefixes = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["inside_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideDestinations{}
									destinationChoiceInt.InsideDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["outside_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideDestinations{}
									destinationChoiceInt.OutsideDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								rules[i].LabelMatcher = labelMatcher
								for _, set := range sl {
									if set != nil {
										labelMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field keys")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											labelMatcher.Keys = ls
										}

									}
								}

							}

							if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								rules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							sourceChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSources{}
									sourceChoiceInt.AllSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["inside_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideSources{}
									sourceChoiceInt.InsideSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["outside_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideSources{}
									sourceChoiceInt.OutsideSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["source_aws_vpc_ids"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceAwsVpcIds{}
								sourceChoiceInt.SourceAwsVpcIds = &ves_io_schema.AwsVpcList{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["vpc_id"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field vpc_id")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourceAwsVpcIds.VpcId = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_ip_prefix_set"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceIpPrefixSet{}
								sourceChoiceInt.SourceIpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceChoiceInt.SourceIpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_label_selector"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceLabelSelector{}
								sourceChoiceInt.SourceLabelSelector = &ves_io_schema.LabelSelectorType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourceLabelSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_prefix_list"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourcePrefixList{}
								sourceChoiceInt.SourcePrefixList = &ves_io_schema_views.PrefixStringListType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourcePrefixList.Ipv6Prefixes = ls

										}

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourcePrefixList.Prefixes = ls

										}

									}
								}

							}

							trafficChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_tcp_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTcpTraffic{}
									trafficChoiceInt.AllTcpTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTraffic{}
									trafficChoiceInt.AllTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_udp_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllUdpTraffic{}
									trafficChoiceInt.AllUdpTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["applications"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true
								trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Applications{}
								trafficChoiceInt.Applications = &ves_io_schema_network_policy.ApplicationsType{}
								rules[i].TrafficChoice = trafficChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["applications"]; ok && !isIntfNil(v) {

											applicationsList := []ves_io_schema_network_policy.ApplicationEnumType{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field applications")
												}
												applicationsList = append(applicationsList, ves_io_schema_network_policy.ApplicationEnumType(ves_io_schema_network_policy.ApplicationEnumType_value[j.(string)]))
											}
											trafficChoiceInt.Applications.Applications = applicationsList

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["protocol_port_range"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true
								trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_ProtocolPortRange{}
								trafficChoiceInt.ProtocolPortRange = &ves_io_schema_network_policy.ProtocolPortType{}
								rules[i].TrafficChoice = trafficChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field port_ranges")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											trafficChoiceInt.ProtocolPortRange.PortRanges = ls

										}

										if v, ok := cs["protocol"]; ok && !isIntfNil(v) {

											trafficChoiceInt.ProtocolPortRange.Protocol = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//segment_policy
	if v, ok := d.GetOk("segment_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		segmentPolicy := &ves_io_schema_policy.SegmentPolicyType{}
		createSpec.SegmentPolicy = segmentPolicy
		for _, set := range sl {
			if set != nil {
				segmentPolicyMapStrToI := set.(map[string]interface{})

				dstSegmentChoiceTypeFound := false

				if v, ok := segmentPolicyMapStrToI["dst_any"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true

					if v.(bool) {
						dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_DstAny{}
						dstSegmentChoiceInt.DstAny = &ves_io_schema.Empty{}
						segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt
					}

				}

				if v, ok := segmentPolicyMapStrToI["dst_segments"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true
					dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_DstSegments{}
					dstSegmentChoiceInt.DstSegments = &ves_io_schema_views.SegmentRefList{}
					segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["segments"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								segmentsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								dstSegmentChoiceInt.DstSegments.Segments = segmentsInt
								for i, ps := range sl {

									sMapToStrVal := ps.(map[string]interface{})
									segmentsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
										segmentsInt[i].Name = v.(string)
									}

									if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										segmentsInt[i].Namespace = v.(string)
									}

									if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										segmentsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := segmentPolicyMapStrToI["intra_segment"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true

					if v.(bool) {
						dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_IntraSegment{}
						dstSegmentChoiceInt.IntraSegment = &ves_io_schema.Empty{}
						segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt
					}

				}

				srcSegmentChoiceTypeFound := false

				if v, ok := segmentPolicyMapStrToI["src_any"]; ok && !isIntfNil(v) && !srcSegmentChoiceTypeFound {

					srcSegmentChoiceTypeFound = true

					if v.(bool) {
						srcSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_SrcAny{}
						srcSegmentChoiceInt.SrcAny = &ves_io_schema.Empty{}
						segmentPolicy.SrcSegmentChoice = srcSegmentChoiceInt
					}

				}

				if v, ok := segmentPolicyMapStrToI["src_segments"]; ok && !isIntfNil(v) && !srcSegmentChoiceTypeFound {

					srcSegmentChoiceTypeFound = true
					srcSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_SrcSegments{}
					srcSegmentChoiceInt.SrcSegments = &ves_io_schema_views.SegmentRefList{}
					segmentPolicy.SrcSegmentChoice = srcSegmentChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["segments"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								segmentsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								srcSegmentChoiceInt.SrcSegments.Segments = segmentsInt
								for i, ps := range sl {

									sMapToStrVal := ps.(map[string]interface{})
									segmentsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
										segmentsInt[i].Name = v.(string)
									}

									if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										segmentsInt[i].Namespace = v.(string)
									}

									if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										segmentsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra EnhancedFirewallPolicy object with struct: %+v", createReq)

	createEnhancedFirewallPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_enhanced_firewall_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating EnhancedFirewallPolicy: %s", err)
	}
	d.SetId(createEnhancedFirewallPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraEnhancedFirewallPolicyRead(d, meta)
}

func resourceVolterraEnhancedFirewallPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_enhanced_firewall_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] EnhancedFirewallPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra EnhancedFirewallPolicy %q: %s", d.Id(), err)
	}
	return setEnhancedFirewallPolicyFields(client, d, resp)
}

func setEnhancedFirewallPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraEnhancedFirewallPolicyUpdate updates EnhancedFirewallPolicy resource
func resourceVolterraEnhancedFirewallPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_enhanced_firewall_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_AllowAll{}
			ruleChoiceInt.AllowAll = &ves_io_schema.Empty{}
			updateSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("allowed_destinations"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_AllowedDestinations{}
		ruleChoiceInt.AllowedDestinations = &ves_io_schema.PrefixListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedDestinations.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedDestinations.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("allowed_sources"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_AllowedSources{}
		ruleChoiceInt.AllowedSources = &ves_io_schema.PrefixListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedSources.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.AllowedSources.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("denied_destinations"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_DeniedDestinations{}
		ruleChoiceInt.DeniedDestinations = &ves_io_schema.PrefixListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedDestinations.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedDestinations.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("denied_sources"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_DeniedSources{}
		ruleChoiceInt.DeniedSources = &ves_io_schema.PrefixListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedSources.Ipv6Prefix = ls

				}

				if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field prefix")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					ruleChoiceInt.DeniedSources.Prefix = ls

				}

			}
		}

	}

	if v, ok := d.GetOk("deny_all"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_DenyAll{}
			ruleChoiceInt.DenyAll = &ves_io_schema.Empty{}
			updateSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !isIntfNil(v) && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_enhanced_firewall_policy.ReplaceSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleListType{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rules := make([]*ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType, len(sl))
					ruleChoiceInt.RuleList.Rules = rules
					for i, set := range sl {
						if set != nil {
							rules[i] = &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType{}
							rulesMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rulesMapStrToI["allow"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Allow{}
									actionChoiceInt.Allow = &ves_io_schema.Empty{}
									rules[i].ActionChoice = actionChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["deny"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Deny{}
									actionChoiceInt.Deny = &ves_io_schema.Empty{}
									rules[i].ActionChoice = actionChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["insert_service"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsertService{}
								actionChoiceInt.InsertService = &ves_io_schema_enhanced_firewall_policy.ServiceActionType{}
								rules[i].ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["nfv_service"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											nfvServiceInt := &ves_io_schema_views.ObjectRefType{}
											actionChoiceInt.InsertService.NfvService = nfvServiceInt

											for _, set := range sl {
												if set != nil {
													nsMapToStrVal := set.(map[string]interface{})
													if val, ok := nsMapToStrVal["name"]; ok && !isIntfNil(v) {
														nfvServiceInt.Name = val.(string)
													}
													if val, ok := nsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														nfvServiceInt.Namespace = val.(string)
													}

													if val, ok := nsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														nfvServiceInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["advanced_action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advancedAction := &ves_io_schema_network_policy_rule.NetworkPolicyRuleAdvancedAction{}
								rules[i].AdvancedAction = advancedAction
								for _, set := range sl {
									if set != nil {
										advancedActionMapStrToI := set.(map[string]interface{})

										if v, ok := advancedActionMapStrToI["action"]; ok && !isIntfNil(v) {

											advancedAction.Action = ves_io_schema_network_policy_rule.LogAction(ves_io_schema_network_policy_rule.LogAction_value[v.(string)])

										}

									}
								}

							}

							destinationChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllDestinations{}
									destinationChoiceInt.AllDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_sli_vips"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSliVips{}
									destinationChoiceInt.AllSliVips = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_slo_vips"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSloVips{}
									destinationChoiceInt.AllSloVips = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["destination_aws_vpc_ids"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds{}
								destinationChoiceInt.DestinationAwsVpcIds = &ves_io_schema.AwsVpcList{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["vpc_id"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field vpc_id")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationAwsVpcIds.VpcId = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_ip_prefix_set"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet{}
								destinationChoiceInt.DestinationIpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											destinationChoiceInt.DestinationIpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_label_selector"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationLabelSelector{}
								destinationChoiceInt.DestinationLabelSelector = &ves_io_schema.LabelSelectorType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationLabelSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["destination_prefix_list"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true
								destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationPrefixList{}
								destinationChoiceInt.DestinationPrefixList = &ves_io_schema_views.PrefixStringListType{}
								rules[i].DestinationChoice = destinationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationPrefixList.Ipv6Prefixes = ls

										}

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											destinationChoiceInt.DestinationPrefixList.Prefixes = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["inside_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideDestinations{}
									destinationChoiceInt.InsideDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["outside_destinations"]; ok && !isIntfNil(v) && !destinationChoiceTypeFound {

								destinationChoiceTypeFound = true

								if v.(bool) {
									destinationChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideDestinations{}
									destinationChoiceInt.OutsideDestinations = &ves_io_schema.Empty{}
									rules[i].DestinationChoice = destinationChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								rules[i].LabelMatcher = labelMatcher
								for _, set := range sl {
									if set != nil {
										labelMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field keys")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											labelMatcher.Keys = ls
										}

									}
								}

							}

							if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								rules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							sourceChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSources{}
									sourceChoiceInt.AllSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["inside_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideSources{}
									sourceChoiceInt.InsideSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["outside_sources"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true

								if v.(bool) {
									sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideSources{}
									sourceChoiceInt.OutsideSources = &ves_io_schema.Empty{}
									rules[i].SourceChoice = sourceChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["source_aws_vpc_ids"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceAwsVpcIds{}
								sourceChoiceInt.SourceAwsVpcIds = &ves_io_schema.AwsVpcList{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["vpc_id"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field vpc_id")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourceAwsVpcIds.VpcId = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_ip_prefix_set"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceIpPrefixSet{}
								sourceChoiceInt.SourceIpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceChoiceInt.SourceIpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_label_selector"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceLabelSelector{}
								sourceChoiceInt.SourceLabelSelector = &ves_io_schema.LabelSelectorType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field expressions")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourceLabelSelector.Expressions = ls

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["source_prefix_list"]; ok && !isIntfNil(v) && !sourceChoiceTypeFound {

								sourceChoiceTypeFound = true
								sourceChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourcePrefixList{}
								sourceChoiceInt.SourcePrefixList = &ves_io_schema_views.PrefixStringListType{}
								rules[i].SourceChoice = sourceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourcePrefixList.Ipv6Prefixes = ls

										}

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefixes")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceChoiceInt.SourcePrefixList.Prefixes = ls

										}

									}
								}

							}

							trafficChoiceTypeFound := false

							if v, ok := rulesMapStrToI["all_tcp_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTcpTraffic{}
									trafficChoiceInt.AllTcpTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTraffic{}
									trafficChoiceInt.AllTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["all_udp_traffic"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true

								if v.(bool) {
									trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllUdpTraffic{}
									trafficChoiceInt.AllUdpTraffic = &ves_io_schema.Empty{}
									rules[i].TrafficChoice = trafficChoiceInt
								}

							}

							if v, ok := rulesMapStrToI["applications"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true
								trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Applications{}
								trafficChoiceInt.Applications = &ves_io_schema_network_policy.ApplicationsType{}
								rules[i].TrafficChoice = trafficChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["applications"]; ok && !isIntfNil(v) {

											applicationsList := []ves_io_schema_network_policy.ApplicationEnumType{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field applications")
												}
												applicationsList = append(applicationsList, ves_io_schema_network_policy.ApplicationEnumType(ves_io_schema_network_policy.ApplicationEnumType_value[j.(string)]))
											}
											trafficChoiceInt.Applications.Applications = applicationsList

										}

									}
								}

							}

							if v, ok := rulesMapStrToI["protocol_port_range"]; ok && !isIntfNil(v) && !trafficChoiceTypeFound {

								trafficChoiceTypeFound = true
								trafficChoiceInt := &ves_io_schema_enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_ProtocolPortRange{}
								trafficChoiceInt.ProtocolPortRange = &ves_io_schema_network_policy.ProtocolPortType{}
								rules[i].TrafficChoice = trafficChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field port_ranges")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											trafficChoiceInt.ProtocolPortRange.PortRanges = ls

										}

										if v, ok := cs["protocol"]; ok && !isIntfNil(v) {

											trafficChoiceInt.ProtocolPortRange.Protocol = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("segment_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		segmentPolicy := &ves_io_schema_policy.SegmentPolicyType{}
		updateSpec.SegmentPolicy = segmentPolicy
		for _, set := range sl {
			if set != nil {
				segmentPolicyMapStrToI := set.(map[string]interface{})

				dstSegmentChoiceTypeFound := false

				if v, ok := segmentPolicyMapStrToI["dst_any"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true

					if v.(bool) {
						dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_DstAny{}
						dstSegmentChoiceInt.DstAny = &ves_io_schema.Empty{}
						segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt
					}

				}

				if v, ok := segmentPolicyMapStrToI["dst_segments"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true
					dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_DstSegments{}
					dstSegmentChoiceInt.DstSegments = &ves_io_schema_views.SegmentRefList{}
					segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["segments"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								segmentsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								dstSegmentChoiceInt.DstSegments.Segments = segmentsInt
								for i, ps := range sl {

									sMapToStrVal := ps.(map[string]interface{})
									segmentsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
										segmentsInt[i].Name = v.(string)
									}

									if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										segmentsInt[i].Namespace = v.(string)
									}

									if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										segmentsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := segmentPolicyMapStrToI["intra_segment"]; ok && !isIntfNil(v) && !dstSegmentChoiceTypeFound {

					dstSegmentChoiceTypeFound = true

					if v.(bool) {
						dstSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_IntraSegment{}
						dstSegmentChoiceInt.IntraSegment = &ves_io_schema.Empty{}
						segmentPolicy.DstSegmentChoice = dstSegmentChoiceInt
					}

				}

				srcSegmentChoiceTypeFound := false

				if v, ok := segmentPolicyMapStrToI["src_any"]; ok && !isIntfNil(v) && !srcSegmentChoiceTypeFound {

					srcSegmentChoiceTypeFound = true

					if v.(bool) {
						srcSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_SrcAny{}
						srcSegmentChoiceInt.SrcAny = &ves_io_schema.Empty{}
						segmentPolicy.SrcSegmentChoice = srcSegmentChoiceInt
					}

				}

				if v, ok := segmentPolicyMapStrToI["src_segments"]; ok && !isIntfNil(v) && !srcSegmentChoiceTypeFound {

					srcSegmentChoiceTypeFound = true
					srcSegmentChoiceInt := &ves_io_schema_policy.SegmentPolicyType_SrcSegments{}
					srcSegmentChoiceInt.SrcSegments = &ves_io_schema_views.SegmentRefList{}
					segmentPolicy.SrcSegmentChoice = srcSegmentChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["segments"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								segmentsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								srcSegmentChoiceInt.SrcSegments.Segments = segmentsInt
								for i, ps := range sl {

									sMapToStrVal := ps.(map[string]interface{})
									segmentsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
										segmentsInt[i].Name = v.(string)
									}

									if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										segmentsInt[i].Namespace = v.(string)
									}

									if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										segmentsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra EnhancedFirewallPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_enhanced_firewall_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating EnhancedFirewallPolicy: %s", err)
	}

	return resourceVolterraEnhancedFirewallPolicyRead(d, meta)
}

func resourceVolterraEnhancedFirewallPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_enhanced_firewall_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] EnhancedFirewallPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra EnhancedFirewallPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra EnhancedFirewallPolicy obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_enhanced_firewall_policy.ObjectType, namespace, name, opts...)
}

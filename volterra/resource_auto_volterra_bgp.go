//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_bgp "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraBgp is implementation of Volterra's Bgp resources
func resourceVolterraBgp() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraBgpCreate,
		Read:   resourceVolterraBgpRead,
		Update: resourceVolterraBgpUpdate,
		Delete: resourceVolterraBgpDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"bgp_parameters": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"asn": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"bgp_router_id": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"ipv6": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"bgp_router_id_key": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"bgp_router_id_type": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"from_site": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ip_address": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"local_address": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"peers": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"metadata": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"target_service": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"external": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"address": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"default_gateway": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"from_site": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"subnet_begin_offset": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"subnet_end_offset": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"asn": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"family_inet": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"inside_interfaces": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"interface": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"interface_list": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"interfaces": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"outside_interfaces": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"internal": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"address": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"dns_name": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"from_site": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"family_inet6vpn": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"family_inetvpn": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"disable": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"family_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"disable_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"where": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"site": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_site": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraBgpCreate creates Bgp resource
func resourceVolterraBgpCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_bgp.CreateSpecType{}
	createReq := &ves_io_schema_bgp.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//bgp_parameters
	if v, ok := d.GetOk("bgp_parameters"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		bgpParameters := &ves_io_schema_bgp.BgpParameters{}
		createSpec.BgpParameters = bgpParameters
		for _, set := range sl {
			bgpParametersMapStrToI := set.(map[string]interface{})

			if w, ok := bgpParametersMapStrToI["asn"]; ok && !isIntfNil(w) {
				bgpParameters.Asn = uint32(w.(int))
			}

			if v, ok := bgpParametersMapStrToI["bgp_router_id"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				bgpRouterId := &ves_io_schema.IpAddressType{}
				bgpParameters.BgpRouterId = bgpRouterId
				for _, set := range sl {
					bgpRouterIdMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := bgpRouterIdMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						bgpRouterId.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := bgpRouterIdMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						bgpRouterId.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

			if w, ok := bgpParametersMapStrToI["bgp_router_id_key"]; ok && !isIntfNil(w) {
				bgpParameters.BgpRouterIdKey = w.(string)
			}

			if v, ok := bgpParametersMapStrToI["bgp_router_id_type"]; ok && !isIntfNil(v) {

				bgpParameters.BgpRouterIdType = ves_io_schema_bgp.BgpRouterIdType(ves_io_schema_bgp.BgpRouterIdType_value[v.(string)])

			}

			routerIdChoiceTypeFound := false

			if v, ok := bgpParametersMapStrToI["from_site"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true

				if v.(bool) {
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_FromSite{}
					routerIdChoiceInt.FromSite = &ves_io_schema.Empty{}
					bgpParameters.RouterIdChoice = routerIdChoiceInt
				}

			}

			if v, ok := bgpParametersMapStrToI["ip_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true
				routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_IpAddress{}

				bgpParameters.RouterIdChoice = routerIdChoiceInt

				routerIdChoiceInt.IpAddress = v.(string)

			}

			if v, ok := bgpParametersMapStrToI["local_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true

				if v.(bool) {
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_LocalAddress{}
					routerIdChoiceInt.LocalAddress = &ves_io_schema.Empty{}
					bgpParameters.RouterIdChoice = routerIdChoiceInt
				}

			}

		}

	}

	//peers
	if v, ok := d.GetOk("peers"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		peers := make([]*ves_io_schema_bgp.Peer, len(sl))
		createSpec.Peers = peers
		for i, set := range sl {
			peers[i] = &ves_io_schema_bgp.Peer{}
			peersMapStrToI := set.(map[string]interface{})

			if v, ok := peersMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				peers[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if w, ok := peersMapStrToI["target_service"]; ok && !isIntfNil(w) {
				peers[i].TargetService = w.(string)
			}

			typeChoiceTypeFound := false

			if v, ok := peersMapStrToI["external"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

				typeChoiceTypeFound = true
				typeChoiceInt := &ves_io_schema_bgp.Peer_External{}
				typeChoiceInt.External = &ves_io_schema_bgp.PeerExternal{}
				peers[i].TypeChoice = typeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					addressChoiceTypeFound := false

					if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Address{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.Address = v.(string)

					}

					if v, ok := cs["default_gateway"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerExternal_DefaultGateway{}
							addressChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
							typeChoiceInt.External.AddressChoice = addressChoiceInt
						}

					}

					if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerExternal_FromSite{}
							addressChoiceInt.FromSite = &ves_io_schema.Empty{}
							typeChoiceInt.External.AddressChoice = addressChoiceInt
						}

					}

					if v, ok := cs["subnet_begin_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffset{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.SubnetBeginOffset = uint32(v.(int))

					}

					if v, ok := cs["subnet_end_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetEndOffset{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.SubnetEndOffset = uint32(v.(int))

					}

					if v, ok := cs["asn"]; ok && !isIntfNil(v) {

						typeChoiceInt.External.Asn = uint32(v.(int))

					}

					if v, ok := cs["family_inet"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyInet := &ves_io_schema_bgp.FamilyInet{}
						typeChoiceInt.External.FamilyInet = familyInet
						for _, set := range sl {
							familyInetMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyInetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyInet.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyInetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Enable{}
									enableChoiceInt.Enable = &ves_io_schema.Empty{}
									familyInet.EnableChoice = enableChoiceInt
								}

							}

						}

					}

					interfaceChoiceTypeFound := false

					if v, ok := cs["inside_interfaces"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true

						if v.(bool) {
							interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InsideInterfaces{}
							interfaceChoiceInt.InsideInterfaces = &ves_io_schema.Empty{}
							typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt
						}

					}

					if v, ok := cs["interface"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true
						interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_Interface{}
						interfaceChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
						typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["interface_list"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true
						interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InterfaceList{}
						interfaceChoiceInt.InterfaceList = &ves_io_schema_bgp.InterfaceList{}
						typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["interfaces"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								interfacesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								interfaceChoiceInt.InterfaceList.Interfaces = interfacesInt
								for i, ps := range sl {

									iMapToStrVal := ps.(map[string]interface{})
									interfacesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
										interfacesInt[i].Name = v.(string)
									}

									if v, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										interfacesInt[i].Namespace = v.(string)
									}

									if v, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										interfacesInt[i].Tenant = v.(string)
									}

								}

							}

						}

					}

					if v, ok := cs["outside_interfaces"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true

						if v.(bool) {
							interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_OutsideInterfaces{}
							interfaceChoiceInt.OutsideInterfaces = &ves_io_schema.Empty{}
							typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						typeChoiceInt.External.Port = uint32(v.(int))

					}

				}

			}

			if v, ok := peersMapStrToI["internal"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

				typeChoiceTypeFound = true
				typeChoiceInt := &ves_io_schema_bgp.Peer_Internal{}
				typeChoiceInt.Internal = &ves_io_schema_bgp.PeerInternal{}
				peers[i].TypeChoice = typeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					addressChoiceTypeFound := false

					if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerInternal_Address{}

						typeChoiceInt.Internal.AddressChoice = addressChoiceInt

						addressChoiceInt.Address = v.(string)

					}

					if v, ok := cs["dns_name"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerInternal_DnsName{}

						typeChoiceInt.Internal.AddressChoice = addressChoiceInt

						addressChoiceInt.DnsName = v.(string)

					}

					if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerInternal_FromSite{}
							addressChoiceInt.FromSite = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.AddressChoice = addressChoiceInt
						}

					}


					if v, ok := cs["family_inetvpn"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyInetvpn := &ves_io_schema_bgp.FamilyInetvpn{}
						typeChoiceInt.Internal.FamilyInetvpn = familyInetvpn
						for _, set := range sl {
							familyInetvpnMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyInetvpnMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInetvpn_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyInetvpn.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyInetvpnMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true
								enableChoiceInt := &ves_io_schema_bgp.FamilyInetvpn_Enable{}
								enableChoiceInt.Enable = &ves_io_schema_bgp.FamilyInetvpnParameters{}
								familyInetvpn.EnableChoice = enableChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									srChoiceTypeFound := false

									if v, ok := cs["disable"]; ok && !isIntfNil(v) && !srChoiceTypeFound {

										srChoiceTypeFound = true

										if v.(bool) {
											srChoiceInt := &ves_io_schema_bgp.FamilyInetvpnParameters_Disable{}
											srChoiceInt.Disable = &ves_io_schema.Empty{}
											enableChoiceInt.Enable.SrChoice = srChoiceInt
										}

									}

									if v, ok := cs["enable"]; ok && !isIntfNil(v) && !srChoiceTypeFound {

										srChoiceTypeFound = true

										if v.(bool) {
											srChoiceInt := &ves_io_schema_bgp.FamilyInetvpnParameters_Enable{}
											srChoiceInt.Enable = &ves_io_schema.Empty{}
											enableChoiceInt.Enable.SrChoice = srChoiceInt
										}

									}

								}

							}

						}

					}

					if v, ok := cs["family_rtarget"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyRtarget := &ves_io_schema_bgp.FamilyRtarget{}
						typeChoiceInt.Internal.FamilyRtarget = familyRtarget
						for _, set := range sl {
							familyRtargetMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyRtargetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyRtarget_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyRtarget.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyRtargetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyRtarget_Enable{}
									enableChoiceInt.Enable = &ves_io_schema.Empty{}
									familyRtarget.EnableChoice = enableChoiceInt
								}

							}

						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["disable_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_bgp.PeerInternal_DisableMtls{}
							mtlsChoiceInt.DisableMtls = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["enable_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_bgp.PeerInternal_EnableMtls{}
							mtlsChoiceInt.EnableMtls = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						typeChoiceInt.Internal.Port = uint32(v.(int))

					}

				}

			}

		}

	}

	//where
	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		where := &ves_io_schema.SiteVirtualSiteRefSelector{}
		createSpec.Where = where
		for _, set := range sl {
			whereMapStrToI := set.(map[string]interface{})

			refOrSelectorTypeFound := false

			if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

				refOrSelectorTypeFound = true
				refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_Site{}
				refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
				where.RefOrSelector = refOrSelectorInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

						refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

					}

					if v, ok := cs["ref"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
						refOrSelectorInt.Site.Ref = refIntNew
						for i, ps := range sl {

							rMapToStrVal := ps.(map[string]interface{})
							refIntNew[i] = &ves_io_schema.ObjectRefType{}

							refIntNew[i].Kind = "site"

							if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
								refIntNew[i].Name = v.(string)
							}

							if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								refIntNew[i].Namespace = v.(string)
							}

							if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								refIntNew[i].Tenant = v.(string)
							}

							if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
								refIntNew[i].Uid = v.(string)
							}

						}

					}

				}

			}

			if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

				refOrSelectorTypeFound = true
				refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_VirtualSite{}
				refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
				where.RefOrSelector = refOrSelectorInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

						refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

					}

					if v, ok := cs["ref"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
						refOrSelectorInt.VirtualSite.Ref = refIntNew
						for i, ps := range sl {

							rMapToStrVal := ps.(map[string]interface{})
							refIntNew[i] = &ves_io_schema.ObjectRefType{}

							refIntNew[i].Kind = "virtual_site"

							if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
								refIntNew[i].Name = v.(string)
							}

							if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								refIntNew[i].Namespace = v.(string)
							}

							if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								refIntNew[i].Tenant = v.(string)
							}

							if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
								refIntNew[i].Uid = v.(string)
							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra Bgp object with struct: %+v", createReq)

	createBgpResp, err := client.CreateObject(context.Background(), ves_io_schema_bgp.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating Bgp: %s", err)
	}
	d.SetId(createBgpResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraBgpRead(d, meta)
}

func resourceVolterraBgpRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Bgp %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Bgp %q: %s", d.Id(), err)
	}
	return setBgpFields(client, d, resp)
}

func setBgpFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraBgpUpdate updates Bgp resource
func resourceVolterraBgpUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_bgp.ReplaceSpecType{}
	updateReq := &ves_io_schema_bgp.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("bgp_parameters"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		bgpParameters := &ves_io_schema_bgp.BgpParameters{}
		updateSpec.BgpParameters = bgpParameters
		for _, set := range sl {
			bgpParametersMapStrToI := set.(map[string]interface{})

			if w, ok := bgpParametersMapStrToI["asn"]; ok && !isIntfNil(w) {
				bgpParameters.Asn = uint32(w.(int))
			}

			if v, ok := bgpParametersMapStrToI["bgp_router_id"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				bgpRouterId := &ves_io_schema.IpAddressType{}
				bgpParameters.BgpRouterId = bgpRouterId
				for _, set := range sl {
					bgpRouterIdMapStrToI := set.(map[string]interface{})

					verTypeFound := false

					if v, ok := bgpRouterIdMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv4{}
						verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
						bgpRouterId.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}

					}

					if v, ok := bgpRouterIdMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

						verTypeFound = true
						verInt := &ves_io_schema.IpAddressType_Ipv6{}
						verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
						bgpRouterId.Ver = verInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}

					}

				}

			}

			if w, ok := bgpParametersMapStrToI["bgp_router_id_key"]; ok && !isIntfNil(w) {
				bgpParameters.BgpRouterIdKey = w.(string)
			}

			if v, ok := bgpParametersMapStrToI["bgp_router_id_type"]; ok && !isIntfNil(v) {

				bgpParameters.BgpRouterIdType = ves_io_schema_bgp.BgpRouterIdType(ves_io_schema_bgp.BgpRouterIdType_value[v.(string)])

			}

			routerIdChoiceTypeFound := false

			if v, ok := bgpParametersMapStrToI["from_site"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true

				if v.(bool) {
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_FromSite{}
					routerIdChoiceInt.FromSite = &ves_io_schema.Empty{}
					bgpParameters.RouterIdChoice = routerIdChoiceInt
				}

			}

			if v, ok := bgpParametersMapStrToI["ip_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true
				routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_IpAddress{}

				bgpParameters.RouterIdChoice = routerIdChoiceInt

				routerIdChoiceInt.IpAddress = v.(string)

			}

			if v, ok := bgpParametersMapStrToI["local_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

				routerIdChoiceTypeFound = true

				if v.(bool) {
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_LocalAddress{}
					routerIdChoiceInt.LocalAddress = &ves_io_schema.Empty{}
					bgpParameters.RouterIdChoice = routerIdChoiceInt
				}

			}

		}

	}

	if v, ok := d.GetOk("peers"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		peers := make([]*ves_io_schema_bgp.Peer, len(sl))
		updateSpec.Peers = peers
		for i, set := range sl {
			peers[i] = &ves_io_schema_bgp.Peer{}
			peersMapStrToI := set.(map[string]interface{})

			if v, ok := peersMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				peers[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if w, ok := peersMapStrToI["target_service"]; ok && !isIntfNil(w) {
				peers[i].TargetService = w.(string)
			}

			typeChoiceTypeFound := false

			if v, ok := peersMapStrToI["external"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

				typeChoiceTypeFound = true
				typeChoiceInt := &ves_io_schema_bgp.Peer_External{}
				typeChoiceInt.External = &ves_io_schema_bgp.PeerExternal{}
				peers[i].TypeChoice = typeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					addressChoiceTypeFound := false

					if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Address{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.Address = v.(string)

					}

					if v, ok := cs["default_gateway"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerExternal_DefaultGateway{}
							addressChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
							typeChoiceInt.External.AddressChoice = addressChoiceInt
						}

					}

					if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerExternal_FromSite{}
							addressChoiceInt.FromSite = &ves_io_schema.Empty{}
							typeChoiceInt.External.AddressChoice = addressChoiceInt
						}

					}

					if v, ok := cs["subnet_begin_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffset{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.SubnetBeginOffset = uint32(v.(int))

					}

					if v, ok := cs["subnet_end_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetEndOffset{}

						typeChoiceInt.External.AddressChoice = addressChoiceInt

						addressChoiceInt.SubnetEndOffset = uint32(v.(int))

					}

					if v, ok := cs["asn"]; ok && !isIntfNil(v) {

						typeChoiceInt.External.Asn = uint32(v.(int))

					}

					if v, ok := cs["family_inet"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyInet := &ves_io_schema_bgp.FamilyInet{}
						typeChoiceInt.External.FamilyInet = familyInet
						for _, set := range sl {
							familyInetMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyInetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyInet.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyInetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Enable{}
									enableChoiceInt.Enable = &ves_io_schema.Empty{}
									familyInet.EnableChoice = enableChoiceInt
								}

							}

						}

					}

					interfaceChoiceTypeFound := false

					if v, ok := cs["inside_interfaces"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true

						if v.(bool) {
							interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InsideInterfaces{}
							interfaceChoiceInt.InsideInterfaces = &ves_io_schema.Empty{}
							typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt
						}

					}

					if v, ok := cs["interface"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true
						interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_Interface{}
						interfaceChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
						typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								interfaceChoiceInt.Interface.Tenant = v.(string)

							}

						}

					}

					if v, ok := cs["interface_list"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true
						interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InterfaceList{}
						interfaceChoiceInt.InterfaceList = &ves_io_schema_bgp.InterfaceList{}
						typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["interfaces"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								interfacesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								interfaceChoiceInt.InterfaceList.Interfaces = interfacesInt
								for i, ps := range sl {

									iMapToStrVal := ps.(map[string]interface{})
									interfacesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
										interfacesInt[i].Name = v.(string)
									}

									if v, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										interfacesInt[i].Namespace = v.(string)
									}

									if v, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										interfacesInt[i].Tenant = v.(string)
									}

								}

							}

						}

					}

					if v, ok := cs["outside_interfaces"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

						interfaceChoiceTypeFound = true

						if v.(bool) {
							interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_OutsideInterfaces{}
							interfaceChoiceInt.OutsideInterfaces = &ves_io_schema.Empty{}
							typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						typeChoiceInt.External.Port = uint32(v.(int))

					}

				}

			}

			if v, ok := peersMapStrToI["internal"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

				typeChoiceTypeFound = true
				typeChoiceInt := &ves_io_schema_bgp.Peer_Internal{}
				typeChoiceInt.Internal = &ves_io_schema_bgp.PeerInternal{}
				peers[i].TypeChoice = typeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					addressChoiceTypeFound := false

					if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerInternal_Address{}

						typeChoiceInt.Internal.AddressChoice = addressChoiceInt

						addressChoiceInt.Address = v.(string)

					}

					if v, ok := cs["dns_name"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true
						addressChoiceInt := &ves_io_schema_bgp.PeerInternal_DnsName{}

						typeChoiceInt.Internal.AddressChoice = addressChoiceInt

						addressChoiceInt.DnsName = v.(string)

					}

					if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

						addressChoiceTypeFound = true

						if v.(bool) {
							addressChoiceInt := &ves_io_schema_bgp.PeerInternal_FromSite{}
							addressChoiceInt.FromSite = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.AddressChoice = addressChoiceInt
						}

					}

					if v, ok := cs["family_inetvpn"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyInetvpn := &ves_io_schema_bgp.FamilyInetvpn{}
						typeChoiceInt.Internal.FamilyInetvpn = familyInetvpn
						for _, set := range sl {
							familyInetvpnMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyInetvpnMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyInetvpn_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyInetvpn.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyInetvpnMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true
								enableChoiceInt := &ves_io_schema_bgp.FamilyInetvpn_Enable{}
								enableChoiceInt.Enable = &ves_io_schema_bgp.FamilyInetvpnParameters{}
								familyInetvpn.EnableChoice = enableChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									srChoiceTypeFound := false

									if v, ok := cs["disable"]; ok && !isIntfNil(v) && !srChoiceTypeFound {

										srChoiceTypeFound = true

										if v.(bool) {
											srChoiceInt := &ves_io_schema_bgp.FamilyInetvpnParameters_Disable{}
											srChoiceInt.Disable = &ves_io_schema.Empty{}
											enableChoiceInt.Enable.SrChoice = srChoiceInt
										}

									}

									if v, ok := cs["enable"]; ok && !isIntfNil(v) && !srChoiceTypeFound {

										srChoiceTypeFound = true

										if v.(bool) {
											srChoiceInt := &ves_io_schema_bgp.FamilyInetvpnParameters_Enable{}
											srChoiceInt.Enable = &ves_io_schema.Empty{}
											enableChoiceInt.Enable.SrChoice = srChoiceInt
										}

									}

								}

							}

						}

					}

					if v, ok := cs["family_rtarget"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						familyRtarget := &ves_io_schema_bgp.FamilyRtarget{}
						typeChoiceInt.Internal.FamilyRtarget = familyRtarget
						for _, set := range sl {
							familyRtargetMapStrToI := set.(map[string]interface{})

							enableChoiceTypeFound := false

							if v, ok := familyRtargetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyRtarget_Disable{}
									enableChoiceInt.Disable = &ves_io_schema.Empty{}
									familyRtarget.EnableChoice = enableChoiceInt
								}

							}

							if v, ok := familyRtargetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

								enableChoiceTypeFound = true

								if v.(bool) {
									enableChoiceInt := &ves_io_schema_bgp.FamilyRtarget_Enable{}
									enableChoiceInt.Enable = &ves_io_schema.Empty{}
									familyRtarget.EnableChoice = enableChoiceInt
								}

							}

						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["disable_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_bgp.PeerInternal_DisableMtls{}
							mtlsChoiceInt.DisableMtls = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["enable_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_bgp.PeerInternal_EnableMtls{}
							mtlsChoiceInt.EnableMtls = &ves_io_schema.Empty{}
							typeChoiceInt.Internal.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						typeChoiceInt.Internal.Port = uint32(v.(int))

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		where := &ves_io_schema.SiteVirtualSiteRefSelector{}
		updateSpec.Where = where
		for _, set := range sl {
			whereMapStrToI := set.(map[string]interface{})

			refOrSelectorTypeFound := false

			if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

				refOrSelectorTypeFound = true
				refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_Site{}
				refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
				where.RefOrSelector = refOrSelectorInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

						refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

					}

					if v, ok := cs["ref"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
						refOrSelectorInt.Site.Ref = refIntNew
						for i, ps := range sl {

							rMapToStrVal := ps.(map[string]interface{})
							refIntNew[i] = &ves_io_schema.ObjectRefType{}

							refIntNew[i].Kind = "site"

							if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
								refIntNew[i].Name = v.(string)
							}

							if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								refIntNew[i].Namespace = v.(string)
							}

							if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								refIntNew[i].Tenant = v.(string)
							}

							if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
								refIntNew[i].Uid = v.(string)
							}

						}

					}

				}

			}

			if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

				refOrSelectorTypeFound = true
				refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_VirtualSite{}
				refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
				where.RefOrSelector = refOrSelectorInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

						refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

					}

					if v, ok := cs["ref"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
						refOrSelectorInt.VirtualSite.Ref = refIntNew
						for i, ps := range sl {

							rMapToStrVal := ps.(map[string]interface{})
							refIntNew[i] = &ves_io_schema.ObjectRefType{}

							refIntNew[i].Kind = "virtual_site"

							if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
								refIntNew[i].Name = v.(string)
							}

							if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								refIntNew[i].Namespace = v.(string)
							}

							if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								refIntNew[i].Tenant = v.(string)
							}

							if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
								refIntNew[i].Uid = v.(string)
							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra Bgp obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_bgp.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating Bgp: %s", err)
	}

	return resourceVolterraBgpRead(d, meta)
}

func resourceVolterraBgpDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Bgp %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Bgp before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra Bgp obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name)
}

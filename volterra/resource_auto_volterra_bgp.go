//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_bgp "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraBgp is implementation of Volterra's Bgp resources
func resourceVolterraBgp() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraBgpCreate,
		Read:   resourceVolterraBgpRead,
		Update: resourceVolterraBgpUpdate,
		Delete: resourceVolterraBgpDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"bgp_parameters": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"asn": {
							Type:     schema.TypeInt,
							Required: true,
						},

						"from_site": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ip_address": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"local_address": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"peers": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disable": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"label": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"passive_mode_disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"passive_mode_enabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"external": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"address": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"default_gateway": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"external_connector": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"from_site": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"subnet_begin_offset": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"subnet_end_offset": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"address_ipv6": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"default_gateway_v6": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_v6": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"from_site_v6": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"subnet_begin_offset_v6": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"subnet_end_offset_v6": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"asn": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"md5_auth_key": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"no_authentication": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"family_inet": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"family_inet_v6": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"enable": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"interface": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"interface_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"interfaces": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"where": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraBgpCreate creates Bgp resource
func resourceVolterraBgpCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_bgp.CreateSpecType{}
	createReq := &ves_io_schema_bgp.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//bgp_parameters
	if v, ok := d.GetOk("bgp_parameters"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		bgpParameters := &ves_io_schema_bgp.BgpParameters{}
		createSpec.BgpParameters = bgpParameters
		for _, set := range sl {
			if set != nil {
				bgpParametersMapStrToI := set.(map[string]interface{})

				if w, ok := bgpParametersMapStrToI["asn"]; ok && !isIntfNil(w) {
					bgpParameters.Asn = uint32(w.(int))
				}

				routerIdChoiceTypeFound := false

				if v, ok := bgpParametersMapStrToI["from_site"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true

					if v.(bool) {
						routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_FromSite{}
						routerIdChoiceInt.FromSite = &ves_io_schema.Empty{}
						bgpParameters.RouterIdChoice = routerIdChoiceInt
					}

				}

				if v, ok := bgpParametersMapStrToI["ip_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_IpAddress{}

					bgpParameters.RouterIdChoice = routerIdChoiceInt

					routerIdChoiceInt.IpAddress = v.(string)

				}

				if v, ok := bgpParametersMapStrToI["local_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true

					if v.(bool) {
						routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_LocalAddress{}
						routerIdChoiceInt.LocalAddress = &ves_io_schema.Empty{}
						bgpParameters.RouterIdChoice = routerIdChoiceInt
					}

				}

			}
		}

	}

	//peers
	if v, ok := d.GetOk("peers"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		peers := make([]*ves_io_schema_bgp.Peer, len(sl))
		createSpec.Peers = peers
		for i, set := range sl {
			if set != nil {
				peers[i] = &ves_io_schema_bgp.Peer{}
				peersMapStrToI := set.(map[string]interface{})

				enableChoiceTypeFound := false

				if v, ok := peersMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_bgp.Peer_Disable{}
						enableChoiceInt.Disable = &ves_io_schema.Empty{}
						peers[i].EnableChoice = enableChoiceInt
					}

				}

				if w, ok := peersMapStrToI["label"]; ok && !isIntfNil(w) {
					peers[i].Label = w.(string)
				}

				if v, ok := peersMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					peers[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				passiveChoiceTypeFound := false

				if v, ok := peersMapStrToI["passive_mode_disabled"]; ok && !isIntfNil(v) && !passiveChoiceTypeFound {

					passiveChoiceTypeFound = true

					if v.(bool) {
						passiveChoiceInt := &ves_io_schema_bgp.Peer_PassiveModeDisabled{}
						passiveChoiceInt.PassiveModeDisabled = &ves_io_schema.Empty{}
						peers[i].PassiveChoice = passiveChoiceInt
					}

				}

				if v, ok := peersMapStrToI["passive_mode_enabled"]; ok && !isIntfNil(v) && !passiveChoiceTypeFound {

					passiveChoiceTypeFound = true

					if v.(bool) {
						passiveChoiceInt := &ves_io_schema_bgp.Peer_PassiveModeEnabled{}
						passiveChoiceInt.PassiveModeEnabled = &ves_io_schema.Empty{}
						peers[i].PassiveChoice = passiveChoiceInt
					}

				}

				typeChoiceTypeFound := false

				if v, ok := peersMapStrToI["external"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

					typeChoiceTypeFound = true
					typeChoiceInt := &ves_io_schema_bgp.Peer_External{}
					typeChoiceInt.External = &ves_io_schema_bgp.PeerExternal{}
					peers[i].TypeChoice = typeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							addressChoiceTypeFound := false

							if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Address{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.Address = v.(string)

							}

							if v, ok := cs["default_gateway"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_DefaultGateway{}
									addressChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["disable"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Disable{}
									addressChoiceInt.Disable = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["external_connector"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_ExternalConnector{}
									addressChoiceInt.ExternalConnector = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_FromSite{}
									addressChoiceInt.FromSite = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["subnet_begin_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffset{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.SubnetBeginOffset = uint32(v.(int))

							}

							if v, ok := cs["subnet_end_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetEndOffset{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.SubnetEndOffset = uint32(v.(int))

							}

							addressChoiceV6TypeFound := false

							if v, ok := cs["address_ipv6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_AddressIpv6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.AddressIpv6 = v.(string)

							}

							if v, ok := cs["default_gateway_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_DefaultGatewayV6{}
									addressChoiceV6Int.DefaultGatewayV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["disable_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_DisableV6{}
									addressChoiceV6Int.DisableV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["from_site_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_FromSiteV6{}
									addressChoiceV6Int.FromSiteV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["subnet_begin_offset_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffsetV6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.SubnetBeginOffsetV6 = uint32(v.(int))

							}

							if v, ok := cs["subnet_end_offset_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_SubnetEndOffsetV6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.SubnetEndOffsetV6 = uint32(v.(int))

							}

							if v, ok := cs["asn"]; ok && !isIntfNil(v) {

								typeChoiceInt.External.Asn = uint32(v.(int))

							}

							authChoiceTypeFound := false

							if v, ok := cs["md5_auth_key"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

								authChoiceTypeFound = true
								authChoiceInt := &ves_io_schema_bgp.PeerExternal_Md5AuthKey{}

								typeChoiceInt.External.AuthChoice = authChoiceInt

								authChoiceInt.Md5AuthKey = v.(string)

							}

							if v, ok := cs["no_authentication"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

								authChoiceTypeFound = true

								if v.(bool) {
									authChoiceInt := &ves_io_schema_bgp.PeerExternal_NoAuthentication{}
									authChoiceInt.NoAuthentication = &ves_io_schema.Empty{}
									typeChoiceInt.External.AuthChoice = authChoiceInt
								}

							}

							if v, ok := cs["family_inet"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								familyInet := &ves_io_schema_bgp.FamilyInet{}
								typeChoiceInt.External.FamilyInet = familyInet
								for _, set := range sl {
									if set != nil {
										familyInetMapStrToI := set.(map[string]interface{})

										enableChoiceTypeFound := false

										if v, ok := familyInetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Disable{}
												enableChoiceInt.Disable = &ves_io_schema.Empty{}
												familyInet.EnableChoice = enableChoiceInt
											}

										}

										if v, ok := familyInetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Enable{}
												enableChoiceInt.Enable = &ves_io_schema.Empty{}
												familyInet.EnableChoice = enableChoiceInt
											}

										}

									}
								}

							}

							if v, ok := cs["family_inet_v6"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								familyInetV6 := &ves_io_schema_bgp.FamilyInet6{}
								typeChoiceInt.External.FamilyInetV6 = familyInetV6
								for _, set := range sl {
									if set != nil {
										familyInetV6MapStrToI := set.(map[string]interface{})

										enableChoiceTypeFound := false

										if v, ok := familyInetV6MapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet6_Disable{}
												enableChoiceInt.Disable = &ves_io_schema.Empty{}
												familyInetV6.EnableChoice = enableChoiceInt
											}

										}

										if v, ok := familyInetV6MapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet6_Enable{}
												enableChoiceInt.Enable = &ves_io_schema.Empty{}
												familyInetV6.EnableChoice = enableChoiceInt
											}

										}

									}
								}

							}

							interfaceChoiceTypeFound := false

							if v, ok := cs["interface"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

								interfaceChoiceTypeFound = true
								interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_Interface{}
								interfaceChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
								typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["interface_list"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

								interfaceChoiceTypeFound = true
								interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InterfaceList{}
								interfaceChoiceInt.InterfaceList = &ves_io_schema_bgp.InterfaceList{}
								typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["interfaces"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											interfacesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
											interfaceChoiceInt.InterfaceList.Interfaces = interfacesInt
											for i, ps := range sl {

												iMapToStrVal := ps.(map[string]interface{})
												interfacesInt[i] = &ves_io_schema_views.ObjectRefType{}

												if v, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
													interfacesInt[i].Name = v.(string)
												}

												if v, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													interfacesInt[i].Namespace = v.(string)
												}

												if v, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													interfacesInt[i].Tenant = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								typeChoiceInt.External.Port = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	//where
	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.SiteVirtualSiteRefSelector{}
		createSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra Bgp object with struct: %+v", createReq)

	createBgpResp, err := client.CreateObject(context.Background(), ves_io_schema_bgp.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating Bgp: %s", err)
	}
	d.SetId(createBgpResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraBgpRead(d, meta)
}

func resourceVolterraBgpRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Bgp %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Bgp %q: %s", d.Id(), err)
	}
	return setBgpFields(client, d, resp)
}

func setBgpFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraBgpUpdate updates Bgp resource
func resourceVolterraBgpUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_bgp.ReplaceSpecType{}
	updateReq := &ves_io_schema_bgp.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("bgp_parameters"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		bgpParameters := &ves_io_schema_bgp.BgpParameters{}
		updateSpec.BgpParameters = bgpParameters
		for _, set := range sl {
			if set != nil {
				bgpParametersMapStrToI := set.(map[string]interface{})

				if w, ok := bgpParametersMapStrToI["asn"]; ok && !isIntfNil(w) {
					bgpParameters.Asn = uint32(w.(int))
				}

				routerIdChoiceTypeFound := false

				if v, ok := bgpParametersMapStrToI["from_site"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true

					if v.(bool) {
						routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_FromSite{}
						routerIdChoiceInt.FromSite = &ves_io_schema.Empty{}
						bgpParameters.RouterIdChoice = routerIdChoiceInt
					}

				}

				if v, ok := bgpParametersMapStrToI["ip_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true
					routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_IpAddress{}

					bgpParameters.RouterIdChoice = routerIdChoiceInt

					routerIdChoiceInt.IpAddress = v.(string)

				}

				if v, ok := bgpParametersMapStrToI["local_address"]; ok && !isIntfNil(v) && !routerIdChoiceTypeFound {

					routerIdChoiceTypeFound = true

					if v.(bool) {
						routerIdChoiceInt := &ves_io_schema_bgp.BgpParameters_LocalAddress{}
						routerIdChoiceInt.LocalAddress = &ves_io_schema.Empty{}
						bgpParameters.RouterIdChoice = routerIdChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("peers"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		peers := make([]*ves_io_schema_bgp.Peer, len(sl))
		updateSpec.Peers = peers
		for i, set := range sl {
			if set != nil {
				peers[i] = &ves_io_schema_bgp.Peer{}
				peersMapStrToI := set.(map[string]interface{})

				enableChoiceTypeFound := false

				if v, ok := peersMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_bgp.Peer_Disable{}
						enableChoiceInt.Disable = &ves_io_schema.Empty{}
						peers[i].EnableChoice = enableChoiceInt
					}

				}

				if w, ok := peersMapStrToI["label"]; ok && !isIntfNil(w) {
					peers[i].Label = w.(string)
				}

				if v, ok := peersMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					peers[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				passiveChoiceTypeFound := false

				if v, ok := peersMapStrToI["passive_mode_disabled"]; ok && !isIntfNil(v) && !passiveChoiceTypeFound {

					passiveChoiceTypeFound = true

					if v.(bool) {
						passiveChoiceInt := &ves_io_schema_bgp.Peer_PassiveModeDisabled{}
						passiveChoiceInt.PassiveModeDisabled = &ves_io_schema.Empty{}
						peers[i].PassiveChoice = passiveChoiceInt
					}

				}

				if v, ok := peersMapStrToI["passive_mode_enabled"]; ok && !isIntfNil(v) && !passiveChoiceTypeFound {

					passiveChoiceTypeFound = true

					if v.(bool) {
						passiveChoiceInt := &ves_io_schema_bgp.Peer_PassiveModeEnabled{}
						passiveChoiceInt.PassiveModeEnabled = &ves_io_schema.Empty{}
						peers[i].PassiveChoice = passiveChoiceInt
					}

				}

				typeChoiceTypeFound := false

				if v, ok := peersMapStrToI["external"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

					typeChoiceTypeFound = true
					typeChoiceInt := &ves_io_schema_bgp.Peer_External{}
					typeChoiceInt.External = &ves_io_schema_bgp.PeerExternal{}
					peers[i].TypeChoice = typeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							addressChoiceTypeFound := false

							if v, ok := cs["address"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Address{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.Address = v.(string)

							}

							if v, ok := cs["default_gateway"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_DefaultGateway{}
									addressChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["disable"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_Disable{}
									addressChoiceInt.Disable = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["external_connector"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_ExternalConnector{}
									addressChoiceInt.ExternalConnector = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["from_site"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true

								if v.(bool) {
									addressChoiceInt := &ves_io_schema_bgp.PeerExternal_FromSite{}
									addressChoiceInt.FromSite = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoice = addressChoiceInt
								}

							}

							if v, ok := cs["subnet_begin_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffset{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.SubnetBeginOffset = uint32(v.(int))

							}

							if v, ok := cs["subnet_end_offset"]; ok && !isIntfNil(v) && !addressChoiceTypeFound {

								addressChoiceTypeFound = true
								addressChoiceInt := &ves_io_schema_bgp.PeerExternal_SubnetEndOffset{}

								typeChoiceInt.External.AddressChoice = addressChoiceInt

								addressChoiceInt.SubnetEndOffset = uint32(v.(int))

							}

							addressChoiceV6TypeFound := false

							if v, ok := cs["address_ipv6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_AddressIpv6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.AddressIpv6 = v.(string)

							}

							if v, ok := cs["default_gateway_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_DefaultGatewayV6{}
									addressChoiceV6Int.DefaultGatewayV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["disable_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_DisableV6{}
									addressChoiceV6Int.DisableV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["from_site_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true

								if v.(bool) {
									addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_FromSiteV6{}
									addressChoiceV6Int.FromSiteV6 = &ves_io_schema.Empty{}
									typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int
								}

							}

							if v, ok := cs["subnet_begin_offset_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_SubnetBeginOffsetV6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.SubnetBeginOffsetV6 = uint32(v.(int))

							}

							if v, ok := cs["subnet_end_offset_v6"]; ok && !isIntfNil(v) && !addressChoiceV6TypeFound {

								addressChoiceV6TypeFound = true
								addressChoiceV6Int := &ves_io_schema_bgp.PeerExternal_SubnetEndOffsetV6{}

								typeChoiceInt.External.AddressChoiceV6 = addressChoiceV6Int

								addressChoiceV6Int.SubnetEndOffsetV6 = uint32(v.(int))

							}

							if v, ok := cs["asn"]; ok && !isIntfNil(v) {

								typeChoiceInt.External.Asn = uint32(v.(int))

							}

							authChoiceTypeFound := false

							if v, ok := cs["md5_auth_key"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

								authChoiceTypeFound = true
								authChoiceInt := &ves_io_schema_bgp.PeerExternal_Md5AuthKey{}

								typeChoiceInt.External.AuthChoice = authChoiceInt

								authChoiceInt.Md5AuthKey = v.(string)

							}

							if v, ok := cs["no_authentication"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

								authChoiceTypeFound = true

								if v.(bool) {
									authChoiceInt := &ves_io_schema_bgp.PeerExternal_NoAuthentication{}
									authChoiceInt.NoAuthentication = &ves_io_schema.Empty{}
									typeChoiceInt.External.AuthChoice = authChoiceInt
								}

							}

							if v, ok := cs["family_inet"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								familyInet := &ves_io_schema_bgp.FamilyInet{}
								typeChoiceInt.External.FamilyInet = familyInet
								for _, set := range sl {
									if set != nil {
										familyInetMapStrToI := set.(map[string]interface{})

										enableChoiceTypeFound := false

										if v, ok := familyInetMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Disable{}
												enableChoiceInt.Disable = &ves_io_schema.Empty{}
												familyInet.EnableChoice = enableChoiceInt
											}

										}

										if v, ok := familyInetMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet_Enable{}
												enableChoiceInt.Enable = &ves_io_schema.Empty{}
												familyInet.EnableChoice = enableChoiceInt
											}

										}

									}
								}

							}

							if v, ok := cs["family_inet_v6"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								familyInetV6 := &ves_io_schema_bgp.FamilyInet6{}
								typeChoiceInt.External.FamilyInetV6 = familyInetV6
								for _, set := range sl {
									if set != nil {
										familyInetV6MapStrToI := set.(map[string]interface{})

										enableChoiceTypeFound := false

										if v, ok := familyInetV6MapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet6_Disable{}
												enableChoiceInt.Disable = &ves_io_schema.Empty{}
												familyInetV6.EnableChoice = enableChoiceInt
											}

										}

										if v, ok := familyInetV6MapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

											enableChoiceTypeFound = true

											if v.(bool) {
												enableChoiceInt := &ves_io_schema_bgp.FamilyInet6_Enable{}
												enableChoiceInt.Enable = &ves_io_schema.Empty{}
												familyInetV6.EnableChoice = enableChoiceInt
											}

										}

									}
								}

							}

							interfaceChoiceTypeFound := false

							if v, ok := cs["interface"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

								interfaceChoiceTypeFound = true
								interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_Interface{}
								interfaceChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
								typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											interfaceChoiceInt.Interface.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := cs["interface_list"]; ok && !isIntfNil(v) && !interfaceChoiceTypeFound {

								interfaceChoiceTypeFound = true
								interfaceChoiceInt := &ves_io_schema_bgp.PeerExternal_InterfaceList{}
								interfaceChoiceInt.InterfaceList = &ves_io_schema_bgp.InterfaceList{}
								typeChoiceInt.External.InterfaceChoice = interfaceChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["interfaces"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											interfacesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
											interfaceChoiceInt.InterfaceList.Interfaces = interfacesInt
											for i, ps := range sl {

												iMapToStrVal := ps.(map[string]interface{})
												interfacesInt[i] = &ves_io_schema_views.ObjectRefType{}

												if v, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
													interfacesInt[i].Name = v.(string)
												}

												if v, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													interfacesInt[i].Namespace = v.(string)
												}

												if v, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													interfacesInt[i].Tenant = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								typeChoiceInt.External.Port = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.SiteVirtualSiteRefSelector{}
		updateSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.SiteVirtualSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra Bgp obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_bgp.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating Bgp: %s", err)
	}

	return resourceVolterraBgpRead(d, meta)
}

func resourceVolterraBgpDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Bgp %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Bgp before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra Bgp obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_bgp.ObjectType, namespace, name, opts...)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_bgp_routing_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_routing_policy"
)

// resourceVolterraBgpRoutingPolicy is implementation of Volterra's BgpRoutingPolicy resources
func resourceVolterraBgpRoutingPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraBgpRoutingPolicyCreate,
		Read:   resourceVolterraBgpRoutingPolicyRead,
		Update: resourceVolterraBgpRoutingPolicyUpdate,
		Delete: resourceVolterraBgpRoutingPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"rules": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"action": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"aggregate": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"allow": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"as_path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"community": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"community": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"deny": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"local_preference": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"metric": {

										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"match": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"as_path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"community": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"community": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"ip_prefixes": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"prefixes": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_prefixes": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"equal_or_longer_than": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"exact_match": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"longer_than": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraBgpRoutingPolicyCreate creates BgpRoutingPolicy resource
func resourceVolterraBgpRoutingPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_bgp_routing_policy.CreateSpecType{}
	createReq := &ves_io_schema_bgp_routing_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_bgp_routing_policy.BgpRoutePolicy, len(sl))
		createSpec.Rules = rules
		for i, set := range sl {
			if set != nil {
				rules[i] = &ves_io_schema_bgp_routing_policy.BgpRoutePolicy{}
				rulesMapStrToI := set.(map[string]interface{})

				if v, ok := rulesMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema_bgp_routing_policy.BgpRouteAction{}
					rules[i].Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeTypeFound := false

							if v, ok := actionMapStrToI["aggregate"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Aggregate{}
									actionTypeInt.Aggregate = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Allow{}
									actionTypeInt.Allow = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["as_path"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_AsPath{}

								action.ActionType = actionTypeInt

								actionTypeInt.AsPath = v.(string)

							}

							if v, ok := actionMapStrToI["community"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Community{}
								actionTypeInt.Community = &ves_io_schema_bgp_routing_policy.BgpCommunity{}
								action.ActionType = actionTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["community"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field community")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											actionTypeInt.Community.Community = ls

										}

									}
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Deny{}
									actionTypeInt.Deny = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["local_preference"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_LocalPreference{}

								action.ActionType = actionTypeInt

								actionTypeInt.LocalPreference = uint32(v.(int))

							}

							if v, ok := actionMapStrToI["metric"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Metric{}

								action.ActionType = actionTypeInt

								actionTypeInt.Metric = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["match"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					match := &ves_io_schema_bgp_routing_policy.BgpRouteMatch{}
					rules[i].Match = match
					for _, set := range sl {
						if set != nil {
							matchMapStrToI := set.(map[string]interface{})

							typeOfMatchTypeFound := false

							if v, ok := matchMapStrToI["as_path"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_AsPath{}

								match.TypeOfMatch = typeOfMatchInt

								typeOfMatchInt.AsPath = v.(string)

							}

							if v, ok := matchMapStrToI["community"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_Community{}
								typeOfMatchInt.Community = &ves_io_schema_bgp_routing_policy.BgpCommunity{}
								match.TypeOfMatch = typeOfMatchInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["community"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field community")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											typeOfMatchInt.Community.Community = ls

										}

									}
								}

							}

							if v, ok := matchMapStrToI["ip_prefixes"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_IpPrefixes{}
								typeOfMatchInt.IpPrefixes = &ves_io_schema_bgp_routing_policy.BgpPrefixMatchList{}
								match.TypeOfMatch = typeOfMatchInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											prefixes := make([]*ves_io_schema_bgp_routing_policy.BgpPrefixMatch, len(sl))
											typeOfMatchInt.IpPrefixes.Prefixes = prefixes
											for i, set := range sl {
												if set != nil {
													prefixes[i] = &ves_io_schema_bgp_routing_policy.BgpPrefixMatch{}
													prefixesMapStrToI := set.(map[string]interface{})

													if w, ok := prefixesMapStrToI["ip_prefixes"]; ok && !isIntfNil(w) {
														prefixes[i].IpPrefixes = w.(string)
													}

													prefixLengthMatchTypeFound := false

													if v, ok := prefixesMapStrToI["equal_or_longer_than"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_EqualOrLongerThan{}
															prefixLengthMatchInt.EqualOrLongerThan = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

													if v, ok := prefixesMapStrToI["exact_match"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_ExactMatch{}
															prefixLengthMatchInt.ExactMatch = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

													if v, ok := prefixesMapStrToI["longer_than"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_LongerThan{}
															prefixLengthMatchInt.LongerThan = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra BgpRoutingPolicy object with struct: %+v", createReq)

	createBgpRoutingPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_bgp_routing_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating BgpRoutingPolicy: %s", err)
	}
	d.SetId(createBgpRoutingPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraBgpRoutingPolicyRead(d, meta)
}

func resourceVolterraBgpRoutingPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_bgp_routing_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] BgpRoutingPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra BgpRoutingPolicy %q: %s", d.Id(), err)
	}
	return setBgpRoutingPolicyFields(client, d, resp)
}

func setBgpRoutingPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraBgpRoutingPolicyUpdate updates BgpRoutingPolicy resource
func resourceVolterraBgpRoutingPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_bgp_routing_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_bgp_routing_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_bgp_routing_policy.BgpRoutePolicy, len(sl))
		updateSpec.Rules = rules
		for i, set := range sl {
			if set != nil {
				rules[i] = &ves_io_schema_bgp_routing_policy.BgpRoutePolicy{}
				rulesMapStrToI := set.(map[string]interface{})

				if v, ok := rulesMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema_bgp_routing_policy.BgpRouteAction{}
					rules[i].Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionTypeTypeFound := false

							if v, ok := actionMapStrToI["aggregate"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Aggregate{}
									actionTypeInt.Aggregate = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["allow"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Allow{}
									actionTypeInt.Allow = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["as_path"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_AsPath{}

								action.ActionType = actionTypeInt

								actionTypeInt.AsPath = v.(string)

							}

							if v, ok := actionMapStrToI["community"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Community{}
								actionTypeInt.Community = &ves_io_schema_bgp_routing_policy.BgpCommunity{}
								action.ActionType = actionTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["community"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field community")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											actionTypeInt.Community.Community = ls

										}

									}
								}

							}

							if v, ok := actionMapStrToI["deny"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true

								if v.(bool) {
									actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Deny{}
									actionTypeInt.Deny = &ves_io_schema.Empty{}
									action.ActionType = actionTypeInt
								}

							}

							if v, ok := actionMapStrToI["local_preference"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_LocalPreference{}

								action.ActionType = actionTypeInt

								actionTypeInt.LocalPreference = uint32(v.(int))

							}

							if v, ok := actionMapStrToI["metric"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

								actionTypeTypeFound = true
								actionTypeInt := &ves_io_schema_bgp_routing_policy.BgpRouteAction_Metric{}

								action.ActionType = actionTypeInt

								actionTypeInt.Metric = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["match"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					match := &ves_io_schema_bgp_routing_policy.BgpRouteMatch{}
					rules[i].Match = match
					for _, set := range sl {
						if set != nil {
							matchMapStrToI := set.(map[string]interface{})

							typeOfMatchTypeFound := false

							if v, ok := matchMapStrToI["as_path"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_AsPath{}

								match.TypeOfMatch = typeOfMatchInt

								typeOfMatchInt.AsPath = v.(string)

							}

							if v, ok := matchMapStrToI["community"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_Community{}
								typeOfMatchInt.Community = &ves_io_schema_bgp_routing_policy.BgpCommunity{}
								match.TypeOfMatch = typeOfMatchInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["community"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field community")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											typeOfMatchInt.Community.Community = ls

										}

									}
								}

							}

							if v, ok := matchMapStrToI["ip_prefixes"]; ok && !isIntfNil(v) && !typeOfMatchTypeFound {

								typeOfMatchTypeFound = true
								typeOfMatchInt := &ves_io_schema_bgp_routing_policy.BgpRouteMatch_IpPrefixes{}
								typeOfMatchInt.IpPrefixes = &ves_io_schema_bgp_routing_policy.BgpPrefixMatchList{}
								match.TypeOfMatch = typeOfMatchInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											prefixes := make([]*ves_io_schema_bgp_routing_policy.BgpPrefixMatch, len(sl))
											typeOfMatchInt.IpPrefixes.Prefixes = prefixes
											for i, set := range sl {
												if set != nil {
													prefixes[i] = &ves_io_schema_bgp_routing_policy.BgpPrefixMatch{}
													prefixesMapStrToI := set.(map[string]interface{})

													if w, ok := prefixesMapStrToI["ip_prefixes"]; ok && !isIntfNil(w) {
														prefixes[i].IpPrefixes = w.(string)
													}

													prefixLengthMatchTypeFound := false

													if v, ok := prefixesMapStrToI["equal_or_longer_than"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_EqualOrLongerThan{}
															prefixLengthMatchInt.EqualOrLongerThan = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

													if v, ok := prefixesMapStrToI["exact_match"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_ExactMatch{}
															prefixLengthMatchInt.ExactMatch = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

													if v, ok := prefixesMapStrToI["longer_than"]; ok && !isIntfNil(v) && !prefixLengthMatchTypeFound {

														prefixLengthMatchTypeFound = true

														if v.(bool) {
															prefixLengthMatchInt := &ves_io_schema_bgp_routing_policy.BgpPrefixMatch_LongerThan{}
															prefixLengthMatchInt.LongerThan = &ves_io_schema.Empty{}
															prefixes[i].PrefixLengthMatch = prefixLengthMatchInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra BgpRoutingPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_bgp_routing_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating BgpRoutingPolicy: %s", err)
	}

	return resourceVolterraBgpRoutingPolicyRead(d, meta)
}

func resourceVolterraBgpRoutingPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_bgp_routing_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] BgpRoutingPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra BgpRoutingPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra BgpRoutingPolicy obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_bgp_routing_policy.ObjectType, namespace, name, opts...)
}

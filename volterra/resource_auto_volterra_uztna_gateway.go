//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_uztna_gateway "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_gateway"
)

// resourceVolterraUztnaGateway is implementation of Volterra's UztnaGateway resources
func resourceVolterraUztnaGateway() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaGatewayCreate,
		Read:   resourceVolterraUztnaGatewayRead,
		Update: resourceVolterraUztnaGatewayUpdate,
		Delete: resourceVolterraUztnaGatewayDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"big_ip_ce_site": {

				Type:     schema.TypeSet,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"secure_mesh_site": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"private_ip": {

				Type:     schema.TypeSet,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"addr": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"ipv6": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"addr": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaGatewayCreate creates UztnaGateway resource
func resourceVolterraUztnaGatewayCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_uztna_gateway.CreateSpecType{}
	createReq := &ves_io_schema_uztna_uztna_gateway.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//big_ip_ce_site
	if v, ok := d.GetOk("big_ip_ce_site"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		bigIpCeSite := &ves_io_schema_uztna_uztna_gateway.BigIpAccessSiteList{}
		createSpec.BigIpCeSite = bigIpCeSite
		for _, set := range sl {
			bigIpCeSiteMapStrToI := set.(map[string]interface{})

			if v, ok := bigIpCeSiteMapStrToI["secure_mesh_site"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				secureMeshSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				bigIpCeSite.SecureMeshSite = secureMeshSiteInt
				for i, ps := range sl {

					smsMapToStrVal := ps.(map[string]interface{})
					secureMeshSiteInt[i] = &ves_io_schema.ObjectRefType{}

					secureMeshSiteInt[i].Kind = "securemesh_site"

					if v, ok := smsMapToStrVal["name"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Name = v.(string)
					}

					if v, ok := smsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Namespace = v.(string)
					}

					if v, ok := smsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Tenant = v.(string)
					}

					if v, ok := smsMapToStrVal["uid"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	//private_ip
	if v, ok := d.GetOk("private_ip"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		privateIp := &ves_io_schema.IpAddressType{}
		createSpec.PrivateIp = privateIp
		for _, set := range sl {
			privateIpMapStrToI := set.(map[string]interface{})

			verTypeFound := false

			if v, ok := privateIpMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpAddressType_Ipv4{}
				verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
				privateIp.Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["addr"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Addr = v.(string)

					}

				}

			}

			if v, ok := privateIpMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpAddressType_Ipv6{}
				verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
				privateIp.Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["addr"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Addr = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaGateway object with struct: %+v", createReq)

	createUztnaGatewayResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_uztna_gateway.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaGateway: %s", err)
	}
	d.SetId(createUztnaGatewayResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaGatewayRead(d, meta)
}

func resourceVolterraUztnaGatewayRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_gateway.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaGateway %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaGateway %q: %s", d.Id(), err)
	}
	return setUztnaGatewayFields(client, d, resp)
}

func setUztnaGatewayFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaGatewayUpdate updates UztnaGateway resource
func resourceVolterraUztnaGatewayUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_uztna_gateway.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_uztna_gateway.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("big_ip_ce_site"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		bigIpCeSite := &ves_io_schema_uztna_uztna_gateway.BigIpAccessSiteList{}
		updateSpec.BigIpCeSite = bigIpCeSite
		for _, set := range sl {
			bigIpCeSiteMapStrToI := set.(map[string]interface{})

			if v, ok := bigIpCeSiteMapStrToI["secure_mesh_site"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				secureMeshSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				bigIpCeSite.SecureMeshSite = secureMeshSiteInt
				for i, ps := range sl {

					smsMapToStrVal := ps.(map[string]interface{})
					secureMeshSiteInt[i] = &ves_io_schema.ObjectRefType{}

					secureMeshSiteInt[i].Kind = "securemesh_site"

					if v, ok := smsMapToStrVal["name"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Name = v.(string)
					}

					if v, ok := smsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Namespace = v.(string)
					}

					if v, ok := smsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Tenant = v.(string)
					}

					if v, ok := smsMapToStrVal["uid"]; ok && !isIntfNil(v) {
						secureMeshSiteInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("private_ip"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		privateIp := &ves_io_schema.IpAddressType{}
		updateSpec.PrivateIp = privateIp
		for _, set := range sl {
			privateIpMapStrToI := set.(map[string]interface{})

			verTypeFound := false

			if v, ok := privateIpMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpAddressType_Ipv4{}
				verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
				privateIp.Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["addr"]; ok && !isIntfNil(v) {

						verInt.Ipv4.Addr = v.(string)

					}

				}

			}

			if v, ok := privateIpMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

				verTypeFound = true
				verInt := &ves_io_schema.IpAddressType_Ipv6{}
				verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
				privateIp.Ver = verInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["addr"]; ok && !isIntfNil(v) {

						verInt.Ipv6.Addr = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaGateway obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_uztna_gateway.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaGateway: %s", err)
	}

	return resourceVolterraUztnaGatewayRead(d, meta)
}

func resourceVolterraUztnaGatewayDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_gateway.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaGateway %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaGateway before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaGateway obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_uztna_gateway.ObjectType, namespace, name)
}

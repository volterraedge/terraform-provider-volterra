//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_crl "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/crl"
)

// resourceVolterraCrl is implementation of Volterra's Crl resources
func resourceVolterraCrl() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCrlCreate,
		Read:   resourceVolterraCrlRead,
		Update: resourceVolterraCrlUpdate,
		Delete: resourceVolterraCrlDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"http_access": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"path": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"refresh_interval": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"server_address": {
				Type:     schema.TypeString,
				Required: true,
			},

			"server_port": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"timeout": {
				Type:     schema.TypeInt,
				Optional: true,
			},
		},
	}
}

// resourceVolterraCrlCreate creates Crl resource
func resourceVolterraCrlCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_crl.CreateSpecType{}
	createReq := &ves_io_schema_crl.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//access_info_choice

	accessInfoChoiceTypeFound := false

	if v, ok := d.GetOk("http_access"); ok && !isIntfNil(v) && !accessInfoChoiceTypeFound {

		accessInfoChoiceTypeFound = true
		accessInfoChoiceInt := &ves_io_schema_crl.CreateSpecType_HttpAccess{}
		accessInfoChoiceInt.HttpAccess = &ves_io_schema_crl.HTTPAccessInfo{}
		createSpec.AccessInfoChoice = accessInfoChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["path"]; ok && !isIntfNil(v) {

					accessInfoChoiceInt.HttpAccess.Path = v.(string)

				}

			}
		}

	}

	//refresh_interval
	if v, ok := d.GetOk("refresh_interval"); ok && !isIntfNil(v) {

		createSpec.RefreshInterval =
			uint32(v.(int))

	}

	//server_address
	if v, ok := d.GetOk("server_address"); ok && !isIntfNil(v) {

		createSpec.ServerAddress =
			v.(string)

	}

	//server_port
	if v, ok := d.GetOk("server_port"); ok && !isIntfNil(v) {

		createSpec.ServerPort =
			uint32(v.(int))

	}

	//timeout
	if v, ok := d.GetOk("timeout"); ok && !isIntfNil(v) {

		createSpec.Timeout =
			uint32(v.(int))

	}

	log.Printf("[DEBUG] Creating Volterra Crl object with struct: %+v", createReq)

	createCrlResp, err := client.CreateObject(context.Background(), ves_io_schema_crl.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating Crl: %s", err)
	}
	d.SetId(createCrlResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCrlRead(d, meta)
}

func resourceVolterraCrlRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_crl.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Crl %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Crl %q: %s", d.Id(), err)
	}
	return setCrlFields(client, d, resp)
}

func setCrlFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCrlUpdate updates Crl resource
func resourceVolterraCrlUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_crl.ReplaceSpecType{}
	updateReq := &ves_io_schema_crl.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	accessInfoChoiceTypeFound := false

	if v, ok := d.GetOk("http_access"); ok && !isIntfNil(v) && !accessInfoChoiceTypeFound {

		accessInfoChoiceTypeFound = true
		accessInfoChoiceInt := &ves_io_schema_crl.ReplaceSpecType_HttpAccess{}
		accessInfoChoiceInt.HttpAccess = &ves_io_schema_crl.HTTPAccessInfo{}
		updateSpec.AccessInfoChoice = accessInfoChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["path"]; ok && !isIntfNil(v) {

					accessInfoChoiceInt.HttpAccess.Path = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("refresh_interval"); ok && !isIntfNil(v) {

		updateSpec.RefreshInterval =
			uint32(v.(int))

	}

	if v, ok := d.GetOk("server_address"); ok && !isIntfNil(v) {

		updateSpec.ServerAddress =
			v.(string)

	}

	if v, ok := d.GetOk("server_port"); ok && !isIntfNil(v) {

		updateSpec.ServerPort =
			uint32(v.(int))

	}

	if v, ok := d.GetOk("timeout"); ok && !isIntfNil(v) {

		updateSpec.Timeout =
			uint32(v.(int))

	}

	log.Printf("[DEBUG] Updating Volterra Crl obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_crl.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating Crl: %s", err)
	}

	return resourceVolterraCrlRead(d, meta)
}

func resourceVolterraCrlDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_crl.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Crl %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Crl before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra Crl obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_crl.ObjectType, namespace, name, opts...)
}

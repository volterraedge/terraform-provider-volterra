//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_cloud_transit_gateway "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_transit_gateway"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraCloudTransitGateway is implementation of Volterra's CloudTransitGateway resources
func resourceVolterraCloudTransitGateway() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCloudTransitGatewayCreate,
		Read:   resourceVolterraCloudTransitGatewayRead,
		Update: resourceVolterraCloudTransitGatewayUpdate,
		Delete: resourceVolterraCloudTransitGatewayDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"aws": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"aws_region": {
							Type:     schema.TypeString,
							Required: true,
						},

						"cloud_credentials": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"primary_secure_mesh_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"service_vpc": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"subnet_ids": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"vpc_id": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"tgw_asn": {
							Type:       schema.TypeInt,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"existing_tgw": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tgw_asn": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"tgw_id": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"volterra_site_asn": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"new_tgw": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"system_generated": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"user_assigned": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tgw_asn": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"volterra_site_asn": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"reserved_tgw_cidr": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"tgw_cidr": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4": {
										Type:     schema.TypeString,
										Required: true,
									},

									"ipv6": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"volterra_site_asn": {
							Type:       schema.TypeInt,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCloudTransitGatewayCreate creates CloudTransitGateway resource
func resourceVolterraCloudTransitGatewayCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_cloud_transit_gateway.CreateSpecType{}
	createReq := &ves_io_schema_cloud_transit_gateway.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//cloud_choice

	cloudChoiceTypeFound := false

	if v, ok := d.GetOk("aws"); ok && !cloudChoiceTypeFound {

		cloudChoiceTypeFound = true
		cloudChoiceInt := &ves_io_schema_cloud_transit_gateway.CreateSpecType_Aws{}
		cloudChoiceInt.Aws = &ves_io_schema_cloud_transit_gateway.AWSType{}
		createSpec.CloudChoice = cloudChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["aws_region"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.AwsRegion = v.(string)

				}

				if v, ok := cs["cloud_credentials"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cloudCredentialsInt := &ves_io_schema_views.ObjectRefType{}
					cloudChoiceInt.Aws.CloudCredentials = cloudCredentialsInt

					for _, set := range sl {
						if set != nil {
							ccMapToStrVal := set.(map[string]interface{})
							if val, ok := ccMapToStrVal["name"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Name = val.(string)
							}
							if val, ok := ccMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Namespace = val.(string)
							}

							if val, ok := ccMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Tenant = val.(string)
							}
						}
					}

				}

				if v, ok := cs["primary_secure_mesh_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					primarySecureMeshSiteInt := &ves_io_schema_views.ObjectRefType{}
					cloudChoiceInt.Aws.PrimarySecureMeshSite = primarySecureMeshSiteInt

					for _, set := range sl {
						if set != nil {
							psmsMapToStrVal := set.(map[string]interface{})
							if val, ok := psmsMapToStrVal["name"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Name = val.(string)
							}
							if val, ok := psmsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Namespace = val.(string)
							}

							if val, ok := psmsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Tenant = val.(string)
							}
						}
					}

				}

				if v, ok := cs["service_vpc"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serviceVpc := &ves_io_schema_cloud_transit_gateway.ServiceVPCType{}
					cloudChoiceInt.Aws.ServiceVpc = serviceVpc
					for _, set := range sl {
						if set != nil {
							serviceVpcMapStrToI := set.(map[string]interface{})

							if w, ok := serviceVpcMapStrToI["subnet_ids"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								serviceVpc.SubnetIds = ls
							}

							if w, ok := serviceVpcMapStrToI["vpc_id"]; ok && !isIntfNil(w) {
								serviceVpc.VpcId = w.(string)
							}

						}
					}

				}

				if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.TgwAsn = uint32(v.(int))

				}

				tgwChoiceTypeFound := false

				if v, ok := cs["existing_tgw"]; ok && !isIntfNil(v) && !tgwChoiceTypeFound {

					tgwChoiceTypeFound = true
					tgwChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_ExistingTgw{}
					tgwChoiceInt.ExistingTgw = &ves_io_schema_views.ExistingTGWType{}
					cloudChoiceInt.Aws.TgwChoice = tgwChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.TgwAsn = uint32(v.(int))

							}

							if v, ok := cs["tgw_id"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.TgwId = v.(string)

							}

							if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.VolterraSiteAsn = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["new_tgw"]; ok && !isIntfNil(v) && !tgwChoiceTypeFound {

					tgwChoiceTypeFound = true
					tgwChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_NewTgw{}
					tgwChoiceInt.NewTgw = &ves_io_schema_views.TGWParamsType{}
					cloudChoiceInt.Aws.TgwChoice = tgwChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							asnChoiceTypeFound := false

							if v, ok := cs["system_generated"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_views.TGWParamsType_SystemGenerated{}
									asnChoiceInt.SystemGenerated = &ves_io_schema.Empty{}
									tgwChoiceInt.NewTgw.AsnChoice = asnChoiceInt
								}

							}

							if v, ok := cs["user_assigned"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_views.TGWParamsType_UserAssigned{}
								asnChoiceInt.UserAssigned = &ves_io_schema_views.TGWAssignedASNType{}
								tgwChoiceInt.NewTgw.AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

											asnChoiceInt.UserAssigned.TgwAsn = uint32(v.(int))

										}

										if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

											asnChoiceInt.UserAssigned.VolterraSiteAsn = uint32(v.(int))

										}

									}
								}

							}

						}
					}

				}

				tgwCidrChoiceTypeFound := false

				if v, ok := cs["reserved_tgw_cidr"]; ok && !isIntfNil(v) && !tgwCidrChoiceTypeFound {

					tgwCidrChoiceTypeFound = true

					if v.(bool) {
						tgwCidrChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_ReservedTgwCidr{}
						tgwCidrChoiceInt.ReservedTgwCidr = &ves_io_schema.Empty{}
						cloudChoiceInt.Aws.TgwCidrChoice = tgwCidrChoiceInt
					}

				}

				if v, ok := cs["tgw_cidr"]; ok && !isIntfNil(v) && !tgwCidrChoiceTypeFound {

					tgwCidrChoiceTypeFound = true
					tgwCidrChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_TgwCidr{}
					tgwCidrChoiceInt.TgwCidr = &ves_io_schema_views.CloudSubnetParamType{}
					cloudChoiceInt.Aws.TgwCidrChoice = tgwCidrChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4"]; ok && !isIntfNil(v) {

								tgwCidrChoiceInt.TgwCidr.Ipv4 = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								tgwCidrChoiceInt.TgwCidr.Ipv6 = v.(string)

							}

						}
					}

				}

				if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.VolterraSiteAsn = uint32(v.(int))

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra CloudTransitGateway object with struct: %+v", createReq)

	createCloudTransitGatewayResp, err := client.CreateObject(context.Background(), ves_io_schema_cloud_transit_gateway.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CloudTransitGateway: %s", err)
	}
	d.SetId(createCloudTransitGatewayResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCloudTransitGatewayRead(d, meta)
}

func resourceVolterraCloudTransitGatewayRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_cloud_transit_gateway.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CloudTransitGateway %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CloudTransitGateway %q: %s", d.Id(), err)
	}
	return setCloudTransitGatewayFields(client, d, resp)
}

func setCloudTransitGatewayFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCloudTransitGatewayUpdate updates CloudTransitGateway resource
func resourceVolterraCloudTransitGatewayUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_cloud_transit_gateway.ReplaceSpecType{}
	updateReq := &ves_io_schema_cloud_transit_gateway.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	cloudChoiceTypeFound := false

	if v, ok := d.GetOk("aws"); ok && !cloudChoiceTypeFound {

		cloudChoiceTypeFound = true
		cloudChoiceInt := &ves_io_schema_cloud_transit_gateway.ReplaceSpecType_Aws{}
		cloudChoiceInt.Aws = &ves_io_schema_cloud_transit_gateway.AWSType{}
		updateSpec.CloudChoice = cloudChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["aws_region"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.AwsRegion = v.(string)

				}

				if v, ok := cs["cloud_credentials"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cloudCredentialsInt := &ves_io_schema_views.ObjectRefType{}
					cloudChoiceInt.Aws.CloudCredentials = cloudCredentialsInt

					for _, set := range sl {
						if set != nil {
							ccMapToStrVal := set.(map[string]interface{})
							if val, ok := ccMapToStrVal["name"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Name = val.(string)
							}
							if val, ok := ccMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Namespace = val.(string)
							}

							if val, ok := ccMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								cloudCredentialsInt.Tenant = val.(string)
							}
						}
					}

				}

				if v, ok := cs["primary_secure_mesh_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					primarySecureMeshSiteInt := &ves_io_schema_views.ObjectRefType{}
					cloudChoiceInt.Aws.PrimarySecureMeshSite = primarySecureMeshSiteInt

					for _, set := range sl {
						if set != nil {
							psmsMapToStrVal := set.(map[string]interface{})
							if val, ok := psmsMapToStrVal["name"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Name = val.(string)
							}
							if val, ok := psmsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Namespace = val.(string)
							}

							if val, ok := psmsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								primarySecureMeshSiteInt.Tenant = val.(string)
							}
						}
					}

				}

				if v, ok := cs["service_vpc"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serviceVpc := &ves_io_schema_cloud_transit_gateway.ServiceVPCType{}
					cloudChoiceInt.Aws.ServiceVpc = serviceVpc
					for _, set := range sl {
						if set != nil {
							serviceVpcMapStrToI := set.(map[string]interface{})

							if w, ok := serviceVpcMapStrToI["subnet_ids"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								serviceVpc.SubnetIds = ls
							}

							if w, ok := serviceVpcMapStrToI["vpc_id"]; ok && !isIntfNil(w) {
								serviceVpc.VpcId = w.(string)
							}

						}
					}

				}

				if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.TgwAsn = uint32(v.(int))

				}

				tgwChoiceTypeFound := false

				if v, ok := cs["existing_tgw"]; ok && !isIntfNil(v) && !tgwChoiceTypeFound {

					tgwChoiceTypeFound = true
					tgwChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_ExistingTgw{}
					tgwChoiceInt.ExistingTgw = &ves_io_schema_views.ExistingTGWType{}
					cloudChoiceInt.Aws.TgwChoice = tgwChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.TgwAsn = uint32(v.(int))

							}

							if v, ok := cs["tgw_id"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.TgwId = v.(string)

							}

							if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

								tgwChoiceInt.ExistingTgw.VolterraSiteAsn = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["new_tgw"]; ok && !isIntfNil(v) && !tgwChoiceTypeFound {

					tgwChoiceTypeFound = true
					tgwChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_NewTgw{}
					tgwChoiceInt.NewTgw = &ves_io_schema_views.TGWParamsType{}
					cloudChoiceInt.Aws.TgwChoice = tgwChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							asnChoiceTypeFound := false

							if v, ok := cs["system_generated"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_views.TGWParamsType_SystemGenerated{}
									asnChoiceInt.SystemGenerated = &ves_io_schema.Empty{}
									tgwChoiceInt.NewTgw.AsnChoice = asnChoiceInt
								}

							}

							if v, ok := cs["user_assigned"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_views.TGWParamsType_UserAssigned{}
								asnChoiceInt.UserAssigned = &ves_io_schema_views.TGWAssignedASNType{}
								tgwChoiceInt.NewTgw.AsnChoice = asnChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["tgw_asn"]; ok && !isIntfNil(v) {

											asnChoiceInt.UserAssigned.TgwAsn = uint32(v.(int))

										}

										if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

											asnChoiceInt.UserAssigned.VolterraSiteAsn = uint32(v.(int))

										}

									}
								}

							}

						}
					}

				}

				tgwCidrChoiceTypeFound := false

				if v, ok := cs["reserved_tgw_cidr"]; ok && !isIntfNil(v) && !tgwCidrChoiceTypeFound {

					tgwCidrChoiceTypeFound = true

					if v.(bool) {
						tgwCidrChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_ReservedTgwCidr{}
						tgwCidrChoiceInt.ReservedTgwCidr = &ves_io_schema.Empty{}
						cloudChoiceInt.Aws.TgwCidrChoice = tgwCidrChoiceInt
					}

				}

				if v, ok := cs["tgw_cidr"]; ok && !isIntfNil(v) && !tgwCidrChoiceTypeFound {

					tgwCidrChoiceTypeFound = true
					tgwCidrChoiceInt := &ves_io_schema_cloud_transit_gateway.AWSType_TgwCidr{}
					tgwCidrChoiceInt.TgwCidr = &ves_io_schema_views.CloudSubnetParamType{}
					cloudChoiceInt.Aws.TgwCidrChoice = tgwCidrChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4"]; ok && !isIntfNil(v) {

								tgwCidrChoiceInt.TgwCidr.Ipv4 = v.(string)

							}

							if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

								tgwCidrChoiceInt.TgwCidr.Ipv6 = v.(string)

							}

						}
					}

				}

				if v, ok := cs["volterra_site_asn"]; ok && !isIntfNil(v) {

					cloudChoiceInt.Aws.VolterraSiteAsn = uint32(v.(int))

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra CloudTransitGateway obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_cloud_transit_gateway.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CloudTransitGateway: %s", err)
	}

	return resourceVolterraCloudTransitGatewayRead(d, meta)
}

func resourceVolterraCloudTransitGatewayDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_cloud_transit_gateway.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CloudTransitGateway %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CloudTransitGateway before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CloudTransitGateway obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_cloud_transit_gateway.ObjectType, namespace, name)
}

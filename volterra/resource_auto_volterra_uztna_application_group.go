//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_application_uztna_application_group "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/application/uztna_application_group"
)

// resourceVolterraUztnaApplicationGroup is implementation of Volterra's UztnaApplicationGroup resources
func resourceVolterraUztnaApplicationGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaApplicationGroupCreate,
		Read:   resourceVolterraUztnaApplicationGroupRead,
		Update: resourceVolterraUztnaApplicationGroupUpdate,
		Delete: resourceVolterraUztnaApplicationGroupDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"app_tags": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"apptag_list": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"apps": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"app_list": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaApplicationGroupCreate creates UztnaApplicationGroup resource
func resourceVolterraUztnaApplicationGroupCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_application_uztna_application_group.CreateSpecType{}
	createReq := &ves_io_schema_uztna_application_uztna_application_group.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//app_tags
	if v, ok := d.GetOk("app_tags"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTags := &ves_io_schema_uztna_application_uztna_application_group.ApplicationTags{}
		createSpec.AppTags = appTags
		for _, set := range sl {
			if set != nil {
				appTagsMapStrToI := set.(map[string]interface{})

				if v, ok := appTagsMapStrToI["apptag_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apptagListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appTags.ApptagList = apptagListInt
					for i, ps := range sl {

						alMapToStrVal := ps.(map[string]interface{})
						apptagListInt[i] = &ves_io_schema.ObjectRefType{}

						apptagListInt[i].Kind = "uztna_application_tag"

						if v, ok := alMapToStrVal["name"]; ok && !isIntfNil(v) {
							apptagListInt[i].Name = v.(string)
						}

						if v, ok := alMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							apptagListInt[i].Namespace = v.(string)
						}

						if v, ok := alMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							apptagListInt[i].Tenant = v.(string)
						}

						if v, ok := alMapToStrVal["uid"]; ok && !isIntfNil(v) {
							apptagListInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	//apps
	if v, ok := d.GetOk("apps"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apps := &ves_io_schema_uztna_application_uztna_application_group.Applications{}
		createSpec.Apps = apps
		for _, set := range sl {
			if set != nil {
				appsMapStrToI := set.(map[string]interface{})

				if v, ok := appsMapStrToI["app_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					apps.AppList = appListInt
					for i, ps := range sl {

						alMapToStrVal := ps.(map[string]interface{})
						appListInt[i] = &ves_io_schema.ObjectRefType{}

						appListInt[i].Kind = "uztna_application_view"

						if v, ok := alMapToStrVal["name"]; ok && !isIntfNil(v) {
							appListInt[i].Name = v.(string)
						}

						if v, ok := alMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appListInt[i].Namespace = v.(string)
						}

						if v, ok := alMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appListInt[i].Tenant = v.(string)
						}

						if v, ok := alMapToStrVal["uid"]; ok && !isIntfNil(v) {
							appListInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaApplicationGroup object with struct: %+v", createReq)

	createUztnaApplicationGroupResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_application_uztna_application_group.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaApplicationGroup: %s", err)
	}
	d.SetId(createUztnaApplicationGroupResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaApplicationGroupRead(d, meta)
}

func resourceVolterraUztnaApplicationGroupRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_application_uztna_application_group.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaApplicationGroup %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaApplicationGroup %q: %s", d.Id(), err)
	}
	return setUztnaApplicationGroupFields(client, d, resp)
}

func setUztnaApplicationGroupFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaApplicationGroupUpdate updates UztnaApplicationGroup resource
func resourceVolterraUztnaApplicationGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_application_uztna_application_group.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_application_uztna_application_group.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("app_tags"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appTags := &ves_io_schema_uztna_application_uztna_application_group.ApplicationTags{}
		updateSpec.AppTags = appTags
		for _, set := range sl {
			if set != nil {
				appTagsMapStrToI := set.(map[string]interface{})

				if v, ok := appTagsMapStrToI["apptag_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apptagListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appTags.ApptagList = apptagListInt
					for i, ps := range sl {

						alMapToStrVal := ps.(map[string]interface{})
						apptagListInt[i] = &ves_io_schema.ObjectRefType{}

						apptagListInt[i].Kind = "uztna_application_tag"

						if v, ok := alMapToStrVal["name"]; ok && !isIntfNil(v) {
							apptagListInt[i].Name = v.(string)
						}

						if v, ok := alMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							apptagListInt[i].Namespace = v.(string)
						}

						if v, ok := alMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							apptagListInt[i].Tenant = v.(string)
						}

						if v, ok := alMapToStrVal["uid"]; ok && !isIntfNil(v) {
							apptagListInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("apps"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		apps := &ves_io_schema_uztna_application_uztna_application_group.Applications{}
		updateSpec.Apps = apps
		for _, set := range sl {
			if set != nil {
				appsMapStrToI := set.(map[string]interface{})

				if v, ok := appsMapStrToI["app_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appListInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					apps.AppList = appListInt
					for i, ps := range sl {

						alMapToStrVal := ps.(map[string]interface{})
						appListInt[i] = &ves_io_schema.ObjectRefType{}

						appListInt[i].Kind = "uztna_application_view"

						if v, ok := alMapToStrVal["name"]; ok && !isIntfNil(v) {
							appListInt[i].Name = v.(string)
						}

						if v, ok := alMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appListInt[i].Namespace = v.(string)
						}

						if v, ok := alMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appListInt[i].Tenant = v.(string)
						}

						if v, ok := alMapToStrVal["uid"]; ok && !isIntfNil(v) {
							appListInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaApplicationGroup obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_application_uztna_application_group.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaApplicationGroup: %s", err)
	}

	return resourceVolterraUztnaApplicationGroupRead(d, meta)
}

func resourceVolterraUztnaApplicationGroupDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_application_uztna_application_group.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaApplicationGroup %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaApplicationGroup before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaApplicationGroup obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_application_uztna_application_group.ObjectType, namespace, name)
}

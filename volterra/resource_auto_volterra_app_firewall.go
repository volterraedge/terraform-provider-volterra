//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
)

// resourceVolterraAppFirewall is implementation of Volterra's AppFirewall resources
func resourceVolterraAppFirewall() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraAppFirewallCreate,
		Read:   resourceVolterraAppFirewallRead,
		Update: resourceVolterraAppFirewallUpdate,
		Delete: resourceVolterraAppFirewallDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"allow_all_response_codes": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"allowed_response_codes": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"response_code": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeInt,
							},
						},
					},
				},
			},

			"custom_anonymization": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"anonymization_config": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"http_header": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"query_parameter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"query_param_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"default_anonymization": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_anonymization": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"blocking_page": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"blocking_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"response_code": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"use_default_blocking_page": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"ai_risk_based_blocking": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"high_risk_action": {
							Type:     schema.TypeString,
							Required: true,
						},

						"low_risk_action": {
							Type:     schema.TypeString,
							Required: true,
						},

						"medium_risk_action": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"default_detection_settings": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"detection_settings": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"bot_protection_setting": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"good_bot_action": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"malicious_bot_action": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"suspicious_bot_action": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_bot_setting": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"disable_suppression": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_suppression": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"signature_selection_setting": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"attack_type_settings": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disabled_attack_types": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"default_attack_type_settings": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"high_medium_accuracy_signatures": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"high_medium_low_accuracy_signatures": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"only_high_accuracy_signatures": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"disable_staging": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"stage_new_and_updated_signatures": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"staging_period": {
										Type:     schema.TypeInt,
										Required: true,
									},
								},
							},
						},

						"stage_new_signatures": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"staging_period": {
										Type:     schema.TypeInt,
										Required: true,
									},
								},
							},
						},

						"disable_threat_campaigns": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_threat_campaigns": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_violation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"violation_settings": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disabled_violation_types": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"blocking": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"monitoring": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraAppFirewallCreate creates AppFirewall resource
func resourceVolterraAppFirewallCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_app_firewall.CreateSpecType{}
	createReq := &ves_io_schema_app_firewall.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//allowed_response_codes_choice

	allowedResponseCodesChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all_response_codes"); ok && !allowedResponseCodesChoiceTypeFound {

		allowedResponseCodesChoiceTypeFound = true

		if v.(bool) {
			allowedResponseCodesChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_AllowAllResponseCodes{}
			allowedResponseCodesChoiceInt.AllowAllResponseCodes = &ves_io_schema.Empty{}
			createSpec.AllowedResponseCodesChoice = allowedResponseCodesChoiceInt
		}

	}

	if v, ok := d.GetOk("allowed_response_codes"); ok && !isIntfNil(v) && !allowedResponseCodesChoiceTypeFound {

		allowedResponseCodesChoiceTypeFound = true
		allowedResponseCodesChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_AllowedResponseCodes{}
		allowedResponseCodesChoiceInt.AllowedResponseCodes = &ves_io_schema_app_firewall.AllowedResponseCodes{}
		createSpec.AllowedResponseCodesChoice = allowedResponseCodesChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["response_code"]; ok && !isIntfNil(v) {

					ls := make([]uint32, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						ls[i] = uint32(v.(int))
					}
					allowedResponseCodesChoiceInt.AllowedResponseCodes.ResponseCode = ls

				}

			}
		}

	}

	//anonymization_setting

	anonymizationSettingTypeFound := false

	if v, ok := d.GetOk("custom_anonymization"); ok && !isIntfNil(v) && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true
		anonymizationSettingInt := &ves_io_schema_app_firewall.CreateSpecType_CustomAnonymization{}
		anonymizationSettingInt.CustomAnonymization = &ves_io_schema_app_firewall.AnonymizationSetting{}
		createSpec.AnonymizationSetting = anonymizationSettingInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["anonymization_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					anonymizationConfig := make([]*ves_io_schema_app_firewall.AnonymizationConfiguration, len(sl))
					anonymizationSettingInt.CustomAnonymization.AnonymizationConfig = anonymizationConfig
					for i, set := range sl {
						if set != nil {
							anonymizationConfig[i] = &ves_io_schema_app_firewall.AnonymizationConfiguration{}
							anonymizationConfigMapStrToI := set.(map[string]interface{})

							anonymizationChoiceTypeFound := false

							if v, ok := anonymizationConfigMapStrToI["cookie"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_Cookie{}
								anonymizationChoiceInt.Cookie = &ves_io_schema_app_firewall.AnonymizeHttpCookie{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cookie_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.Cookie.CookieName = v.(string)

										}

									}
								}

							}

							if v, ok := anonymizationConfigMapStrToI["http_header"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_HttpHeader{}
								anonymizationChoiceInt.HttpHeader = &ves_io_schema_app_firewall.AnonymizeHttpHeader{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.HttpHeader.HeaderName = v.(string)

										}

									}
								}

							}

							if v, ok := anonymizationConfigMapStrToI["query_parameter"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_QueryParameter{}
								anonymizationChoiceInt.QueryParameter = &ves_io_schema_app_firewall.AnonymizeHttpQueryParameter{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["query_param_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.QueryParameter.QueryParamName = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("default_anonymization"); ok && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true

		if v.(bool) {
			anonymizationSettingInt := &ves_io_schema_app_firewall.CreateSpecType_DefaultAnonymization{}
			anonymizationSettingInt.DefaultAnonymization = &ves_io_schema.Empty{}
			createSpec.AnonymizationSetting = anonymizationSettingInt
		}

	}

	if v, ok := d.GetOk("disable_anonymization"); ok && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true

		if v.(bool) {
			anonymizationSettingInt := &ves_io_schema_app_firewall.CreateSpecType_DisableAnonymization{}
			anonymizationSettingInt.DisableAnonymization = &ves_io_schema.Empty{}
			createSpec.AnonymizationSetting = anonymizationSettingInt
		}

	}

	//blocking_page_choice

	blockingPageChoiceTypeFound := false

	if v, ok := d.GetOk("blocking_page"); ok && !isIntfNil(v) && !blockingPageChoiceTypeFound {

		blockingPageChoiceTypeFound = true
		blockingPageChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_BlockingPage{}
		blockingPageChoiceInt.BlockingPage = &ves_io_schema_app_firewall.CustomBlockingPage{}
		createSpec.BlockingPageChoice = blockingPageChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["blocking_page"]; ok && !isIntfNil(v) {

					blockingPageChoiceInt.BlockingPage.BlockingPage = v.(string)

				}

				if v, ok := cs["response_code"]; ok && !isIntfNil(v) {

					blockingPageChoiceInt.BlockingPage.ResponseCode = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

				}

			}
		}

	}

	if v, ok := d.GetOk("use_default_blocking_page"); ok && !blockingPageChoiceTypeFound {

		blockingPageChoiceTypeFound = true

		if v.(bool) {
			blockingPageChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_UseDefaultBlockingPage{}
			blockingPageChoiceInt.UseDefaultBlockingPage = &ves_io_schema.Empty{}
			createSpec.BlockingPageChoice = blockingPageChoiceInt
		}

	}

	//detection_setting_choice

	detectionSettingChoiceTypeFound := false

	if v, ok := d.GetOk("ai_risk_based_blocking"); ok && !isIntfNil(v) && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true
		detectionSettingChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_AiRiskBasedBlocking{}
		detectionSettingChoiceInt.AiRiskBasedBlocking = &ves_io_schema_app_firewall.AiRiskBasedBlocking{}
		createSpec.DetectionSettingChoice = detectionSettingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["high_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.HighRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

				if v, ok := cs["low_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.LowRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

				if v, ok := cs["medium_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.MediumRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

			}
		}

	}

	if v, ok := d.GetOk("default_detection_settings"); ok && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true

		if v.(bool) {
			detectionSettingChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_DefaultDetectionSettings{}
			detectionSettingChoiceInt.DefaultDetectionSettings = &ves_io_schema.Empty{}
			createSpec.DetectionSettingChoice = detectionSettingChoiceInt
		}

	}

	if v, ok := d.GetOk("detection_settings"); ok && !isIntfNil(v) && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true
		detectionSettingChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_DetectionSettings{}
		detectionSettingChoiceInt.DetectionSettings = &ves_io_schema_app_firewall.DetectionSetting{}
		createSpec.DetectionSettingChoice = detectionSettingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				botProtectionChoiceTypeFound := false

				if v, ok := cs["bot_protection_setting"]; ok && !isIntfNil(v) && !botProtectionChoiceTypeFound {

					botProtectionChoiceTypeFound = true
					botProtectionChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_BotProtectionSetting{}
					botProtectionChoiceInt.BotProtectionSetting = &ves_io_schema_app_firewall.BotProtectionSetting{}
					detectionSettingChoiceInt.DetectionSettings.BotProtectionChoice = botProtectionChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["good_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.GoodBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

							if v, ok := cs["malicious_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.MaliciousBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

							if v, ok := cs["suspicious_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.SuspiciousBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

						}
					}

				}

				if v, ok := cs["default_bot_setting"]; ok && !isIntfNil(v) && !botProtectionChoiceTypeFound {

					botProtectionChoiceTypeFound = true

					if v.(bool) {
						botProtectionChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_DefaultBotSetting{}
						botProtectionChoiceInt.DefaultBotSetting = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.BotProtectionChoice = botProtectionChoiceInt
					}

				}

				falsePositiveSuppressionTypeFound := false

				if v, ok := cs["disable_suppression"]; ok && !isIntfNil(v) && !falsePositiveSuppressionTypeFound {

					falsePositiveSuppressionTypeFound = true

					if v.(bool) {
						falsePositiveSuppressionInt := &ves_io_schema_app_firewall.DetectionSetting_DisableSuppression{}
						falsePositiveSuppressionInt.DisableSuppression = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.FalsePositiveSuppression = falsePositiveSuppressionInt
					}

				}

				if v, ok := cs["enable_suppression"]; ok && !isIntfNil(v) && !falsePositiveSuppressionTypeFound {

					falsePositiveSuppressionTypeFound = true

					if v.(bool) {
						falsePositiveSuppressionInt := &ves_io_schema_app_firewall.DetectionSetting_EnableSuppression{}
						falsePositiveSuppressionInt.EnableSuppression = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.FalsePositiveSuppression = falsePositiveSuppressionInt
					}

				}

				if v, ok := cs["signature_selection_setting"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					signatureSelectionSetting := &ves_io_schema_app_firewall.SignatureSelectionSetting{}
					detectionSettingChoiceInt.DetectionSettings.SignatureSelectionSetting = signatureSelectionSetting
					for _, set := range sl {
						if set != nil {
							signatureSelectionSettingMapStrToI := set.(map[string]interface{})

							attackTypeSettingTypeFound := false

							if v, ok := signatureSelectionSettingMapStrToI["attack_type_settings"]; ok && !isIntfNil(v) && !attackTypeSettingTypeFound {

								attackTypeSettingTypeFound = true
								attackTypeSettingInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_AttackTypeSettings{}
								attackTypeSettingInt.AttackTypeSettings = &ves_io_schema_app_firewall.AttackTypeSettings{}
								signatureSelectionSetting.AttackTypeSetting = attackTypeSettingInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["disabled_attack_types"]; ok && !isIntfNil(v) {

											disabled_attack_typesList := []ves_io_schema_app_firewall.AttackType{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field disabled_attack_types")
												}
												disabled_attack_typesList = append(disabled_attack_typesList, ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[j.(string)]))
											}
											attackTypeSettingInt.AttackTypeSettings.DisabledAttackTypes = disabled_attack_typesList

										}

									}
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["default_attack_type_settings"]; ok && !isIntfNil(v) && !attackTypeSettingTypeFound {

								attackTypeSettingTypeFound = true

								if v.(bool) {
									attackTypeSettingInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_DefaultAttackTypeSettings{}
									attackTypeSettingInt.DefaultAttackTypeSettings = &ves_io_schema.Empty{}
									signatureSelectionSetting.AttackTypeSetting = attackTypeSettingInt
								}

							}

							signatureSelectionByAccuracyTypeFound := false

							if v, ok := signatureSelectionSettingMapStrToI["high_medium_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_HighMediumAccuracySignatures{}
									signatureSelectionByAccuracyInt.HighMediumAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["high_medium_low_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_HighMediumLowAccuracySignatures{}
									signatureSelectionByAccuracyInt.HighMediumLowAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["only_high_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_OnlyHighAccuracySignatures{}
									signatureSelectionByAccuracyInt.OnlyHighAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

						}
					}

				}

				signaturesStagingSettingsTypeFound := false

				if v, ok := cs["disable_staging"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true

					if v.(bool) {
						signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_DisableStaging{}
						signaturesStagingSettingsInt.DisableStaging = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt
					}

				}

				if v, ok := cs["stage_new_and_updated_signatures"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true
					signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_StageNewAndUpdatedSignatures{}
					signaturesStagingSettingsInt.StageNewAndUpdatedSignatures = &ves_io_schema_app_firewall.SignaturesStagingSettings{}
					detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["staging_period"]; ok && !isIntfNil(v) {

								signaturesStagingSettingsInt.StageNewAndUpdatedSignatures.StagingPeriod = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["stage_new_signatures"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true
					signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_StageNewSignatures{}
					signaturesStagingSettingsInt.StageNewSignatures = &ves_io_schema_app_firewall.SignaturesStagingSettings{}
					detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["staging_period"]; ok && !isIntfNil(v) {

								signaturesStagingSettingsInt.StageNewSignatures.StagingPeriod = uint32(v.(int))

							}

						}
					}

				}

				threatCampaignChoiceTypeFound := false

				if v, ok := cs["disable_threat_campaigns"]; ok && !isIntfNil(v) && !threatCampaignChoiceTypeFound {

					threatCampaignChoiceTypeFound = true

					if v.(bool) {
						threatCampaignChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_DisableThreatCampaigns{}
						threatCampaignChoiceInt.DisableThreatCampaigns = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ThreatCampaignChoice = threatCampaignChoiceInt
					}

				}

				if v, ok := cs["enable_threat_campaigns"]; ok && !isIntfNil(v) && !threatCampaignChoiceTypeFound {

					threatCampaignChoiceTypeFound = true

					if v.(bool) {
						threatCampaignChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_EnableThreatCampaigns{}
						threatCampaignChoiceInt.EnableThreatCampaigns = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ThreatCampaignChoice = threatCampaignChoiceInt
					}

				}

				violationDetectionSettingTypeFound := false

				if v, ok := cs["default_violation_settings"]; ok && !isIntfNil(v) && !violationDetectionSettingTypeFound {

					violationDetectionSettingTypeFound = true

					if v.(bool) {
						violationDetectionSettingInt := &ves_io_schema_app_firewall.DetectionSetting_DefaultViolationSettings{}
						violationDetectionSettingInt.DefaultViolationSettings = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ViolationDetectionSetting = violationDetectionSettingInt
					}

				}

				if v, ok := cs["violation_settings"]; ok && !isIntfNil(v) && !violationDetectionSettingTypeFound {

					violationDetectionSettingTypeFound = true
					violationDetectionSettingInt := &ves_io_schema_app_firewall.DetectionSetting_ViolationSettings{}
					violationDetectionSettingInt.ViolationSettings = &ves_io_schema_app_firewall.ViolationSettings{}
					detectionSettingChoiceInt.DetectionSettings.ViolationDetectionSetting = violationDetectionSettingInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["disabled_violation_types"]; ok && !isIntfNil(v) {

								disabled_violation_typesList := []ves_io_schema_app_firewall.AppFirewallViolationType{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field disabled_violation_types")
									}
									disabled_violation_typesList = append(disabled_violation_typesList, ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[j.(string)]))
								}
								violationDetectionSettingInt.ViolationSettings.DisabledViolationTypes = disabled_violation_typesList

							}

						}
					}

				}

			}
		}

	}

	//enforcement_mode_choice

	enforcementModeChoiceTypeFound := false

	if v, ok := d.GetOk("blocking"); ok && !enforcementModeChoiceTypeFound {

		enforcementModeChoiceTypeFound = true

		if v.(bool) {
			enforcementModeChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_Blocking{}
			enforcementModeChoiceInt.Blocking = &ves_io_schema.Empty{}
			createSpec.EnforcementModeChoice = enforcementModeChoiceInt
		}

	}

	if v, ok := d.GetOk("monitoring"); ok && !enforcementModeChoiceTypeFound {

		enforcementModeChoiceTypeFound = true

		if v.(bool) {
			enforcementModeChoiceInt := &ves_io_schema_app_firewall.CreateSpecType_Monitoring{}
			enforcementModeChoiceInt.Monitoring = &ves_io_schema.Empty{}
			createSpec.EnforcementModeChoice = enforcementModeChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra AppFirewall object with struct: %+v", createReq)

	createAppFirewallResp, err := client.CreateObject(context.Background(), ves_io_schema_app_firewall.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating AppFirewall: %s", err)
	}
	d.SetId(createAppFirewallResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraAppFirewallRead(d, meta)
}

func resourceVolterraAppFirewallRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_app_firewall.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppFirewall %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppFirewall %q: %s", d.Id(), err)
	}
	return setAppFirewallFields(client, d, resp)
}

func setAppFirewallFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraAppFirewallUpdate updates AppFirewall resource
func resourceVolterraAppFirewallUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_app_firewall.ReplaceSpecType{}
	updateReq := &ves_io_schema_app_firewall.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	allowedResponseCodesChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all_response_codes"); ok && !allowedResponseCodesChoiceTypeFound {

		allowedResponseCodesChoiceTypeFound = true

		if v.(bool) {
			allowedResponseCodesChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_AllowAllResponseCodes{}
			allowedResponseCodesChoiceInt.AllowAllResponseCodes = &ves_io_schema.Empty{}
			updateSpec.AllowedResponseCodesChoice = allowedResponseCodesChoiceInt
		}

	}

	if v, ok := d.GetOk("allowed_response_codes"); ok && !isIntfNil(v) && !allowedResponseCodesChoiceTypeFound {

		allowedResponseCodesChoiceTypeFound = true
		allowedResponseCodesChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_AllowedResponseCodes{}
		allowedResponseCodesChoiceInt.AllowedResponseCodes = &ves_io_schema_app_firewall.AllowedResponseCodes{}
		updateSpec.AllowedResponseCodesChoice = allowedResponseCodesChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["response_code"]; ok && !isIntfNil(v) {

					ls := make([]uint32, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						ls[i] = uint32(v.(int))
					}
					allowedResponseCodesChoiceInt.AllowedResponseCodes.ResponseCode = ls

				}

			}
		}

	}

	anonymizationSettingTypeFound := false

	if v, ok := d.GetOk("custom_anonymization"); ok && !isIntfNil(v) && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true
		anonymizationSettingInt := &ves_io_schema_app_firewall.ReplaceSpecType_CustomAnonymization{}
		anonymizationSettingInt.CustomAnonymization = &ves_io_schema_app_firewall.AnonymizationSetting{}
		updateSpec.AnonymizationSetting = anonymizationSettingInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["anonymization_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					anonymizationConfig := make([]*ves_io_schema_app_firewall.AnonymizationConfiguration, len(sl))
					anonymizationSettingInt.CustomAnonymization.AnonymizationConfig = anonymizationConfig
					for i, set := range sl {
						if set != nil {
							anonymizationConfig[i] = &ves_io_schema_app_firewall.AnonymizationConfiguration{}
							anonymizationConfigMapStrToI := set.(map[string]interface{})

							anonymizationChoiceTypeFound := false

							if v, ok := anonymizationConfigMapStrToI["cookie"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_Cookie{}
								anonymizationChoiceInt.Cookie = &ves_io_schema_app_firewall.AnonymizeHttpCookie{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cookie_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.Cookie.CookieName = v.(string)

										}

									}
								}

							}

							if v, ok := anonymizationConfigMapStrToI["http_header"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_HttpHeader{}
								anonymizationChoiceInt.HttpHeader = &ves_io_schema_app_firewall.AnonymizeHttpHeader{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["header_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.HttpHeader.HeaderName = v.(string)

										}

									}
								}

							}

							if v, ok := anonymizationConfigMapStrToI["query_parameter"]; ok && !isIntfNil(v) && !anonymizationChoiceTypeFound {

								anonymizationChoiceTypeFound = true
								anonymizationChoiceInt := &ves_io_schema_app_firewall.AnonymizationConfiguration_QueryParameter{}
								anonymizationChoiceInt.QueryParameter = &ves_io_schema_app_firewall.AnonymizeHttpQueryParameter{}
								anonymizationConfig[i].AnonymizationChoice = anonymizationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["query_param_name"]; ok && !isIntfNil(v) {

											anonymizationChoiceInt.QueryParameter.QueryParamName = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("default_anonymization"); ok && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true

		if v.(bool) {
			anonymizationSettingInt := &ves_io_schema_app_firewall.ReplaceSpecType_DefaultAnonymization{}
			anonymizationSettingInt.DefaultAnonymization = &ves_io_schema.Empty{}
			updateSpec.AnonymizationSetting = anonymizationSettingInt
		}

	}

	if v, ok := d.GetOk("disable_anonymization"); ok && !anonymizationSettingTypeFound {

		anonymizationSettingTypeFound = true

		if v.(bool) {
			anonymizationSettingInt := &ves_io_schema_app_firewall.ReplaceSpecType_DisableAnonymization{}
			anonymizationSettingInt.DisableAnonymization = &ves_io_schema.Empty{}
			updateSpec.AnonymizationSetting = anonymizationSettingInt
		}

	}

	blockingPageChoiceTypeFound := false

	if v, ok := d.GetOk("blocking_page"); ok && !isIntfNil(v) && !blockingPageChoiceTypeFound {

		blockingPageChoiceTypeFound = true
		blockingPageChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_BlockingPage{}
		blockingPageChoiceInt.BlockingPage = &ves_io_schema_app_firewall.CustomBlockingPage{}
		updateSpec.BlockingPageChoice = blockingPageChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["blocking_page"]; ok && !isIntfNil(v) {

					blockingPageChoiceInt.BlockingPage.BlockingPage = v.(string)

				}

				if v, ok := cs["response_code"]; ok && !isIntfNil(v) {

					blockingPageChoiceInt.BlockingPage.ResponseCode = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

				}

			}
		}

	}

	if v, ok := d.GetOk("use_default_blocking_page"); ok && !blockingPageChoiceTypeFound {

		blockingPageChoiceTypeFound = true

		if v.(bool) {
			blockingPageChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_UseDefaultBlockingPage{}
			blockingPageChoiceInt.UseDefaultBlockingPage = &ves_io_schema.Empty{}
			updateSpec.BlockingPageChoice = blockingPageChoiceInt
		}

	}

	detectionSettingChoiceTypeFound := false

	if v, ok := d.GetOk("ai_risk_based_blocking"); ok && !isIntfNil(v) && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true
		detectionSettingChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_AiRiskBasedBlocking{}
		detectionSettingChoiceInt.AiRiskBasedBlocking = &ves_io_schema_app_firewall.AiRiskBasedBlocking{}
		updateSpec.DetectionSettingChoice = detectionSettingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["high_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.HighRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

				if v, ok := cs["low_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.LowRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

				if v, ok := cs["medium_risk_action"]; ok && !isIntfNil(v) {

					detectionSettingChoiceInt.AiRiskBasedBlocking.MediumRiskAction = ves_io_schema_app_firewall.RiskBasedBlockingAction(ves_io_schema_app_firewall.RiskBasedBlockingAction_value[v.(string)])

				}

			}
		}

	}

	if v, ok := d.GetOk("default_detection_settings"); ok && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true

		if v.(bool) {
			detectionSettingChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_DefaultDetectionSettings{}
			detectionSettingChoiceInt.DefaultDetectionSettings = &ves_io_schema.Empty{}
			updateSpec.DetectionSettingChoice = detectionSettingChoiceInt
		}

	}

	if v, ok := d.GetOk("detection_settings"); ok && !isIntfNil(v) && !detectionSettingChoiceTypeFound {

		detectionSettingChoiceTypeFound = true
		detectionSettingChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_DetectionSettings{}
		detectionSettingChoiceInt.DetectionSettings = &ves_io_schema_app_firewall.DetectionSetting{}
		updateSpec.DetectionSettingChoice = detectionSettingChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				botProtectionChoiceTypeFound := false

				if v, ok := cs["bot_protection_setting"]; ok && !isIntfNil(v) && !botProtectionChoiceTypeFound {

					botProtectionChoiceTypeFound = true
					botProtectionChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_BotProtectionSetting{}
					botProtectionChoiceInt.BotProtectionSetting = &ves_io_schema_app_firewall.BotProtectionSetting{}
					detectionSettingChoiceInt.DetectionSettings.BotProtectionChoice = botProtectionChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["good_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.GoodBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

							if v, ok := cs["malicious_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.MaliciousBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

							if v, ok := cs["suspicious_bot_action"]; ok && !isIntfNil(v) {

								botProtectionChoiceInt.BotProtectionSetting.SuspiciousBotAction = ves_io_schema_app_firewall.BotAction(ves_io_schema_app_firewall.BotAction_value[v.(string)])

							}

						}
					}

				}

				if v, ok := cs["default_bot_setting"]; ok && !isIntfNil(v) && !botProtectionChoiceTypeFound {

					botProtectionChoiceTypeFound = true

					if v.(bool) {
						botProtectionChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_DefaultBotSetting{}
						botProtectionChoiceInt.DefaultBotSetting = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.BotProtectionChoice = botProtectionChoiceInt
					}

				}

				falsePositiveSuppressionTypeFound := false

				if v, ok := cs["disable_suppression"]; ok && !isIntfNil(v) && !falsePositiveSuppressionTypeFound {

					falsePositiveSuppressionTypeFound = true

					if v.(bool) {
						falsePositiveSuppressionInt := &ves_io_schema_app_firewall.DetectionSetting_DisableSuppression{}
						falsePositiveSuppressionInt.DisableSuppression = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.FalsePositiveSuppression = falsePositiveSuppressionInt
					}

				}

				if v, ok := cs["enable_suppression"]; ok && !isIntfNil(v) && !falsePositiveSuppressionTypeFound {

					falsePositiveSuppressionTypeFound = true

					if v.(bool) {
						falsePositiveSuppressionInt := &ves_io_schema_app_firewall.DetectionSetting_EnableSuppression{}
						falsePositiveSuppressionInt.EnableSuppression = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.FalsePositiveSuppression = falsePositiveSuppressionInt
					}

				}

				if v, ok := cs["signature_selection_setting"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					signatureSelectionSetting := &ves_io_schema_app_firewall.SignatureSelectionSetting{}
					detectionSettingChoiceInt.DetectionSettings.SignatureSelectionSetting = signatureSelectionSetting
					for _, set := range sl {
						if set != nil {
							signatureSelectionSettingMapStrToI := set.(map[string]interface{})

							attackTypeSettingTypeFound := false

							if v, ok := signatureSelectionSettingMapStrToI["attack_type_settings"]; ok && !isIntfNil(v) && !attackTypeSettingTypeFound {

								attackTypeSettingTypeFound = true
								attackTypeSettingInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_AttackTypeSettings{}
								attackTypeSettingInt.AttackTypeSettings = &ves_io_schema_app_firewall.AttackTypeSettings{}
								signatureSelectionSetting.AttackTypeSetting = attackTypeSettingInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["disabled_attack_types"]; ok && !isIntfNil(v) {

											disabled_attack_typesList := []ves_io_schema_app_firewall.AttackType{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field disabled_attack_types")
												}
												disabled_attack_typesList = append(disabled_attack_typesList, ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[j.(string)]))
											}
											attackTypeSettingInt.AttackTypeSettings.DisabledAttackTypes = disabled_attack_typesList

										}

									}
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["default_attack_type_settings"]; ok && !isIntfNil(v) && !attackTypeSettingTypeFound {

								attackTypeSettingTypeFound = true

								if v.(bool) {
									attackTypeSettingInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_DefaultAttackTypeSettings{}
									attackTypeSettingInt.DefaultAttackTypeSettings = &ves_io_schema.Empty{}
									signatureSelectionSetting.AttackTypeSetting = attackTypeSettingInt
								}

							}

							signatureSelectionByAccuracyTypeFound := false

							if v, ok := signatureSelectionSettingMapStrToI["high_medium_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_HighMediumAccuracySignatures{}
									signatureSelectionByAccuracyInt.HighMediumAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["high_medium_low_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_HighMediumLowAccuracySignatures{}
									signatureSelectionByAccuracyInt.HighMediumLowAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

							if v, ok := signatureSelectionSettingMapStrToI["only_high_accuracy_signatures"]; ok && !isIntfNil(v) && !signatureSelectionByAccuracyTypeFound {

								signatureSelectionByAccuracyTypeFound = true

								if v.(bool) {
									signatureSelectionByAccuracyInt := &ves_io_schema_app_firewall.SignatureSelectionSetting_OnlyHighAccuracySignatures{}
									signatureSelectionByAccuracyInt.OnlyHighAccuracySignatures = &ves_io_schema.Empty{}
									signatureSelectionSetting.SignatureSelectionByAccuracy = signatureSelectionByAccuracyInt
								}

							}

						}
					}

				}

				signaturesStagingSettingsTypeFound := false

				if v, ok := cs["disable_staging"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true

					if v.(bool) {
						signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_DisableStaging{}
						signaturesStagingSettingsInt.DisableStaging = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt
					}

				}

				if v, ok := cs["stage_new_and_updated_signatures"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true
					signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_StageNewAndUpdatedSignatures{}
					signaturesStagingSettingsInt.StageNewAndUpdatedSignatures = &ves_io_schema_app_firewall.SignaturesStagingSettings{}
					detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["staging_period"]; ok && !isIntfNil(v) {

								signaturesStagingSettingsInt.StageNewAndUpdatedSignatures.StagingPeriod = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["stage_new_signatures"]; ok && !isIntfNil(v) && !signaturesStagingSettingsTypeFound {

					signaturesStagingSettingsTypeFound = true
					signaturesStagingSettingsInt := &ves_io_schema_app_firewall.DetectionSetting_StageNewSignatures{}
					signaturesStagingSettingsInt.StageNewSignatures = &ves_io_schema_app_firewall.SignaturesStagingSettings{}
					detectionSettingChoiceInt.DetectionSettings.SignaturesStagingSettings = signaturesStagingSettingsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["staging_period"]; ok && !isIntfNil(v) {

								signaturesStagingSettingsInt.StageNewSignatures.StagingPeriod = uint32(v.(int))

							}

						}
					}

				}

				threatCampaignChoiceTypeFound := false

				if v, ok := cs["disable_threat_campaigns"]; ok && !isIntfNil(v) && !threatCampaignChoiceTypeFound {

					threatCampaignChoiceTypeFound = true

					if v.(bool) {
						threatCampaignChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_DisableThreatCampaigns{}
						threatCampaignChoiceInt.DisableThreatCampaigns = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ThreatCampaignChoice = threatCampaignChoiceInt
					}

				}

				if v, ok := cs["enable_threat_campaigns"]; ok && !isIntfNil(v) && !threatCampaignChoiceTypeFound {

					threatCampaignChoiceTypeFound = true

					if v.(bool) {
						threatCampaignChoiceInt := &ves_io_schema_app_firewall.DetectionSetting_EnableThreatCampaigns{}
						threatCampaignChoiceInt.EnableThreatCampaigns = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ThreatCampaignChoice = threatCampaignChoiceInt
					}

				}

				violationDetectionSettingTypeFound := false

				if v, ok := cs["default_violation_settings"]; ok && !isIntfNil(v) && !violationDetectionSettingTypeFound {

					violationDetectionSettingTypeFound = true

					if v.(bool) {
						violationDetectionSettingInt := &ves_io_schema_app_firewall.DetectionSetting_DefaultViolationSettings{}
						violationDetectionSettingInt.DefaultViolationSettings = &ves_io_schema.Empty{}
						detectionSettingChoiceInt.DetectionSettings.ViolationDetectionSetting = violationDetectionSettingInt
					}

				}

				if v, ok := cs["violation_settings"]; ok && !isIntfNil(v) && !violationDetectionSettingTypeFound {

					violationDetectionSettingTypeFound = true
					violationDetectionSettingInt := &ves_io_schema_app_firewall.DetectionSetting_ViolationSettings{}
					violationDetectionSettingInt.ViolationSettings = &ves_io_schema_app_firewall.ViolationSettings{}
					detectionSettingChoiceInt.DetectionSettings.ViolationDetectionSetting = violationDetectionSettingInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["disabled_violation_types"]; ok && !isIntfNil(v) {

								disabled_violation_typesList := []ves_io_schema_app_firewall.AppFirewallViolationType{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field disabled_violation_types")
									}
									disabled_violation_typesList = append(disabled_violation_typesList, ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[j.(string)]))
								}
								violationDetectionSettingInt.ViolationSettings.DisabledViolationTypes = disabled_violation_typesList

							}

						}
					}

				}

			}
		}

	}

	enforcementModeChoiceTypeFound := false

	if v, ok := d.GetOk("blocking"); ok && !enforcementModeChoiceTypeFound {

		enforcementModeChoiceTypeFound = true

		if v.(bool) {
			enforcementModeChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_Blocking{}
			enforcementModeChoiceInt.Blocking = &ves_io_schema.Empty{}
			updateSpec.EnforcementModeChoice = enforcementModeChoiceInt
		}

	}

	if v, ok := d.GetOk("monitoring"); ok && !enforcementModeChoiceTypeFound {

		enforcementModeChoiceTypeFound = true

		if v.(bool) {
			enforcementModeChoiceInt := &ves_io_schema_app_firewall.ReplaceSpecType_Monitoring{}
			enforcementModeChoiceInt.Monitoring = &ves_io_schema.Empty{}
			updateSpec.EnforcementModeChoice = enforcementModeChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra AppFirewall obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_app_firewall.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating AppFirewall: %s", err)
	}

	return resourceVolterraAppFirewallRead(d, meta)
}

func resourceVolterraAppFirewallDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_app_firewall.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppFirewall %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppFirewall before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra AppFirewall obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_app_firewall.ObjectType, namespace, name, opts...)
}

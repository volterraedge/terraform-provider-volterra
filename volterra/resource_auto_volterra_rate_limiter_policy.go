//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
)

// resourceVolterraRateLimiterPolicy is implementation of Volterra's RateLimiterPolicy resources
func resourceVolterraRateLimiterPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraRateLimiterPolicyCreate,
		Read:   resourceVolterraRateLimiterPolicyRead,
		Update: resourceVolterraRateLimiterPolicyUpdate,
		Delete: resourceVolterraRateLimiterPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"metadata": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"disable": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"spec": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"apply_rate_limiter": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"bypass_rate_limiter": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"custom_rate_limiter": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"domain_matcher": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"regex_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"headers": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"check_not_present": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"check_present": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"item": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"http_method": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"path": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"prefix_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"regex_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"transformers": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"any_server": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"server_name": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"server_name_matcher": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"exact_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"regex_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"server_selector": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expressions": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraRateLimiterPolicyCreate creates RateLimiterPolicy resource
func resourceVolterraRateLimiterPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_rate_limiter_policy.CreateSpecType{}
	createReq := &ves_io_schema_views_rate_limiter_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_views_rate_limiter_policy.RateLimiterRule, len(sl))
		createSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_views_rate_limiter_policy.RateLimiterRule{}
			rulesMapStrToI := set.(map[string]interface{})

			if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				rules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				spec := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec{}
				rules[i].Spec = spec
				for _, set := range sl {
					specMapStrToI := set.(map[string]interface{})

					actionChoiceTypeFound := false

					if v, ok := specMapStrToI["apply_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_ApplyRateLimiter{}
							actionChoiceInt.ApplyRateLimiter = &ves_io_schema.Empty{}
							spec.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := specMapStrToI["bypass_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_BypassRateLimiter{}
							actionChoiceInt.BypassRateLimiter = &ves_io_schema.Empty{}
							spec.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := specMapStrToI["custom_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true
						actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_CustomRateLimiter{}
						actionChoiceInt.CustomRateLimiter = &ves_io_schema_views.ObjectRefType{}
						spec.ActionChoice = actionChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
						spec.DomainMatcher = domainMatcher
						for _, set := range sl {
							domainMatcherMapStrToI := set.(map[string]interface{})

							if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								domainMatcher.ExactValues = ls
							}

							if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								domainMatcher.RegexValues = ls
							}

						}

					}

					if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
						spec.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								headers[i].InvertMatcher = w.(bool)
							}

							matchTypeFound := false

							if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true

								if v.(bool) {
									matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
									matchInt.CheckNotPresent = &ves_io_schema.Empty{}
									headers[i].Match = matchInt
								}

							}

							if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true

								if v.(bool) {
									matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
									matchInt.CheckPresent = &ves_io_schema.Empty{}
									headers[i].Match = matchInt
								}

							}

							if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true
								matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
								matchInt.Item = &ves_io_schema_policy.MatcherType{}
								headers[i].Match = matchInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										matchInt.Item.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										matchInt.Item.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										matchInt.Item.Transformers = transformersList

									}

								}

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true
								matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

								headers[i].Match = matchInt

								matchInt.Presence = v.(bool)

							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

						}

					}

					if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						spec.HttpMethod = httpMethod
						for _, set := range sl {
							httpMethodMapStrToI := set.(map[string]interface{})

							if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								httpMethod.InvertMatcher = w.(bool)
							}

							if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								httpMethod.Methods = methodsList

							}

						}

					}

					if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						path := &ves_io_schema_policy.PathMatcherType{}
						spec.Path = path
						for _, set := range sl {
							pathMapStrToI := set.(map[string]interface{})

							if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.ExactValues = ls
							}

							if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.PrefixValues = ls
							}

							if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.RegexValues = ls
							}

							if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

								transformersList := []ves_io_schema_policy.Transformer{}
								for _, j := range v.([]interface{}) {
									transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
								}
								path.Transformers = transformersList

							}

						}

					}

				}

			}

		}

	}

	//server_choice

	serverChoiceTypeFound := false

	if v, ok := d.GetOk("any_server"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true

		if v.(bool) {
			serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.CreateSpecType_AnyServer{}
			serverChoiceInt.AnyServer = &ves_io_schema.Empty{}
			createSpec.ServerChoice = serverChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.CreateSpecType_ServerName{}

		createSpec.ServerChoice = serverChoiceInt

		serverChoiceInt.ServerName = v.(string)

	}

	if v, ok := d.GetOk("server_name_matcher"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.CreateSpecType_ServerNameMatcher{}
		serverChoiceInt.ServerNameMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		createSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.ExactValues = ls

			}

			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.RegexValues = ls

			}

		}

	}

	if v, ok := d.GetOk("server_selector"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.CreateSpecType_ServerSelector{}
		serverChoiceInt.ServerSelector = &ves_io_schema.LabelSelectorType{}
		createSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerSelector.Expressions = ls

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra RateLimiterPolicy object with struct: %+v", createReq)

	createRateLimiterPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_views_rate_limiter_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating RateLimiterPolicy: %s", err)
	}
	d.SetId(createRateLimiterPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraRateLimiterPolicyRead(d, meta)
}

func resourceVolterraRateLimiterPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_rate_limiter_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] RateLimiterPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra RateLimiterPolicy %q: %s", d.Id(), err)
	}
	return setRateLimiterPolicyFields(client, d, resp)
}

func setRateLimiterPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraRateLimiterPolicyUpdate updates RateLimiterPolicy resource
func resourceVolterraRateLimiterPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_rate_limiter_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_rate_limiter_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_views_rate_limiter_policy.RateLimiterRule, len(sl))
		updateSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_views_rate_limiter_policy.RateLimiterRule{}
			rulesMapStrToI := set.(map[string]interface{})

			if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				metadata := &ves_io_schema.MessageMetaType{}
				rules[i].Metadata = metadata
				for _, set := range sl {
					metadataMapStrToI := set.(map[string]interface{})

					if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
						metadata.Description = w.(string)
					}

					if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
						metadata.Disable = w.(bool)
					}

					if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
						metadata.Name = w.(string)
					}

				}

			}

			if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				spec := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec{}
				rules[i].Spec = spec
				for _, set := range sl {
					specMapStrToI := set.(map[string]interface{})

					actionChoiceTypeFound := false

					if v, ok := specMapStrToI["apply_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_ApplyRateLimiter{}
							actionChoiceInt.ApplyRateLimiter = &ves_io_schema.Empty{}
							spec.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := specMapStrToI["bypass_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true

						if v.(bool) {
							actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_BypassRateLimiter{}
							actionChoiceInt.BypassRateLimiter = &ves_io_schema.Empty{}
							spec.ActionChoice = actionChoiceInt
						}

					}

					if v, ok := specMapStrToI["custom_rate_limiter"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

						actionChoiceTypeFound = true
						actionChoiceInt := &ves_io_schema_service_policy_rule.RateLimiterRuleSpec_CustomRateLimiter{}
						actionChoiceInt.CustomRateLimiter = &ves_io_schema_views.ObjectRefType{}
						spec.ActionChoice = actionChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								actionChoiceInt.CustomRateLimiter.Tenant = v.(string)

							}

						}

					}

					if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
						spec.DomainMatcher = domainMatcher
						for _, set := range sl {
							domainMatcherMapStrToI := set.(map[string]interface{})

							if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								domainMatcher.ExactValues = ls
							}

							if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								domainMatcher.RegexValues = ls
							}

						}

					}

					if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
						spec.Headers = headers
						for i, set := range sl {
							headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
							headersMapStrToI := set.(map[string]interface{})

							if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								headers[i].InvertMatcher = w.(bool)
							}

							matchTypeFound := false

							if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true

								if v.(bool) {
									matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
									matchInt.CheckNotPresent = &ves_io_schema.Empty{}
									headers[i].Match = matchInt
								}

							}

							if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true

								if v.(bool) {
									matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
									matchInt.CheckPresent = &ves_io_schema.Empty{}
									headers[i].Match = matchInt
								}

							}

							if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true
								matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
								matchInt.Item = &ves_io_schema_policy.MatcherType{}
								headers[i].Match = matchInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										matchInt.Item.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										matchInt.Item.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										matchInt.Item.Transformers = transformersList

									}

								}

							}

							if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

								matchTypeFound = true
								matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

								headers[i].Match = matchInt

								matchInt.Presence = v.(bool)

							}

							if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
								headers[i].Name = w.(string)
							}

						}

					}

					if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
						spec.HttpMethod = httpMethod
						for _, set := range sl {
							httpMethodMapStrToI := set.(map[string]interface{})

							if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
								httpMethod.InvertMatcher = w.(bool)
							}

							if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

								methodsList := []ves_io_schema.HttpMethod{}
								for _, j := range v.([]interface{}) {
									methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
								}
								httpMethod.Methods = methodsList

							}

						}

					}

					if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						path := &ves_io_schema_policy.PathMatcherType{}
						spec.Path = path
						for _, set := range sl {
							pathMapStrToI := set.(map[string]interface{})

							if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.ExactValues = ls
							}

							if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.PrefixValues = ls
							}

							if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								path.RegexValues = ls
							}

							if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

								transformersList := []ves_io_schema_policy.Transformer{}
								for _, j := range v.([]interface{}) {
									transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
								}
								path.Transformers = transformersList

							}

						}

					}

				}

			}

		}

	}

	serverChoiceTypeFound := false

	if v, ok := d.GetOk("any_server"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true

		if v.(bool) {
			serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.ReplaceSpecType_AnyServer{}
			serverChoiceInt.AnyServer = &ves_io_schema.Empty{}
			updateSpec.ServerChoice = serverChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.ReplaceSpecType_ServerName{}

		updateSpec.ServerChoice = serverChoiceInt

		serverChoiceInt.ServerName = v.(string)

	}

	if v, ok := d.GetOk("server_name_matcher"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.ReplaceSpecType_ServerNameMatcher{}
		serverChoiceInt.ServerNameMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		updateSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.ExactValues = ls

			}

			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.RegexValues = ls

			}

		}

	}

	if v, ok := d.GetOk("server_selector"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_views_rate_limiter_policy.ReplaceSpecType_ServerSelector{}
		serverChoiceInt.ServerSelector = &ves_io_schema.LabelSelectorType{}
		updateSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerSelector.Expressions = ls

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra RateLimiterPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_rate_limiter_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating RateLimiterPolicy: %s", err)
	}

	return resourceVolterraRateLimiterPolicyRead(d, meta)
}

func resourceVolterraRateLimiterPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_rate_limiter_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] RateLimiterPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra RateLimiterPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra RateLimiterPolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_views_rate_limiter_policy.ObjectType, namespace, name)
}

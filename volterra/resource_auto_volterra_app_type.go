//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
)

// resourceVolterraAppType is implementation of Volterra's AppType resources
func resourceVolterraAppType() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraAppTypeCreate,
		Read:   resourceVolterraAppTypeRead,
		Update: resourceVolterraAppTypeUpdate,
		Delete: resourceVolterraAppTypeDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"business_logic_markup_setting": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"discovered_api_settings": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"purge_duration_for_inactive_discovered_apis": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"disable": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"sensitive_data_detection_rules": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"custom_sensitive_data_detection_rules": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"metadata": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"sensitive_data_detection_config": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_domain": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"specific_domain": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"key_pattern": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"key_value_pattern": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key_pattern": {

																			Type:       schema.TypeList,
																			MaxItems:   1,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_value": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"regex_value": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"value_pattern": {

																			Type:       schema.TypeList,
																			MaxItems:   1,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_value": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},

																					"regex_value": {

																						Type:       schema.TypeString,
																						Optional:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},
																	},
																},
															},

															"value_pattern": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"regex_value": {

																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"all_request_sections": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"all_response_sections": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"all_sections": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"custom_sections": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"custom_sections": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_target": {

																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"api_endpoint_target": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"api_endpoint_path": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"methods": {

																			Type: schema.TypeList,

																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"api_group": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"base_path": {

																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"sensitive_data_type": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"type": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"disabled_built_in_rules": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"features": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"type": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraAppTypeCreate creates AppType resource
func resourceVolterraAppTypeCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_app_type.CreateSpecType{}
	createReq := &ves_io_schema_app_type.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//business_logic_markup_setting
	if v, ok := d.GetOk("business_logic_markup_setting"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		businessLogicMarkupSetting := &ves_io_schema_app_type.BusinessLogicMarkupSetting{}
		createSpec.BusinessLogicMarkupSetting = businessLogicMarkupSetting
		for _, set := range sl {
			if set != nil {
				businessLogicMarkupSettingMapStrToI := set.(map[string]interface{})

				if v, ok := businessLogicMarkupSettingMapStrToI["discovered_api_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
					businessLogicMarkupSetting.DiscoveredApiSettings = discoveredApiSettings
					for _, set := range sl {
						if set != nil {
							discoveredApiSettingsMapStrToI := set.(map[string]interface{})

							if w, ok := discoveredApiSettingsMapStrToI["purge_duration_for_inactive_discovered_apis"]; ok && !isIntfNil(w) {
								discoveredApiSettings.PurgeDurationForInactiveDiscoveredApis = uint32(w.(int))
							}

						}
					}

				}

				learnFromRedirectTrafficTypeFound := false

				if v, ok := businessLogicMarkupSettingMapStrToI["disable"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_app_type.BusinessLogicMarkupSetting_Disable{}
						learnFromRedirectTrafficInt.Disable = &ves_io_schema.Empty{}
						businessLogicMarkupSetting.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := businessLogicMarkupSettingMapStrToI["enable"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_app_type.BusinessLogicMarkupSetting_Enable{}
						learnFromRedirectTrafficInt.Enable = &ves_io_schema.Empty{}
						businessLogicMarkupSetting.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := businessLogicMarkupSettingMapStrToI["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
					businessLogicMarkupSetting.SensitiveDataDetectionRules = sensitiveDataDetectionRules
					for _, set := range sl {
						if set != nil {
							sensitiveDataDetectionRulesMapStrToI := set.(map[string]interface{})

							if v, ok := sensitiveDataDetectionRulesMapStrToI["custom_sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								customSensitiveDataDetectionRules := make([]*ves_io_schema_app_type.CustomSensitiveDataDetectionRule, len(sl))
								sensitiveDataDetectionRules.CustomSensitiveDataDetectionRules = customSensitiveDataDetectionRules
								for i, set := range sl {
									if set != nil {
										customSensitiveDataDetectionRules[i] = &ves_io_schema_app_type.CustomSensitiveDataDetectionRule{}
										customSensitiveDataDetectionRulesMapStrToI := set.(map[string]interface{})

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											customSensitiveDataDetectionRules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["sensitive_data_detection_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											sensitiveDataDetectionConfig := &ves_io_schema_app_type.CustomDataDetectionConfig{}
											customSensitiveDataDetectionRules[i].SensitiveDataDetectionConfig = sensitiveDataDetectionConfig
											for _, set := range sl {
												if set != nil {
													sensitiveDataDetectionConfigMapStrToI := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.DomainChoice = domainChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_SpecificDomain{}

														sensitiveDataDetectionConfig.DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													patternChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["key_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_KeyPattern{}
														patternChoiceInt.KeyPattern = &ves_io_schema_app_type.KeyPattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																keyPatternTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																	keyPatternTypeFound = true
																	keyPatternInt := &ves_io_schema_app_type.KeyPattern_ExactValue{}

																	patternChoiceInt.KeyPattern.KeyPattern = keyPatternInt

																	keyPatternInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																	keyPatternTypeFound = true
																	keyPatternInt := &ves_io_schema_app_type.KeyPattern_RegexValue{}

																	patternChoiceInt.KeyPattern.KeyPattern = keyPatternInt

																	keyPatternInt.RegexValue = v.(string)

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["key_value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_KeyValuePattern{}
														patternChoiceInt.KeyValuePattern = &ves_io_schema_app_type.KeyValuePattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["key_pattern"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	keyPattern := &ves_io_schema_app_type.KeyPattern{}
																	patternChoiceInt.KeyValuePattern.KeyPattern = keyPattern
																	for _, set := range sl {
																		if set != nil {
																			keyPatternMapStrToI := set.(map[string]interface{})

																			keyPatternTypeFound := false

																			if v, ok := keyPatternMapStrToI["exact_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																				keyPatternTypeFound = true
																				keyPatternInt := &ves_io_schema_app_type.KeyPattern_ExactValue{}

																				keyPattern.KeyPattern = keyPatternInt

																				keyPatternInt.ExactValue = v.(string)

																			}

																			if v, ok := keyPatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																				keyPatternTypeFound = true
																				keyPatternInt := &ves_io_schema_app_type.KeyPattern_RegexValue{}

																				keyPattern.KeyPattern = keyPatternInt

																				keyPatternInt.RegexValue = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["value_pattern"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	valuePattern := &ves_io_schema_app_type.ValuePattern{}
																	patternChoiceInt.KeyValuePattern.ValuePattern = valuePattern
																	for _, set := range sl {
																		if set != nil {
																			valuePatternMapStrToI := set.(map[string]interface{})

																			valuePatternTypeFound := false

																			if v, ok := valuePatternMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																				valuePatternTypeFound = true
																				valuePatternInt := &ves_io_schema_app_type.ValuePattern_ExactValue{}

																				valuePattern.ValuePattern = valuePatternInt

																				valuePatternInt.ExactValue = v.(string)

																			}

																			if v, ok := valuePatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																				valuePatternTypeFound = true
																				valuePatternInt := &ves_io_schema_app_type.ValuePattern_RegexValue{}

																				valuePattern.ValuePattern = valuePatternInt

																				valuePatternInt.RegexValue = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ValuePattern{}
														patternChoiceInt.ValuePattern = &ves_io_schema_app_type.ValuePattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																valuePatternTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																	valuePatternTypeFound = true
																	valuePatternInt := &ves_io_schema_app_type.ValuePattern_ExactValue{}

																	patternChoiceInt.ValuePattern.ValuePattern = valuePatternInt

																	valuePatternInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																	valuePatternTypeFound = true
																	valuePatternInt := &ves_io_schema_app_type.ValuePattern_RegexValue{}

																	patternChoiceInt.ValuePattern.ValuePattern = valuePatternInt

																	valuePatternInt.RegexValue = v.(string)

																}

															}
														}

													}

													sectionChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_request_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllRequestSections{}
															sectionChoiceInt.AllRequestSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_response_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllResponseSections{}
															sectionChoiceInt.AllResponseSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllSections{}
															sectionChoiceInt.AllSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["custom_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true
														sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_CustomSections{}
														sectionChoiceInt.CustomSections = &ves_io_schema_app_type.CustomSections{}
														sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["custom_sections"]; ok && !isIntfNil(v) {

																	custom_sectionsList := []ves_io_schema.HttpSections{}
																	for _, j := range v.([]interface{}) {
																		custom_sectionsList = append(custom_sectionsList, ves_io_schema.HttpSections(ves_io_schema.HttpSections_value[j.(string)]))
																	}
																	sectionChoiceInt.CustomSections.CustomSections = custom_sectionsList

																}

															}
														}

													}

													targetChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["any_target"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true

														if v.(bool) {
															targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AnyTarget{}
															targetChoiceInt.AnyTarget = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["api_endpoint_target"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ApiEndpointTarget{}
														targetChoiceInt.ApiEndpointTarget = &ves_io_schema_app_type.APIEndpoint{}
														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["api_endpoint_path"]; ok && !isIntfNil(v) {

																	targetChoiceInt.ApiEndpointTarget.ApiEndpointPath = v.(string)

																}

																if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	targetChoiceInt.ApiEndpointTarget.Methods = methodsList

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["api_group"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ApiGroup{}

														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														targetChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["base_path"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_BasePath{}

														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														targetChoiceInt.BasePath = v.(string)

													}

												}
											}

										}

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["sensitive_data_type"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											sensitiveDataType := &ves_io_schema_app_type.CustomSensitiveDataType{}
											customSensitiveDataDetectionRules[i].SensitiveDataType = sensitiveDataType
											for _, set := range sl {
												if set != nil {
													sensitiveDataTypeMapStrToI := set.(map[string]interface{})

													if w, ok := sensitiveDataTypeMapStrToI["type"]; ok && !isIntfNil(w) {
														sensitiveDataType.Type = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := sensitiveDataDetectionRulesMapStrToI["disabled_built_in_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								disabledBuiltInRules := make([]*ves_io_schema_app_type.BuiltInSensitiveDataType, len(sl))
								sensitiveDataDetectionRules.DisabledBuiltInRules = disabledBuiltInRules
								for i, set := range sl {
									if set != nil {
										disabledBuiltInRules[i] = &ves_io_schema_app_type.BuiltInSensitiveDataType{}
										disabledBuiltInRulesMapStrToI := set.(map[string]interface{})

										if w, ok := disabledBuiltInRulesMapStrToI["name"]; ok && !isIntfNil(w) {
											disabledBuiltInRules[i].Name = w.(string)
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//features
	if v, ok := d.GetOk("features"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		features := make([]*ves_io_schema_app_type.Feature, len(sl))
		createSpec.Features = features
		for i, set := range sl {
			if set != nil {
				features[i] = &ves_io_schema_app_type.Feature{}
				featuresMapStrToI := set.(map[string]interface{})

				if v, ok := featuresMapStrToI["type"]; ok && !isIntfNil(v) {

					features[i].Type = ves_io_schema_app_type.FeatureType(ves_io_schema_app_type.FeatureType_value[v.(string)])

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra AppType object with struct: %+v", createReq)

	createAppTypeResp, err := client.CreateObject(context.Background(), ves_io_schema_app_type.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating AppType: %s", err)
	}
	d.SetId(createAppTypeResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraAppTypeRead(d, meta)
}

func resourceVolterraAppTypeRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_app_type.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppType %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppType %q: %s", d.Id(), err)
	}
	return setAppTypeFields(client, d, resp)
}

func setAppTypeFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraAppTypeUpdate updates AppType resource
func resourceVolterraAppTypeUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_app_type.ReplaceSpecType{}
	updateReq := &ves_io_schema_app_type.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("business_logic_markup_setting"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		businessLogicMarkupSetting := &ves_io_schema_app_type.BusinessLogicMarkupSetting{}
		updateSpec.BusinessLogicMarkupSetting = businessLogicMarkupSetting
		for _, set := range sl {
			if set != nil {
				businessLogicMarkupSettingMapStrToI := set.(map[string]interface{})

				if v, ok := businessLogicMarkupSettingMapStrToI["discovered_api_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					discoveredApiSettings := &ves_io_schema_app_type.DiscoveredAPISettings{}
					businessLogicMarkupSetting.DiscoveredApiSettings = discoveredApiSettings
					for _, set := range sl {
						if set != nil {
							discoveredApiSettingsMapStrToI := set.(map[string]interface{})

							if w, ok := discoveredApiSettingsMapStrToI["purge_duration_for_inactive_discovered_apis"]; ok && !isIntfNil(w) {
								discoveredApiSettings.PurgeDurationForInactiveDiscoveredApis = uint32(w.(int))
							}

						}
					}

				}

				learnFromRedirectTrafficTypeFound := false

				if v, ok := businessLogicMarkupSettingMapStrToI["disable"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_app_type.BusinessLogicMarkupSetting_Disable{}
						learnFromRedirectTrafficInt.Disable = &ves_io_schema.Empty{}
						businessLogicMarkupSetting.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := businessLogicMarkupSettingMapStrToI["enable"]; ok && !isIntfNil(v) && !learnFromRedirectTrafficTypeFound {

					learnFromRedirectTrafficTypeFound = true

					if v.(bool) {
						learnFromRedirectTrafficInt := &ves_io_schema_app_type.BusinessLogicMarkupSetting_Enable{}
						learnFromRedirectTrafficInt.Enable = &ves_io_schema.Empty{}
						businessLogicMarkupSetting.LearnFromRedirectTraffic = learnFromRedirectTrafficInt
					}

				}

				if v, ok := businessLogicMarkupSettingMapStrToI["sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					sensitiveDataDetectionRules := &ves_io_schema_app_type.SensitiveDataDetectionRules{}
					businessLogicMarkupSetting.SensitiveDataDetectionRules = sensitiveDataDetectionRules
					for _, set := range sl {
						if set != nil {
							sensitiveDataDetectionRulesMapStrToI := set.(map[string]interface{})

							if v, ok := sensitiveDataDetectionRulesMapStrToI["custom_sensitive_data_detection_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								customSensitiveDataDetectionRules := make([]*ves_io_schema_app_type.CustomSensitiveDataDetectionRule, len(sl))
								sensitiveDataDetectionRules.CustomSensitiveDataDetectionRules = customSensitiveDataDetectionRules
								for i, set := range sl {
									if set != nil {
										customSensitiveDataDetectionRules[i] = &ves_io_schema_app_type.CustomSensitiveDataDetectionRule{}
										customSensitiveDataDetectionRulesMapStrToI := set.(map[string]interface{})

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											customSensitiveDataDetectionRules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["sensitive_data_detection_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											sensitiveDataDetectionConfig := &ves_io_schema_app_type.CustomDataDetectionConfig{}
											customSensitiveDataDetectionRules[i].SensitiveDataDetectionConfig = sensitiveDataDetectionConfig
											for _, set := range sl {
												if set != nil {
													sensitiveDataDetectionConfigMapStrToI := set.(map[string]interface{})

													domainChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true

														if v.(bool) {
															domainChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AnyDomain{}
															domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.DomainChoice = domainChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

														domainChoiceTypeFound = true
														domainChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_SpecificDomain{}

														sensitiveDataDetectionConfig.DomainChoice = domainChoiceInt

														domainChoiceInt.SpecificDomain = v.(string)

													}

													patternChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["key_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_KeyPattern{}
														patternChoiceInt.KeyPattern = &ves_io_schema_app_type.KeyPattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																keyPatternTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																	keyPatternTypeFound = true
																	keyPatternInt := &ves_io_schema_app_type.KeyPattern_ExactValue{}

																	patternChoiceInt.KeyPattern.KeyPattern = keyPatternInt

																	keyPatternInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																	keyPatternTypeFound = true
																	keyPatternInt := &ves_io_schema_app_type.KeyPattern_RegexValue{}

																	patternChoiceInt.KeyPattern.KeyPattern = keyPatternInt

																	keyPatternInt.RegexValue = v.(string)

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["key_value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_KeyValuePattern{}
														patternChoiceInt.KeyValuePattern = &ves_io_schema_app_type.KeyValuePattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["key_pattern"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	keyPattern := &ves_io_schema_app_type.KeyPattern{}
																	patternChoiceInt.KeyValuePattern.KeyPattern = keyPattern
																	for _, set := range sl {
																		if set != nil {
																			keyPatternMapStrToI := set.(map[string]interface{})

																			keyPatternTypeFound := false

																			if v, ok := keyPatternMapStrToI["exact_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																				keyPatternTypeFound = true
																				keyPatternInt := &ves_io_schema_app_type.KeyPattern_ExactValue{}

																				keyPattern.KeyPattern = keyPatternInt

																				keyPatternInt.ExactValue = v.(string)

																			}

																			if v, ok := keyPatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !keyPatternTypeFound {

																				keyPatternTypeFound = true
																				keyPatternInt := &ves_io_schema_app_type.KeyPattern_RegexValue{}

																				keyPattern.KeyPattern = keyPatternInt

																				keyPatternInt.RegexValue = v.(string)

																			}

																		}
																	}

																}

																if v, ok := cs["value_pattern"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	valuePattern := &ves_io_schema_app_type.ValuePattern{}
																	patternChoiceInt.KeyValuePattern.ValuePattern = valuePattern
																	for _, set := range sl {
																		if set != nil {
																			valuePatternMapStrToI := set.(map[string]interface{})

																			valuePatternTypeFound := false

																			if v, ok := valuePatternMapStrToI["exact_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																				valuePatternTypeFound = true
																				valuePatternInt := &ves_io_schema_app_type.ValuePattern_ExactValue{}

																				valuePattern.ValuePattern = valuePatternInt

																				valuePatternInt.ExactValue = v.(string)

																			}

																			if v, ok := valuePatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																				valuePatternTypeFound = true
																				valuePatternInt := &ves_io_schema_app_type.ValuePattern_RegexValue{}

																				valuePattern.ValuePattern = valuePatternInt

																				valuePatternInt.RegexValue = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

														patternChoiceTypeFound = true
														patternChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ValuePattern{}
														patternChoiceInt.ValuePattern = &ves_io_schema_app_type.ValuePattern{}
														sensitiveDataDetectionConfig.PatternChoice = patternChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																valuePatternTypeFound := false

																if v, ok := cs["exact_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																	valuePatternTypeFound = true
																	valuePatternInt := &ves_io_schema_app_type.ValuePattern_ExactValue{}

																	patternChoiceInt.ValuePattern.ValuePattern = valuePatternInt

																	valuePatternInt.ExactValue = v.(string)

																}

																if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !valuePatternTypeFound {

																	valuePatternTypeFound = true
																	valuePatternInt := &ves_io_schema_app_type.ValuePattern_RegexValue{}

																	patternChoiceInt.ValuePattern.ValuePattern = valuePatternInt

																	valuePatternInt.RegexValue = v.(string)

																}

															}
														}

													}

													sectionChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_request_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllRequestSections{}
															sectionChoiceInt.AllRequestSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_response_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllResponseSections{}
															sectionChoiceInt.AllResponseSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["all_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true

														if v.(bool) {
															sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AllSections{}
															sectionChoiceInt.AllSections = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["custom_sections"]; ok && !isIntfNil(v) && !sectionChoiceTypeFound {

														sectionChoiceTypeFound = true
														sectionChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_CustomSections{}
														sectionChoiceInt.CustomSections = &ves_io_schema_app_type.CustomSections{}
														sensitiveDataDetectionConfig.SectionChoice = sectionChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["custom_sections"]; ok && !isIntfNil(v) {

																	custom_sectionsList := []ves_io_schema.HttpSections{}
																	for _, j := range v.([]interface{}) {
																		custom_sectionsList = append(custom_sectionsList, ves_io_schema.HttpSections(ves_io_schema.HttpSections_value[j.(string)]))
																	}
																	sectionChoiceInt.CustomSections.CustomSections = custom_sectionsList

																}

															}
														}

													}

													targetChoiceTypeFound := false

													if v, ok := sensitiveDataDetectionConfigMapStrToI["any_target"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true

														if v.(bool) {
															targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_AnyTarget{}
															targetChoiceInt.AnyTarget = &ves_io_schema.Empty{}
															sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["api_endpoint_target"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ApiEndpointTarget{}
														targetChoiceInt.ApiEndpointTarget = &ves_io_schema_app_type.APIEndpoint{}
														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["api_endpoint_path"]; ok && !isIntfNil(v) {

																	targetChoiceInt.ApiEndpointTarget.ApiEndpointPath = v.(string)

																}

																if v, ok := cs["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	targetChoiceInt.ApiEndpointTarget.Methods = methodsList

																}

															}
														}

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["api_group"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_ApiGroup{}

														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														targetChoiceInt.ApiGroup = v.(string)

													}

													if v, ok := sensitiveDataDetectionConfigMapStrToI["base_path"]; ok && !isIntfNil(v) && !targetChoiceTypeFound {

														targetChoiceTypeFound = true
														targetChoiceInt := &ves_io_schema_app_type.CustomDataDetectionConfig_BasePath{}

														sensitiveDataDetectionConfig.TargetChoice = targetChoiceInt

														targetChoiceInt.BasePath = v.(string)

													}

												}
											}

										}

										if v, ok := customSensitiveDataDetectionRulesMapStrToI["sensitive_data_type"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											sensitiveDataType := &ves_io_schema_app_type.CustomSensitiveDataType{}
											customSensitiveDataDetectionRules[i].SensitiveDataType = sensitiveDataType
											for _, set := range sl {
												if set != nil {
													sensitiveDataTypeMapStrToI := set.(map[string]interface{})

													if w, ok := sensitiveDataTypeMapStrToI["type"]; ok && !isIntfNil(w) {
														sensitiveDataType.Type = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := sensitiveDataDetectionRulesMapStrToI["disabled_built_in_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								disabledBuiltInRules := make([]*ves_io_schema_app_type.BuiltInSensitiveDataType, len(sl))
								sensitiveDataDetectionRules.DisabledBuiltInRules = disabledBuiltInRules
								for i, set := range sl {
									if set != nil {
										disabledBuiltInRules[i] = &ves_io_schema_app_type.BuiltInSensitiveDataType{}
										disabledBuiltInRulesMapStrToI := set.(map[string]interface{})

										if w, ok := disabledBuiltInRulesMapStrToI["name"]; ok && !isIntfNil(w) {
											disabledBuiltInRules[i].Name = w.(string)
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("features"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		features := make([]*ves_io_schema_app_type.Feature, len(sl))
		updateSpec.Features = features
		for i, set := range sl {
			if set != nil {
				features[i] = &ves_io_schema_app_type.Feature{}
				featuresMapStrToI := set.(map[string]interface{})

				if v, ok := featuresMapStrToI["type"]; ok && !isIntfNil(v) {

					features[i].Type = ves_io_schema_app_type.FeatureType(ves_io_schema_app_type.FeatureType_value[v.(string)])

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra AppType obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_app_type.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating AppType: %s", err)
	}

	return resourceVolterraAppTypeRead(d, meta)
}

func resourceVolterraAppTypeDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_app_type.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AppType %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AppType before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra AppType obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_app_type.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_api_sec_api_testing "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_sec/api_testing"
)

// resourceVolterraApiTesting is implementation of Volterra's ApiTesting resources
func resourceVolterraApiTesting() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraApiTestingCreate,
		Read:   resourceVolterraApiTestingRead,
		Update: resourceVolterraApiTestingUpdate,
		Delete: resourceVolterraApiTestingDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"custom_header_value": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"domains": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_destructive_methods": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"credentials": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"credential_name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"api_key": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:     schema.TypeString,
													Required: true,
												},

												"value": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"basic_auth": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"password": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"user": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"bearer_token": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"token": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"login_endpoint": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"json_payload": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"method": {
													Type:     schema.TypeString,
													Required: true,
												},

												"path": {
													Type:     schema.TypeString,
													Required: true,
												},

												"token_response_key": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"admin": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"standard": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"domain": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"every_day": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"every_month": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"every_week": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraApiTestingCreate creates ApiTesting resource
func resourceVolterraApiTestingCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_api_sec_api_testing.CreateSpecType{}
	createReq := &ves_io_schema_api_sec_api_testing.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//custom_header_value
	if v, ok := d.GetOk("custom_header_value"); ok && !isIntfNil(v) {

		createSpec.CustomHeaderValue =
			v.(string)

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		domains := make([]*ves_io_schema_api_sec_api_testing.DomainConfiguration, len(sl))
		createSpec.Domains = domains
		for i, set := range sl {
			if set != nil {
				domains[i] = &ves_io_schema_api_sec_api_testing.DomainConfiguration{}
				domainsMapStrToI := set.(map[string]interface{})

				if w, ok := domainsMapStrToI["allow_destructive_methods"]; ok && !isIntfNil(w) {
					domains[i].AllowDestructiveMethods = w.(bool)
				}

				if v, ok := domainsMapStrToI["credentials"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					credentials := make([]*ves_io_schema_api_sec_api_testing.Credentials, len(sl))
					domains[i].Credentials = credentials
					for i, set := range sl {
						if set != nil {
							credentials[i] = &ves_io_schema_api_sec_api_testing.Credentials{}
							credentialsMapStrToI := set.(map[string]interface{})

							if w, ok := credentialsMapStrToI["credential_name"]; ok && !isIntfNil(w) {
								credentials[i].CredentialName = w.(string)
							}

							credentialsChoiceTypeFound := false

							if v, ok := credentialsMapStrToI["api_key"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_ApiKey{}
								credentialsChoiceInt.ApiKey = &ves_io_schema_api_sec_api_testing.ApiKey{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["key"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.ApiKey.Key = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											value := &ves_io_schema.SecretType{}
											credentialsChoiceInt.ApiKey.Value = value
											for _, set := range sl {
												if set != nil {
													valueMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := valueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														value.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := valueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														value.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_BasicAuth{}
								credentialsChoiceInt.BasicAuth = &ves_io_schema_api_sec_api_testing.BasicAuthentication{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["password"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											password := &ves_io_schema.SecretType{}
											credentialsChoiceInt.BasicAuth.Password = password
											for _, set := range sl {
												if set != nil {
													passwordMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["user"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.BasicAuth.User = v.(string)

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_BearerToken{}
								credentialsChoiceInt.BearerToken = &ves_io_schema_api_sec_api_testing.Bearer{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["token"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											token := &ves_io_schema.SecretType{}
											credentialsChoiceInt.BearerToken.Token = token
											for _, set := range sl {
												if set != nil {
													tokenMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														token.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														token.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["login_endpoint"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_LoginEndpoint{}
								credentialsChoiceInt.LoginEndpoint = &ves_io_schema_api_sec_api_testing.LoginEndpoint{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["json_payload"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jsonPayload := &ves_io_schema.SecretType{}
											credentialsChoiceInt.LoginEndpoint.JsonPayload = jsonPayload
											for _, set := range sl {
												if set != nil {
													jsonPayloadMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := jsonPayloadMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														jsonPayload.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := jsonPayloadMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														jsonPayload.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["method"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.Path = v.(string)

										}

										if v, ok := cs["token_response_key"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.TokenResponseKey = v.(string)

										}

									}
								}

							}

							roleChoiceTypeFound := false

							if v, ok := credentialsMapStrToI["admin"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

								roleChoiceTypeFound = true

								if v.(bool) {
									roleChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_Admin{}
									roleChoiceInt.Admin = &ves_io_schema.Empty{}
									credentials[i].RoleChoice = roleChoiceInt
								}

							}

							if v, ok := credentialsMapStrToI["standard"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

								roleChoiceTypeFound = true

								if v.(bool) {
									roleChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_Standard{}
									roleChoiceInt.Standard = &ves_io_schema.Empty{}
									credentials[i].RoleChoice = roleChoiceInt
								}

							}

						}
					}

				}

				if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
					domains[i].Domain = w.(string)
				}

			}
		}

	}

	//frequency_choice

	frequencyChoiceTypeFound := false

	if v, ok := d.GetOk("every_day"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.CreateSpecType_EveryDay{}
			frequencyChoiceInt.EveryDay = &ves_io_schema.Empty{}
			createSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	if v, ok := d.GetOk("every_month"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.CreateSpecType_EveryMonth{}
			frequencyChoiceInt.EveryMonth = &ves_io_schema.Empty{}
			createSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	if v, ok := d.GetOk("every_week"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.CreateSpecType_EveryWeek{}
			frequencyChoiceInt.EveryWeek = &ves_io_schema.Empty{}
			createSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra ApiTesting object with struct: %+v", createReq)

	createApiTestingResp, err := client.CreateObject(context.Background(), ves_io_schema_api_sec_api_testing.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating ApiTesting: %s", err)
	}
	d.SetId(createApiTestingResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraApiTestingRead(d, meta)
}

func resourceVolterraApiTestingRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_api_sec_api_testing.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ApiTesting %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ApiTesting %q: %s", d.Id(), err)
	}
	return setApiTestingFields(client, d, resp)
}

func setApiTestingFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraApiTestingUpdate updates ApiTesting resource
func resourceVolterraApiTestingUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_api_sec_api_testing.ReplaceSpecType{}
	updateReq := &ves_io_schema_api_sec_api_testing.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("custom_header_value"); ok && !isIntfNil(v) {

		updateSpec.CustomHeaderValue =
			v.(string)

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		domains := make([]*ves_io_schema_api_sec_api_testing.DomainConfiguration, len(sl))
		updateSpec.Domains = domains
		for i, set := range sl {
			if set != nil {
				domains[i] = &ves_io_schema_api_sec_api_testing.DomainConfiguration{}
				domainsMapStrToI := set.(map[string]interface{})

				if w, ok := domainsMapStrToI["allow_destructive_methods"]; ok && !isIntfNil(w) {
					domains[i].AllowDestructiveMethods = w.(bool)
				}

				if v, ok := domainsMapStrToI["credentials"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					credentials := make([]*ves_io_schema_api_sec_api_testing.Credentials, len(sl))
					domains[i].Credentials = credentials
					for i, set := range sl {
						if set != nil {
							credentials[i] = &ves_io_schema_api_sec_api_testing.Credentials{}
							credentialsMapStrToI := set.(map[string]interface{})

							if w, ok := credentialsMapStrToI["credential_name"]; ok && !isIntfNil(w) {
								credentials[i].CredentialName = w.(string)
							}

							credentialsChoiceTypeFound := false

							if v, ok := credentialsMapStrToI["api_key"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_ApiKey{}
								credentialsChoiceInt.ApiKey = &ves_io_schema_api_sec_api_testing.ApiKey{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["key"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.ApiKey.Key = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											value := &ves_io_schema.SecretType{}
											credentialsChoiceInt.ApiKey.Value = value
											for _, set := range sl {
												if set != nil {
													valueMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := valueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														value.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := valueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														value.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_BasicAuth{}
								credentialsChoiceInt.BasicAuth = &ves_io_schema_api_sec_api_testing.BasicAuthentication{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["password"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											password := &ves_io_schema.SecretType{}
											credentialsChoiceInt.BasicAuth.Password = password
											for _, set := range sl {
												if set != nil {
													passwordMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["user"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.BasicAuth.User = v.(string)

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_BearerToken{}
								credentialsChoiceInt.BearerToken = &ves_io_schema_api_sec_api_testing.Bearer{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["token"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											token := &ves_io_schema.SecretType{}
											credentialsChoiceInt.BearerToken.Token = token
											for _, set := range sl {
												if set != nil {
													tokenMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														token.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														token.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := credentialsMapStrToI["login_endpoint"]; ok && !isIntfNil(v) && !credentialsChoiceTypeFound {

								credentialsChoiceTypeFound = true
								credentialsChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_LoginEndpoint{}
								credentialsChoiceInt.LoginEndpoint = &ves_io_schema_api_sec_api_testing.LoginEndpoint{}
								credentials[i].CredentialsChoice = credentialsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["json_payload"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jsonPayload := &ves_io_schema.SecretType{}
											credentialsChoiceInt.LoginEndpoint.JsonPayload = jsonPayload
											for _, set := range sl {
												if set != nil {
													jsonPayloadMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := jsonPayloadMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														jsonPayload.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := jsonPayloadMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														jsonPayload.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["method"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.Method = ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[v.(string)])

										}

										if v, ok := cs["path"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.Path = v.(string)

										}

										if v, ok := cs["token_response_key"]; ok && !isIntfNil(v) {

											credentialsChoiceInt.LoginEndpoint.TokenResponseKey = v.(string)

										}

									}
								}

							}

							roleChoiceTypeFound := false

							if v, ok := credentialsMapStrToI["admin"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

								roleChoiceTypeFound = true

								if v.(bool) {
									roleChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_Admin{}
									roleChoiceInt.Admin = &ves_io_schema.Empty{}
									credentials[i].RoleChoice = roleChoiceInt
								}

							}

							if v, ok := credentialsMapStrToI["standard"]; ok && !isIntfNil(v) && !roleChoiceTypeFound {

								roleChoiceTypeFound = true

								if v.(bool) {
									roleChoiceInt := &ves_io_schema_api_sec_api_testing.Credentials_Standard{}
									roleChoiceInt.Standard = &ves_io_schema.Empty{}
									credentials[i].RoleChoice = roleChoiceInt
								}

							}

						}
					}

				}

				if w, ok := domainsMapStrToI["domain"]; ok && !isIntfNil(w) {
					domains[i].Domain = w.(string)
				}

			}
		}

	}

	frequencyChoiceTypeFound := false

	if v, ok := d.GetOk("every_day"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.ReplaceSpecType_EveryDay{}
			frequencyChoiceInt.EveryDay = &ves_io_schema.Empty{}
			updateSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	if v, ok := d.GetOk("every_month"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.ReplaceSpecType_EveryMonth{}
			frequencyChoiceInt.EveryMonth = &ves_io_schema.Empty{}
			updateSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	if v, ok := d.GetOk("every_week"); ok && !frequencyChoiceTypeFound {

		frequencyChoiceTypeFound = true

		if v.(bool) {
			frequencyChoiceInt := &ves_io_schema_api_sec_api_testing.ReplaceSpecType_EveryWeek{}
			frequencyChoiceInt.EveryWeek = &ves_io_schema.Empty{}
			updateSpec.FrequencyChoice = frequencyChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra ApiTesting obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_api_sec_api_testing.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating ApiTesting: %s", err)
	}

	return resourceVolterraApiTestingRead(d, meta)
}

func resourceVolterraApiTestingDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_api_sec_api_testing.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ApiTesting %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ApiTesting before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra ApiTesting obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_api_sec_api_testing.ObjectType, namespace, name, opts...)
}

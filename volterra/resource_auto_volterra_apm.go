//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_bigip_apm "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bigip/apm"
	ves_io_schema_nfv_service "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nfv_service"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraApm is implementation of Volterra's Apm resources
func resourceVolterraApm() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraApmCreate,
		Read:   resourceVolterraApmRead,
		Update: resourceVolterraApmUpdate,
		Delete: resourceVolterraApmDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"https_management": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"advertise_on_internet": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"public_ip": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_internet_default_vip": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"advertise_on_sli_vip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_slo_internet_vip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_slo_sli": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_slo_vip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_certificate_optional": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"crl": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_crl": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"xfcc_disabled": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"xfcc_options": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"xfcc_header_elements": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_certificates": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Required: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"domain_suffix": {
							Type:     schema.TypeString,
							Required: true,
						},

						"default_https_port": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"https_port": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"aws_site_type_choice": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"apm_aws_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"admin_password": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"admin_username": {
										Type:     schema.TypeString,
										Required: true,
									},

									"aws_tgw_site": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"aws_tgw_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"endpoint_service": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"advertise_on_slo_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"advertise_on_slo_ip_external": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"disable_advertise_on_slo_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"automatic_vip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"configured_vip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_tcp_ports": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ports": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"default_tcp_ports": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"http_port": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"https_port": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"no_tcp_ports": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"custom_udp_ports": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ports": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"no_udp_ports": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"nodes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"aws_az_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"mgmt_subnet": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"existing_subnet_id": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"subnet_param": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ipv4": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"ipv6": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"reserved_mgmt_subnet": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"node_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"automatic_prefix": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"tunnel_prefix": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"ssh_key": {
										Type:     schema.TypeString,
										Required: true,
									},

									"tags": {
										Type:     schema.TypeMap,
										Optional: true,
									},
								},
							},
						},

						"market_place_image": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"best_plus_pay_g200_mbps": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"best_plus_payg_1gbps": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"baremetal_site_type_choice": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"f5_bare_metal_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"admin_password": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"admin_username": {
										Type:     schema.TypeString,
										Required: true,
									},

									"bare_metal_site": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"bigiq_instance": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"license_pool_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"license_server_ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"password": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"sku_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"username": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"nodes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bm_node_memory_size": {
													Type:     schema.TypeString,
													Required: true,
												},

												"bm_virtual_cpu_count": {
													Type:     schema.TypeString,
													Required: true,
												},

												"external_interface": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"interface": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"network_gateway": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"network_self_ip": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"internal_interface": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"interface": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"network_gateway": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"network_self_ip": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"node_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"public_download_url": {
										Type:     schema.TypeString,
										Required: true,
									},

									"ssh_key": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraApmCreate creates Apm resource
func resourceVolterraApmCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_bigip_apm.CreateSpecType{}
	createReq := &ves_io_schema_bigip_apm.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//http_management_choice

	httpManagementChoiceTypeFound := false

	if v, ok := d.GetOk("https_management"); ok && !isIntfNil(v) && !httpManagementChoiceTypeFound {

		httpManagementChoiceTypeFound = true
		httpManagementChoiceInt := &ves_io_schema_bigip_apm.CreateSpecType_HttpsManagement{}
		httpManagementChoiceInt.HttpsManagement = &ves_io_schema_nfv_service.ServiceHttpsManagementType{}
		createSpec.HttpManagementChoice = httpManagementChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				advertiseChoiceTypeFound := false

				if v, ok := cs["advertise_on_internet"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnInternet{}
					advertiseChoiceInt.AdvertiseOnInternet = &ves_io_schema_views.AdvertisePublic{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIp := &ves_io_schema_views.ObjectRefType{}
								advertiseChoiceInt.AdvertiseOnInternet.PublicIp = publicIp
								for _, set := range sl {
									if set != nil {
										publicIpMapStrToI := set.(map[string]interface{})

										if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
											publicIp.Name = w.(string)
										}

										if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
											publicIp.Namespace = w.(string)
										}

										if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
											publicIp.Tenant = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_internet_default_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip{}
						advertiseChoiceInt.AdvertiseOnInternetDefaultVip = &ves_io_schema.Empty{}
						httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt
					}

				}

				if v, ok := cs["advertise_on_sli_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSliVip{}
					advertiseChoiceInt.AdvertiseOnSliVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSliVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSliVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSliVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSliVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_internet_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloInternetVip{}
					advertiseChoiceInt.AdvertiseOnSloInternetVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloInternetVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloInternetVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloInternetVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloInternetVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_sli"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloSli{}
					advertiseChoiceInt.AdvertiseOnSloSli = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloSli.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloSli.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloSli.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloSli.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloVip{}
					advertiseChoiceInt.AdvertiseOnSloVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["domain_suffix"]; ok && !isIntfNil(v) {

					httpManagementChoiceInt.HttpsManagement.DomainSuffix = v.(string)

				}

				portChoiceTypeFound := false

				if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true

					if v.(bool) {
						portChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_DefaultHttpsPort{}
						portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
						httpManagementChoiceInt.HttpsManagement.PortChoice = portChoiceInt
					}

				}

				if v, ok := cs["https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_HttpsPort{}

					httpManagementChoiceInt.HttpsManagement.PortChoice = portChoiceInt

					portChoiceInt.HttpsPort = uint32(v.(int))

				}

			}
		}

	}

	//site_type_choice

	siteTypeChoiceTypeFound := false

	if v, ok := d.GetOk("aws_site_type_choice"); ok && !isIntfNil(v) && !siteTypeChoiceTypeFound {

		siteTypeChoiceTypeFound = true
		siteTypeChoiceInt := &ves_io_schema_bigip_apm.CreateSpecType_AwsSiteTypeChoice{}
		siteTypeChoiceInt.AwsSiteTypeChoice = &ves_io_schema_bigip_apm.AWSSiteTypeChoice{}
		createSpec.SiteTypeChoice = siteTypeChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["apm_aws_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apmAwsSite := &ves_io_schema_bigip_apm.APMBigIpAWSType{}
					siteTypeChoiceInt.AwsSiteTypeChoice.ApmAwsSite = apmAwsSite
					for _, set := range sl {
						if set != nil {
							apmAwsSiteMapStrToI := set.(map[string]interface{})

							if v, ok := apmAwsSiteMapStrToI["admin_password"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								adminPassword := &ves_io_schema.SecretType{}
								apmAwsSite.AdminPassword = adminPassword
								for _, set := range sl {
									if set != nil {
										adminPasswordMapStrToI := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := adminPasswordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											adminPassword.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := adminPasswordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											adminPassword.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if w, ok := apmAwsSiteMapStrToI["admin_username"]; ok && !isIntfNil(w) {
								apmAwsSite.AdminUsername = w.(string)
							}

							if v, ok := apmAwsSiteMapStrToI["aws_tgw_site"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								awsTgwSite := &ves_io_schema_nfv_service.F5BigIpAWSTGWSiteType{}
								apmAwsSite.AwsTgwSite = awsTgwSite
								for _, set := range sl {
									if set != nil {
										awsTgwSiteMapStrToI := set.(map[string]interface{})

										if v, ok := awsTgwSiteMapStrToI["aws_tgw_site"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											awsTgwSiteInt := &ves_io_schema_views.ObjectRefType{}
											awsTgwSite.AwsTgwSite = awsTgwSiteInt

											for _, set := range sl {
												if set != nil {
													atsMapToStrVal := set.(map[string]interface{})
													if val, ok := atsMapToStrVal["name"]; ok && !isIntfNil(v) {
														awsTgwSiteInt.Name = val.(string)
													}
													if val, ok := atsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														awsTgwSiteInt.Namespace = val.(string)
													}

													if val, ok := atsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														awsTgwSiteInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

							if v, ok := apmAwsSiteMapStrToI["endpoint_service"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								endpointService := &ves_io_schema_bigip_apm.EndpointServiceType{}
								apmAwsSite.EndpointService = endpointService
								for _, set := range sl {
									if set != nil {
										endpointServiceMapStrToI := set.(map[string]interface{})

										externalVipChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["advertise_on_slo_ip"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_AdvertiseOnSloIp{}
												externalVipChoiceInt.AdvertiseOnSloIp = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["advertise_on_slo_ip_external"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_AdvertiseOnSloIpExternal{}
												externalVipChoiceInt.AdvertiseOnSloIpExternal = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["disable_advertise_on_slo_ip"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_DisableAdvertiseOnSloIp{}
												externalVipChoiceInt.DisableAdvertiseOnSloIp = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										insideVipChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["automatic_vip"]; ok && !isIntfNil(v) && !insideVipChoiceTypeFound {

											insideVipChoiceTypeFound = true

											if v.(bool) {
												insideVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_AutomaticVip{}
												insideVipChoiceInt.AutomaticVip = &ves_io_schema.Empty{}
												endpointService.InsideVipChoice = insideVipChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["configured_vip"]; ok && !isIntfNil(v) && !insideVipChoiceTypeFound {

											insideVipChoiceTypeFound = true
											insideVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_ConfiguredVip{}

											endpointService.InsideVipChoice = insideVipChoiceInt

											insideVipChoiceInt.ConfiguredVip = v.(string)

										}

										tcpPortChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["custom_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true
											tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_CustomTcpPorts{}
											tcpPortChoiceInt.CustomTcpPorts = &ves_io_schema.PortRangesType{}
											endpointService.TcpPortChoice = tcpPortChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ports"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ports")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tcpPortChoiceInt.CustomTcpPorts.Ports = ls

													}

												}
											}

										}

										if v, ok := endpointServiceMapStrToI["default_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_DefaultTcpPorts{}
												tcpPortChoiceInt.DefaultTcpPorts = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["http_port"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_HttpPort{}
												tcpPortChoiceInt.HttpPort = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["https_port"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_HttpsPort{}
												tcpPortChoiceInt.HttpsPort = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["no_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_NoTcpPorts{}
												tcpPortChoiceInt.NoTcpPorts = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										udpPortChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["custom_udp_ports"]; ok && !isIntfNil(v) && !udpPortChoiceTypeFound {

											udpPortChoiceTypeFound = true
											udpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_CustomUdpPorts{}
											udpPortChoiceInt.CustomUdpPorts = &ves_io_schema.PortRangesType{}
											endpointService.UdpPortChoice = udpPortChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ports"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ports")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														udpPortChoiceInt.CustomUdpPorts.Ports = ls

													}

												}
											}

										}

										if v, ok := endpointServiceMapStrToI["no_udp_ports"]; ok && !isIntfNil(v) && !udpPortChoiceTypeFound {

											udpPortChoiceTypeFound = true

											if v.(bool) {
												udpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceType_NoUdpPorts{}
												udpPortChoiceInt.NoUdpPorts = &ves_io_schema.Empty{}
												endpointService.UdpPortChoice = udpPortChoiceInt
											}

										}

									}
								}

							}

							if v, ok := apmAwsSiteMapStrToI["nodes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								nodes := make([]*ves_io_schema_nfv_service.ServiceNodesAWSType, len(sl))
								apmAwsSite.Nodes = nodes
								for i, set := range sl {
									if set != nil {
										nodes[i] = &ves_io_schema_nfv_service.ServiceNodesAWSType{}
										nodesMapStrToI := set.(map[string]interface{})

										if w, ok := nodesMapStrToI["aws_az_name"]; ok && !isIntfNil(w) {
											nodes[i].AwsAzName = w.(string)
										}

										mgmtSubnetChoiceTypeFound := false

										if v, ok := nodesMapStrToI["mgmt_subnet"]; ok && !isIntfNil(v) && !mgmtSubnetChoiceTypeFound {

											mgmtSubnetChoiceTypeFound = true
											mgmtSubnetChoiceInt := &ves_io_schema_nfv_service.ServiceNodesAWSType_MgmtSubnet{}
											mgmtSubnetChoiceInt.MgmtSubnet = &ves_io_schema_views.CloudSubnetType{}
											nodes[i].MgmtSubnetChoice = mgmtSubnetChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := cs["existing_subnet_id"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.CloudSubnetType_ExistingSubnetId{}

														mgmtSubnetChoiceInt.MgmtSubnet.Choice = choiceInt

														choiceInt.ExistingSubnetId = v.(string)

													}

													if v, ok := cs["subnet_param"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.CloudSubnetType_SubnetParam{}
														choiceInt.SubnetParam = &ves_io_schema_views.CloudSubnetParamType{}
														mgmtSubnetChoiceInt.MgmtSubnet.Choice = choiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["ipv4"]; ok && !isIntfNil(v) {

																	choiceInt.SubnetParam.Ipv4 = v.(string)

																}

																if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

																	choiceInt.SubnetParam.Ipv6 = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := nodesMapStrToI["reserved_mgmt_subnet"]; ok && !isIntfNil(v) && !mgmtSubnetChoiceTypeFound {

											mgmtSubnetChoiceTypeFound = true

											if v.(bool) {
												mgmtSubnetChoiceInt := &ves_io_schema_nfv_service.ServiceNodesAWSType_ReservedMgmtSubnet{}
												mgmtSubnetChoiceInt.ReservedMgmtSubnet = &ves_io_schema.Empty{}
												nodes[i].MgmtSubnetChoice = mgmtSubnetChoiceInt
											}

										}

										if w, ok := nodesMapStrToI["node_name"]; ok && !isIntfNil(w) {
											nodes[i].NodeName = w.(string)
										}

										tunnelPrefixChoiceTypeFound := false

										if v, ok := nodesMapStrToI["automatic_prefix"]; ok && !isIntfNil(v) && !tunnelPrefixChoiceTypeFound {

											tunnelPrefixChoiceTypeFound = true

											if v.(bool) {
												tunnelPrefixChoiceInt := &ves_io_schema_nfv_service.ServiceNodesAWSType_AutomaticPrefix{}
												tunnelPrefixChoiceInt.AutomaticPrefix = &ves_io_schema.Empty{}
												nodes[i].TunnelPrefixChoice = tunnelPrefixChoiceInt
											}

										}

										if v, ok := nodesMapStrToI["tunnel_prefix"]; ok && !isIntfNil(v) && !tunnelPrefixChoiceTypeFound {

											tunnelPrefixChoiceTypeFound = true
											tunnelPrefixChoiceInt := &ves_io_schema_nfv_service.ServiceNodesAWSType_TunnelPrefix{}

											nodes[i].TunnelPrefixChoice = tunnelPrefixChoiceInt

											tunnelPrefixChoiceInt.TunnelPrefix = v.(string)

										}

									}
								}

							}

							if w, ok := apmAwsSiteMapStrToI["ssh_key"]; ok && !isIntfNil(w) {
								apmAwsSite.SshKey = w.(string)
							}

							if w, ok := apmAwsSiteMapStrToI["tags"]; ok && !isIntfNil(w) {
								ms := map[string]string{}
								for k, v := range w.(map[string]interface{}) {
									ms[k] = v.(string)
								}
								apmAwsSite.Tags = ms
							}

						}
					}

				}

				licenseTypeTypeFound := false

				if v, ok := cs["market_place_image"]; ok && !isIntfNil(v) && !licenseTypeTypeFound {

					licenseTypeTypeFound = true
					licenseTypeInt := &ves_io_schema_bigip_apm.AWSSiteTypeChoice_MarketPlaceImage{}
					licenseTypeInt.MarketPlaceImage = &ves_io_schema_bigip_apm.AWSMarketPlaceImageTypeAPMaaS{}
					siteTypeChoiceInt.AwsSiteTypeChoice.LicenseType = licenseTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							amiChoiceTypeFound := false

							if v, ok := cs["best_plus_pay_g200_mbps"]; ok && !isIntfNil(v) && !amiChoiceTypeFound {

								amiChoiceTypeFound = true

								if v.(bool) {
									amiChoiceInt := &ves_io_schema_bigip_apm.AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps{}
									amiChoiceInt.BestPlusPayG200Mbps = &ves_io_schema.Empty{}
									licenseTypeInt.MarketPlaceImage.AmiChoice = amiChoiceInt
								}

							}

							if v, ok := cs["best_plus_payg_1gbps"]; ok && !isIntfNil(v) && !amiChoiceTypeFound {

								amiChoiceTypeFound = true

								if v.(bool) {
									amiChoiceInt := &ves_io_schema_bigip_apm.AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps{}
									amiChoiceInt.BestPlusPayg_1Gbps = &ves_io_schema.Empty{}
									licenseTypeInt.MarketPlaceImage.AmiChoice = amiChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("baremetal_site_type_choice"); ok && !isIntfNil(v) && !siteTypeChoiceTypeFound {

		siteTypeChoiceTypeFound = true
		siteTypeChoiceInt := &ves_io_schema_bigip_apm.CreateSpecType_BaremetalSiteTypeChoice{}
		siteTypeChoiceInt.BaremetalSiteTypeChoice = &ves_io_schema_bigip_apm.F5BigIpAppStackBareMetalTypeChoice{}
		createSpec.SiteTypeChoice = siteTypeChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["f5_bare_metal_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					f5BareMetalSite := &ves_io_schema_nfv_service.F5BigIpAppStackBareMetalType{}
					siteTypeChoiceInt.BaremetalSiteTypeChoice.F5BareMetalSite = f5BareMetalSite
					for _, set := range sl {
						if set != nil {
							f5BareMetalSiteMapStrToI := set.(map[string]interface{})

							if v, ok := f5BareMetalSiteMapStrToI["admin_password"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								adminPassword := &ves_io_schema.SecretType{}
								f5BareMetalSite.AdminPassword = adminPassword
								for _, set := range sl {
									if set != nil {
										adminPasswordMapStrToI := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := adminPasswordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											adminPassword.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := adminPasswordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											adminPassword.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							if w, ok := f5BareMetalSiteMapStrToI["admin_username"]; ok && !isIntfNil(w) {
								f5BareMetalSite.AdminUsername = w.(string)
							}

							if v, ok := f5BareMetalSiteMapStrToI["bare_metal_site"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bareMetalSiteInt := &ves_io_schema_views.ObjectRefType{}
								f5BareMetalSite.BareMetalSite = bareMetalSiteInt

								for _, set := range sl {
									if set != nil {
										bmsMapToStrVal := set.(map[string]interface{})
										if val, ok := bmsMapToStrVal["name"]; ok && !isIntfNil(v) {
											bareMetalSiteInt.Name = val.(string)
										}
										if val, ok := bmsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
											bareMetalSiteInt.Namespace = val.(string)
										}

										if val, ok := bmsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
											bareMetalSiteInt.Tenant = val.(string)
										}
									}
								}

							}

							if v, ok := f5BareMetalSiteMapStrToI["bigiq_instance"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bigiqInstance := &ves_io_schema_nfv_service.BigIqInstanceType{}
								f5BareMetalSite.BigiqInstance = bigiqInstance
								for _, set := range sl {
									if set != nil {
										bigiqInstanceMapStrToI := set.(map[string]interface{})

										if w, ok := bigiqInstanceMapStrToI["license_pool_name"]; ok && !isIntfNil(w) {
											bigiqInstance.LicensePoolName = w.(string)
										}

										if w, ok := bigiqInstanceMapStrToI["license_server_ip"]; ok && !isIntfNil(w) {
											bigiqInstance.LicenseServerIp = w.(string)
										}

										if v, ok := bigiqInstanceMapStrToI["password"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											password := &ves_io_schema.SecretType{}
											bigiqInstance.Password = password
											for _, set := range sl {
												if set != nil {
													passwordMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														password.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := bigiqInstanceMapStrToI["sku_name"]; ok && !isIntfNil(w) {
											bigiqInstance.SkuName = w.(string)
										}

										if w, ok := bigiqInstanceMapStrToI["username"]; ok && !isIntfNil(w) {
											bigiqInstance.Username = w.(string)
										}

									}
								}

							}

							if v, ok := f5BareMetalSiteMapStrToI["nodes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								nodes := make([]*ves_io_schema_nfv_service.ServiceNodesBareMetalType, len(sl))
								f5BareMetalSite.Nodes = nodes
								for i, set := range sl {
									if set != nil {
										nodes[i] = &ves_io_schema_nfv_service.ServiceNodesBareMetalType{}
										nodesMapStrToI := set.(map[string]interface{})

										if v, ok := nodesMapStrToI["bm_node_memory_size"]; ok && !isIntfNil(v) {

											nodes[i].BmNodeMemorySize = ves_io_schema_nfv_service.BMNodeMemorySize(ves_io_schema_nfv_service.BMNodeMemorySize_value[v.(string)])

										}

										if v, ok := nodesMapStrToI["bm_virtual_cpu_count"]; ok && !isIntfNil(v) {

											nodes[i].BmVirtualCpuCount = ves_io_schema_nfv_service.BMNodeVirtualCpuCount(ves_io_schema_nfv_service.BMNodeVirtualCpuCount_value[v.(string)])

										}

										if v, ok := nodesMapStrToI["external_interface"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											externalInterface := &ves_io_schema_nfv_service.InterfaceDetails{}
											nodes[i].ExternalInterface = externalInterface
											for _, set := range sl {
												if set != nil {
													externalInterfaceMapStrToI := set.(map[string]interface{})

													if v, ok := externalInterfaceMapStrToI["interface"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														intfInt := &ves_io_schema_views.ObjectRefType{}
														externalInterface.Interface = intfInt

														for _, set := range sl {
															if set != nil {
																iMapToStrVal := set.(map[string]interface{})
																if val, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
																	intfInt.Name = val.(string)
																}
																if val, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	intfInt.Namespace = val.(string)
																}

																if val, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	intfInt.Tenant = val.(string)
																}
															}
														}

													}

													if w, ok := externalInterfaceMapStrToI["network_gateway"]; ok && !isIntfNil(w) {
														externalInterface.NetworkGateway = w.(string)
													}

													if w, ok := externalInterfaceMapStrToI["network_self_ip"]; ok && !isIntfNil(w) {
														externalInterface.NetworkSelfIp = w.(string)
													}

												}
											}

										}

										if v, ok := nodesMapStrToI["internal_interface"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											internalInterface := &ves_io_schema_nfv_service.InterfaceDetails{}
											nodes[i].InternalInterface = internalInterface
											for _, set := range sl {
												if set != nil {
													internalInterfaceMapStrToI := set.(map[string]interface{})

													if v, ok := internalInterfaceMapStrToI["interface"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														intfInt := &ves_io_schema_views.ObjectRefType{}
														internalInterface.Interface = intfInt

														for _, set := range sl {
															if set != nil {
																iMapToStrVal := set.(map[string]interface{})
																if val, ok := iMapToStrVal["name"]; ok && !isIntfNil(v) {
																	intfInt.Name = val.(string)
																}
																if val, ok := iMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	intfInt.Namespace = val.(string)
																}

																if val, ok := iMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	intfInt.Tenant = val.(string)
																}
															}
														}

													}

													if w, ok := internalInterfaceMapStrToI["network_gateway"]; ok && !isIntfNil(w) {
														internalInterface.NetworkGateway = w.(string)
													}

													if w, ok := internalInterfaceMapStrToI["network_self_ip"]; ok && !isIntfNil(w) {
														internalInterface.NetworkSelfIp = w.(string)
													}

												}
											}

										}

										if w, ok := nodesMapStrToI["node_name"]; ok && !isIntfNil(w) {
											nodes[i].NodeName = w.(string)
										}

									}
								}

							}

							if w, ok := f5BareMetalSiteMapStrToI["public_download_url"]; ok && !isIntfNil(w) {
								f5BareMetalSite.PublicDownloadUrl = w.(string)
							}

							if w, ok := f5BareMetalSiteMapStrToI["ssh_key"]; ok && !isIntfNil(w) {
								f5BareMetalSite.SshKey = w.(string)
							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra Apm object with struct: %+v", createReq)

	createApmResp, err := client.CreateObject(context.Background(), ves_io_schema_bigip_apm.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating Apm: %s", err)
	}
	d.SetId(createApmResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraApmRead(d, meta)
}

func resourceVolterraApmRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_bigip_apm.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Apm %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Apm %q: %s", d.Id(), err)
	}
	return setApmFields(client, d, resp)
}

func setApmFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraApmUpdate updates Apm resource
func resourceVolterraApmUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_bigip_apm.ReplaceSpecType{}
	updateReq := &ves_io_schema_bigip_apm.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	httpManagementChoiceTypeFound := false

	if v, ok := d.GetOk("https_management"); ok && !isIntfNil(v) && !httpManagementChoiceTypeFound {

		httpManagementChoiceTypeFound = true
		httpManagementChoiceInt := &ves_io_schema_bigip_apm.ReplaceSpecType_HttpsManagement{}
		httpManagementChoiceInt.HttpsManagement = &ves_io_schema_nfv_service.ServiceHttpsManagementType{}
		updateSpec.HttpManagementChoice = httpManagementChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				advertiseChoiceTypeFound := false

				if v, ok := cs["advertise_on_internet"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnInternet{}
					advertiseChoiceInt.AdvertiseOnInternet = &ves_io_schema_views.AdvertisePublic{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIp := &ves_io_schema_views.ObjectRefType{}
								advertiseChoiceInt.AdvertiseOnInternet.PublicIp = publicIp
								for _, set := range sl {
									if set != nil {
										publicIpMapStrToI := set.(map[string]interface{})

										if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
											publicIp.Name = w.(string)
										}

										if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
											publicIp.Namespace = w.(string)
										}

										if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
											publicIp.Tenant = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_internet_default_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip{}
						advertiseChoiceInt.AdvertiseOnInternetDefaultVip = &ves_io_schema.Empty{}
						httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt
					}

				}

				if v, ok := cs["advertise_on_sli_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSliVip{}
					advertiseChoiceInt.AdvertiseOnSliVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSliVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSliVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSliVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSliVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_internet_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloInternetVip{}
					advertiseChoiceInt.AdvertiseOnSloInternetVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloInternetVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloInternetVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloInternetVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloInternetVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_sli"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloSli{}
					advertiseChoiceInt.AdvertiseOnSloSli = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloSli.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloSli.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloSli.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloSli.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["advertise_on_slo_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_AdvertiseOnSloVip{}
					advertiseChoiceInt.AdvertiseOnSloVip = &ves_io_schema_views.DownstreamTlsParamsType{}
					httpManagementChoiceInt.HttpsManagement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									advertiseChoiceInt.AdvertiseOnSloVip.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
								advertiseChoiceInt.AdvertiseOnSloVip.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

										}

										crlChoiceTypeFound := false

										if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true
											crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
											crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														crlChoiceInt.Crl.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

											crlChoiceTypeFound = true

											if v.(bool) {
												crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
												crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
											}

										}

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

											mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

										xfccHeaderTypeFound := false

										if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true

											if v.(bool) {
												xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
												xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
												mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
											}

										}

										if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

											xfccHeaderTypeFound = true
											xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
											xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
											mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

														xfcc_header_elementsList := []ves_io_schema.XfccElement{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
															}
															xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
														}
														xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								advertiseChoiceInt.AdvertiseOnSloVip.TlsCertificates = tlsCertificates
								for i, set := range sl {
									if set != nil {
										tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
										tlsCertificatesMapStrToI := set.(map[string]interface{})

										if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
											tlsCertificates[i].CertificateUrl = w.(string)
										}

										if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
											tlsCertificates[i].Description = w.(string)
										}

										ocspStaplingChoiceTypeFound := false

										if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
											ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

														hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
															}
															hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
														}
														ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

													}

												}
											}

										}

										if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
											ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

											ocspStaplingChoiceTypeFound = true
											ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
											ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
											tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										}

										if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											privateKey := &ves_io_schema.SecretType{}
											tlsCertificates[i].PrivateKey = privateKey
											for _, set := range sl {
												if set != nil {
													privateKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														privateKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								advertiseChoiceInt.AdvertiseOnSloVip.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["domain_suffix"]; ok && !isIntfNil(v) {

					httpManagementChoiceInt.HttpsManagement.DomainSuffix = v.(string)

				}

				portChoiceTypeFound := false

				if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true

					if v.(bool) {
						portChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_DefaultHttpsPort{}
						portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
						httpManagementChoiceInt.HttpsManagement.PortChoice = portChoiceInt
					}

				}

				if v, ok := cs["https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_nfv_service.ServiceHttpsManagementType_HttpsPort{}

					httpManagementChoiceInt.HttpsManagement.PortChoice = portChoiceInt

					portChoiceInt.HttpsPort = uint32(v.(int))

				}

			}
		}

	}

	siteTypeChoiceTypeFound := false

	if v, ok := d.GetOk("aws_site_type_choice"); ok && !isIntfNil(v) && !siteTypeChoiceTypeFound {

		siteTypeChoiceTypeFound = true
		siteTypeChoiceInt := &ves_io_schema_bigip_apm.ReplaceSpecType_AwsSiteTypeChoice{}
		siteTypeChoiceInt.AwsSiteTypeChoice = &ves_io_schema_bigip_apm.AWSSiteTypeChoiceReplaceType{}
		updateSpec.SiteTypeChoice = siteTypeChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["apm_aws_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apmAwsSite := &ves_io_schema_bigip_apm.APMBigIpAWSReplaceType{}
					siteTypeChoiceInt.AwsSiteTypeChoice.ApmAwsSite = apmAwsSite
					for _, set := range sl {
						if set != nil {
							apmAwsSiteMapStrToI := set.(map[string]interface{})

							if v, ok := apmAwsSiteMapStrToI["endpoint_service"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								endpointService := &ves_io_schema_bigip_apm.EndpointServiceReplaceType{}
								apmAwsSite.EndpointService = endpointService
								for _, set := range sl {
									if set != nil {
										endpointServiceMapStrToI := set.(map[string]interface{})

										externalVipChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["advertise_on_slo_ip"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_AdvertiseOnSloIp{}
												externalVipChoiceInt.AdvertiseOnSloIp = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["advertise_on_slo_ip_external"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_AdvertiseOnSloIpExternal{}
												externalVipChoiceInt.AdvertiseOnSloIpExternal = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["disable_advertise_on_slo_ip"]; ok && !isIntfNil(v) && !externalVipChoiceTypeFound {

											externalVipChoiceTypeFound = true

											if v.(bool) {
												externalVipChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_DisableAdvertiseOnSloIp{}
												externalVipChoiceInt.DisableAdvertiseOnSloIp = &ves_io_schema.Empty{}
												endpointService.ExternalVipChoice = externalVipChoiceInt
											}

										}

										tcpPortChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["custom_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true
											tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_CustomTcpPorts{}
											tcpPortChoiceInt.CustomTcpPorts = &ves_io_schema.PortRangesType{}
											endpointService.TcpPortChoice = tcpPortChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ports"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ports")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tcpPortChoiceInt.CustomTcpPorts.Ports = ls

													}

												}
											}

										}

										if v, ok := endpointServiceMapStrToI["default_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_DefaultTcpPorts{}
												tcpPortChoiceInt.DefaultTcpPorts = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["http_port"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_HttpPort{}
												tcpPortChoiceInt.HttpPort = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["https_port"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_HttpsPort{}
												tcpPortChoiceInt.HttpsPort = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										if v, ok := endpointServiceMapStrToI["no_tcp_ports"]; ok && !isIntfNil(v) && !tcpPortChoiceTypeFound {

											tcpPortChoiceTypeFound = true

											if v.(bool) {
												tcpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_NoTcpPorts{}
												tcpPortChoiceInt.NoTcpPorts = &ves_io_schema.Empty{}
												endpointService.TcpPortChoice = tcpPortChoiceInt
											}

										}

										udpPortChoiceTypeFound := false

										if v, ok := endpointServiceMapStrToI["custom_udp_ports"]; ok && !isIntfNil(v) && !udpPortChoiceTypeFound {

											udpPortChoiceTypeFound = true
											udpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_CustomUdpPorts{}
											udpPortChoiceInt.CustomUdpPorts = &ves_io_schema.PortRangesType{}
											endpointService.UdpPortChoice = udpPortChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ports"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ports")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														udpPortChoiceInt.CustomUdpPorts.Ports = ls

													}

												}
											}

										}

										if v, ok := endpointServiceMapStrToI["no_udp_ports"]; ok && !isIntfNil(v) && !udpPortChoiceTypeFound {

											udpPortChoiceTypeFound = true

											if v.(bool) {
												udpPortChoiceInt := &ves_io_schema_bigip_apm.EndpointServiceReplaceType_NoUdpPorts{}
												udpPortChoiceInt.NoUdpPorts = &ves_io_schema.Empty{}
												endpointService.UdpPortChoice = udpPortChoiceInt
											}

										}

									}
								}

							}

							if w, ok := apmAwsSiteMapStrToI["tags"]; ok && !isIntfNil(w) {
								ms := map[string]string{}
								for k, v := range w.(map[string]interface{}) {
									ms[k] = v.(string)
								}
								apmAwsSite.Tags = ms
							}

						}
					}

				}

			}
		}

	}

	if _, ok := d.GetOk("baremetal_site_type_choice"); ok && !siteTypeChoiceTypeFound {

		siteTypeChoiceTypeFound = true
		siteTypeChoiceInt := &ves_io_schema_bigip_apm.ReplaceSpecType_BaremetalSiteTypeChoice{}
		siteTypeChoiceInt.BaremetalSiteTypeChoice = &ves_io_schema_bigip_apm.F5BigIpAppStackBareMetalChoiceReplaceType{}
		updateSpec.SiteTypeChoice = siteTypeChoiceInt

	}

	log.Printf("[DEBUG] Updating Volterra Apm obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_bigip_apm.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating Apm: %s", err)
	}

	return resourceVolterraApmRead(d, meta)
}

func resourceVolterraApmDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_bigip_apm.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Apm %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Apm before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra Apm obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_bigip_apm.ObjectType, namespace, name, opts...)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_waf_exclusion_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_exclusion_policy"
)

// resourceVolterraWafExclusionPolicy is implementation of Volterra's WafExclusionPolicy resources
func resourceVolterraWafExclusionPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraWafExclusionPolicyCreate,
		Read:   resourceVolterraWafExclusionPolicyRead,
		Update: resourceVolterraWafExclusionPolicyUpdate,
		Delete: resourceVolterraWafExclusionPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"waf_exclusion_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"methods": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"any_path": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"path_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"path_regex": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"app_firewall_detection_control": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exclude_attack_type_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_attack_type": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_bot_name_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bot_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_signature_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"signature_id": {
													Type:     schema.TypeInt,
													Required: true,
												},
											},
										},
									},

									"exclude_violation_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_violation": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"waf_skip_processing": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraWafExclusionPolicyCreate creates WafExclusionPolicy resource
func resourceVolterraWafExclusionPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_waf_exclusion_policy.CreateSpecType{}
	createReq := &ves_io_schema_waf_exclusion_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//waf_exclusion_rules
	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		createSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra WafExclusionPolicy object with struct: %+v", createReq)

	createWafExclusionPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_waf_exclusion_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating WafExclusionPolicy: %s", err)
	}
	d.SetId(createWafExclusionPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraWafExclusionPolicyRead(d, meta)
}

func resourceVolterraWafExclusionPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_waf_exclusion_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] WafExclusionPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra WafExclusionPolicy %q: %s", d.Id(), err)
	}
	return setWafExclusionPolicyFields(client, d, resp)
}

func setWafExclusionPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraWafExclusionPolicyUpdate updates WafExclusionPolicy resource
func resourceVolterraWafExclusionPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_waf_exclusion_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_waf_exclusion_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		updateSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra WafExclusionPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_waf_exclusion_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating WafExclusionPolicy: %s", err)
	}

	return resourceVolterraWafExclusionPolicyRead(d, meta)
}

func resourceVolterraWafExclusionPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_waf_exclusion_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] WafExclusionPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra WafExclusionPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra WafExclusionPolicy obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_waf_exclusion_policy.ObjectType, namespace, name, opts...)
}

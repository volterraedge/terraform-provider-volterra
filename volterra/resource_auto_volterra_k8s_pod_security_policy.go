//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_k8s_pod_security_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy"
)

// resourceVolterraK8SPodSecurityPolicy is implementation of Volterra's K8SPodSecurityPolicy resources
func resourceVolterraK8SPodSecurityPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraK8SPodSecurityPolicyCreate,
		Read:   resourceVolterraK8SPodSecurityPolicyRead,
		Update: resourceVolterraK8SPodSecurityPolicyUpdate,
		Delete: resourceVolterraK8SPodSecurityPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"psp_spec": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_privilege_escalation": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"allowed_capabilities": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"capabilities": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_allowed_capabilities": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"allowed_csi_drivers": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allowed_flex_volumes": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allowed_host_paths": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"path_prefix": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"read_only": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"allowed_proc_mounts": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allowed_unsafe_sysctls": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"default_allow_privilege_escalation": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_capabilities": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"capabilities": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_default_capabilities": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"drop_capabilities": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"capabilities": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_drop_capabilities": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"forbidden_sysctls": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"fs_group_strategy_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"id_ranges": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"max_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"min_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"rule": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"no_fs_groups": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_run_as_group": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"run_as_group": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"id_ranges": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"max_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"min_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"rule": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"host_ipc": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"host_network": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"host_pid": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"host_port_ranges": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"privileged": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"read_only_root_filesystem": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_runtime_class": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"runtime_class": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"allowed_runtime_class_names": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"default_runtime_class_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"no_se_linux_options": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"se_linux_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"level": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"role": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"rule": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"user": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"no_supplemental_groups": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"supplemental_groups": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"id_ranges": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"max_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"min_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"rule": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"no_run_as_user": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"run_as_user": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"id_ranges": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"max_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"min_id": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"rule": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"volumes": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"yaml": {

				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

// resourceVolterraK8SPodSecurityPolicyCreate creates K8SPodSecurityPolicy resource
func resourceVolterraK8SPodSecurityPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_k8s_pod_security_policy.CreateSpecType{}
	createReq := &ves_io_schema_k8s_pod_security_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//config_method_choice

	configMethodChoiceTypeFound := false

	if v, ok := d.GetOk("psp_spec"); ok && !configMethodChoiceTypeFound {

		configMethodChoiceTypeFound = true
		configMethodChoiceInt := &ves_io_schema_k8s_pod_security_policy.CreateSpecType_PspSpec{}
		configMethodChoiceInt.PspSpec = &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType{}
		createSpec.ConfigMethodChoice = configMethodChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["allow_privilege_escalation"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.AllowPrivilegeEscalation = v.(bool)

			}

			allowedCapabilitiesChoiceTypeFound := false

			if v, ok := cs["allowed_capabilities"]; ok && !isIntfNil(v) && !allowedCapabilitiesChoiceTypeFound {

				allowedCapabilitiesChoiceTypeFound = true
				allowedCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_AllowedCapabilities{}
				allowedCapabilitiesChoiceInt.AllowedCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.AllowedCapabilitiesChoice = allowedCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						allowedCapabilitiesChoiceInt.AllowedCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_allowed_capabilities"]; ok && !isIntfNil(v) && !allowedCapabilitiesChoiceTypeFound {

				allowedCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					allowedCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoAllowedCapabilities{}
					allowedCapabilitiesChoiceInt.NoAllowedCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.AllowedCapabilitiesChoice = allowedCapabilitiesChoiceInt
				}

			}

			if v, ok := cs["allowed_csi_drivers"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedCsiDrivers = ls

			}

			if v, ok := cs["allowed_flex_volumes"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedFlexVolumes = ls

			}

			if v, ok := cs["allowed_host_paths"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				allowedHostPaths := make([]*ves_io_schema_k8s_pod_security_policy.HostPathType, len(sl))
				configMethodChoiceInt.PspSpec.AllowedHostPaths = allowedHostPaths
				for i, set := range sl {
					allowedHostPaths[i] = &ves_io_schema_k8s_pod_security_policy.HostPathType{}
					allowedHostPathsMapStrToI := set.(map[string]interface{})

					if w, ok := allowedHostPathsMapStrToI["path_prefix"]; ok && !isIntfNil(w) {
						allowedHostPaths[i].PathPrefix = w.(string)
					}

					if w, ok := allowedHostPathsMapStrToI["read_only"]; ok && !isIntfNil(w) {
						allowedHostPaths[i].ReadOnly = w.(bool)
					}

				}

			}

			if v, ok := cs["allowed_proc_mounts"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedProcMounts = ls

			}

			if v, ok := cs["allowed_unsafe_sysctls"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedUnsafeSysctls = ls

			}

			if v, ok := cs["default_allow_privilege_escalation"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.DefaultAllowPrivilegeEscalation = v.(bool)

			}

			defaultCapabilitiesChoiceTypeFound := false

			if v, ok := cs["default_capabilities"]; ok && !isIntfNil(v) && !defaultCapabilitiesChoiceTypeFound {

				defaultCapabilitiesChoiceTypeFound = true
				defaultCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_DefaultCapabilities{}
				defaultCapabilitiesChoiceInt.DefaultCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.DefaultCapabilitiesChoice = defaultCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						defaultCapabilitiesChoiceInt.DefaultCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_default_capabilities"]; ok && !isIntfNil(v) && !defaultCapabilitiesChoiceTypeFound {

				defaultCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					defaultCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoDefaultCapabilities{}
					defaultCapabilitiesChoiceInt.NoDefaultCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.DefaultCapabilitiesChoice = defaultCapabilitiesChoiceInt
				}

			}

			dropCapabilitiesChoiceTypeFound := false

			if v, ok := cs["drop_capabilities"]; ok && !isIntfNil(v) && !dropCapabilitiesChoiceTypeFound {

				dropCapabilitiesChoiceTypeFound = true
				dropCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_DropCapabilities{}
				dropCapabilitiesChoiceInt.DropCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.DropCapabilitiesChoice = dropCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						dropCapabilitiesChoiceInt.DropCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_drop_capabilities"]; ok && !isIntfNil(v) && !dropCapabilitiesChoiceTypeFound {

				dropCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					dropCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoDropCapabilities{}
					dropCapabilitiesChoiceInt.NoDropCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.DropCapabilitiesChoice = dropCapabilitiesChoiceInt
				}

			}

			if v, ok := cs["forbidden_sysctls"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.ForbiddenSysctls = ls

			}

			fsGroupChoiceTypeFound := false

			if v, ok := cs["fs_group_strategy_options"]; ok && !isIntfNil(v) && !fsGroupChoiceTypeFound {

				fsGroupChoiceTypeFound = true
				fsGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_FsGroupStrategyOptions{}
				fsGroupChoiceInt.FsGroupStrategyOptions = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.FsGroupChoice = fsGroupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						fsGroupChoiceInt.FsGroupStrategyOptions.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						fsGroupChoiceInt.FsGroupStrategyOptions.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["no_fs_groups"]; ok && !isIntfNil(v) && !fsGroupChoiceTypeFound {

				fsGroupChoiceTypeFound = true

				if v.(bool) {
					fsGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoFsGroups{}
					fsGroupChoiceInt.NoFsGroups = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.FsGroupChoice = fsGroupChoiceInt
				}

			}

			groupChoiceTypeFound := false

			if v, ok := cs["no_run_as_group"]; ok && !isIntfNil(v) && !groupChoiceTypeFound {

				groupChoiceTypeFound = true

				if v.(bool) {
					groupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRunAsGroup{}
					groupChoiceInt.NoRunAsGroup = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.GroupChoice = groupChoiceInt
				}

			}

			if v, ok := cs["run_as_group"]; ok && !isIntfNil(v) && !groupChoiceTypeFound {

				groupChoiceTypeFound = true
				groupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RunAsGroup{}
				groupChoiceInt.RunAsGroup = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.GroupChoice = groupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						groupChoiceInt.RunAsGroup.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						groupChoiceInt.RunAsGroup.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["host_ipc"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostIpc = v.(bool)

			}

			if v, ok := cs["host_network"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostNetwork = v.(bool)

			}

			if v, ok := cs["host_pid"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostPid = v.(bool)

			}

			if v, ok := cs["host_port_ranges"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostPortRanges = v.(string)

			}

			if v, ok := cs["privileged"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.Privileged = v.(bool)

			}

			if v, ok := cs["read_only_root_filesystem"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.ReadOnlyRootFilesystem = v.(bool)

			}

			runtimeClassChoiceTypeFound := false

			if v, ok := cs["no_runtime_class"]; ok && !isIntfNil(v) && !runtimeClassChoiceTypeFound {

				runtimeClassChoiceTypeFound = true

				if v.(bool) {
					runtimeClassChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRuntimeClass{}
					runtimeClassChoiceInt.NoRuntimeClass = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.RuntimeClassChoice = runtimeClassChoiceInt
				}

			}

			if v, ok := cs["runtime_class"]; ok && !isIntfNil(v) && !runtimeClassChoiceTypeFound {

				runtimeClassChoiceTypeFound = true
				runtimeClassChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RuntimeClass{}
				runtimeClassChoiceInt.RuntimeClass = &ves_io_schema_k8s_pod_security_policy.RuntimeClassStrategyOptions{}
				configMethodChoiceInt.PspSpec.RuntimeClassChoice = runtimeClassChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["allowed_runtime_class_names"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						runtimeClassChoiceInt.RuntimeClass.AllowedRuntimeClassNames = ls

					}

					if v, ok := cs["default_runtime_class_name"]; ok && !isIntfNil(v) {

						runtimeClassChoiceInt.RuntimeClass.DefaultRuntimeClassName = v.(string)

					}

				}

			}

			seLinuxChoiceTypeFound := false

			if v, ok := cs["no_se_linux_options"]; ok && !isIntfNil(v) && !seLinuxChoiceTypeFound {

				seLinuxChoiceTypeFound = true

				if v.(bool) {
					seLinuxChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoSeLinuxOptions{}
					seLinuxChoiceInt.NoSeLinuxOptions = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.SeLinuxChoice = seLinuxChoiceInt
				}

			}

			if v, ok := cs["se_linux_options"]; ok && !isIntfNil(v) && !seLinuxChoiceTypeFound {

				seLinuxChoiceTypeFound = true
				seLinuxChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_SeLinuxOptions{}
				seLinuxChoiceInt.SeLinuxOptions = &ves_io_schema_k8s_pod_security_policy.SELinuxStrategyOptions{}
				configMethodChoiceInt.PspSpec.SeLinuxChoice = seLinuxChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["level"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Level = v.(string)

					}

					if v, ok := cs["role"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Role = v.(string)

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Rule = v.(string)

					}

					if v, ok := cs["type"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Type = v.(string)

					}

					if v, ok := cs["user"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.User = v.(string)

					}

				}

			}

			supplementalGroupChoiceTypeFound := false

			if v, ok := cs["no_supplemental_groups"]; ok && !isIntfNil(v) && !supplementalGroupChoiceTypeFound {

				supplementalGroupChoiceTypeFound = true

				if v.(bool) {
					supplementalGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoSupplementalGroups{}
					supplementalGroupChoiceInt.NoSupplementalGroups = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.SupplementalGroupChoice = supplementalGroupChoiceInt
				}

			}

			if v, ok := cs["supplemental_groups"]; ok && !isIntfNil(v) && !supplementalGroupChoiceTypeFound {

				supplementalGroupChoiceTypeFound = true
				supplementalGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_SupplementalGroups{}
				supplementalGroupChoiceInt.SupplementalGroups = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.SupplementalGroupChoice = supplementalGroupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						supplementalGroupChoiceInt.SupplementalGroups.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						supplementalGroupChoiceInt.SupplementalGroups.Rule = v.(string)

					}

				}

			}

			userChoiceTypeFound := false

			if v, ok := cs["no_run_as_user"]; ok && !isIntfNil(v) && !userChoiceTypeFound {

				userChoiceTypeFound = true

				if v.(bool) {
					userChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRunAsUser{}
					userChoiceInt.NoRunAsUser = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.UserChoice = userChoiceInt
				}

			}

			if v, ok := cs["run_as_user"]; ok && !isIntfNil(v) && !userChoiceTypeFound {

				userChoiceTypeFound = true
				userChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RunAsUser{}
				userChoiceInt.RunAsUser = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.UserChoice = userChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						userChoiceInt.RunAsUser.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						userChoiceInt.RunAsUser.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["volumes"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.Volumes = ls

			}

		}

	}

	if v, ok := d.GetOk("yaml"); ok && !configMethodChoiceTypeFound {

		configMethodChoiceTypeFound = true
		configMethodChoiceInt := &ves_io_schema_k8s_pod_security_policy.CreateSpecType_Yaml{}

		createSpec.ConfigMethodChoice = configMethodChoiceInt

		configMethodChoiceInt.Yaml = v.(string)

	}

	log.Printf("[DEBUG] Creating Volterra K8SPodSecurityPolicy object with struct: %+v", createReq)

	createK8SPodSecurityPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_k8s_pod_security_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating K8SPodSecurityPolicy: %s", err)
	}
	d.SetId(createK8SPodSecurityPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraK8SPodSecurityPolicyRead(d, meta)
}

func resourceVolterraK8SPodSecurityPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_k8s_pod_security_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] K8SPodSecurityPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra K8SPodSecurityPolicy %q: %s", d.Id(), err)
	}
	return setK8SPodSecurityPolicyFields(client, d, resp)
}

func setK8SPodSecurityPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraK8SPodSecurityPolicyUpdate updates K8SPodSecurityPolicy resource
func resourceVolterraK8SPodSecurityPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_k8s_pod_security_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_k8s_pod_security_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	configMethodChoiceTypeFound := false

	if v, ok := d.GetOk("psp_spec"); ok && !configMethodChoiceTypeFound {

		configMethodChoiceTypeFound = true
		configMethodChoiceInt := &ves_io_schema_k8s_pod_security_policy.ReplaceSpecType_PspSpec{}
		configMethodChoiceInt.PspSpec = &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType{}
		updateSpec.ConfigMethodChoice = configMethodChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["allow_privilege_escalation"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.AllowPrivilegeEscalation = v.(bool)

			}

			allowedCapabilitiesChoiceTypeFound := false

			if v, ok := cs["allowed_capabilities"]; ok && !isIntfNil(v) && !allowedCapabilitiesChoiceTypeFound {

				allowedCapabilitiesChoiceTypeFound = true
				allowedCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_AllowedCapabilities{}
				allowedCapabilitiesChoiceInt.AllowedCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.AllowedCapabilitiesChoice = allowedCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						allowedCapabilitiesChoiceInt.AllowedCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_allowed_capabilities"]; ok && !isIntfNil(v) && !allowedCapabilitiesChoiceTypeFound {

				allowedCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					allowedCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoAllowedCapabilities{}
					allowedCapabilitiesChoiceInt.NoAllowedCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.AllowedCapabilitiesChoice = allowedCapabilitiesChoiceInt
				}

			}

			if v, ok := cs["allowed_csi_drivers"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedCsiDrivers = ls

			}

			if v, ok := cs["allowed_flex_volumes"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedFlexVolumes = ls

			}

			if v, ok := cs["allowed_host_paths"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				allowedHostPaths := make([]*ves_io_schema_k8s_pod_security_policy.HostPathType, len(sl))
				configMethodChoiceInt.PspSpec.AllowedHostPaths = allowedHostPaths
				for i, set := range sl {
					allowedHostPaths[i] = &ves_io_schema_k8s_pod_security_policy.HostPathType{}
					allowedHostPathsMapStrToI := set.(map[string]interface{})

					if w, ok := allowedHostPathsMapStrToI["path_prefix"]; ok && !isIntfNil(w) {
						allowedHostPaths[i].PathPrefix = w.(string)
					}

					if w, ok := allowedHostPathsMapStrToI["read_only"]; ok && !isIntfNil(w) {
						allowedHostPaths[i].ReadOnly = w.(bool)
					}

				}

			}

			if v, ok := cs["allowed_proc_mounts"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedProcMounts = ls

			}

			if v, ok := cs["allowed_unsafe_sysctls"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.AllowedUnsafeSysctls = ls

			}

			if v, ok := cs["default_allow_privilege_escalation"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.DefaultAllowPrivilegeEscalation = v.(bool)

			}

			defaultCapabilitiesChoiceTypeFound := false

			if v, ok := cs["default_capabilities"]; ok && !isIntfNil(v) && !defaultCapabilitiesChoiceTypeFound {

				defaultCapabilitiesChoiceTypeFound = true
				defaultCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_DefaultCapabilities{}
				defaultCapabilitiesChoiceInt.DefaultCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.DefaultCapabilitiesChoice = defaultCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						defaultCapabilitiesChoiceInt.DefaultCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_default_capabilities"]; ok && !isIntfNil(v) && !defaultCapabilitiesChoiceTypeFound {

				defaultCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					defaultCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoDefaultCapabilities{}
					defaultCapabilitiesChoiceInt.NoDefaultCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.DefaultCapabilitiesChoice = defaultCapabilitiesChoiceInt
				}

			}

			dropCapabilitiesChoiceTypeFound := false

			if v, ok := cs["drop_capabilities"]; ok && !isIntfNil(v) && !dropCapabilitiesChoiceTypeFound {

				dropCapabilitiesChoiceTypeFound = true
				dropCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_DropCapabilities{}
				dropCapabilitiesChoiceInt.DropCapabilities = &ves_io_schema_k8s_pod_security_policy.CapabilityListType{}
				configMethodChoiceInt.PspSpec.DropCapabilitiesChoice = dropCapabilitiesChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["capabilities"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						dropCapabilitiesChoiceInt.DropCapabilities.Capabilities = ls

					}

				}

			}

			if v, ok := cs["no_drop_capabilities"]; ok && !isIntfNil(v) && !dropCapabilitiesChoiceTypeFound {

				dropCapabilitiesChoiceTypeFound = true

				if v.(bool) {
					dropCapabilitiesChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoDropCapabilities{}
					dropCapabilitiesChoiceInt.NoDropCapabilities = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.DropCapabilitiesChoice = dropCapabilitiesChoiceInt
				}

			}

			if v, ok := cs["forbidden_sysctls"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.ForbiddenSysctls = ls

			}

			fsGroupChoiceTypeFound := false

			if v, ok := cs["fs_group_strategy_options"]; ok && !isIntfNil(v) && !fsGroupChoiceTypeFound {

				fsGroupChoiceTypeFound = true
				fsGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_FsGroupStrategyOptions{}
				fsGroupChoiceInt.FsGroupStrategyOptions = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.FsGroupChoice = fsGroupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						fsGroupChoiceInt.FsGroupStrategyOptions.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						fsGroupChoiceInt.FsGroupStrategyOptions.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["no_fs_groups"]; ok && !isIntfNil(v) && !fsGroupChoiceTypeFound {

				fsGroupChoiceTypeFound = true

				if v.(bool) {
					fsGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoFsGroups{}
					fsGroupChoiceInt.NoFsGroups = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.FsGroupChoice = fsGroupChoiceInt
				}

			}

			groupChoiceTypeFound := false

			if v, ok := cs["no_run_as_group"]; ok && !isIntfNil(v) && !groupChoiceTypeFound {

				groupChoiceTypeFound = true

				if v.(bool) {
					groupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRunAsGroup{}
					groupChoiceInt.NoRunAsGroup = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.GroupChoice = groupChoiceInt
				}

			}

			if v, ok := cs["run_as_group"]; ok && !isIntfNil(v) && !groupChoiceTypeFound {

				groupChoiceTypeFound = true
				groupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RunAsGroup{}
				groupChoiceInt.RunAsGroup = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.GroupChoice = groupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						groupChoiceInt.RunAsGroup.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						groupChoiceInt.RunAsGroup.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["host_ipc"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostIpc = v.(bool)

			}

			if v, ok := cs["host_network"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostNetwork = v.(bool)

			}

			if v, ok := cs["host_pid"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostPid = v.(bool)

			}

			if v, ok := cs["host_port_ranges"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.HostPortRanges = v.(string)

			}

			if v, ok := cs["privileged"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.Privileged = v.(bool)

			}

			if v, ok := cs["read_only_root_filesystem"]; ok && !isIntfNil(v) {

				configMethodChoiceInt.PspSpec.ReadOnlyRootFilesystem = v.(bool)

			}

			runtimeClassChoiceTypeFound := false

			if v, ok := cs["no_runtime_class"]; ok && !isIntfNil(v) && !runtimeClassChoiceTypeFound {

				runtimeClassChoiceTypeFound = true

				if v.(bool) {
					runtimeClassChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRuntimeClass{}
					runtimeClassChoiceInt.NoRuntimeClass = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.RuntimeClassChoice = runtimeClassChoiceInt
				}

			}

			if v, ok := cs["runtime_class"]; ok && !isIntfNil(v) && !runtimeClassChoiceTypeFound {

				runtimeClassChoiceTypeFound = true
				runtimeClassChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RuntimeClass{}
				runtimeClassChoiceInt.RuntimeClass = &ves_io_schema_k8s_pod_security_policy.RuntimeClassStrategyOptions{}
				configMethodChoiceInt.PspSpec.RuntimeClassChoice = runtimeClassChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["allowed_runtime_class_names"]; ok && !isIntfNil(v) {

						ls := make([]string, len(v.([]interface{})))
						for i, v := range v.([]interface{}) {
							ls[i] = v.(string)
						}
						runtimeClassChoiceInt.RuntimeClass.AllowedRuntimeClassNames = ls

					}

					if v, ok := cs["default_runtime_class_name"]; ok && !isIntfNil(v) {

						runtimeClassChoiceInt.RuntimeClass.DefaultRuntimeClassName = v.(string)

					}

				}

			}

			seLinuxChoiceTypeFound := false

			if v, ok := cs["no_se_linux_options"]; ok && !isIntfNil(v) && !seLinuxChoiceTypeFound {

				seLinuxChoiceTypeFound = true

				if v.(bool) {
					seLinuxChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoSeLinuxOptions{}
					seLinuxChoiceInt.NoSeLinuxOptions = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.SeLinuxChoice = seLinuxChoiceInt
				}

			}

			if v, ok := cs["se_linux_options"]; ok && !isIntfNil(v) && !seLinuxChoiceTypeFound {

				seLinuxChoiceTypeFound = true
				seLinuxChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_SeLinuxOptions{}
				seLinuxChoiceInt.SeLinuxOptions = &ves_io_schema_k8s_pod_security_policy.SELinuxStrategyOptions{}
				configMethodChoiceInt.PspSpec.SeLinuxChoice = seLinuxChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["level"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Level = v.(string)

					}

					if v, ok := cs["role"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Role = v.(string)

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Rule = v.(string)

					}

					if v, ok := cs["type"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.Type = v.(string)

					}

					if v, ok := cs["user"]; ok && !isIntfNil(v) {

						seLinuxChoiceInt.SeLinuxOptions.User = v.(string)

					}

				}

			}

			supplementalGroupChoiceTypeFound := false

			if v, ok := cs["no_supplemental_groups"]; ok && !isIntfNil(v) && !supplementalGroupChoiceTypeFound {

				supplementalGroupChoiceTypeFound = true

				if v.(bool) {
					supplementalGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoSupplementalGroups{}
					supplementalGroupChoiceInt.NoSupplementalGroups = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.SupplementalGroupChoice = supplementalGroupChoiceInt
				}

			}

			if v, ok := cs["supplemental_groups"]; ok && !isIntfNil(v) && !supplementalGroupChoiceTypeFound {

				supplementalGroupChoiceTypeFound = true
				supplementalGroupChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_SupplementalGroups{}
				supplementalGroupChoiceInt.SupplementalGroups = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.SupplementalGroupChoice = supplementalGroupChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						supplementalGroupChoiceInt.SupplementalGroups.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						supplementalGroupChoiceInt.SupplementalGroups.Rule = v.(string)

					}

				}

			}

			userChoiceTypeFound := false

			if v, ok := cs["no_run_as_user"]; ok && !isIntfNil(v) && !userChoiceTypeFound {

				userChoiceTypeFound = true

				if v.(bool) {
					userChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_NoRunAsUser{}
					userChoiceInt.NoRunAsUser = &ves_io_schema.Empty{}
					configMethodChoiceInt.PspSpec.UserChoice = userChoiceInt
				}

			}

			if v, ok := cs["run_as_user"]; ok && !isIntfNil(v) && !userChoiceTypeFound {

				userChoiceTypeFound = true
				userChoiceInt := &ves_io_schema_k8s_pod_security_policy.PodSecurityPolicySpecType_RunAsUser{}
				userChoiceInt.RunAsUser = &ves_io_schema_k8s_pod_security_policy.IDStrategyOptionsType{}
				configMethodChoiceInt.PspSpec.UserChoice = userChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["id_ranges"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						idRanges := make([]*ves_io_schema_k8s_pod_security_policy.IDRangeType, len(sl))
						userChoiceInt.RunAsUser.IdRanges = idRanges
						for i, set := range sl {
							idRanges[i] = &ves_io_schema_k8s_pod_security_policy.IDRangeType{}
							idRangesMapStrToI := set.(map[string]interface{})

							if w, ok := idRangesMapStrToI["max_id"]; ok && !isIntfNil(w) {
								idRanges[i].MaxId = uint32(w.(int))
							}

							if w, ok := idRangesMapStrToI["min_id"]; ok && !isIntfNil(w) {
								idRanges[i].MinId = uint32(w.(int))
							}

						}

					}

					if v, ok := cs["rule"]; ok && !isIntfNil(v) {

						userChoiceInt.RunAsUser.Rule = v.(string)

					}

				}

			}

			if v, ok := cs["volumes"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				configMethodChoiceInt.PspSpec.Volumes = ls

			}

		}

	}

	if v, ok := d.GetOk("yaml"); ok && !configMethodChoiceTypeFound {

		configMethodChoiceTypeFound = true
		configMethodChoiceInt := &ves_io_schema_k8s_pod_security_policy.ReplaceSpecType_Yaml{}

		updateSpec.ConfigMethodChoice = configMethodChoiceInt

		configMethodChoiceInt.Yaml = v.(string)

	}

	log.Printf("[DEBUG] Updating Volterra K8SPodSecurityPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_k8s_pod_security_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating K8SPodSecurityPolicy: %s", err)
	}

	return resourceVolterraK8SPodSecurityPolicyRead(d, meta)
}

func resourceVolterraK8SPodSecurityPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_k8s_pod_security_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] K8SPodSecurityPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra K8SPodSecurityPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra K8SPodSecurityPolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_k8s_pod_security_policy.ObjectType, namespace, name)
}

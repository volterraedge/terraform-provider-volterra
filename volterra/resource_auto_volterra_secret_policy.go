//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_secret_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy"
	ves_io_schema_secret_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule"
	"github.com/gogo/protobuf/types"
)

// resourceVolterraSecretPolicy is implementation of Volterra's SecretPolicy resources
func resourceVolterraSecretPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraSecretPolicyCreate,
		Read:   resourceVolterraSecretPolicyRead,
		Update: resourceVolterraSecretPolicyUpdate,
		Delete: resourceVolterraSecretPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"algo": {
				Type:       schema.TypeString,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"allow_f5xc": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"decrypt_cache_timeout": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"legacy_rule_list": {

				Type:       schema.TypeSet,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"rules": {

							Type:       schema.TypeList,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:       schema.TypeString,
										Computed:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"name": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"namespace": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
									"tenant": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},

			"rule_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"metadata": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"disable": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"spec": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"action": {
													Type:     schema.TypeString,
													Required: true,
												},

												"client_name": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"client_name_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"client_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"label_matcher": {

													Type:       schema.TypeSet,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"keys": {

																Type: schema.TypeList,

																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"rules": {

				Type:       schema.TypeList,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:       schema.TypeString,
							Computed:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"name": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"namespace": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"tenant": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},
		},
	}
}

// resourceVolterraSecretPolicyCreate creates SecretPolicy resource
func resourceVolterraSecretPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_secret_policy.CreateSpecType{}
	createReq := &ves_io_schema_secret_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//algo
	if v, ok := d.GetOk("algo"); ok && !isIntfNil(v) {

		createSpec.Algo = ves_io_schema_policy.RuleCombiningAlgorithm(ves_io_schema_policy.RuleCombiningAlgorithm_value[v.(string)])

	}

	//allow_f5xc
	if v, ok := d.GetOk("allow_f5xc"); ok && !isIntfNil(v) {

		createSpec.AllowF5Xc =
			v.(bool)

	}

	//decrypt_cache_timeout
	if v, ok := d.GetOk("decrypt_cache_timeout"); ok && !isIntfNil(v) {

		createSpec.DecryptCacheTimeout =
			v.(*types.Duration)

	}

	//rule_choice

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("legacy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_secret_policy.CreateSpecType_LegacyRuleList{}
		ruleChoiceInt.LegacyRuleList = &ves_io_schema_secret_policy.LegacyRuleList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				ruleChoiceInt.LegacyRuleList.Rules = rulesInt
				for i, ps := range sl {

					rMapToStrVal := ps.(map[string]interface{})
					rulesInt[i] = &ves_io_schema.ObjectRefType{}

					rulesInt[i].Kind = "secret_policy_rule"

					if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
						rulesInt[i].Name = v.(string)
					}

					if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						rulesInt[i].Namespace = v.(string)
					}

					if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						rulesInt[i].Tenant = v.(string)
					}

					if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
						rulesInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_secret_policy.CreateSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_secret_policy.RuleList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rules := make([]*ves_io_schema_secret_policy.Rule, len(sl))
				ruleChoiceInt.RuleList.Rules = rules
				for i, set := range sl {
					rules[i] = &ves_io_schema_secret_policy.Rule{}
					rulesMapStrToI := set.(map[string]interface{})

					if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						rules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						spec := &ves_io_schema_secret_policy_rule.GlobalSpecType{}
						rules[i].Spec = spec
						for _, set := range sl {
							specMapStrToI := set.(map[string]interface{})

							if v, ok := specMapStrToI["action"]; ok && !isIntfNil(v) {

								spec.Action = ves_io_schema_policy.RuleAction(ves_io_schema_policy.RuleAction_value[v.(string)])

							}

							clientChoiceTypeFound := false

							if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientName{}

								spec.ClientChoice = clientChoiceInt

								clientChoiceInt.ClientName = v.(string)

							}

							if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientNameMatcher{}
								clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										clientChoiceInt.ClientNameMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := specMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								spec.LabelMatcher = labelMatcher
								for _, set := range sl {
									labelMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										labelMatcher.Keys = ls
									}

								}

							}

						}

					}

				}

			}

		}

	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.Rules = rulesInt
		for i, ps := range sl {

			rMapToStrVal := ps.(map[string]interface{})
			rulesInt[i] = &ves_io_schema.ObjectRefType{}

			rulesInt[i].Kind = "secret_policy_rule"

			if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
				rulesInt[i].Name = v.(string)
			}

			if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				rulesInt[i].Namespace = v.(string)
			}

			if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				rulesInt[i].Tenant = v.(string)
			}

			if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
				rulesInt[i].Uid = v.(string)
			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra SecretPolicy object with struct: %+v", createReq)

	createSecretPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_secret_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating SecretPolicy: %s", err)
	}
	d.SetId(createSecretPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraSecretPolicyRead(d, meta)
}

func resourceVolterraSecretPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_secret_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SecretPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SecretPolicy %q: %s", d.Id(), err)
	}
	return setSecretPolicyFields(client, d, resp)
}

func setSecretPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraSecretPolicyUpdate updates SecretPolicy resource
func resourceVolterraSecretPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_secret_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_secret_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("algo"); ok && !isIntfNil(v) {

		updateSpec.Algo = ves_io_schema_policy.RuleCombiningAlgorithm(ves_io_schema_policy.RuleCombiningAlgorithm_value[v.(string)])

	}

	if v, ok := d.GetOk("allow_f5xc"); ok && !isIntfNil(v) {

		updateSpec.AllowF5Xc =
			v.(bool)

	}

	if v, ok := d.GetOk("decrypt_cache_timeout"); ok && !isIntfNil(v) {

		updateSpec.DecryptCacheTimeout =
			v.(*types.Duration)

	}

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("legacy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_secret_policy.ReplaceSpecType_LegacyRuleList{}
		ruleChoiceInt.LegacyRuleList = &ves_io_schema_secret_policy.LegacyRuleList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				ruleChoiceInt.LegacyRuleList.Rules = rulesInt
				for i, ps := range sl {

					rMapToStrVal := ps.(map[string]interface{})
					rulesInt[i] = &ves_io_schema.ObjectRefType{}

					rulesInt[i].Kind = "secret_policy_rule"

					if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
						rulesInt[i].Name = v.(string)
					}

					if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						rulesInt[i].Namespace = v.(string)
					}

					if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						rulesInt[i].Tenant = v.(string)
					}

					if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
						rulesInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_secret_policy.ReplaceSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_secret_policy.RuleList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rules := make([]*ves_io_schema_secret_policy.Rule, len(sl))
				ruleChoiceInt.RuleList.Rules = rules
				for i, set := range sl {
					rules[i] = &ves_io_schema_secret_policy.Rule{}
					rulesMapStrToI := set.(map[string]interface{})

					if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						rules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						spec := &ves_io_schema_secret_policy_rule.GlobalSpecType{}
						rules[i].Spec = spec
						for _, set := range sl {
							specMapStrToI := set.(map[string]interface{})

							if v, ok := specMapStrToI["action"]; ok && !isIntfNil(v) {

								spec.Action = ves_io_schema_policy.RuleAction(ves_io_schema_policy.RuleAction_value[v.(string)])

							}

							clientChoiceTypeFound := false

							if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientName{}

								spec.ClientChoice = clientChoiceInt

								clientChoiceInt.ClientName = v.(string)

							}

							if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientNameMatcher{}
								clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										clientChoiceInt.ClientNameMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_secret_policy_rule.GlobalSpecType_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := specMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								spec.LabelMatcher = labelMatcher
								for _, set := range sl {
									labelMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										labelMatcher.Keys = ls
									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.Rules = rulesInt
		for i, ps := range sl {

			rMapToStrVal := ps.(map[string]interface{})
			rulesInt[i] = &ves_io_schema.ObjectRefType{}

			rulesInt[i].Kind = "secret_policy_rule"

			if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
				rulesInt[i].Name = v.(string)
			}

			if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				rulesInt[i].Namespace = v.(string)
			}

			if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				rulesInt[i].Tenant = v.(string)
			}

			if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
				rulesInt[i].Uid = v.(string)
			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra SecretPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_secret_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating SecretPolicy: %s", err)
	}

	return resourceVolterraSecretPolicyRead(d, meta)
}

func resourceVolterraSecretPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_secret_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SecretPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SecretPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra SecretPolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_secret_policy.ObjectType, namespace, name)
}

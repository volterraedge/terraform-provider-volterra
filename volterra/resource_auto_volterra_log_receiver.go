//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_log_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraLogReceiver is implementation of Volterra's LogReceiver resources
func resourceVolterraLogReceiver() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraLogReceiverCreate,
		Read:   resourceVolterraLogReceiverRead,
		Update: resourceVolterraLogReceiverUpdate,
		Delete: resourceVolterraLogReceiverDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"data_dog": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"trusted_ca_url": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"volterra_ca": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"compression_disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"compression_enabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"datadog_api_key": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"secret_encoding": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"version": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"default_port": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"datadog_default_server": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_name": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"splunk": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"splunk_server_ip": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ip_address": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"splunk_server_name": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"splunk_server_tls": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"trusted_ca_url": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"volterra_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_enable": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"key_url": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"secret_encoding": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"version": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"default_https_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"default_syslog_tls_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"port": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"splunk_hec_token": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"secret_encoding": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"version": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"syslog": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"syslog_rfc3164": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"syslog_rfc5424": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"tcp_server": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"tls_server": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"trusted_ca_url": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"volterra_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_enable": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"key_url": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"secret_encoding": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"version": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"default_https_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"default_syslog_tls_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"port": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"udp_server": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"log_receiver_sites": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"network": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"site": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"site_local": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraLogReceiverCreate creates LogReceiver resource
func resourceVolterraLogReceiverCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_log_receiver.CreateSpecType{}
	createReq := &ves_io_schema_log_receiver.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//log_receiver_choice

	logReceiverChoiceTypeFound := false

	if v, ok := d.GetOk("data_dog"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_DataDog{}
		logReceiverChoiceInt.DataDog = &ves_io_schema_log_receiver.DataDogReceiver{}
		createSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			caChoiceTypeFound := false

			if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

				caChoiceTypeFound = true
				caChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_TrustedCaUrl{}

				logReceiverChoiceInt.DataDog.CaChoice = caChoiceInt

				caChoiceInt.TrustedCaUrl = v.(string)

			}

			if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

				caChoiceTypeFound = true

				if v.(bool) {
					caChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_VolterraCa{}
					caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CaChoice = caChoiceInt
				}

			}

			compressionChoiceTypeFound := false

			if v, ok := cs["compression_disabled"]; ok && !isIntfNil(v) && !compressionChoiceTypeFound {

				compressionChoiceTypeFound = true

				if v.(bool) {
					compressionChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_CompressionDisabled{}
					compressionChoiceInt.CompressionDisabled = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CompressionChoice = compressionChoiceInt
				}

			}

			if v, ok := cs["compression_enabled"]; ok && !isIntfNil(v) && !compressionChoiceTypeFound {

				compressionChoiceTypeFound = true

				if v.(bool) {
					compressionChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_CompressionEnabled{}
					compressionChoiceInt.CompressionEnabled = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CompressionChoice = compressionChoiceInt
				}

			}

			if v, ok := cs["datadog_api_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				datadogApiKey := &ves_io_schema.SecretType{}
				logReceiverChoiceInt.DataDog.DatadogApiKey = datadogApiKey
				for _, set := range sl {
					datadogApiKeyMapStrToI := set.(map[string]interface{})

					if v, ok := datadogApiKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						datadogApiKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						datadogApiKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := datadogApiKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			portChoiceTypeFound := false

			if v, ok := cs["default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true

				if v.(bool) {
					portChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_DefaultPort{}
					portChoiceInt.DefaultPort = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.PortChoice = portChoiceInt
				}

			}

			if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_Port{}

				logReceiverChoiceInt.DataDog.PortChoice = portChoiceInt

				portChoiceInt.Port = uint32(v.(int))

			}

			serverNameChoiceTypeFound := false

			if v, ok := cs["datadog_default_server"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true

				if v.(bool) {
					serverNameChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_DatadogDefaultServer{}
					serverNameChoiceInt.DatadogDefaultServer = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.ServerNameChoice = serverNameChoiceInt
				}

			}

			if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_ServerName{}

				logReceiverChoiceInt.DataDog.ServerNameChoice = serverNameChoiceInt

				serverNameChoiceInt.ServerName = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("splunk"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_Splunk{}
		logReceiverChoiceInt.Splunk = &ves_io_schema_log_receiver.SplunkReceiver{}
		createSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			serverNameChoiceTypeFound := false

			if v, ok := cs["splunk_server_ip"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerIp{}
				serverNameChoiceInt.SplunkServerIp = &ves_io_schema_log_receiver.IPServerConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ip_address"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerIp.IpAddress = v.(string)

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerIp.Port = uint32(v.(int))

					}

				}

			}

			if v, ok := cs["splunk_server_name"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerName{}
				serverNameChoiceInt.SplunkServerName = &ves_io_schema_log_receiver.HTTPServerConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerName.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerName.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["splunk_server_tls"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerTls{}
				serverNameChoiceInt.SplunkServerTls = &ves_io_schema_log_receiver.TLSConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					caChoiceTypeFound := false

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true
						caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

						serverNameChoiceInt.SplunkServerTls.CaChoice = caChoiceInt

						caChoiceInt.TrustedCaUrl = v.(string)

					}

					if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true

						if v.(bool) {
							caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
							caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.CaChoice = caChoiceInt
						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
							mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
						mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
						serverNameChoiceInt.SplunkServerTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

							}

							if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								keyUrl := &ves_io_schema.SecretType{}
								mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
								for _, set := range sl {
									keyUrlMapStrToI := set.(map[string]interface{})

									if v, ok := keyUrlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := keyUrlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										keyUrl.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := keyUrlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
							portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
							portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

						serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerTls.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["splunk_hec_token"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				splunkHecToken := &ves_io_schema.SecretType{}
				logReceiverChoiceInt.Splunk.SplunkHecToken = splunkHecToken
				for _, set := range sl {
					splunkHecTokenMapStrToI := set.(map[string]interface{})

					if v, ok := splunkHecTokenMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						splunkHecToken.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						splunkHecToken.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := splunkHecTokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("syslog"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_Syslog{}
		logReceiverChoiceInt.Syslog = &ves_io_schema_log_receiver.SyslogReceiver{}
		createSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			formatChoiceTypeFound := false

			if v, ok := cs["syslog_rfc3164"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

				formatChoiceTypeFound = true
				formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc3164{}

				logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

				formatChoiceInt.SyslogRfc3164 = uint32(v.(int))

			}

			if v, ok := cs["syslog_rfc5424"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

				formatChoiceTypeFound = true
				formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc5424{}

				logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

				formatChoiceInt.SyslogRfc5424 = uint32(v.(int))

			}

			modeChoiceTypeFound := false

			if v, ok := cs["tcp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TcpServer{}
				modeChoiceInt.TcpServer = &ves_io_schema_log_receiver.TCPServerConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						modeChoiceInt.TcpServer.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.TcpServer.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["tls_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TlsServer{}
				modeChoiceInt.TlsServer = &ves_io_schema_log_receiver.TLSConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					caChoiceTypeFound := false

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true
						caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

						modeChoiceInt.TlsServer.CaChoice = caChoiceInt

						caChoiceInt.TrustedCaUrl = v.(string)

					}

					if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true

						if v.(bool) {
							caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
							caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.CaChoice = caChoiceInt
						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
							mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
						mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
						modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

							}

							if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								keyUrl := &ves_io_schema.SecretType{}
								mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
								for _, set := range sl {
									keyUrlMapStrToI := set.(map[string]interface{})

									if v, ok := keyUrlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := keyUrlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										keyUrl.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := keyUrlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
							portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
							portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

						modeChoiceInt.TlsServer.PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.TlsServer.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["udp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_UdpServer{}
				modeChoiceInt.UdpServer = &ves_io_schema_log_receiver.UDPServerConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						modeChoiceInt.UdpServer.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.UdpServer.ServerName = v.(string)

					}

				}

			}

		}

	}

	//where_choice

	whereChoiceTypeFound := false

	if v, ok := d.GetOk("log_receiver_sites"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true
		whereChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_LogReceiverSites{}
		whereChoiceInt.LogReceiverSites = &ves_io_schema_log_receiver.WhereSites{}
		createSpec.WhereChoice = whereChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["network"]; ok && !isIntfNil(v) {

				whereChoiceInt.LogReceiverSites.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

			}

			if v, ok := cs["site"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				siteInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				whereChoiceInt.LogReceiverSites.Site = siteInt
				for i, ps := range sl {

					sMapToStrVal := ps.(map[string]interface{})
					siteInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
						siteInt[i].Name = v.(string)
					}

					if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						siteInt[i].Namespace = v.(string)
					}

					if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						siteInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("site_local"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true

		if v.(bool) {
			whereChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_SiteLocal{}
			whereChoiceInt.SiteLocal = &ves_io_schema.Empty{}
			createSpec.WhereChoice = whereChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra LogReceiver object with struct: %+v", createReq)

	createLogReceiverResp, err := client.CreateObject(context.Background(), ves_io_schema_log_receiver.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating LogReceiver: %s", err)
	}
	d.SetId(createLogReceiverResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraLogReceiverRead(d, meta)
}

func resourceVolterraLogReceiverRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] LogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra LogReceiver %q: %s", d.Id(), err)
	}
	return setLogReceiverFields(client, d, resp)
}

func setLogReceiverFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraLogReceiverUpdate updates LogReceiver resource
func resourceVolterraLogReceiverUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_log_receiver.ReplaceSpecType{}
	updateReq := &ves_io_schema_log_receiver.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	logReceiverChoiceTypeFound := false

	if v, ok := d.GetOk("data_dog"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_DataDog{}
		logReceiverChoiceInt.DataDog = &ves_io_schema_log_receiver.DataDogReceiver{}
		updateSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			caChoiceTypeFound := false

			if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

				caChoiceTypeFound = true
				caChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_TrustedCaUrl{}

				logReceiverChoiceInt.DataDog.CaChoice = caChoiceInt

				caChoiceInt.TrustedCaUrl = v.(string)

			}

			if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

				caChoiceTypeFound = true

				if v.(bool) {
					caChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_VolterraCa{}
					caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CaChoice = caChoiceInt
				}

			}

			compressionChoiceTypeFound := false

			if v, ok := cs["compression_disabled"]; ok && !isIntfNil(v) && !compressionChoiceTypeFound {

				compressionChoiceTypeFound = true

				if v.(bool) {
					compressionChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_CompressionDisabled{}
					compressionChoiceInt.CompressionDisabled = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CompressionChoice = compressionChoiceInt
				}

			}

			if v, ok := cs["compression_enabled"]; ok && !isIntfNil(v) && !compressionChoiceTypeFound {

				compressionChoiceTypeFound = true

				if v.(bool) {
					compressionChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_CompressionEnabled{}
					compressionChoiceInt.CompressionEnabled = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.CompressionChoice = compressionChoiceInt
				}

			}

			if v, ok := cs["datadog_api_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				datadogApiKey := &ves_io_schema.SecretType{}
				logReceiverChoiceInt.DataDog.DatadogApiKey = datadogApiKey
				for _, set := range sl {
					datadogApiKeyMapStrToI := set.(map[string]interface{})

					if v, ok := datadogApiKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						datadogApiKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						datadogApiKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := datadogApiKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := datadogApiKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						datadogApiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			portChoiceTypeFound := false

			if v, ok := cs["default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true

				if v.(bool) {
					portChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_DefaultPort{}
					portChoiceInt.DefaultPort = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.PortChoice = portChoiceInt
				}

			}

			if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

				portChoiceTypeFound = true
				portChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_Port{}

				logReceiverChoiceInt.DataDog.PortChoice = portChoiceInt

				portChoiceInt.Port = uint32(v.(int))

			}

			serverNameChoiceTypeFound := false

			if v, ok := cs["datadog_default_server"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true

				if v.(bool) {
					serverNameChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_DatadogDefaultServer{}
					serverNameChoiceInt.DatadogDefaultServer = &ves_io_schema.Empty{}
					logReceiverChoiceInt.DataDog.ServerNameChoice = serverNameChoiceInt
				}

			}

			if v, ok := cs["server_name"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.DataDogReceiver_ServerName{}

				logReceiverChoiceInt.DataDog.ServerNameChoice = serverNameChoiceInt

				serverNameChoiceInt.ServerName = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("splunk"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_Splunk{}
		logReceiverChoiceInt.Splunk = &ves_io_schema_log_receiver.SplunkReceiver{}
		updateSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			serverNameChoiceTypeFound := false

			if v, ok := cs["splunk_server_ip"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerIp{}
				serverNameChoiceInt.SplunkServerIp = &ves_io_schema_log_receiver.IPServerConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["ip_address"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerIp.IpAddress = v.(string)

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerIp.Port = uint32(v.(int))

					}

				}

			}

			if v, ok := cs["splunk_server_name"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerName{}
				serverNameChoiceInt.SplunkServerName = &ves_io_schema_log_receiver.HTTPServerConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerName.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerName.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["splunk_server_tls"]; ok && !isIntfNil(v) && !serverNameChoiceTypeFound {

				serverNameChoiceTypeFound = true
				serverNameChoiceInt := &ves_io_schema_log_receiver.SplunkReceiver_SplunkServerTls{}
				serverNameChoiceInt.SplunkServerTls = &ves_io_schema_log_receiver.TLSConfigType{}
				logReceiverChoiceInt.Splunk.ServerNameChoice = serverNameChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					caChoiceTypeFound := false

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true
						caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

						serverNameChoiceInt.SplunkServerTls.CaChoice = caChoiceInt

						caChoiceInt.TrustedCaUrl = v.(string)

					}

					if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true

						if v.(bool) {
							caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
							caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.CaChoice = caChoiceInt
						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
							mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
						mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
						serverNameChoiceInt.SplunkServerTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

							}

							if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								keyUrl := &ves_io_schema.SecretType{}
								mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
								for _, set := range sl {
									keyUrlMapStrToI := set.(map[string]interface{})

									if v, ok := keyUrlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := keyUrlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										keyUrl.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := keyUrlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
							portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
							portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
							serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

						serverNameChoiceInt.SplunkServerTls.PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						serverNameChoiceInt.SplunkServerTls.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["splunk_hec_token"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				splunkHecToken := &ves_io_schema.SecretType{}
				logReceiverChoiceInt.Splunk.SplunkHecToken = splunkHecToken
				for _, set := range sl {
					splunkHecTokenMapStrToI := set.(map[string]interface{})

					if v, ok := splunkHecTokenMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						splunkHecToken.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						splunkHecToken.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := splunkHecTokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := splunkHecTokenMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						splunkHecToken.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("syslog"); ok && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_Syslog{}
		logReceiverChoiceInt.Syslog = &ves_io_schema_log_receiver.SyslogReceiver{}
		updateSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			formatChoiceTypeFound := false

			if v, ok := cs["syslog_rfc3164"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

				formatChoiceTypeFound = true
				formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc3164{}

				logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

				formatChoiceInt.SyslogRfc3164 = uint32(v.(int))

			}

			if v, ok := cs["syslog_rfc5424"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

				formatChoiceTypeFound = true
				formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc5424{}

				logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

				formatChoiceInt.SyslogRfc5424 = uint32(v.(int))

			}

			modeChoiceTypeFound := false

			if v, ok := cs["tcp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TcpServer{}
				modeChoiceInt.TcpServer = &ves_io_schema_log_receiver.TCPServerConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						modeChoiceInt.TcpServer.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.TcpServer.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["tls_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TlsServer{}
				modeChoiceInt.TlsServer = &ves_io_schema_log_receiver.TLSConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					caChoiceTypeFound := false

					if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true
						caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

						modeChoiceInt.TlsServer.CaChoice = caChoiceInt

						caChoiceInt.TrustedCaUrl = v.(string)

					}

					if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

						caChoiceTypeFound = true

						if v.(bool) {
							caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
							caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.CaChoice = caChoiceInt
						}

					}

					mtlsChoiceTypeFound := false

					if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
							mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
						mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
						modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

								mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

							}

							if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								keyUrl := &ves_io_schema.SecretType{}
								mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
								for _, set := range sl {
									keyUrlMapStrToI := set.(map[string]interface{})

									if v, ok := keyUrlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := keyUrlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										keyUrl.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := keyUrlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := keyUrlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										keyUrl.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					portChoiceTypeFound := false

					if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
							portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true

						if v.(bool) {
							portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
							portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
							modeChoiceInt.TlsServer.PortChoice = portChoiceInt
						}

					}

					if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

						portChoiceTypeFound = true
						portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

						modeChoiceInt.TlsServer.PortChoice = portChoiceInt

						portChoiceInt.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.TlsServer.ServerName = v.(string)

					}

				}

			}

			if v, ok := cs["udp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

				modeChoiceTypeFound = true
				modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_UdpServer{}
				modeChoiceInt.UdpServer = &ves_io_schema_log_receiver.UDPServerConfigType{}
				logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["port"]; ok && !isIntfNil(v) {

						modeChoiceInt.UdpServer.Port = uint32(v.(int))

					}

					if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

						modeChoiceInt.UdpServer.ServerName = v.(string)

					}

				}

			}

		}

	}

	whereChoiceTypeFound := false

	if v, ok := d.GetOk("log_receiver_sites"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true
		whereChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_LogReceiverSites{}
		whereChoiceInt.LogReceiverSites = &ves_io_schema_log_receiver.WhereSites{}
		updateSpec.WhereChoice = whereChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["network"]; ok && !isIntfNil(v) {

				whereChoiceInt.LogReceiverSites.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

			}

			if v, ok := cs["site"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				siteInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				whereChoiceInt.LogReceiverSites.Site = siteInt
				for i, ps := range sl {

					sMapToStrVal := ps.(map[string]interface{})
					siteInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
						siteInt[i].Name = v.(string)
					}

					if v, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						siteInt[i].Namespace = v.(string)
					}

					if v, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						siteInt[i].Tenant = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("site_local"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true

		if v.(bool) {
			whereChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_SiteLocal{}
			whereChoiceInt.SiteLocal = &ves_io_schema.Empty{}
			updateSpec.WhereChoice = whereChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra LogReceiver obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_log_receiver.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating LogReceiver: %s", err)
	}

	return resourceVolterraLogReceiverRead(d, meta)
}

func resourceVolterraLogReceiverDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] LogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra LogReceiver before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra LogReceiver obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_log_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver"
)

// resourceVolterraLogReceiver is implementation of Volterra's LogReceiver resources
func resourceVolterraLogReceiver() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraLogReceiverCreate,
		Read:   resourceVolterraLogReceiverRead,
		Update: resourceVolterraLogReceiverUpdate,
		Delete: resourceVolterraLogReceiverDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"syslog": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"syslog_rfc5424": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"tcp_server": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"port": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"tls_server": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"trusted_ca_url": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"volterra_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"mtls_enable": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"key_url": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"default_https_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"default_syslog_tls_port": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"port": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"udp_server": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"port": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"server_name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"site_local": {

				Type:     schema.TypeBool,
				Optional: true,
			},
		},
	}
}

// resourceVolterraLogReceiverCreate creates LogReceiver resource
func resourceVolterraLogReceiverCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_log_receiver.CreateSpecType{}
	createReq := &ves_io_schema_log_receiver.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//log_receiver_choice

	logReceiverChoiceTypeFound := false

	if v, ok := d.GetOk("syslog"); ok && !isIntfNil(v) && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_Syslog{}
		logReceiverChoiceInt.Syslog = &ves_io_schema_log_receiver.SyslogReceiver{}
		createSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				formatChoiceTypeFound := false

				if v, ok := cs["syslog_rfc5424"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

					formatChoiceTypeFound = true
					formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc5424{}

					logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

					formatChoiceInt.SyslogRfc5424 = uint32(v.(int))

				}

				modeChoiceTypeFound := false

				if v, ok := cs["tcp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TcpServer{}
					modeChoiceInt.TcpServer = &ves_io_schema_log_receiver.TCPServerConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								modeChoiceInt.TcpServer.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.TcpServer.ServerName = v.(string)

							}

						}
					}

				}

				if v, ok := cs["tls_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TlsServer{}
					modeChoiceInt.TlsServer = &ves_io_schema_log_receiver.TLSConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							caChoiceTypeFound := false

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

								caChoiceTypeFound = true
								caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

								modeChoiceInt.TlsServer.CaChoice = caChoiceInt

								caChoiceInt.TrustedCaUrl = v.(string)

							}

							if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

								caChoiceTypeFound = true

								if v.(bool) {
									caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
									caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.CaChoice = caChoiceInt
								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
									mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
								mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
								modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

										}

										if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											keyUrl := &ves_io_schema.SecretType{}
											mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
											for _, set := range sl {
												if set != nil {
													keyUrlMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														keyUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														keyUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							portChoiceTypeFound := false

							if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
									portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.PortChoice = portChoiceInt
								}

							}

							if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
									portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.PortChoice = portChoiceInt
								}

							}

							if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

								modeChoiceInt.TlsServer.PortChoice = portChoiceInt

								portChoiceInt.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.TlsServer.ServerName = v.(string)

							}

						}
					}

				}

				if v, ok := cs["udp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_UdpServer{}
					modeChoiceInt.UdpServer = &ves_io_schema_log_receiver.UDPServerConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								modeChoiceInt.UdpServer.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.UdpServer.ServerName = v.(string)

							}

						}
					}

				}

			}
		}

	}

	//where_choice

	whereChoiceTypeFound := false

	if v, ok := d.GetOk("site_local"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true

		if v.(bool) {
			whereChoiceInt := &ves_io_schema_log_receiver.CreateSpecType_SiteLocal{}
			whereChoiceInt.SiteLocal = &ves_io_schema.Empty{}
			createSpec.WhereChoice = whereChoiceInt
		}

	}

	log.Printf("[DEBUG] Creating Volterra LogReceiver object with struct: %+v", createReq)

	createLogReceiverResp, err := client.CreateObject(context.Background(), ves_io_schema_log_receiver.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating LogReceiver: %s", err)
	}
	d.SetId(createLogReceiverResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraLogReceiverRead(d, meta)
}

func resourceVolterraLogReceiverRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] LogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra LogReceiver %q: %s", d.Id(), err)
	}
	return setLogReceiverFields(client, d, resp)
}

func setLogReceiverFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraLogReceiverUpdate updates LogReceiver resource
func resourceVolterraLogReceiverUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_log_receiver.ReplaceSpecType{}
	updateReq := &ves_io_schema_log_receiver.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	logReceiverChoiceTypeFound := false

	if v, ok := d.GetOk("syslog"); ok && !isIntfNil(v) && !logReceiverChoiceTypeFound {

		logReceiverChoiceTypeFound = true
		logReceiverChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_Syslog{}
		logReceiverChoiceInt.Syslog = &ves_io_schema_log_receiver.SyslogReceiver{}
		updateSpec.LogReceiverChoice = logReceiverChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				formatChoiceTypeFound := false

				if v, ok := cs["syslog_rfc5424"]; ok && !isIntfNil(v) && !formatChoiceTypeFound {

					formatChoiceTypeFound = true
					formatChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_SyslogRfc5424{}

					logReceiverChoiceInt.Syslog.FormatChoice = formatChoiceInt

					formatChoiceInt.SyslogRfc5424 = uint32(v.(int))

				}

				modeChoiceTypeFound := false

				if v, ok := cs["tcp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TcpServer{}
					modeChoiceInt.TcpServer = &ves_io_schema_log_receiver.TCPServerConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								modeChoiceInt.TcpServer.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.TcpServer.ServerName = v.(string)

							}

						}
					}

				}

				if v, ok := cs["tls_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_TlsServer{}
					modeChoiceInt.TlsServer = &ves_io_schema_log_receiver.TLSConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							caChoiceTypeFound := false

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

								caChoiceTypeFound = true
								caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_TrustedCaUrl{}

								modeChoiceInt.TlsServer.CaChoice = caChoiceInt

								caChoiceInt.TrustedCaUrl = v.(string)

							}

							if v, ok := cs["volterra_ca"]; ok && !isIntfNil(v) && !caChoiceTypeFound {

								caChoiceTypeFound = true

								if v.(bool) {
									caChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_VolterraCa{}
									caChoiceInt.VolterraCa = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.CaChoice = caChoiceInt
								}

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["mtls_disabled"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsDisabled{}
									mtlsChoiceInt.MtlsDisabled = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["mtls_enable"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_MtlsEnable{}
								mtlsChoiceInt.MtlsEnable = &ves_io_schema_log_receiver.TLSClientConfigType{}
								modeChoiceInt.TlsServer.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["certificate"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.MtlsEnable.Certificate = v.(string)

										}

										if v, ok := cs["key_url"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											keyUrl := &ves_io_schema.SecretType{}
											mtlsChoiceInt.MtlsEnable.KeyUrl = keyUrl
											for _, set := range sl {
												if set != nil {
													keyUrlMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														keyUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														keyUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							portChoiceTypeFound := false

							if v, ok := cs["default_https_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultHttpsPort{}
									portChoiceInt.DefaultHttpsPort = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.PortChoice = portChoiceInt
								}

							}

							if v, ok := cs["default_syslog_tls_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true

								if v.(bool) {
									portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_DefaultSyslogTlsPort{}
									portChoiceInt.DefaultSyslogTlsPort = &ves_io_schema.Empty{}
									modeChoiceInt.TlsServer.PortChoice = portChoiceInt
								}

							}

							if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

								portChoiceTypeFound = true
								portChoiceInt := &ves_io_schema_log_receiver.TLSConfigType_Port{}

								modeChoiceInt.TlsServer.PortChoice = portChoiceInt

								portChoiceInt.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.TlsServer.ServerName = v.(string)

							}

						}
					}

				}

				if v, ok := cs["udp_server"]; ok && !isIntfNil(v) && !modeChoiceTypeFound {

					modeChoiceTypeFound = true
					modeChoiceInt := &ves_io_schema_log_receiver.SyslogReceiver_UdpServer{}
					modeChoiceInt.UdpServer = &ves_io_schema_log_receiver.UDPServerConfigType{}
					logReceiverChoiceInt.Syslog.ModeChoice = modeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["port"]; ok && !isIntfNil(v) {

								modeChoiceInt.UdpServer.Port = uint32(v.(int))

							}

							if v, ok := cs["server_name"]; ok && !isIntfNil(v) {

								modeChoiceInt.UdpServer.ServerName = v.(string)

							}

						}
					}

				}

			}
		}

	}

	whereChoiceTypeFound := false

	if v, ok := d.GetOk("site_local"); ok && !whereChoiceTypeFound {

		whereChoiceTypeFound = true

		if v.(bool) {
			whereChoiceInt := &ves_io_schema_log_receiver.ReplaceSpecType_SiteLocal{}
			whereChoiceInt.SiteLocal = &ves_io_schema.Empty{}
			updateSpec.WhereChoice = whereChoiceInt
		}

	}

	log.Printf("[DEBUG] Updating Volterra LogReceiver obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_log_receiver.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating LogReceiver: %s", err)
	}

	return resourceVolterraLogReceiverRead(d, meta)
}

func resourceVolterraLogReceiverDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] LogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra LogReceiver before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra LogReceiver obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_log_receiver.ObjectType, namespace, name, opts...)
}

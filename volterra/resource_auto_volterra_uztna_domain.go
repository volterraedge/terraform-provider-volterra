//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_uztna_uztna_domain "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_domain"
)

// resourceVolterraUztnaDomain is implementation of Volterra's UztnaDomain resources
func resourceVolterraUztnaDomain() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUztnaDomainCreate,
		Read:   resourceVolterraUztnaDomainRead,
		Update: resourceVolterraUztnaDomainUpdate,
		Delete: resourceVolterraUztnaDomainDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"access_fqdn": {
				Type:     schema.TypeString,
				Required: true,
			},

			"app_vip_pool": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"app_vip_pool": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"app_vip_subnet": {

				Type: schema.TypeList,

				Required: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"cdn_ce_vh_api_gw": {

				Type:       schema.TypeList,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:       schema.TypeString,
							Computed:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"name": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"namespace": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
						"tenant": {
							Type:       schema.TypeString,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},
					},
				},
			},

			"cert": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"certificate": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"gateways": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"bigip_site": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"perimeter_re": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"all_cloud": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"re_sites": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cloud_gateway": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"lease_pool": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4_ipv6_leasepool": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4_leasepool": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv4_leasepool": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:       schema.TypeString,
																Computed:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"ipv6_leasepool": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv6_leasepool": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:       schema.TypeString,
																Computed:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"ipv4_leasepool": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4_leasepool": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ipv6_leasepool": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Required:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_leasepool": {

										Type:       schema.TypeList,
										Required:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:       schema.TypeString,
													Computed:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
												"namespace": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
												"tenant": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policy": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"vip_dns_proxy": {

				Type:       schema.TypeList,
				MaxItems:   1,
				Required:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ipv4": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"addr": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},

						"ipv6": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"addr": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUztnaDomainCreate creates UztnaDomain resource
func resourceVolterraUztnaDomainCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_uztna_uztna_domain.CreateSpecType{}
	createReq := &ves_io_schema_uztna_uztna_domain.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//access_fqdn
	if v, ok := d.GetOk("access_fqdn"); ok && !isIntfNil(v) {

		createSpec.AccessFqdn =
			v.(string)

	}

	//app_vip_pool
	if v, ok := d.GetOk("app_vip_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appVipPool := &ves_io_schema_uztna_uztna_domain.AppVIPPool{}
		createSpec.AppVipPool = appVipPool
		for _, set := range sl {
			if set != nil {
				appVipPoolMapStrToI := set.(map[string]interface{})

				if v, ok := appVipPoolMapStrToI["app_vip_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appVipPoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appVipPool.AppVipPool = appVipPoolInt
					for i, ps := range sl {

						avpMapToStrVal := ps.(map[string]interface{})
						appVipPoolInt[i] = &ves_io_schema.ObjectRefType{}

						appVipPoolInt[i].Kind = "uztna_app_vip_pool"

						if v, ok := avpMapToStrVal["name"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Name = v.(string)
						}

						if v, ok := avpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Namespace = v.(string)
						}

						if v, ok := avpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Tenant = v.(string)
						}

						if v, ok := avpMapToStrVal["uid"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	//app_vip_subnet
	if v, ok := d.GetOk("app_vip_subnet"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		createSpec.AppVipSubnet = ls

	}

	//cdn_ce_vh_api_gw
	if v, ok := d.GetOk("cdn_ce_vh_api_gw"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cdnCeVhApiGwInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.CdnCeVhApiGw = cdnCeVhApiGwInt
		for i, ps := range sl {

			ccvagMapToStrVal := ps.(map[string]interface{})
			cdnCeVhApiGwInt[i] = &ves_io_schema.ObjectRefType{}

			cdnCeVhApiGwInt[i].Kind = "virtual_host"

			if v, ok := ccvagMapToStrVal["name"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Name = v.(string)
			}

			if v, ok := ccvagMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Namespace = v.(string)
			}

			if v, ok := ccvagMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Tenant = v.(string)
			}

			if v, ok := ccvagMapToStrVal["uid"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Uid = v.(string)
			}

		}

	}

	//cert
	if v, ok := d.GetOk("cert"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cert := &ves_io_schema_uztna_uztna_domain.Certificate{}
		createSpec.Cert = cert
		for _, set := range sl {
			if set != nil {
				certMapStrToI := set.(map[string]interface{})

				if v, ok := certMapStrToI["certificate"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					cert.Certificate = certificateInt
					for i, ps := range sl {

						cMapToStrVal := ps.(map[string]interface{})
						certificateInt[i] = &ves_io_schema.ObjectRefType{}

						certificateInt[i].Kind = "certificate"

						if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
							certificateInt[i].Name = v.(string)
						}

						if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							certificateInt[i].Namespace = v.(string)
						}

						if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							certificateInt[i].Tenant = v.(string)
						}

						if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
							certificateInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	//gateways
	if v, ok := d.GetOk("gateways"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		gateways := &ves_io_schema_uztna_uztna_domain.Gateways{}
		createSpec.Gateways = gateways
		for _, set := range sl {
			if set != nil {
				gatewaysMapStrToI := set.(map[string]interface{})

				if v, ok := gatewaysMapStrToI["bigip_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					bigipSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					gateways.BigipSite = bigipSiteInt
					for i, ps := range sl {

						bsMapToStrVal := ps.(map[string]interface{})
						bigipSiteInt[i] = &ves_io_schema.ObjectRefType{}

						bigipSiteInt[i].Kind = "uztna_gateway"

						if v, ok := bsMapToStrVal["name"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Name = v.(string)
						}

						if v, ok := bsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Namespace = v.(string)
						}

						if v, ok := bsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Tenant = v.(string)
						}

						if v, ok := bsMapToStrVal["uid"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Uid = v.(string)
						}

					}

				}

				if v, ok := gatewaysMapStrToI["perimeter_re"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					perimeterRe := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement{}
					gateways.PerimeterRe = perimeterRe
					for _, set := range sl {
						if set != nil {
							perimeterReMapStrToI := set.(map[string]interface{})

							cloudGatewayChoiceTypeFound := false

							if v, ok := perimeterReMapStrToI["all_cloud"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true

								if v.(bool) {
									cloudGatewayChoiceInt := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement_AllCloud{}
									cloudGatewayChoiceInt.AllCloud = &ves_io_schema.Empty{}
									perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt
								}

							}

							if v, ok := perimeterReMapStrToI["re_sites"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true
								cloudGatewayChoiceInt := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement_ReSites{}
								cloudGatewayChoiceInt.ReSites = &ves_io_schema_uztna_uztna_domain.CloudGateways{}
								perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cloud_gateway"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cloudGatewayIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
											cloudGatewayChoiceInt.ReSites.CloudGateway = cloudGatewayIntNew
											for i, ps := range sl {

												cgMapToStrVal := ps.(map[string]interface{})
												cloudGatewayIntNew[i] = &ves_io_schema.ObjectRefType{}

												cloudGatewayIntNew[i].Kind = "site"

												if v, ok := cgMapToStrVal["name"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Name = v.(string)
												}

												if v, ok := cgMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Namespace = v.(string)
												}

												if v, ok := cgMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Tenant = v.(string)
												}

												if v, ok := cgMapToStrVal["uid"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//lease_pool
	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := &ves_io_schema_uztna_uztna_domain.LeasePoolList{}
		createSpec.LeasePool = leasePool
		for _, set := range sl {
			if set != nil {
				leasePoolMapStrToI := set.(map[string]interface{})

				ipaddressTypeTypeFound := false

				if v, ok := leasePoolMapStrToI["ipv4_ipv6_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv4Ipv6Leasepool{}
					ipaddressTypeInt.Ipv4Ipv6Leasepool = &ves_io_schema_uztna_uztna_domain.DualStackLeasePool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv4Leasepool := &ves_io_schema_uztna_uztna_domain.IPv4Leasepool{}
								ipaddressTypeInt.Ipv4Ipv6Leasepool.Ipv4Leasepool = ipv4Leasepool
								for _, set := range sl {
									if set != nil {
										ipv4LeasepoolMapStrToI := set.(map[string]interface{})

										if v, ok := ipv4LeasepoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											ipv4LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipv4Leasepool.Ipv4Leasepool = ipv4LeasepoolInt
											for i, ps := range sl {

												ilMapToStrVal := ps.(map[string]interface{})
												ipv4LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

												ipv4LeasepoolInt[i].Kind = "uztna_leasepool"

												if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Name = v.(string)
												}

												if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Namespace = v.(string)
												}

												if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Tenant = v.(string)
												}

												if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := cs["ipv6_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv6Leasepool := &ves_io_schema_uztna_uztna_domain.IPv6Leasepool{}
								ipaddressTypeInt.Ipv4Ipv6Leasepool.Ipv6Leasepool = ipv6Leasepool
								for _, set := range sl {
									if set != nil {
										ipv6LeasepoolMapStrToI := set.(map[string]interface{})

										if v, ok := ipv6LeasepoolMapStrToI["ipv6_leasepool"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											ipv6LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipv6Leasepool.Ipv6Leasepool = ipv6LeasepoolInt
											for i, ps := range sl {

												ilMapToStrVal := ps.(map[string]interface{})
												ipv6LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

												ipv6LeasepoolInt[i].Kind = "uztna_leasepool"

												if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Name = v.(string)
												}

												if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Namespace = v.(string)
												}

												if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Tenant = v.(string)
												}

												if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := leasePoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv4Leasepool{}
					ipaddressTypeInt.Ipv4Leasepool = &ves_io_schema_uztna_uztna_domain.IPv4Leasepool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv4LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								ipaddressTypeInt.Ipv4Leasepool.Ipv4Leasepool = ipv4LeasepoolInt
								for i, ps := range sl {

									ilMapToStrVal := ps.(map[string]interface{})
									ipv4LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

									ipv4LeasepoolInt[i].Kind = "uztna_leasepool"

									if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Name = v.(string)
									}

									if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Namespace = v.(string)
									}

									if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Tenant = v.(string)
									}

									if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := leasePoolMapStrToI["ipv6_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv6Leasepool{}
					ipaddressTypeInt.Ipv6Leasepool = &ves_io_schema_uztna_uztna_domain.IPv6Leasepool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv6LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								ipaddressTypeInt.Ipv6Leasepool.Ipv6Leasepool = ipv6LeasepoolInt
								for i, ps := range sl {

									ilMapToStrVal := ps.(map[string]interface{})
									ipv6LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

									ipv6LeasepoolInt[i].Kind = "uztna_leasepool"

									if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Name = v.(string)
									}

									if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Namespace = v.(string)
									}

									if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Tenant = v.(string)
									}

									if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	//policy
	if v, ok := d.GetOk("policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policy := &ves_io_schema_uztna_uztna_domain.Policy{}
		createSpec.Policy = policy
		for _, set := range sl {
			if set != nil {
				policyMapStrToI := set.(map[string]interface{})

				if v, ok := policyMapStrToI["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					policy.Policy = policyInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policyInt[i] = &ves_io_schema.ObjectRefType{}

						policyInt[i].Kind = "uztna_policy_template"

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policyInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policyInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policyInt[i].Tenant = v.(string)
						}

						if v, ok := pMapToStrVal["uid"]; ok && !isIntfNil(v) {
							policyInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	//vip_dns_proxy
	if v, ok := d.GetOk("vip_dns_proxy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		vipDnsProxy := &ves_io_schema.IpAddressType{}
		createSpec.VipDnsProxy = vipDnsProxy
		for _, set := range sl {
			if set != nil {
				vipDnsProxyMapStrToI := set.(map[string]interface{})

				verTypeFound := false

				if v, ok := vipDnsProxyMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

					verTypeFound = true
					verInt := &ves_io_schema.IpAddressType_Ipv4{}
					verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
					vipDnsProxy.Ver = verInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}
					}

				}

				if v, ok := vipDnsProxyMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

					verTypeFound = true
					verInt := &ves_io_schema.IpAddressType_Ipv6{}
					verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
					vipDnsProxy.Ver = verInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UztnaDomain object with struct: %+v", createReq)

	createUztnaDomainResp, err := client.CreateObject(context.Background(), ves_io_schema_uztna_uztna_domain.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UztnaDomain: %s", err)
	}
	d.SetId(createUztnaDomainResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUztnaDomainRead(d, meta)
}

func resourceVolterraUztnaDomainRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_domain.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaDomain %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaDomain %q: %s", d.Id(), err)
	}
	return setUztnaDomainFields(client, d, resp)
}

func setUztnaDomainFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUztnaDomainUpdate updates UztnaDomain resource
func resourceVolterraUztnaDomainUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_uztna_uztna_domain.ReplaceSpecType{}
	updateReq := &ves_io_schema_uztna_uztna_domain.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("access_fqdn"); ok && !isIntfNil(v) {

		updateSpec.AccessFqdn =
			v.(string)

	}

	if v, ok := d.GetOk("app_vip_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		appVipPool := &ves_io_schema_uztna_uztna_domain.AppVIPPool{}
		updateSpec.AppVipPool = appVipPool
		for _, set := range sl {
			if set != nil {
				appVipPoolMapStrToI := set.(map[string]interface{})

				if v, ok := appVipPoolMapStrToI["app_vip_pool"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					appVipPoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appVipPool.AppVipPool = appVipPoolInt
					for i, ps := range sl {

						avpMapToStrVal := ps.(map[string]interface{})
						appVipPoolInt[i] = &ves_io_schema.ObjectRefType{}

						appVipPoolInt[i].Kind = "uztna_app_vip_pool"

						if v, ok := avpMapToStrVal["name"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Name = v.(string)
						}

						if v, ok := avpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Namespace = v.(string)
						}

						if v, ok := avpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Tenant = v.(string)
						}

						if v, ok := avpMapToStrVal["uid"]; ok && !isIntfNil(v) {
							appVipPoolInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("app_vip_subnet"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		updateSpec.AppVipSubnet = ls

	}

	if v, ok := d.GetOk("cdn_ce_vh_api_gw"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cdnCeVhApiGwInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.CdnCeVhApiGw = cdnCeVhApiGwInt
		for i, ps := range sl {

			ccvagMapToStrVal := ps.(map[string]interface{})
			cdnCeVhApiGwInt[i] = &ves_io_schema.ObjectRefType{}

			cdnCeVhApiGwInt[i].Kind = "virtual_host"

			if v, ok := ccvagMapToStrVal["name"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Name = v.(string)
			}

			if v, ok := ccvagMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Namespace = v.(string)
			}

			if v, ok := ccvagMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Tenant = v.(string)
			}

			if v, ok := ccvagMapToStrVal["uid"]; ok && !isIntfNil(v) {
				cdnCeVhApiGwInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("cert"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cert := &ves_io_schema_uztna_uztna_domain.Certificate{}
		updateSpec.Cert = cert
		for _, set := range sl {
			if set != nil {
				certMapStrToI := set.(map[string]interface{})

				if v, ok := certMapStrToI["certificate"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					certificateInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					cert.Certificate = certificateInt
					for i, ps := range sl {

						cMapToStrVal := ps.(map[string]interface{})
						certificateInt[i] = &ves_io_schema.ObjectRefType{}

						certificateInt[i].Kind = "certificate"

						if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
							certificateInt[i].Name = v.(string)
						}

						if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							certificateInt[i].Namespace = v.(string)
						}

						if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							certificateInt[i].Tenant = v.(string)
						}

						if v, ok := cMapToStrVal["uid"]; ok && !isIntfNil(v) {
							certificateInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("gateways"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		gateways := &ves_io_schema_uztna_uztna_domain.Gateways{}
		updateSpec.Gateways = gateways
		for _, set := range sl {
			if set != nil {
				gatewaysMapStrToI := set.(map[string]interface{})

				if v, ok := gatewaysMapStrToI["bigip_site"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					bigipSiteInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					gateways.BigipSite = bigipSiteInt
					for i, ps := range sl {

						bsMapToStrVal := ps.(map[string]interface{})
						bigipSiteInt[i] = &ves_io_schema.ObjectRefType{}

						bigipSiteInt[i].Kind = "uztna_gateway"

						if v, ok := bsMapToStrVal["name"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Name = v.(string)
						}

						if v, ok := bsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Namespace = v.(string)
						}

						if v, ok := bsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Tenant = v.(string)
						}

						if v, ok := bsMapToStrVal["uid"]; ok && !isIntfNil(v) {
							bigipSiteInt[i].Uid = v.(string)
						}

					}

				}

				if v, ok := gatewaysMapStrToI["perimeter_re"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					perimeterRe := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement{}
					gateways.PerimeterRe = perimeterRe
					for _, set := range sl {
						if set != nil {
							perimeterReMapStrToI := set.(map[string]interface{})

							cloudGatewayChoiceTypeFound := false

							if v, ok := perimeterReMapStrToI["all_cloud"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true

								if v.(bool) {
									cloudGatewayChoiceInt := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement_AllCloud{}
									cloudGatewayChoiceInt.AllCloud = &ves_io_schema.Empty{}
									perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt
								}

							}

							if v, ok := perimeterReMapStrToI["re_sites"]; ok && !isIntfNil(v) && !cloudGatewayChoiceTypeFound {

								cloudGatewayChoiceTypeFound = true
								cloudGatewayChoiceInt := &ves_io_schema_uztna_uztna_domain.CloudGatewayAdvertisement_ReSites{}
								cloudGatewayChoiceInt.ReSites = &ves_io_schema_uztna_uztna_domain.CloudGateways{}
								perimeterRe.CloudGatewayChoice = cloudGatewayChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cloud_gateway"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cloudGatewayIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
											cloudGatewayChoiceInt.ReSites.CloudGateway = cloudGatewayIntNew
											for i, ps := range sl {

												cgMapToStrVal := ps.(map[string]interface{})
												cloudGatewayIntNew[i] = &ves_io_schema.ObjectRefType{}

												cloudGatewayIntNew[i].Kind = "site"

												if v, ok := cgMapToStrVal["name"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Name = v.(string)
												}

												if v, ok := cgMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Namespace = v.(string)
												}

												if v, ok := cgMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Tenant = v.(string)
												}

												if v, ok := cgMapToStrVal["uid"]; ok && !isIntfNil(v) {
													cloudGatewayIntNew[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("lease_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		leasePool := &ves_io_schema_uztna_uztna_domain.LeasePoolList{}
		updateSpec.LeasePool = leasePool
		for _, set := range sl {
			if set != nil {
				leasePoolMapStrToI := set.(map[string]interface{})

				ipaddressTypeTypeFound := false

				if v, ok := leasePoolMapStrToI["ipv4_ipv6_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv4Ipv6Leasepool{}
					ipaddressTypeInt.Ipv4Ipv6Leasepool = &ves_io_schema_uztna_uztna_domain.DualStackLeasePool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv4Leasepool := &ves_io_schema_uztna_uztna_domain.IPv4Leasepool{}
								ipaddressTypeInt.Ipv4Ipv6Leasepool.Ipv4Leasepool = ipv4Leasepool
								for _, set := range sl {
									if set != nil {
										ipv4LeasepoolMapStrToI := set.(map[string]interface{})

										if v, ok := ipv4LeasepoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											ipv4LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipv4Leasepool.Ipv4Leasepool = ipv4LeasepoolInt
											for i, ps := range sl {

												ilMapToStrVal := ps.(map[string]interface{})
												ipv4LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

												ipv4LeasepoolInt[i].Kind = "uztna_leasepool"

												if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Name = v.(string)
												}

												if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Namespace = v.(string)
												}

												if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Tenant = v.(string)
												}

												if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
													ipv4LeasepoolInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := cs["ipv6_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv6Leasepool := &ves_io_schema_uztna_uztna_domain.IPv6Leasepool{}
								ipaddressTypeInt.Ipv4Ipv6Leasepool.Ipv6Leasepool = ipv6Leasepool
								for _, set := range sl {
									if set != nil {
										ipv6LeasepoolMapStrToI := set.(map[string]interface{})

										if v, ok := ipv6LeasepoolMapStrToI["ipv6_leasepool"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											ipv6LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											ipv6Leasepool.Ipv6Leasepool = ipv6LeasepoolInt
											for i, ps := range sl {

												ilMapToStrVal := ps.(map[string]interface{})
												ipv6LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

												ipv6LeasepoolInt[i].Kind = "uztna_leasepool"

												if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Name = v.(string)
												}

												if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Namespace = v.(string)
												}

												if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Tenant = v.(string)
												}

												if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
													ipv6LeasepoolInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := leasePoolMapStrToI["ipv4_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv4Leasepool{}
					ipaddressTypeInt.Ipv4Leasepool = &ves_io_schema_uztna_uztna_domain.IPv4Leasepool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv4_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv4LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								ipaddressTypeInt.Ipv4Leasepool.Ipv4Leasepool = ipv4LeasepoolInt
								for i, ps := range sl {

									ilMapToStrVal := ps.(map[string]interface{})
									ipv4LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

									ipv4LeasepoolInt[i].Kind = "uztna_leasepool"

									if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Name = v.(string)
									}

									if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Namespace = v.(string)
									}

									if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Tenant = v.(string)
									}

									if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
										ipv4LeasepoolInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := leasePoolMapStrToI["ipv6_leasepool"]; ok && !isIntfNil(v) && !ipaddressTypeTypeFound {

					ipaddressTypeTypeFound = true
					ipaddressTypeInt := &ves_io_schema_uztna_uztna_domain.LeasePoolList_Ipv6Leasepool{}
					ipaddressTypeInt.Ipv6Leasepool = &ves_io_schema_uztna_uztna_domain.IPv6Leasepool{}
					leasePool.IpaddressType = ipaddressTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_leasepool"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ipv6LeasepoolInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								ipaddressTypeInt.Ipv6Leasepool.Ipv6Leasepool = ipv6LeasepoolInt
								for i, ps := range sl {

									ilMapToStrVal := ps.(map[string]interface{})
									ipv6LeasepoolInt[i] = &ves_io_schema.ObjectRefType{}

									ipv6LeasepoolInt[i].Kind = "uztna_leasepool"

									if v, ok := ilMapToStrVal["name"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Name = v.(string)
									}

									if v, ok := ilMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Namespace = v.(string)
									}

									if v, ok := ilMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Tenant = v.(string)
									}

									if v, ok := ilMapToStrVal["uid"]; ok && !isIntfNil(v) {
										ipv6LeasepoolInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policy := &ves_io_schema_uztna_uztna_domain.Policy{}
		updateSpec.Policy = policy
		for _, set := range sl {
			if set != nil {
				policyMapStrToI := set.(map[string]interface{})

				if v, ok := policyMapStrToI["policy"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					policy.Policy = policyInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policyInt[i] = &ves_io_schema.ObjectRefType{}

						policyInt[i].Kind = "uztna_policy_template"

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policyInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policyInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policyInt[i].Tenant = v.(string)
						}

						if v, ok := pMapToStrVal["uid"]; ok && !isIntfNil(v) {
							policyInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("vip_dns_proxy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		vipDnsProxy := &ves_io_schema.IpAddressType{}
		updateSpec.VipDnsProxy = vipDnsProxy
		for _, set := range sl {
			if set != nil {
				vipDnsProxyMapStrToI := set.(map[string]interface{})

				verTypeFound := false

				if v, ok := vipDnsProxyMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

					verTypeFound = true
					verInt := &ves_io_schema.IpAddressType_Ipv4{}
					verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
					vipDnsProxy.Ver = verInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv4.Addr = v.(string)

							}

						}
					}

				}

				if v, ok := vipDnsProxyMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

					verTypeFound = true
					verInt := &ves_io_schema.IpAddressType_Ipv6{}
					verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
					vipDnsProxy.Ver = verInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["addr"]; ok && !isIntfNil(v) {

								verInt.Ipv6.Addr = v.(string)

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UztnaDomain obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_uztna_uztna_domain.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UztnaDomain: %s", err)
	}

	return resourceVolterraUztnaDomainRead(d, meta)
}

func resourceVolterraUztnaDomainDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_uztna_uztna_domain.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UztnaDomain %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UztnaDomain before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UztnaDomain obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_uztna_uztna_domain.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
)

// resourceVolterraVirtualNetwork is implementation of Volterra's VirtualNetwork resources
func resourceVolterraVirtualNetwork() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraVirtualNetworkCreate,
		Read:   resourceVolterraVirtualNetworkRead,
		Update: resourceVolterraVirtualNetworkUpdate,
		Delete: resourceVolterraVirtualNetworkDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"global_network": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"legacy_type": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"site_local_inside_network": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"site_local_network": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"srv6_network": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"access_network_rtargets": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn2byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"asn4byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ipv4_addr_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"address": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"anycast_vip": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"fleet_vip": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"vip_allocator": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"interface_ip_vip": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enterprise_network_rtargets": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn2byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"asn4byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ipv4_addr_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"address": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"export_rtargets": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn2byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"asn4byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ipv4_addr_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"address": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"fleets": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"internet_rtargets": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn2byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"asn4byte_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_number": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ipv4_addr_rtarget": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"address": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"no_namespace_network": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"srv6_network_ns_params": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"remote_sid_stats_plen": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"slice": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"fleet_snat_pool": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"snat_pool_allocator": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"interface_ip_snat_pool": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"site_snat_pool": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"node_snat_pool": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
												"value": {
													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ipv4_prefixes": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"static_routes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"attrs": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"ip_prefixes": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"default_gateway": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"interface": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"ip_address": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraVirtualNetworkCreate creates VirtualNetwork resource
func resourceVolterraVirtualNetworkCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_virtual_network.CreateSpecType{}
	createReq := &ves_io_schema_virtual_network.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//network_choice

	networkChoiceTypeFound := false

	if v, ok := d.GetOk("global_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.CreateSpecType_GlobalNetwork{}
			networkChoiceInt.GlobalNetwork = &ves_io_schema.Empty{}
			createSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("legacy_type"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true
		networkChoiceInt := &ves_io_schema_virtual_network.CreateSpecType_LegacyType{}

		createSpec.NetworkChoice = networkChoiceInt

		networkChoiceInt.LegacyType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

	}

	if v, ok := d.GetOk("site_local_inside_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.CreateSpecType_SiteLocalInsideNetwork{}
			networkChoiceInt.SiteLocalInsideNetwork = &ves_io_schema.Empty{}
			createSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("site_local_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.CreateSpecType_SiteLocalNetwork{}
			networkChoiceInt.SiteLocalNetwork = &ves_io_schema.Empty{}
			createSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("srv6_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true
		networkChoiceInt := &ves_io_schema_virtual_network.CreateSpecType_Srv6Network{}
		networkChoiceInt.Srv6Network = &ves_io_schema_virtual_network.PerSiteSrv6NetworkType{}
		createSpec.NetworkChoice = networkChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["access_network_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				accessNetworkRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.AccessNetworkRtargets = accessNetworkRtargets
				for i, set := range sl {
					accessNetworkRtargets[i] = &ves_io_schema.RouteTarget{}
					accessNetworkRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := accessNetworkRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := accessNetworkRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := accessNetworkRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			defaultVipChoiceTypeFound := false

			if v, ok := cs["anycast_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true
				defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_AnycastVip{}

				networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt

				defaultVipChoiceInt.AnycastVip = v.(string)

			}

			if v, ok := cs["fleet_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true
				defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_FleetVip{}
				defaultVipChoiceInt.FleetVip = &ves_io_schema_virtual_network.AnyCastVIPFleetType{}
				networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["vip_allocator"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						vipAllocatorInt := &ves_io_schema_views.ObjectRefType{}
						defaultVipChoiceInt.FleetVip.VipAllocator = vipAllocatorInt

						for _, set := range sl {
							vaMapToStrVal := set.(map[string]interface{})
							if val, ok := vaMapToStrVal["name"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Name = val.(string)
							}
							if val, ok := vaMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Namespace = val.(string)
							}

							if val, ok := vaMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Tenant = val.(string)
							}
						}

					}

				}

			}

			if v, ok := cs["interface_ip_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true

				if v.(bool) {
					defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_InterfaceIpVip{}
					defaultVipChoiceInt.InterfaceIpVip = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt
				}

			}

			if v, ok := cs["enterprise_network_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				enterpriseNetworkRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.EnterpriseNetworkRtargets = enterpriseNetworkRtargets
				for i, set := range sl {
					enterpriseNetworkRtargets[i] = &ves_io_schema.RouteTarget{}
					enterpriseNetworkRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := enterpriseNetworkRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := enterpriseNetworkRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := enterpriseNetworkRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			if v, ok := cs["export_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				exportRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.ExportRtargets = exportRtargets
				for i, set := range sl {
					exportRtargets[i] = &ves_io_schema.RouteTarget{}
					exportRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := exportRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := exportRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := exportRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			if v, ok := cs["fleets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				fleetsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				networkChoiceInt.Srv6Network.Fleets = fleetsInt
				for i, ps := range sl {

					fMapToStrVal := ps.(map[string]interface{})
					fleetsInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := fMapToStrVal["name"]; ok && !isIntfNil(v) {
						fleetsInt[i].Name = v.(string)
					}

					if v, ok := fMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						fleetsInt[i].Namespace = v.(string)
					}

					if v, ok := fMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						fleetsInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["internet_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				internetRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.InternetRtargets = internetRtargets
				for i, set := range sl {
					internetRtargets[i] = &ves_io_schema.RouteTarget{}
					internetRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := internetRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := internetRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := internetRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			namespaceChoiceTypeFound := false

			if v, ok := cs["no_namespace_network"]; ok && !isIntfNil(v) && !namespaceChoiceTypeFound {

				namespaceChoiceTypeFound = true

				if v.(bool) {
					namespaceChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_NoNamespaceNetwork{}
					namespaceChoiceInt.NoNamespaceNetwork = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.NamespaceChoice = namespaceChoiceInt
				}

			}

			if v, ok := cs["srv6_network_ns_params"]; ok && !isIntfNil(v) && !namespaceChoiceTypeFound {

				namespaceChoiceTypeFound = true
				namespaceChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_Srv6NetworkNsParams{}
				namespaceChoiceInt.Srv6NetworkNsParams = &ves_io_schema_virtual_network.Srv6NetworkNsParametersType{}
				networkChoiceInt.Srv6Network.NamespaceChoice = namespaceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						namespaceChoiceInt.Srv6NetworkNsParams.Namespace = v.(string)

					}

				}

			}

			if v, ok := cs["remote_sid_stats_plen"]; ok && !isIntfNil(v) {

				networkChoiceInt.Srv6Network.RemoteSidStatsPlen = uint32(v.(int))

			}

			if v, ok := cs["slice"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sliceInt := &ves_io_schema_views.ObjectRefType{}
				networkChoiceInt.Srv6Network.Slice = sliceInt

				for _, set := range sl {
					sMapToStrVal := set.(map[string]interface{})
					if val, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
						sliceInt.Name = val.(string)
					}
					if val, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						sliceInt.Namespace = val.(string)
					}

					if val, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						sliceInt.Tenant = val.(string)
					}
				}

			}

			snatPoolChoiceTypeFound := false

			if v, ok := cs["fleet_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true
				snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_FleetSnatPool{}
				snatPoolChoiceInt.FleetSnatPool = &ves_io_schema_virtual_network.SNATPoolFleetType{}
				networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["snat_pool_allocator"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						snatPoolAllocatorInt := &ves_io_schema_views.ObjectRefType{}
						snatPoolChoiceInt.FleetSnatPool.SnatPoolAllocator = snatPoolAllocatorInt

						for _, set := range sl {
							spaMapToStrVal := set.(map[string]interface{})
							if val, ok := spaMapToStrVal["name"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Name = val.(string)
							}
							if val, ok := spaMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Namespace = val.(string)
							}

							if val, ok := spaMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Tenant = val.(string)
							}
						}

					}

				}

			}

			if v, ok := cs["interface_ip_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true

				if v.(bool) {
					snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_InterfaceIpSnatPool{}
					snatPoolChoiceInt.InterfaceIpSnatPool = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt
				}

			}

			if v, ok := cs["site_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true
				snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_SiteSnatPool{}
				snatPoolChoiceInt.SiteSnatPool = &ves_io_schema_virtual_network.SNATPoolSiteType{}
				networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["node_snat_pool"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						nodeSnatPool := make(map[string]*ves_io_schema_virtual_network.SNATPoolType)
						snatPoolChoiceInt.SiteSnatPool.NodeSnatPool = nodeSnatPool
						for _, set := range sl {
							nodeSnatPoolMapStrToI := set.(map[string]interface{})
							key, ok := nodeSnatPoolMapStrToI["name"]
							if ok && !isIntfNil(key) {
								nodeSnatPool[key.(string)] = &ves_io_schema_virtual_network.SNATPoolType{}
								val, _ := nodeSnatPoolMapStrToI["value"]

								nodeSnatPoolVals := val.(*schema.Set).List()
								for _, intVal := range nodeSnatPoolVals {

									nodeSnatPoolStaticMap := intVal.(map[string]interface{})

									if w, ok := nodeSnatPoolStaticMap["ipv4_prefixes"]; ok && !isIntfNil(w) {
										nodeSnatPool[key.(string)].Ipv4Prefixes = w.([]string)
									}

									// break after one loop
									break
								}
							}
						}

					}

				}

			}

		}

	}

	//static_routes
	if v, ok := d.GetOk("static_routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		staticRoutes := make([]*ves_io_schema_virtual_network.StaticRouteViewType, len(sl))
		createSpec.StaticRoutes = staticRoutes
		for i, set := range sl {
			staticRoutes[i] = &ves_io_schema_virtual_network.StaticRouteViewType{}
			staticRoutesMapStrToI := set.(map[string]interface{})

			if v, ok := staticRoutesMapStrToI["attrs"]; ok && !isIntfNil(v) {

				attrsList := []ves_io_schema.RouteAttrType{}
				for _, j := range v.([]interface{}) {
					attrsList = append(attrsList, ves_io_schema.RouteAttrType(ves_io_schema.RouteAttrType_value[j.(string)]))
				}
				staticRoutes[i].Attrs = attrsList

			}

			if w, ok := staticRoutesMapStrToI["ip_prefixes"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				staticRoutes[i].IpPrefixes = ls
			}

			nextHopChoiceTypeFound := false

			if v, ok := staticRoutesMapStrToI["default_gateway"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true

				if v.(bool) {
					nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_DefaultGateway{}
					nextHopChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
					staticRoutes[i].NextHopChoice = nextHopChoiceInt
				}

			}

			if v, ok := staticRoutesMapStrToI["interface"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true
				nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_Interface{}
				nextHopChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
				staticRoutes[i].NextHopChoice = nextHopChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Tenant = v.(string)

					}

				}

			}

			if v, ok := staticRoutesMapStrToI["ip_address"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true
				nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_IpAddress{}

				staticRoutes[i].NextHopChoice = nextHopChoiceInt

				nextHopChoiceInt.IpAddress = v.(string)

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra VirtualNetwork object with struct: %+v", createReq)

	createVirtualNetworkResp, err := client.CreateObject(context.Background(), ves_io_schema_virtual_network.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating VirtualNetwork: %s", err)
	}
	d.SetId(createVirtualNetworkResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraVirtualNetworkRead(d, meta)
}

func resourceVolterraVirtualNetworkRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_virtual_network.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] VirtualNetwork %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra VirtualNetwork %q: %s", d.Id(), err)
	}
	return setVirtualNetworkFields(client, d, resp)
}

func setVirtualNetworkFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraVirtualNetworkUpdate updates VirtualNetwork resource
func resourceVolterraVirtualNetworkUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_virtual_network.ReplaceSpecType{}
	updateReq := &ves_io_schema_virtual_network.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	networkChoiceTypeFound := false

	if v, ok := d.GetOk("global_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_GlobalNetwork{}
			networkChoiceInt.GlobalNetwork = &ves_io_schema.Empty{}
			updateSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("legacy_type"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true
		networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_LegacyType{}

		updateSpec.NetworkChoice = networkChoiceInt

		networkChoiceInt.LegacyType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

	}

	if v, ok := d.GetOk("private_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_PrivateNetwork{}
			networkChoiceInt.PrivateNetwork = &ves_io_schema.Empty{}
			updateSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("site_local_inside_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_SiteLocalInsideNetwork{}
			networkChoiceInt.SiteLocalInsideNetwork = &ves_io_schema.Empty{}
			updateSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("site_local_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true

		if v.(bool) {
			networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_SiteLocalNetwork{}
			networkChoiceInt.SiteLocalNetwork = &ves_io_schema.Empty{}
			updateSpec.NetworkChoice = networkChoiceInt
		}

	}

	if v, ok := d.GetOk("srv6_network"); ok && !networkChoiceTypeFound {

		networkChoiceTypeFound = true
		networkChoiceInt := &ves_io_schema_virtual_network.ReplaceSpecType_Srv6Network{}
		networkChoiceInt.Srv6Network = &ves_io_schema_virtual_network.PerSiteSrv6NetworkType{}
		updateSpec.NetworkChoice = networkChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["access_network_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				accessNetworkRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.AccessNetworkRtargets = accessNetworkRtargets
				for i, set := range sl {
					accessNetworkRtargets[i] = &ves_io_schema.RouteTarget{}
					accessNetworkRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := accessNetworkRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := accessNetworkRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := accessNetworkRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						accessNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			defaultVipChoiceTypeFound := false

			if v, ok := cs["anycast_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true
				defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_AnycastVip{}

				networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt

				defaultVipChoiceInt.AnycastVip = v.(string)

			}

			if v, ok := cs["fleet_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true
				defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_FleetVip{}
				defaultVipChoiceInt.FleetVip = &ves_io_schema_virtual_network.AnyCastVIPFleetType{}
				networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["vip_allocator"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						vipAllocatorInt := &ves_io_schema_views.ObjectRefType{}
						defaultVipChoiceInt.FleetVip.VipAllocator = vipAllocatorInt

						for _, set := range sl {
							vaMapToStrVal := set.(map[string]interface{})
							if val, ok := vaMapToStrVal["name"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Name = val.(string)
							}
							if val, ok := vaMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Namespace = val.(string)
							}

							if val, ok := vaMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								vipAllocatorInt.Tenant = val.(string)
							}
						}

					}

				}

			}

			if v, ok := cs["interface_ip_vip"]; ok && !isIntfNil(v) && !defaultVipChoiceTypeFound {

				defaultVipChoiceTypeFound = true

				if v.(bool) {
					defaultVipChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_InterfaceIpVip{}
					defaultVipChoiceInt.InterfaceIpVip = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.DefaultVipChoice = defaultVipChoiceInt
				}

			}

			if v, ok := cs["enterprise_network_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				enterpriseNetworkRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.EnterpriseNetworkRtargets = enterpriseNetworkRtargets
				for i, set := range sl {
					enterpriseNetworkRtargets[i] = &ves_io_schema.RouteTarget{}
					enterpriseNetworkRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := enterpriseNetworkRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := enterpriseNetworkRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := enterpriseNetworkRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						enterpriseNetworkRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			if v, ok := cs["export_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				exportRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.ExportRtargets = exportRtargets
				for i, set := range sl {
					exportRtargets[i] = &ves_io_schema.RouteTarget{}
					exportRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := exportRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := exportRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := exportRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						exportRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			if v, ok := cs["fleets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				fleetsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				networkChoiceInt.Srv6Network.Fleets = fleetsInt
				for i, ps := range sl {

					fMapToStrVal := ps.(map[string]interface{})
					fleetsInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := fMapToStrVal["name"]; ok && !isIntfNil(v) {
						fleetsInt[i].Name = v.(string)
					}

					if v, ok := fMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						fleetsInt[i].Namespace = v.(string)
					}

					if v, ok := fMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						fleetsInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["internet_rtargets"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				internetRtargets := make([]*ves_io_schema.RouteTarget, len(sl))
				networkChoiceInt.Srv6Network.InternetRtargets = internetRtargets
				for i, set := range sl {
					internetRtargets[i] = &ves_io_schema.RouteTarget{}
					internetRtargetsMapStrToI := set.(map[string]interface{})

					rtargetChoiceTypeFound := false

					if v, ok := internetRtargetsMapStrToI["asn2byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn2ByteRtarget{}
						rtargetChoiceInt.Asn2ByteRtarget = &ves_io_schema.RouteTarget2ByteAsn{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn2ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := internetRtargetsMapStrToI["asn4byte_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Asn4ByteRtarget{}
						rtargetChoiceInt.Asn4ByteRtarget = &ves_io_schema.RouteTarget4ByteAsn{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["as_number"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.AsNumber = uint32(v.(int))

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Asn4ByteRtarget.Value = uint32(v.(int))

							}

						}

					}

					if v, ok := internetRtargetsMapStrToI["ipv4_addr_rtarget"]; ok && !isIntfNil(v) && !rtargetChoiceTypeFound {

						rtargetChoiceTypeFound = true
						rtargetChoiceInt := &ves_io_schema.RouteTarget_Ipv4AddrRtarget{}
						rtargetChoiceInt.Ipv4AddrRtarget = &ves_io_schema.RouteTargetIPv4Addr{}
						internetRtargets[i].RtargetChoice = rtargetChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["address"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Address = v.(string)

							}

							if v, ok := cs["value"]; ok && !isIntfNil(v) {

								rtargetChoiceInt.Ipv4AddrRtarget.Value = uint32(v.(int))

							}

						}

					}

				}

			}

			namespaceChoiceTypeFound := false

			if v, ok := cs["no_namespace_network"]; ok && !isIntfNil(v) && !namespaceChoiceTypeFound {

				namespaceChoiceTypeFound = true

				if v.(bool) {
					namespaceChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_NoNamespaceNetwork{}
					namespaceChoiceInt.NoNamespaceNetwork = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.NamespaceChoice = namespaceChoiceInt
				}

			}

			if v, ok := cs["srv6_network_ns_params"]; ok && !isIntfNil(v) && !namespaceChoiceTypeFound {

				namespaceChoiceTypeFound = true
				namespaceChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_Srv6NetworkNsParams{}
				namespaceChoiceInt.Srv6NetworkNsParams = &ves_io_schema_virtual_network.Srv6NetworkNsParametersType{}
				networkChoiceInt.Srv6Network.NamespaceChoice = namespaceChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						namespaceChoiceInt.Srv6NetworkNsParams.Namespace = v.(string)

					}

				}

			}

			if v, ok := cs["remote_sid_stats_plen"]; ok && !isIntfNil(v) {

				networkChoiceInt.Srv6Network.RemoteSidStatsPlen = uint32(v.(int))

			}

			if v, ok := cs["slice"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				sliceInt := &ves_io_schema_views.ObjectRefType{}
				networkChoiceInt.Srv6Network.Slice = sliceInt

				for _, set := range sl {
					sMapToStrVal := set.(map[string]interface{})
					if val, ok := sMapToStrVal["name"]; ok && !isIntfNil(v) {
						sliceInt.Name = val.(string)
					}
					if val, ok := sMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						sliceInt.Namespace = val.(string)
					}

					if val, ok := sMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						sliceInt.Tenant = val.(string)
					}
				}

			}

			snatPoolChoiceTypeFound := false

			if v, ok := cs["fleet_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true
				snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_FleetSnatPool{}
				snatPoolChoiceInt.FleetSnatPool = &ves_io_schema_virtual_network.SNATPoolFleetType{}
				networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["snat_pool_allocator"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						snatPoolAllocatorInt := &ves_io_schema_views.ObjectRefType{}
						snatPoolChoiceInt.FleetSnatPool.SnatPoolAllocator = snatPoolAllocatorInt

						for _, set := range sl {
							spaMapToStrVal := set.(map[string]interface{})
							if val, ok := spaMapToStrVal["name"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Name = val.(string)
							}
							if val, ok := spaMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Namespace = val.(string)
							}

							if val, ok := spaMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								snatPoolAllocatorInt.Tenant = val.(string)
							}
						}

					}

				}

			}

			if v, ok := cs["interface_ip_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true

				if v.(bool) {
					snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_InterfaceIpSnatPool{}
					snatPoolChoiceInt.InterfaceIpSnatPool = &ves_io_schema.Empty{}
					networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt
				}

			}

			if v, ok := cs["site_snat_pool"]; ok && !isIntfNil(v) && !snatPoolChoiceTypeFound {

				snatPoolChoiceTypeFound = true
				snatPoolChoiceInt := &ves_io_schema_virtual_network.PerSiteSrv6NetworkType_SiteSnatPool{}
				snatPoolChoiceInt.SiteSnatPool = &ves_io_schema_virtual_network.SNATPoolSiteType{}
				networkChoiceInt.Srv6Network.SnatPoolChoice = snatPoolChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["node_snat_pool"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						nodeSnatPool := make(map[string]*ves_io_schema_virtual_network.SNATPoolType)
						snatPoolChoiceInt.SiteSnatPool.NodeSnatPool = nodeSnatPool
						for _, set := range sl {
							nodeSnatPoolMapStrToI := set.(map[string]interface{})
							key, ok := nodeSnatPoolMapStrToI["name"]
							if ok && !isIntfNil(key) {
								nodeSnatPool[key.(string)] = &ves_io_schema_virtual_network.SNATPoolType{}
								val, _ := nodeSnatPoolMapStrToI["value"]

								nodeSnatPoolVals := val.(*schema.Set).List()
								for _, intVal := range nodeSnatPoolVals {

									nodeSnatPoolStaticMap := intVal.(map[string]interface{})

									if w, ok := nodeSnatPoolStaticMap["ipv4_prefixes"]; ok && !isIntfNil(w) {
										nodeSnatPool[key.(string)].Ipv4Prefixes = w.([]string)
									}

									// break after one loop
									break
								}
							}
						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("static_routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		staticRoutes := make([]*ves_io_schema_virtual_network.StaticRouteViewType, len(sl))
		updateSpec.StaticRoutes = staticRoutes
		for i, set := range sl {
			staticRoutes[i] = &ves_io_schema_virtual_network.StaticRouteViewType{}
			staticRoutesMapStrToI := set.(map[string]interface{})

			if v, ok := staticRoutesMapStrToI["attrs"]; ok && !isIntfNil(v) {

				attrsList := []ves_io_schema.RouteAttrType{}
				for _, j := range v.([]interface{}) {
					attrsList = append(attrsList, ves_io_schema.RouteAttrType(ves_io_schema.RouteAttrType_value[j.(string)]))
				}
				staticRoutes[i].Attrs = attrsList

			}

			if w, ok := staticRoutesMapStrToI["ip_prefixes"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				staticRoutes[i].IpPrefixes = ls
			}

			nextHopChoiceTypeFound := false

			if v, ok := staticRoutesMapStrToI["default_gateway"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true

				if v.(bool) {
					nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_DefaultGateway{}
					nextHopChoiceInt.DefaultGateway = &ves_io_schema.Empty{}
					staticRoutes[i].NextHopChoice = nextHopChoiceInt
				}

			}

			if v, ok := staticRoutesMapStrToI["interface"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true
				nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_Interface{}
				nextHopChoiceInt.Interface = &ves_io_schema_views.ObjectRefType{}
				staticRoutes[i].NextHopChoice = nextHopChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["name"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Name = v.(string)

					}

					if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Namespace = v.(string)

					}

					if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

						nextHopChoiceInt.Interface.Tenant = v.(string)

					}

				}

			}

			if v, ok := staticRoutesMapStrToI["ip_address"]; ok && !isIntfNil(v) && !nextHopChoiceTypeFound {

				nextHopChoiceTypeFound = true
				nextHopChoiceInt := &ves_io_schema_virtual_network.StaticRouteViewType_IpAddress{}

				staticRoutes[i].NextHopChoice = nextHopChoiceInt

				nextHopChoiceInt.IpAddress = v.(string)

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra VirtualNetwork obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_virtual_network.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating VirtualNetwork: %s", err)
	}

	return resourceVolterraVirtualNetworkRead(d, meta)
}

func resourceVolterraVirtualNetworkDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_virtual_network.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] VirtualNetwork %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra VirtualNetwork before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra VirtualNetwork obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_virtual_network.ObjectType, namespace, name)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_user_identification "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification"
)

// resourceVolterraUserIdentification is implementation of Volterra's UserIdentification resources
func resourceVolterraUserIdentification() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUserIdentificationCreate,
		Read:   resourceVolterraUserIdentificationRead,
		Update: resourceVolterraUserIdentificationUpdate,
		Delete: resourceVolterraUserIdentificationDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"rules": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"client_asn": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"client_city": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"client_country": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"client_ip": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"client_region": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"cookie_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"http_header_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ip_and_http_header_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ip_and_tls_fingerprint": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"jwt_claim_name": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"query_param_key": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"tls_fingerprint": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUserIdentificationCreate creates UserIdentification resource
func resourceVolterraUserIdentificationCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_user_identification.CreateSpecType{}
	createReq := &ves_io_schema_user_identification.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_user_identification.UserIdentificationRule, len(sl))
		createSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_user_identification.UserIdentificationRule{}
			rulesMapStrToI := set.(map[string]interface{})

			identifierTypeFound := false

			if v, ok := rulesMapStrToI["client_asn"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientAsn{}
					identifierInt.ClientAsn = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_city"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientCity{}
					identifierInt.ClientCity = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_country"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientCountry{}
					identifierInt.ClientCountry = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_ip"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientIp{}
					identifierInt.ClientIp = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_region"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientRegion{}
					identifierInt.ClientRegion = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["cookie_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_CookieName{}

				rules[i].Identifier = identifierInt

				identifierInt.CookieName = v.(string)

			}

			if v, ok := rulesMapStrToI["http_header_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_HttpHeaderName{}

				rules[i].Identifier = identifierInt

				identifierInt.HttpHeaderName = v.(string)

			}

			if v, ok := rulesMapStrToI["ip_and_http_header_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_IpAndHttpHeaderName{}

				rules[i].Identifier = identifierInt

				identifierInt.IpAndHttpHeaderName = v.(string)

			}

			if v, ok := rulesMapStrToI["ip_and_tls_fingerprint"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_IpAndTlsFingerprint{}
					identifierInt.IpAndTlsFingerprint = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["jwt_claim_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_JwtClaimName{}

				rules[i].Identifier = identifierInt

				identifierInt.JwtClaimName = v.(string)

			}

			if v, ok := rulesMapStrToI["none"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_None{}
					identifierInt.None = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["query_param_key"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_QueryParamKey{}

				rules[i].Identifier = identifierInt

				identifierInt.QueryParamKey = v.(string)

			}

			if v, ok := rulesMapStrToI["tls_fingerprint"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_TlsFingerprint{}
					identifierInt.TlsFingerprint = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra UserIdentification object with struct: %+v", createReq)

	createUserIdentificationResp, err := client.CreateObject(context.Background(), ves_io_schema_user_identification.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UserIdentification: %s", err)
	}
	d.SetId(createUserIdentificationResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUserIdentificationRead(d, meta)
}

func resourceVolterraUserIdentificationRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_user_identification.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UserIdentification %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UserIdentification %q: %s", d.Id(), err)
	}
	return setUserIdentificationFields(client, d, resp)
}

func setUserIdentificationFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUserIdentificationUpdate updates UserIdentification resource
func resourceVolterraUserIdentificationUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_user_identification.ReplaceSpecType{}
	updateReq := &ves_io_schema_user_identification.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_user_identification.UserIdentificationRule, len(sl))
		updateSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_user_identification.UserIdentificationRule{}
			rulesMapStrToI := set.(map[string]interface{})

			identifierTypeFound := false

			if v, ok := rulesMapStrToI["client_asn"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientAsn{}
					identifierInt.ClientAsn = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_city"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientCity{}
					identifierInt.ClientCity = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_country"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientCountry{}
					identifierInt.ClientCountry = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_ip"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientIp{}
					identifierInt.ClientIp = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["client_region"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_ClientRegion{}
					identifierInt.ClientRegion = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["cookie_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_CookieName{}

				rules[i].Identifier = identifierInt

				identifierInt.CookieName = v.(string)

			}

			if v, ok := rulesMapStrToI["http_header_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_HttpHeaderName{}

				rules[i].Identifier = identifierInt

				identifierInt.HttpHeaderName = v.(string)

			}

			if v, ok := rulesMapStrToI["ip_and_http_header_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_IpAndHttpHeaderName{}

				rules[i].Identifier = identifierInt

				identifierInt.IpAndHttpHeaderName = v.(string)

			}

			if v, ok := rulesMapStrToI["ip_and_tls_fingerprint"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_IpAndTlsFingerprint{}
					identifierInt.IpAndTlsFingerprint = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["jwt_claim_name"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_JwtClaimName{}

				rules[i].Identifier = identifierInt

				identifierInt.JwtClaimName = v.(string)

			}

			if v, ok := rulesMapStrToI["none"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_None{}
					identifierInt.None = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

			if v, ok := rulesMapStrToI["query_param_key"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true
				identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_QueryParamKey{}

				rules[i].Identifier = identifierInt

				identifierInt.QueryParamKey = v.(string)

			}

			if v, ok := rulesMapStrToI["tls_fingerprint"]; ok && !isIntfNil(v) && !identifierTypeFound {

				identifierTypeFound = true

				if v.(bool) {
					identifierInt := &ves_io_schema_user_identification.UserIdentificationRule_TlsFingerprint{}
					identifierInt.TlsFingerprint = &ves_io_schema.Empty{}
					rules[i].Identifier = identifierInt
				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra UserIdentification obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_user_identification.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UserIdentification: %s", err)
	}

	return resourceVolterraUserIdentificationRead(d, meta)
}

func resourceVolterraUserIdentificationDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_user_identification.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UserIdentification %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UserIdentification before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UserIdentification obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_user_identification.ObjectType, namespace, name)
}

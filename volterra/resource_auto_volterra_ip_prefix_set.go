//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_ip_prefix_set "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set"
	drift "github.com/volterraedge/terraform-provider-volterra/volterra/drift_detection"
)

// resourceVolterraIpPrefixSet is implementation of Volterra's IpPrefixSet resources
func resourceVolterraIpPrefixSet() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraIpPrefixSetCreate,
		Read:   resourceVolterraIpPrefixSetRead,
		Update: resourceVolterraIpPrefixSetUpdate,
		Delete: resourceVolterraIpPrefixSetDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"ipv4_prefixes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv4_prefix": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"ipv6_prefixes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv6_prefix": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraIpPrefixSetCreate creates IpPrefixSet resource
func resourceVolterraIpPrefixSetCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_ip_prefix_set.CreateSpecType{}
	createReq := &ves_io_schema_ip_prefix_set.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//ipv4_prefixes
	if v, ok := d.GetOk("ipv4_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipv4Prefixes := make([]*ves_io_schema_ip_prefix_set.Ipv4Prefix, len(sl))
		createSpec.Ipv4Prefixes = ipv4Prefixes
		for i, set := range sl {
			if set != nil {
				ipv4Prefixes[i] = &ves_io_schema_ip_prefix_set.Ipv4Prefix{}
				ipv4PrefixesMapStrToI := set.(map[string]interface{})

				if w, ok := ipv4PrefixesMapStrToI["description"]; ok && !isIntfNil(w) {
					ipv4Prefixes[i].Description = w.(string)
				}

				if w, ok := ipv4PrefixesMapStrToI["ipv4_prefix"]; ok && !isIntfNil(w) {
					ipv4Prefixes[i].Ipv4Prefix = w.(string)
				}

			}
		}

	}

	//ipv6_prefixes
	if v, ok := d.GetOk("ipv6_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipv6Prefixes := make([]*ves_io_schema_ip_prefix_set.Ipv6Prefix, len(sl))
		createSpec.Ipv6Prefixes = ipv6Prefixes
		for i, set := range sl {
			if set != nil {
				ipv6Prefixes[i] = &ves_io_schema_ip_prefix_set.Ipv6Prefix{}
				ipv6PrefixesMapStrToI := set.(map[string]interface{})

				if w, ok := ipv6PrefixesMapStrToI["description"]; ok && !isIntfNil(w) {
					ipv6Prefixes[i].Description = w.(string)
				}

				if w, ok := ipv6PrefixesMapStrToI["ipv6_prefix"]; ok && !isIntfNil(w) {
					ipv6Prefixes[i].Ipv6Prefix = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra IpPrefixSet object with struct: %+v", createReq)

	createIpPrefixSetResp, err := client.CreateObject(context.Background(), ves_io_schema_ip_prefix_set.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating IpPrefixSet: %s", err)
	}
	d.SetId(createIpPrefixSetResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraIpPrefixSetRead(d, meta)
}

func resourceVolterraIpPrefixSetRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_ip_prefix_set.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] IpPrefixSet %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra IpPrefixSet %q: %s", d.Id(), err)
	}
	return setIpPrefixSetFields(client, d, resp)
}

func setIpPrefixSetFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	drift.DriftDetectionSpecIpPrefixSet(d,resp)

	return nil
}

// resourceVolterraIpPrefixSetUpdate updates IpPrefixSet resource
func resourceVolterraIpPrefixSetUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_ip_prefix_set.ReplaceSpecType{}
	updateReq := &ves_io_schema_ip_prefix_set.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("ipv4_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipv4Prefixes := make([]*ves_io_schema_ip_prefix_set.Ipv4Prefix, len(sl))
		updateSpec.Ipv4Prefixes = ipv4Prefixes
		for i, set := range sl {
			if set != nil {
				ipv4Prefixes[i] = &ves_io_schema_ip_prefix_set.Ipv4Prefix{}
				ipv4PrefixesMapStrToI := set.(map[string]interface{})

				if w, ok := ipv4PrefixesMapStrToI["description"]; ok && !isIntfNil(w) {
					ipv4Prefixes[i].Description = w.(string)
				}

				if w, ok := ipv4PrefixesMapStrToI["ipv4_prefix"]; ok && !isIntfNil(w) {
					ipv4Prefixes[i].Ipv4Prefix = w.(string)
				}

			}
		}

	}

	if v, ok := d.GetOk("ipv6_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ipv6Prefixes := make([]*ves_io_schema_ip_prefix_set.Ipv6Prefix, len(sl))
		updateSpec.Ipv6Prefixes = ipv6Prefixes
		for i, set := range sl {
			if set != nil {
				ipv6Prefixes[i] = &ves_io_schema_ip_prefix_set.Ipv6Prefix{}
				ipv6PrefixesMapStrToI := set.(map[string]interface{})

				if w, ok := ipv6PrefixesMapStrToI["description"]; ok && !isIntfNil(w) {
					ipv6Prefixes[i].Description = w.(string)
				}

				if w, ok := ipv6PrefixesMapStrToI["ipv6_prefix"]; ok && !isIntfNil(w) {
					ipv6Prefixes[i].Ipv6Prefix = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra IpPrefixSet obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_ip_prefix_set.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating IpPrefixSet: %s", err)
	}

	return resourceVolterraIpPrefixSetRead(d, meta)
}

func resourceVolterraIpPrefixSetDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_ip_prefix_set.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] IpPrefixSet %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra IpPrefixSet before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra IpPrefixSet obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_ip_prefix_set.ObjectType, namespace, name, opts...)
}

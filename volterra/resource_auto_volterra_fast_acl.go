//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fast_acl "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl"
	ves_io_schema_fast_acl_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraFastAcl is implementation of Volterra's FastAcl resources
func resourceVolterraFastAcl() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraFastAclCreate,
		Read:   resourceVolterraFastAclRead,
		Update: resourceVolterraFastAclUpdate,
		Delete: resourceVolterraFastAclDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"protocol_policer": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"re_acl": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"fast_acl_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"policer_action": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ref": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"protocol_policer_action": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ref": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"simple_action": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"port": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"all": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"dns": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"user_defined": {

													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ip_prefix_set": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"prefix": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv6_prefix": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"prefix": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"all_public_vips": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_tenant_vip": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"selected_tenant_vip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"default_tenant_vip": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"public_ip_refs": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"site_acl": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"fast_acl_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"policer_action": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ref": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"protocol_policer_action": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ref": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"simple_action": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"port": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"all": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"dns": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"user_defined": {

													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"ip_prefix_set": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"prefix": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ipv6_prefix": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"prefix": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"inside_network": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"outside_network": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"all_services": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"interface_services": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"vip_services": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraFastAclCreate creates FastAcl resource
func resourceVolterraFastAclCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_fast_acl.CreateSpecType{}
	createReq := &ves_io_schema_fast_acl.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//protocol_policer
	if v, ok := d.GetOk("protocol_policer"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protocolPolicerInt := &ves_io_schema_views.ObjectRefType{}
		createSpec.ProtocolPolicer = protocolPolicerInt

		for _, set := range sl {
			if set != nil {
				ppMapToStrVal := set.(map[string]interface{})
				if val, ok := ppMapToStrVal["name"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Name = val.(string)
				}
				if val, ok := ppMapToStrVal["namespace"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Namespace = val.(string)
				}

				if val, ok := ppMapToStrVal["tenant"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Tenant = val.(string)
				}
			}
		}

	}

	//site_choice

	siteChoiceTypeFound := false

	if v, ok := d.GetOk("re_acl"); ok && !isIntfNil(v) && !siteChoiceTypeFound {

		siteChoiceTypeFound = true
		siteChoiceInt := &ves_io_schema_fast_acl.CreateSpecType_ReAcl{}
		siteChoiceInt.ReAcl = &ves_io_schema_fast_acl.ReACLType{}
		createSpec.SiteChoice = siteChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["fast_acl_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					fastAclRules := make([]*ves_io_schema_fast_acl.FastACLRuleType, len(sl))
					siteChoiceInt.ReAcl.FastAclRules = fastAclRules
					for i, set := range sl {
						if set != nil {
							fastAclRules[i] = &ves_io_schema_fast_acl.FastACLRuleType{}
							fastAclRulesMapStrToI := set.(map[string]interface{})

							if v, ok := fastAclRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_fast_acl_rule.FastAclRuleAction{}
								fastAclRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_PolicerAction{}
											actionInt.PolicerAction = &ves_io_schema.PolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.PolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["protocol_policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{}
											actionInt.ProtocolPolicerAction = &ves_io_schema.ProtocolPolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.ProtocolPolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "protocol_policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["simple_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_SimpleAction{}

											action.Action = actionInt

											actionInt.SimpleAction = ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction(ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction_value[v.(string)])

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								fastAclRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								port := make([]*ves_io_schema.PortValueType, len(sl))
								fastAclRules[i].Port = port
								for i, set := range sl {
									if set != nil {
										port[i] = &ves_io_schema.PortValueType{}
										portMapStrToI := set.(map[string]interface{})

										portValueTypeChoiceTypeFound := false

										if v, ok := portMapStrToI["all"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_All{}
												portValueTypeChoiceInt.All = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["dns"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_Dns{}
												portValueTypeChoiceInt.Dns = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["user_defined"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true
											portValueTypeChoiceInt := &ves_io_schema.PortValueType_UserDefined{}

											port[i].PortValueTypeChoice = portValueTypeChoiceInt

											portValueTypeChoiceInt.UserDefined = uint32(v.(int))

										}

									}
								}

							}

							sourceTypeFound := false

							if v, ok := fastAclRulesMapStrToI["ip_prefix_set"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_IpPrefixSet{}
								sourceInt.IpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceInt.IpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["prefix"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_Prefix{}
								sourceInt.Prefix = &ves_io_schema.PrefixListType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Ipv6Prefix = ls

										}

										if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Prefix = ls

										}

									}
								}

							}

						}
					}

				}

				vipChoiceTypeFound := false

				if v, ok := cs["all_public_vips"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_AllPublicVips{}
						vipChoiceInt.AllPublicVips = &ves_io_schema.Empty{}
						siteChoiceInt.ReAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["default_tenant_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_DefaultTenantVip{}
						vipChoiceInt.DefaultTenantVip = &ves_io_schema.Empty{}
						siteChoiceInt.ReAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["selected_tenant_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true
					vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_SelectedTenantVip{}
					vipChoiceInt.SelectedTenantVip = &ves_io_schema_fast_acl.SelectedTenantVIPsType{}
					siteChoiceInt.ReAcl.VipChoice = vipChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["default_tenant_vip"]; ok && !isIntfNil(v) {

								vipChoiceInt.SelectedTenantVip.DefaultTenantVip = v.(bool)

							}

							if v, ok := cs["public_ip_refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIpRefsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								vipChoiceInt.SelectedTenantVip.PublicIpRefs = publicIpRefsInt
								for i, ps := range sl {

									pirMapToStrVal := ps.(map[string]interface{})
									publicIpRefsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pirMapToStrVal["name"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Name = v.(string)
									}

									if v, ok := pirMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Namespace = v.(string)
									}

									if v, ok := pirMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("site_acl"); ok && !isIntfNil(v) && !siteChoiceTypeFound {

		siteChoiceTypeFound = true
		siteChoiceInt := &ves_io_schema_fast_acl.CreateSpecType_SiteAcl{}
		siteChoiceInt.SiteAcl = &ves_io_schema_fast_acl.SiteACLType{}
		createSpec.SiteChoice = siteChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["fast_acl_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					fastAclRules := make([]*ves_io_schema_fast_acl.FastACLRuleType, len(sl))
					siteChoiceInt.SiteAcl.FastAclRules = fastAclRules
					for i, set := range sl {
						if set != nil {
							fastAclRules[i] = &ves_io_schema_fast_acl.FastACLRuleType{}
							fastAclRulesMapStrToI := set.(map[string]interface{})

							if v, ok := fastAclRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_fast_acl_rule.FastAclRuleAction{}
								fastAclRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_PolicerAction{}
											actionInt.PolicerAction = &ves_io_schema.PolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.PolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["protocol_policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{}
											actionInt.ProtocolPolicerAction = &ves_io_schema.ProtocolPolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.ProtocolPolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "protocol_policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["simple_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_SimpleAction{}

											action.Action = actionInt

											actionInt.SimpleAction = ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction(ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction_value[v.(string)])

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								fastAclRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								port := make([]*ves_io_schema.PortValueType, len(sl))
								fastAclRules[i].Port = port
								for i, set := range sl {
									if set != nil {
										port[i] = &ves_io_schema.PortValueType{}
										portMapStrToI := set.(map[string]interface{})

										portValueTypeChoiceTypeFound := false

										if v, ok := portMapStrToI["all"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_All{}
												portValueTypeChoiceInt.All = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["dns"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_Dns{}
												portValueTypeChoiceInt.Dns = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["user_defined"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true
											portValueTypeChoiceInt := &ves_io_schema.PortValueType_UserDefined{}

											port[i].PortValueTypeChoice = portValueTypeChoiceInt

											portValueTypeChoiceInt.UserDefined = uint32(v.(int))

										}

									}
								}

							}

							sourceTypeFound := false

							if v, ok := fastAclRulesMapStrToI["ip_prefix_set"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_IpPrefixSet{}
								sourceInt.IpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceInt.IpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["prefix"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_Prefix{}
								sourceInt.Prefix = &ves_io_schema.PrefixListType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Ipv6Prefix = ls

										}

										if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Prefix = ls

										}

									}
								}

							}

						}
					}

				}

				networkChoiceTypeFound := false

				if v, ok := cs["inside_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

					networkChoiceTypeFound = true

					if v.(bool) {
						networkChoiceInt := &ves_io_schema_fast_acl.SiteACLType_InsideNetwork{}
						networkChoiceInt.InsideNetwork = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.NetworkChoice = networkChoiceInt
					}

				}

				if v, ok := cs["outside_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

					networkChoiceTypeFound = true

					if v.(bool) {
						networkChoiceInt := &ves_io_schema_fast_acl.SiteACLType_OutsideNetwork{}
						networkChoiceInt.OutsideNetwork = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.NetworkChoice = networkChoiceInt
					}

				}

				vipChoiceTypeFound := false

				if v, ok := cs["all_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_AllServices{}
						vipChoiceInt.AllServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["interface_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_InterfaceServices{}
						vipChoiceInt.InterfaceServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["vip_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_VipServices{}
						vipChoiceInt.VipServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra FastAcl object with struct: %+v", createReq)

	createFastAclResp, err := client.CreateObject(context.Background(), ves_io_schema_fast_acl.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating FastAcl: %s", err)
	}
	d.SetId(createFastAclResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraFastAclRead(d, meta)
}

func resourceVolterraFastAclRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_fast_acl.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] FastAcl %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra FastAcl %q: %s", d.Id(), err)
	}
	return setFastAclFields(client, d, resp)
}

func setFastAclFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraFastAclUpdate updates FastAcl resource
func resourceVolterraFastAclUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_fast_acl.ReplaceSpecType{}
	updateReq := &ves_io_schema_fast_acl.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("protocol_policer"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protocolPolicerInt := &ves_io_schema_views.ObjectRefType{}
		updateSpec.ProtocolPolicer = protocolPolicerInt

		for _, set := range sl {
			if set != nil {
				ppMapToStrVal := set.(map[string]interface{})
				if val, ok := ppMapToStrVal["name"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Name = val.(string)
				}
				if val, ok := ppMapToStrVal["namespace"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Namespace = val.(string)
				}

				if val, ok := ppMapToStrVal["tenant"]; ok && !isIntfNil(v) {
					protocolPolicerInt.Tenant = val.(string)
				}
			}
		}

	}

	siteChoiceTypeFound := false

	if v, ok := d.GetOk("re_acl"); ok && !isIntfNil(v) && !siteChoiceTypeFound {

		siteChoiceTypeFound = true
		siteChoiceInt := &ves_io_schema_fast_acl.ReplaceSpecType_ReAcl{}
		siteChoiceInt.ReAcl = &ves_io_schema_fast_acl.ReACLType{}
		updateSpec.SiteChoice = siteChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["fast_acl_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					fastAclRules := make([]*ves_io_schema_fast_acl.FastACLRuleType, len(sl))
					siteChoiceInt.ReAcl.FastAclRules = fastAclRules
					for i, set := range sl {
						if set != nil {
							fastAclRules[i] = &ves_io_schema_fast_acl.FastACLRuleType{}
							fastAclRulesMapStrToI := set.(map[string]interface{})

							if v, ok := fastAclRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_fast_acl_rule.FastAclRuleAction{}
								fastAclRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_PolicerAction{}
											actionInt.PolicerAction = &ves_io_schema.PolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.PolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["protocol_policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{}
											actionInt.ProtocolPolicerAction = &ves_io_schema.ProtocolPolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.ProtocolPolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "protocol_policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["simple_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_SimpleAction{}

											action.Action = actionInt

											actionInt.SimpleAction = ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction(ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction_value[v.(string)])

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								fastAclRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								port := make([]*ves_io_schema.PortValueType, len(sl))
								fastAclRules[i].Port = port
								for i, set := range sl {
									if set != nil {
										port[i] = &ves_io_schema.PortValueType{}
										portMapStrToI := set.(map[string]interface{})

										portValueTypeChoiceTypeFound := false

										if v, ok := portMapStrToI["all"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_All{}
												portValueTypeChoiceInt.All = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["dns"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_Dns{}
												portValueTypeChoiceInt.Dns = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["user_defined"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true
											portValueTypeChoiceInt := &ves_io_schema.PortValueType_UserDefined{}

											port[i].PortValueTypeChoice = portValueTypeChoiceInt

											portValueTypeChoiceInt.UserDefined = uint32(v.(int))

										}

									}
								}

							}

							sourceTypeFound := false

							if v, ok := fastAclRulesMapStrToI["ip_prefix_set"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_IpPrefixSet{}
								sourceInt.IpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceInt.IpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["prefix"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_Prefix{}
								sourceInt.Prefix = &ves_io_schema.PrefixListType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Ipv6Prefix = ls

										}

										if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Prefix = ls

										}

									}
								}

							}

						}
					}

				}

				vipChoiceTypeFound := false

				if v, ok := cs["all_public_vips"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_AllPublicVips{}
						vipChoiceInt.AllPublicVips = &ves_io_schema.Empty{}
						siteChoiceInt.ReAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["default_tenant_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_DefaultTenantVip{}
						vipChoiceInt.DefaultTenantVip = &ves_io_schema.Empty{}
						siteChoiceInt.ReAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["selected_tenant_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true
					vipChoiceInt := &ves_io_schema_fast_acl.ReACLType_SelectedTenantVip{}
					vipChoiceInt.SelectedTenantVip = &ves_io_schema_fast_acl.SelectedTenantVIPsType{}
					siteChoiceInt.ReAcl.VipChoice = vipChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["default_tenant_vip"]; ok && !isIntfNil(v) {

								vipChoiceInt.SelectedTenantVip.DefaultTenantVip = v.(bool)

							}

							if v, ok := cs["public_ip_refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIpRefsInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								vipChoiceInt.SelectedTenantVip.PublicIpRefs = publicIpRefsInt
								for i, ps := range sl {

									pirMapToStrVal := ps.(map[string]interface{})
									publicIpRefsInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pirMapToStrVal["name"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Name = v.(string)
									}

									if v, ok := pirMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Namespace = v.(string)
									}

									if v, ok := pirMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										publicIpRefsInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("site_acl"); ok && !isIntfNil(v) && !siteChoiceTypeFound {

		siteChoiceTypeFound = true
		siteChoiceInt := &ves_io_schema_fast_acl.ReplaceSpecType_SiteAcl{}
		siteChoiceInt.SiteAcl = &ves_io_schema_fast_acl.SiteACLType{}
		updateSpec.SiteChoice = siteChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["fast_acl_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					fastAclRules := make([]*ves_io_schema_fast_acl.FastACLRuleType, len(sl))
					siteChoiceInt.SiteAcl.FastAclRules = fastAclRules
					for i, set := range sl {
						if set != nil {
							fastAclRules[i] = &ves_io_schema_fast_acl.FastACLRuleType{}
							fastAclRulesMapStrToI := set.(map[string]interface{})

							if v, ok := fastAclRulesMapStrToI["action"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								action := &ves_io_schema_fast_acl_rule.FastAclRuleAction{}
								fastAclRules[i].Action = action
								for _, set := range sl {
									if set != nil {
										actionMapStrToI := set.(map[string]interface{})

										actionTypeFound := false

										if v, ok := actionMapStrToI["policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_PolicerAction{}
											actionInt.PolicerAction = &ves_io_schema.PolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.PolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["protocol_policer_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{}
											actionInt.ProtocolPolicerAction = &ves_io_schema.ProtocolPolicerRefType{}
											action.Action = actionInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ref"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														actionInt.ProtocolPolicerAction.Ref = refInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refInt[i] = &ves_io_schema.ObjectRefType{}

															refInt[i].Kind = "protocol_policer"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := actionMapStrToI["simple_action"]; ok && !isIntfNil(v) && !actionTypeFound {

											actionTypeFound = true
											actionInt := &ves_io_schema_fast_acl_rule.FastAclRuleAction_SimpleAction{}

											action.Action = actionInt

											actionInt.SimpleAction = ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction(ves_io_schema_fast_acl_rule.FastAclRuleSimpleAction_value[v.(string)])

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								fastAclRules[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								port := make([]*ves_io_schema.PortValueType, len(sl))
								fastAclRules[i].Port = port
								for i, set := range sl {
									if set != nil {
										port[i] = &ves_io_schema.PortValueType{}
										portMapStrToI := set.(map[string]interface{})

										portValueTypeChoiceTypeFound := false

										if v, ok := portMapStrToI["all"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_All{}
												portValueTypeChoiceInt.All = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["dns"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true

											if v.(bool) {
												portValueTypeChoiceInt := &ves_io_schema.PortValueType_Dns{}
												portValueTypeChoiceInt.Dns = &ves_io_schema.Empty{}
												port[i].PortValueTypeChoice = portValueTypeChoiceInt
											}

										}

										if v, ok := portMapStrToI["user_defined"]; ok && !isIntfNil(v) && !portValueTypeChoiceTypeFound {

											portValueTypeChoiceTypeFound = true
											portValueTypeChoiceInt := &ves_io_schema.PortValueType_UserDefined{}

											port[i].PortValueTypeChoice = portValueTypeChoiceInt

											portValueTypeChoiceInt.UserDefined = uint32(v.(int))

										}

									}
								}

							}

							sourceTypeFound := false

							if v, ok := fastAclRulesMapStrToI["ip_prefix_set"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_IpPrefixSet{}
								sourceInt.IpPrefixSet = &ves_io_schema.IpPrefixSetRefType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ref"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											sourceInt.IpPrefixSet.Ref = refInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refInt[i] = &ves_io_schema.ObjectRefType{}

												refInt[i].Kind = "ip_prefix_set"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := fastAclRulesMapStrToI["prefix"]; ok && !isIntfNil(v) && !sourceTypeFound {

								sourceTypeFound = true
								sourceInt := &ves_io_schema_fast_acl.FastACLRuleType_Prefix{}
								sourceInt.Prefix = &ves_io_schema.PrefixListType{}
								fastAclRules[i].Source = sourceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["ipv6_prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Ipv6Prefix = ls

										}

										if v, ok := cs["prefix"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field prefix")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											sourceInt.Prefix.Prefix = ls

										}

									}
								}

							}

						}
					}

				}

				networkChoiceTypeFound := false

				if v, ok := cs["inside_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

					networkChoiceTypeFound = true

					if v.(bool) {
						networkChoiceInt := &ves_io_schema_fast_acl.SiteACLType_InsideNetwork{}
						networkChoiceInt.InsideNetwork = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.NetworkChoice = networkChoiceInt
					}

				}

				if v, ok := cs["outside_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

					networkChoiceTypeFound = true

					if v.(bool) {
						networkChoiceInt := &ves_io_schema_fast_acl.SiteACLType_OutsideNetwork{}
						networkChoiceInt.OutsideNetwork = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.NetworkChoice = networkChoiceInt
					}

				}

				vipChoiceTypeFound := false

				if v, ok := cs["all_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_AllServices{}
						vipChoiceInt.AllServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["interface_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_InterfaceServices{}
						vipChoiceInt.InterfaceServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

				if v, ok := cs["vip_services"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

					vipChoiceTypeFound = true

					if v.(bool) {
						vipChoiceInt := &ves_io_schema_fast_acl.SiteACLType_VipServices{}
						vipChoiceInt.VipServices = &ves_io_schema.Empty{}
						siteChoiceInt.SiteAcl.VipChoice = vipChoiceInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra FastAcl obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_fast_acl.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating FastAcl: %s", err)
	}

	return resourceVolterraFastAclRead(d, meta)
}

func resourceVolterraFastAclDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_fast_acl.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] FastAcl %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra FastAcl before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra FastAcl obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_fast_acl.ObjectType, namespace, name, opts...)
}

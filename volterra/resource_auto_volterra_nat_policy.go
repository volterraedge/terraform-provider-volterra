//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_nat_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nat_policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraNatPolicy is implementation of Volterra's NatPolicy resources
func resourceVolterraNatPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraNatPolicyCreate,
		Read:   resourceVolterraNatPolicyRead,
		Update: resourceVolterraNatPolicyUpdate,
		Delete: resourceVolterraNatPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"site": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"refs": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"rules": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"action": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"dynamic": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"elastic_ips": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"refs": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"pools": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"virtual_cidr": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"criteria": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"destination_cidr": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"destination_port": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_port_match": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"segment": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"refs": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"virtual_networks": {

													Type:       schema.TypeList,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:       schema.TypeString,
																Computed:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"namespace": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
															"tenant": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"virtual_network": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"refs": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"protocol": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"source_cidr": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"source_port": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_port_match": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"disable": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"cloud_connect": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"refs": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"network_interface": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"refs": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"segment": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"refs": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"virtual_networks": {

										Type:       schema.TypeList,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:       schema.TypeString,
													Computed:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
												"namespace": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
												"tenant": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"virtual_network": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"refs": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraNatPolicyCreate creates NatPolicy resource
func resourceVolterraNatPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_nat_policy.CreateSpecType{}
	createReq := &ves_io_schema_nat_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//applies_to_choice

	appliesToChoiceTypeFound := false

	if v, ok := d.GetOk("site"); ok && !appliesToChoiceTypeFound {

		appliesToChoiceTypeFound = true
		appliesToChoiceInt := &ves_io_schema_nat_policy.CreateSpecType_Site{}
		appliesToChoiceInt.Site = &ves_io_schema.SiteReferenceType{}
		createSpec.AppliesToChoice = appliesToChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["refs"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appliesToChoiceInt.Site.Refs = refsInt
					for i, ps := range sl {

						rMapToStrVal := ps.(map[string]interface{})
						refsInt[i] = &ves_io_schema.ObjectRefType{}

						refsInt[i].Kind = "site"

						if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
							refsInt[i].Name = v.(string)
						}

						if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							refsInt[i].Namespace = v.(string)
						}

						if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							refsInt[i].Tenant = v.(string)
						}

						if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
							refsInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_nat_policy.RuleType, len(sl))
		createSpec.Rules = rules
		for i, set := range sl {
			if set != nil {
				rules[i] = &ves_io_schema_nat_policy.RuleType{}
				rulesMapStrToI := set.(map[string]interface{})

				if v, ok := rulesMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema_nat_policy.ActionType{}
					rules[i].Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							sourceNatChoiceTypeFound := false

							if v, ok := actionMapStrToI["dynamic"]; ok && !isIntfNil(v) && !sourceNatChoiceTypeFound {

								sourceNatChoiceTypeFound = true
								sourceNatChoiceInt := &ves_io_schema_nat_policy.ActionType_Dynamic{}
								sourceNatChoiceInt.Dynamic = &ves_io_schema_nat_policy.DynamicPool{}
								action.SourceNatChoice = sourceNatChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										poolChoiceTypeFound := false

										if v, ok := cs["elastic_ips"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_nat_policy.DynamicPool_ElasticIps{}
											poolChoiceInt.ElasticIps = &ves_io_schema.CloudElasticIpRefListType{}
											sourceNatChoiceInt.Dynamic.PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["refs"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														poolChoiceInt.ElasticIps.Refs = refsInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refsInt[i] = &ves_io_schema.ObjectRefType{}

															refsInt[i].Kind = "cloud_elastic_ip"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refsInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refsInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refsInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := cs["pools"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_nat_policy.DynamicPool_Pools{}
											poolChoiceInt.Pools = &ves_io_schema_views.PrefixStringListType{}
											sourceNatChoiceInt.Dynamic.PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														poolChoiceInt.Pools.Ipv6Prefixes = ls

													}

													if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														poolChoiceInt.Pools.Prefixes = ls

													}

												}
											}

										}

									}
								}

							}

							if v, ok := actionMapStrToI["virtual_cidr"]; ok && !isIntfNil(v) && !sourceNatChoiceTypeFound {

								sourceNatChoiceTypeFound = true
								sourceNatChoiceInt := &ves_io_schema_nat_policy.ActionType_VirtualCidr{}

								action.SourceNatChoice = sourceNatChoiceInt

								sourceNatChoiceInt.VirtualCidr = v.(string)

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["criteria"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					criteria := &ves_io_schema_nat_policy.MatchCriteriaType{}
					rules[i].Criteria = criteria
					for _, set := range sl {
						if set != nil {
							criteriaMapStrToI := set.(map[string]interface{})

							if w, ok := criteriaMapStrToI["destination_cidr"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								criteria.DestinationCidr = ls
							}

							if v, ok := criteriaMapStrToI["destination_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								destinationPort := &ves_io_schema.PortMatcherType{}
								criteria.DestinationPort = destinationPort
								for _, set := range sl {
									if set != nil {
										destinationPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := destinationPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												destinationPort.PortMatch = portMatchInt
											}

										}

										if v, ok := destinationPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											destinationPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := destinationPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											destinationPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							networkChoiceTypeFound := false

							if v, ok := criteriaMapStrToI["segment"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

								networkChoiceTypeFound = true
								networkChoiceInt := &ves_io_schema_nat_policy.MatchCriteriaType_Segment{}
								networkChoiceInt.Segment = &ves_io_schema.SegmentRefType{}
								criteria.NetworkChoice = networkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["refs"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.Segment.Refs = refsInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refsInt[i] = &ves_io_schema.ObjectRefType{}

												refsInt[i].Kind = "segment"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refsInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refsInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refsInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refsInt[i].Uid = v.(string)
												}

											}

										}

										if v, ok := cs["virtual_networks"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualNetworksInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.Segment.VirtualNetworks = virtualNetworksInt
											for i, ps := range sl {

												vnMapToStrVal := ps.(map[string]interface{})
												virtualNetworksInt[i] = &ves_io_schema.ObjectRefType{}

												virtualNetworksInt[i].Kind = "virtual_network"

												if v, ok := vnMapToStrVal["name"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Name = v.(string)
												}

												if v, ok := vnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Namespace = v.(string)
												}

												if v, ok := vnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Tenant = v.(string)
												}

												if v, ok := vnMapToStrVal["uid"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := criteriaMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

								networkChoiceTypeFound = true
								networkChoiceInt := &ves_io_schema_nat_policy.MatchCriteriaType_VirtualNetwork{}
								networkChoiceInt.VirtualNetwork = &ves_io_schema.VirtualNetworkReferenceType{}
								criteria.NetworkChoice = networkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["refs"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.VirtualNetwork.Refs = refsInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refsInt[i] = &ves_io_schema.ObjectRefType{}

												refsInt[i].Kind = "virtual_network"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refsInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refsInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refsInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := criteriaMapStrToI["protocol"]; ok && !isIntfNil(v) {

								criteria.Protocol = ves_io_schema.ProtocolEnumType(ves_io_schema.ProtocolEnumType_value[v.(string)])

							}

							if w, ok := criteriaMapStrToI["source_cidr"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								criteria.SourceCidr = ls
							}

							if v, ok := criteriaMapStrToI["source_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								sourcePort := &ves_io_schema.PortMatcherType{}
								criteria.SourcePort = sourcePort
								for _, set := range sl {
									if set != nil {
										sourcePortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := sourcePortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												sourcePort.PortMatch = portMatchInt
											}

										}

										if v, ok := sourcePortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											sourcePort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := sourcePortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											sourcePort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

						}
					}

				}

				enableChoiceTypeFound := false

				if v, ok := rulesMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_nat_policy.RuleType_Disable{}
						enableChoiceInt.Disable = &ves_io_schema.Empty{}
						rules[i].EnableChoice = enableChoiceInt
					}

				}

				if v, ok := rulesMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_nat_policy.RuleType_Enable{}
						enableChoiceInt.Enable = &ves_io_schema.Empty{}
						rules[i].EnableChoice = enableChoiceInt
					}

				}

				if w, ok := rulesMapStrToI["name"]; ok && !isIntfNil(w) {
					rules[i].Name = w.(string)
				}

				scopeChoiceTypeFound := false

				if v, ok := rulesMapStrToI["cloud_connect"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_CloudConnect{}
					scopeChoiceInt.CloudConnect = &ves_io_schema.CloudConnectRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.CloudConnect.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "cloud_connect"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["network_interface"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_NetworkInterface{}
					scopeChoiceInt.NetworkInterface = &ves_io_schema.NetworkInterfaceRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.NetworkInterface.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "network_interface"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["segment"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_Segment{}
					scopeChoiceInt.Segment = &ves_io_schema.SegmentRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.Segment.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "segment"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := cs["virtual_networks"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								virtualNetworksInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.Segment.VirtualNetworks = virtualNetworksInt
								for i, ps := range sl {

									vnMapToStrVal := ps.(map[string]interface{})
									virtualNetworksInt[i] = &ves_io_schema.ObjectRefType{}

									virtualNetworksInt[i].Kind = "virtual_network"

									if v, ok := vnMapToStrVal["name"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Name = v.(string)
									}

									if v, ok := vnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Namespace = v.(string)
									}

									if v, ok := vnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Tenant = v.(string)
									}

									if v, ok := vnMapToStrVal["uid"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_VirtualNetwork{}
					scopeChoiceInt.VirtualNetwork = &ves_io_schema.VirtualNetworkReferenceType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.VirtualNetwork.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra NatPolicy object with struct: %+v", createReq)

	createNatPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_nat_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating NatPolicy: %s", err)
	}
	d.SetId(createNatPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraNatPolicyRead(d, meta)
}

func resourceVolterraNatPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_nat_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] NatPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra NatPolicy %q: %s", d.Id(), err)
	}
	return setNatPolicyFields(client, d, resp)
}

func setNatPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraNatPolicyUpdate updates NatPolicy resource
func resourceVolterraNatPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_nat_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_nat_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	appliesToChoiceTypeFound := false

	if v, ok := d.GetOk("site"); ok && !appliesToChoiceTypeFound {

		appliesToChoiceTypeFound = true
		appliesToChoiceInt := &ves_io_schema_nat_policy.ReplaceSpecType_Site{}
		appliesToChoiceInt.Site = &ves_io_schema.SiteReferenceType{}
		updateSpec.AppliesToChoice = appliesToChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["refs"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					appliesToChoiceInt.Site.Refs = refsInt
					for i, ps := range sl {

						rMapToStrVal := ps.(map[string]interface{})
						refsInt[i] = &ves_io_schema.ObjectRefType{}

						refsInt[i].Kind = "site"

						if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
							refsInt[i].Name = v.(string)
						}

						if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							refsInt[i].Namespace = v.(string)
						}

						if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							refsInt[i].Tenant = v.(string)
						}

						if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
							refsInt[i].Uid = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_nat_policy.RuleType, len(sl))
		updateSpec.Rules = rules
		for i, set := range sl {
			if set != nil {
				rules[i] = &ves_io_schema_nat_policy.RuleType{}
				rulesMapStrToI := set.(map[string]interface{})

				if v, ok := rulesMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema_nat_policy.ActionType{}
					rules[i].Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							sourceNatChoiceTypeFound := false

							if v, ok := actionMapStrToI["dynamic"]; ok && !isIntfNil(v) && !sourceNatChoiceTypeFound {

								sourceNatChoiceTypeFound = true
								sourceNatChoiceInt := &ves_io_schema_nat_policy.ActionType_Dynamic{}
								sourceNatChoiceInt.Dynamic = &ves_io_schema_nat_policy.DynamicPool{}
								action.SourceNatChoice = sourceNatChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										poolChoiceTypeFound := false

										if v, ok := cs["elastic_ips"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_nat_policy.DynamicPool_ElasticIps{}
											poolChoiceInt.ElasticIps = &ves_io_schema.CloudElasticIpRefListType{}
											sourceNatChoiceInt.Dynamic.PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["refs"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														poolChoiceInt.ElasticIps.Refs = refsInt
														for i, ps := range sl {

															rMapToStrVal := ps.(map[string]interface{})
															refsInt[i] = &ves_io_schema.ObjectRefType{}

															refsInt[i].Kind = "cloud_elastic_ip"

															if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
																refsInt[i].Name = v.(string)
															}

															if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																refsInt[i].Namespace = v.(string)
															}

															if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																refsInt[i].Tenant = v.(string)
															}

															if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
																refsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := cs["pools"]; ok && !isIntfNil(v) && !poolChoiceTypeFound {

											poolChoiceTypeFound = true
											poolChoiceInt := &ves_io_schema_nat_policy.DynamicPool_Pools{}
											poolChoiceInt.Pools = &ves_io_schema_views.PrefixStringListType{}
											sourceNatChoiceInt.Dynamic.PoolChoice = poolChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														poolChoiceInt.Pools.Ipv6Prefixes = ls

													}

													if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														poolChoiceInt.Pools.Prefixes = ls

													}

												}
											}

										}

									}
								}

							}

							if v, ok := actionMapStrToI["virtual_cidr"]; ok && !isIntfNil(v) && !sourceNatChoiceTypeFound {

								sourceNatChoiceTypeFound = true
								sourceNatChoiceInt := &ves_io_schema_nat_policy.ActionType_VirtualCidr{}

								action.SourceNatChoice = sourceNatChoiceInt

								sourceNatChoiceInt.VirtualCidr = v.(string)

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["criteria"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					criteria := &ves_io_schema_nat_policy.MatchCriteriaType{}
					rules[i].Criteria = criteria
					for _, set := range sl {
						if set != nil {
							criteriaMapStrToI := set.(map[string]interface{})

							if w, ok := criteriaMapStrToI["destination_cidr"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								criteria.DestinationCidr = ls
							}

							if v, ok := criteriaMapStrToI["destination_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								destinationPort := &ves_io_schema.PortMatcherType{}
								criteria.DestinationPort = destinationPort
								for _, set := range sl {
									if set != nil {
										destinationPortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := destinationPortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												destinationPort.PortMatch = portMatchInt
											}

										}

										if v, ok := destinationPortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											destinationPort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := destinationPortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											destinationPort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

							networkChoiceTypeFound := false

							if v, ok := criteriaMapStrToI["segment"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

								networkChoiceTypeFound = true
								networkChoiceInt := &ves_io_schema_nat_policy.MatchCriteriaType_Segment{}
								networkChoiceInt.Segment = &ves_io_schema.SegmentRefType{}
								criteria.NetworkChoice = networkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["refs"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.Segment.Refs = refsInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refsInt[i] = &ves_io_schema.ObjectRefType{}

												refsInt[i].Kind = "segment"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refsInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refsInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refsInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refsInt[i].Uid = v.(string)
												}

											}

										}

										if v, ok := cs["virtual_networks"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualNetworksInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.Segment.VirtualNetworks = virtualNetworksInt
											for i, ps := range sl {

												vnMapToStrVal := ps.(map[string]interface{})
												virtualNetworksInt[i] = &ves_io_schema.ObjectRefType{}

												virtualNetworksInt[i].Kind = "virtual_network"

												if v, ok := vnMapToStrVal["name"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Name = v.(string)
												}

												if v, ok := vnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Namespace = v.(string)
												}

												if v, ok := vnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Tenant = v.(string)
												}

												if v, ok := vnMapToStrVal["uid"]; ok && !isIntfNil(v) {
													virtualNetworksInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := criteriaMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !networkChoiceTypeFound {

								networkChoiceTypeFound = true
								networkChoiceInt := &ves_io_schema_nat_policy.MatchCriteriaType_VirtualNetwork{}
								networkChoiceInt.VirtualNetwork = &ves_io_schema.VirtualNetworkReferenceType{}
								criteria.NetworkChoice = networkChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["refs"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
											networkChoiceInt.VirtualNetwork.Refs = refsInt
											for i, ps := range sl {

												rMapToStrVal := ps.(map[string]interface{})
												refsInt[i] = &ves_io_schema.ObjectRefType{}

												refsInt[i].Kind = "virtual_network"

												if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
													refsInt[i].Name = v.(string)
												}

												if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													refsInt[i].Namespace = v.(string)
												}

												if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													refsInt[i].Tenant = v.(string)
												}

												if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
													refsInt[i].Uid = v.(string)
												}

											}

										}

									}
								}

							}

							if v, ok := criteriaMapStrToI["protocol"]; ok && !isIntfNil(v) {

								criteria.Protocol = ves_io_schema.ProtocolEnumType(ves_io_schema.ProtocolEnumType_value[v.(string)])

							}

							if w, ok := criteriaMapStrToI["source_cidr"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								criteria.SourceCidr = ls
							}

							if v, ok := criteriaMapStrToI["source_port"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								sourcePort := &ves_io_schema.PortMatcherType{}
								criteria.SourcePort = sourcePort
								for _, set := range sl {
									if set != nil {
										sourcePortMapStrToI := set.(map[string]interface{})

										portMatchTypeFound := false

										if v, ok := sourcePortMapStrToI["no_port_match"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true

											if v.(bool) {
												portMatchInt := &ves_io_schema.PortMatcherType_NoPortMatch{}
												portMatchInt.NoPortMatch = &ves_io_schema.Empty{}
												sourcePort.PortMatch = portMatchInt
											}

										}

										if v, ok := sourcePortMapStrToI["port"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_Port{}

											sourcePort.PortMatch = portMatchInt

											portMatchInt.Port = uint32(v.(int))

										}

										if v, ok := sourcePortMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portMatchTypeFound {

											portMatchTypeFound = true
											portMatchInt := &ves_io_schema.PortMatcherType_PortRanges{}

											sourcePort.PortMatch = portMatchInt

											portMatchInt.PortRanges = v.(string)

										}

									}
								}

							}

						}
					}

				}

				enableChoiceTypeFound := false

				if v, ok := rulesMapStrToI["disable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_nat_policy.RuleType_Disable{}
						enableChoiceInt.Disable = &ves_io_schema.Empty{}
						rules[i].EnableChoice = enableChoiceInt
					}

				}

				if v, ok := rulesMapStrToI["enable"]; ok && !isIntfNil(v) && !enableChoiceTypeFound {

					enableChoiceTypeFound = true

					if v.(bool) {
						enableChoiceInt := &ves_io_schema_nat_policy.RuleType_Enable{}
						enableChoiceInt.Enable = &ves_io_schema.Empty{}
						rules[i].EnableChoice = enableChoiceInt
					}

				}

				if w, ok := rulesMapStrToI["name"]; ok && !isIntfNil(w) {
					rules[i].Name = w.(string)
				}

				scopeChoiceTypeFound := false

				if v, ok := rulesMapStrToI["cloud_connect"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_CloudConnect{}
					scopeChoiceInt.CloudConnect = &ves_io_schema.CloudConnectRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.CloudConnect.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "cloud_connect"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["network_interface"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_NetworkInterface{}
					scopeChoiceInt.NetworkInterface = &ves_io_schema.NetworkInterfaceRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.NetworkInterface.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "network_interface"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["segment"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_Segment{}
					scopeChoiceInt.Segment = &ves_io_schema.SegmentRefType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.Segment.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "segment"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := cs["virtual_networks"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								virtualNetworksInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.Segment.VirtualNetworks = virtualNetworksInt
								for i, ps := range sl {

									vnMapToStrVal := ps.(map[string]interface{})
									virtualNetworksInt[i] = &ves_io_schema.ObjectRefType{}

									virtualNetworksInt[i].Kind = "virtual_network"

									if v, ok := vnMapToStrVal["name"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Name = v.(string)
									}

									if v, ok := vnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Namespace = v.(string)
									}

									if v, ok := vnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Tenant = v.(string)
									}

									if v, ok := vnMapToStrVal["uid"]; ok && !isIntfNil(v) {
										virtualNetworksInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := rulesMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !scopeChoiceTypeFound {

					scopeChoiceTypeFound = true
					scopeChoiceInt := &ves_io_schema_nat_policy.RuleType_VirtualNetwork{}
					scopeChoiceInt.VirtualNetwork = &ves_io_schema.VirtualNetworkReferenceType{}
					rules[i].ScopeChoice = scopeChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["refs"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								scopeChoiceInt.VirtualNetwork.Refs = refsInt
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refsInt[i] = &ves_io_schema.ObjectRefType{}

									refsInt[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refsInt[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refsInt[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refsInt[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refsInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra NatPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_nat_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating NatPolicy: %s", err)
	}

	return resourceVolterraNatPolicyRead(d, meta)
}

func resourceVolterraNatPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_nat_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] NatPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra NatPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra NatPolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_nat_policy.ObjectType, namespace, name)
}

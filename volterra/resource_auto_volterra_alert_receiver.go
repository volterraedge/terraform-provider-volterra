//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_alert_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver"
)

// resourceVolterraAlertReceiver is implementation of Volterra's AlertReceiver resources
func resourceVolterraAlertReceiver() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraAlertReceiverCreate,
		Read:   resourceVolterraAlertReceiverRead,
		Update: resourceVolterraAlertReceiverUpdate,
		Delete: resourceVolterraAlertReceiverDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"email": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"email": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"opsgenie": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_key": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"store_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"provider": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_encoding": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"version": {
													Type:       schema.TypeInt,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"url": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"pagerduty": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"routing_key": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"store_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"provider": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_encoding": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"version": {
													Type:       schema.TypeInt,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},

						"url": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"slack": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"channel": {
							Type:     schema.TypeString,
							Required: true,
						},

						"url": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"store_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"provider": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_encoding": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"version": {
													Type:       schema.TypeInt,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"sms": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"contact_number": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"webhook": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"http_config": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"auth_token": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"token": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"basic_auth": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"password": {

													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeSet,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"user_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"client_cert_obj": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"use_tls_obj": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"no_authorization": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_http2": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"follow_redirects": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"no_tls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_tls": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"max_version": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"min_version": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"use_server_verification": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ca_cert_obj": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"trusted_ca": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"volterra_trusted_ca": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"disable_sni": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"sni": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"url": {

							Type:     schema.TypeSet,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"store_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"blindfold_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"provider": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_encoding": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"version": {
													Type:       schema.TypeInt,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:       schema.TypeSet,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraAlertReceiverCreate creates AlertReceiver resource
func resourceVolterraAlertReceiverCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_alert_receiver.CreateSpecType{}
	createReq := &ves_io_schema_alert_receiver.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//receiver

	receiverTypeFound := false

	if v, ok := d.GetOk("email"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Email{}
		receiverInt.Email = &ves_io_schema_alert_receiver.EmailConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["email"]; ok && !isIntfNil(v) {

				receiverInt.Email.Email = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("opsgenie"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Opsgenie{}
		receiverInt.Opsgenie = &ves_io_schema_alert_receiver.OpsGenieConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiKey := &ves_io_schema.SecretType{}
				receiverInt.Opsgenie.ApiKey = apiKey
				for _, set := range sl {
					apiKeyMapStrToI := set.(map[string]interface{})

					if v, ok := apiKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						apiKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := apiKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						apiKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := apiKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := apiKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := apiKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := apiKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				receiverInt.Opsgenie.Url = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("pagerduty"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Pagerduty{}
		receiverInt.Pagerduty = &ves_io_schema_alert_receiver.PagerDutyConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["routing_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				routingKey := &ves_io_schema.SecretType{}
				receiverInt.Pagerduty.RoutingKey = routingKey
				for _, set := range sl {
					routingKeyMapStrToI := set.(map[string]interface{})

					if v, ok := routingKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						routingKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := routingKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						routingKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := routingKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := routingKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := routingKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := routingKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				receiverInt.Pagerduty.Url = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("slack"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Slack{}
		receiverInt.Slack = &ves_io_schema_alert_receiver.SlackConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["channel"]; ok && !isIntfNil(v) {

				receiverInt.Slack.Channel = v.(string)

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				url := &ves_io_schema.SecretType{}
				receiverInt.Slack.Url = url
				for _, set := range sl {
					urlMapStrToI := set.(map[string]interface{})

					if v, ok := urlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						url.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := urlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						url.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := urlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := urlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("sms"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Sms{}
		receiverInt.Sms = &ves_io_schema_alert_receiver.SMSConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["contact_number"]; ok && !isIntfNil(v) {

				receiverInt.Sms.ContactNumber = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("webhook"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.CreateSpecType_Webhook{}
		receiverInt.Webhook = &ves_io_schema_alert_receiver.WebhookConfig{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["http_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				httpConfig := &ves_io_schema_alert_receiver.HTTPConfig{}
				receiverInt.Webhook.HttpConfig = httpConfig
				for _, set := range sl {
					httpConfigMapStrToI := set.(map[string]interface{})

					authChoiceTypeFound := false

					if v, ok := httpConfigMapStrToI["auth_token"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_AuthToken{}
						authChoiceInt.AuthToken = &ves_io_schema_alert_receiver.AuthToken{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["token"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								token := &ves_io_schema.SecretType{}
								authChoiceInt.AuthToken.Token = token
								for _, set := range sl {
									tokenMapStrToI := set.(map[string]interface{})

									if v, ok := tokenMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										token.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := tokenMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										token.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := tokenMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := tokenMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := httpConfigMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_BasicAuth{}
						authChoiceInt.BasicAuth = &ves_io_schema_alert_receiver.HttpBasicAuth{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["password"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								password := &ves_io_schema.SecretType{}
								authChoiceInt.BasicAuth.Password = password
								for _, set := range sl {
									passwordMapStrToI := set.(map[string]interface{})

									if v, ok := passwordMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										password.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := passwordMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										password.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := passwordMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := passwordMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["user_name"]; ok && !isIntfNil(v) {

								authChoiceInt.BasicAuth.UserName = v.(string)

							}

						}

					}

					if v, ok := httpConfigMapStrToI["client_cert_obj"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_ClientCertObj{}
						authChoiceInt.ClientCertObj = &ves_io_schema_alert_receiver.ClientCertificateObj{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["use_tls_obj"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								useTlsObjInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								authChoiceInt.ClientCertObj.UseTlsObj = useTlsObjInt
								for i, ps := range sl {

									utoMapToStrVal := ps.(map[string]interface{})
									useTlsObjInt[i] = &ves_io_schema.ObjectRefType{}

									useTlsObjInt[i].Kind = "certificate"

									if v, ok := utoMapToStrVal["name"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Name = v.(string)
									}

									if v, ok := utoMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Namespace = v.(string)
									}

									if v, ok := utoMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Tenant = v.(string)
									}

									if v, ok := utoMapToStrVal["uid"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Uid = v.(string)
									}

								}

							}

						}

					}

					if v, ok := httpConfigMapStrToI["no_authorization"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true

						if v.(bool) {
							authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_NoAuthorization{}
							authChoiceInt.NoAuthorization = &ves_io_schema.Empty{}
							httpConfig.AuthChoice = authChoiceInt
						}

					}

					if w, ok := httpConfigMapStrToI["enable_http2"]; ok && !isIntfNil(w) {
						httpConfig.EnableHttp2 = w.(bool)
					}

					if w, ok := httpConfigMapStrToI["follow_redirects"]; ok && !isIntfNil(w) {
						httpConfig.FollowRedirects = w.(bool)
					}

					tlsChoiceTypeFound := false

					if v, ok := httpConfigMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

						tlsChoiceTypeFound = true

						if v.(bool) {
							tlsChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_NoTls{}
							tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
							httpConfig.TlsChoice = tlsChoiceInt
						}

					}

					if v, ok := httpConfigMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

						tlsChoiceTypeFound = true
						tlsChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_UseTls{}
						tlsChoiceInt.UseTls = &ves_io_schema_alert_receiver.TLSConfig{}
						httpConfig.TlsChoice = tlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

								tlsChoiceInt.UseTls.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

								tlsChoiceInt.UseTls.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							serverValidationChoiceTypeFound := false

							if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true
								serverValidationChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_UseServerVerification{}
								serverValidationChoiceInt.UseServerVerification = &ves_io_schema_alert_receiver.UpstreamTlsValidationContext{}
								tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ca_cert_obj"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										caCertObj := &ves_io_schema_alert_receiver.CACertificateObj{}
										serverValidationChoiceInt.UseServerVerification.CaCertObj = caCertObj
										for _, set := range sl {
											caCertObjMapStrToI := set.(map[string]interface{})

											if v, ok := caCertObjMapStrToI["trusted_ca"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												trustedCaInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												caCertObj.TrustedCa = trustedCaInt
												for i, ps := range sl {

													tcMapToStrVal := ps.(map[string]interface{})
													trustedCaInt[i] = &ves_io_schema.ObjectRefType{}

													trustedCaInt[i].Kind = "trusted_ca_list"

													if v, ok := tcMapToStrVal["name"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Name = v.(string)
													}

													if v, ok := tcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Namespace = v.(string)
													}

													if v, ok := tcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Tenant = v.(string)
													}

													if v, ok := tcMapToStrVal["uid"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

								}

							}

							if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_VolterraTrustedCa{}
									serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							sniChoiceTypeFound := false

							if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_DisableSni{}
									sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true
								sniChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_Sni{}

								tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

								sniChoiceInt.Sni = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				url := &ves_io_schema.SecretType{}
				receiverInt.Webhook.Url = url
				for _, set := range sl {
					urlMapStrToI := set.(map[string]interface{})

					if v, ok := urlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						url.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := urlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						url.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := urlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := urlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra AlertReceiver object with struct: %+v", createReq)

	createAlertReceiverResp, err := client.CreateObject(context.Background(), ves_io_schema_alert_receiver.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating AlertReceiver: %s", err)
	}
	d.SetId(createAlertReceiverResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraAlertReceiverRead(d, meta)
}

func resourceVolterraAlertReceiverRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_alert_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AlertReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AlertReceiver %q: %s", d.Id(), err)
	}
	return setAlertReceiverFields(client, d, resp)
}

func setAlertReceiverFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraAlertReceiverUpdate updates AlertReceiver resource
func resourceVolterraAlertReceiverUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_alert_receiver.ReplaceSpecType{}
	updateReq := &ves_io_schema_alert_receiver.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	receiverTypeFound := false

	if v, ok := d.GetOk("email"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Email{}
		receiverInt.Email = &ves_io_schema_alert_receiver.EmailConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["email"]; ok && !isIntfNil(v) {

				receiverInt.Email.Email = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("opsgenie"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Opsgenie{}
		receiverInt.Opsgenie = &ves_io_schema_alert_receiver.OpsGenieConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["api_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				apiKey := &ves_io_schema.SecretType{}
				receiverInt.Opsgenie.ApiKey = apiKey
				for _, set := range sl {
					apiKeyMapStrToI := set.(map[string]interface{})

					if v, ok := apiKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						apiKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := apiKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						apiKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := apiKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := apiKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := apiKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := apiKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						apiKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				receiverInt.Opsgenie.Url = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("pagerduty"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Pagerduty{}
		receiverInt.Pagerduty = &ves_io_schema_alert_receiver.PagerDutyConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["routing_key"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				routingKey := &ves_io_schema.SecretType{}
				receiverInt.Pagerduty.RoutingKey = routingKey
				for _, set := range sl {
					routingKeyMapStrToI := set.(map[string]interface{})

					if v, ok := routingKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						routingKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := routingKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						routingKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := routingKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := routingKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := routingKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := routingKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						routingKey.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				receiverInt.Pagerduty.Url = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("slack"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Slack{}
		receiverInt.Slack = &ves_io_schema_alert_receiver.SlackConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["channel"]; ok && !isIntfNil(v) {

				receiverInt.Slack.Channel = v.(string)

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				url := &ves_io_schema.SecretType{}
				receiverInt.Slack.Url = url
				for _, set := range sl {
					urlMapStrToI := set.(map[string]interface{})

					if v, ok := urlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						url.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := urlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						url.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := urlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := urlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("sms"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Sms{}
		receiverInt.Sms = &ves_io_schema_alert_receiver.SMSConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["contact_number"]; ok && !isIntfNil(v) {

				receiverInt.Sms.ContactNumber = v.(string)

			}

		}

	}

	if v, ok := d.GetOk("webhook"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_alert_receiver.ReplaceSpecType_Webhook{}
		receiverInt.Webhook = &ves_io_schema_alert_receiver.WebhookConfig{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["http_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				httpConfig := &ves_io_schema_alert_receiver.HTTPConfig{}
				receiverInt.Webhook.HttpConfig = httpConfig
				for _, set := range sl {
					httpConfigMapStrToI := set.(map[string]interface{})

					authChoiceTypeFound := false

					if v, ok := httpConfigMapStrToI["auth_token"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_AuthToken{}
						authChoiceInt.AuthToken = &ves_io_schema_alert_receiver.AuthToken{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["token"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								token := &ves_io_schema.SecretType{}
								authChoiceInt.AuthToken.Token = token
								for _, set := range sl {
									tokenMapStrToI := set.(map[string]interface{})

									if v, ok := tokenMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										token.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := tokenMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										token.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := tokenMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := tokenMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := tokenMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := tokenMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										token.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := httpConfigMapStrToI["basic_auth"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_BasicAuth{}
						authChoiceInt.BasicAuth = &ves_io_schema_alert_receiver.HttpBasicAuth{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["password"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								password := &ves_io_schema.SecretType{}
								authChoiceInt.BasicAuth.Password = password
								for _, set := range sl {
									passwordMapStrToI := set.(map[string]interface{})

									if v, ok := passwordMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										password.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := passwordMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										password.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := passwordMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := passwordMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										password.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := cs["user_name"]; ok && !isIntfNil(v) {

								authChoiceInt.BasicAuth.UserName = v.(string)

							}

						}

					}

					if v, ok := httpConfigMapStrToI["client_cert_obj"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true
						authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_ClientCertObj{}
						authChoiceInt.ClientCertObj = &ves_io_schema_alert_receiver.ClientCertificateObj{}
						httpConfig.AuthChoice = authChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["use_tls_obj"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								useTlsObjInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								authChoiceInt.ClientCertObj.UseTlsObj = useTlsObjInt
								for i, ps := range sl {

									utoMapToStrVal := ps.(map[string]interface{})
									useTlsObjInt[i] = &ves_io_schema.ObjectRefType{}

									useTlsObjInt[i].Kind = "certificate"

									if v, ok := utoMapToStrVal["name"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Name = v.(string)
									}

									if v, ok := utoMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Namespace = v.(string)
									}

									if v, ok := utoMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Tenant = v.(string)
									}

									if v, ok := utoMapToStrVal["uid"]; ok && !isIntfNil(v) {
										useTlsObjInt[i].Uid = v.(string)
									}

								}

							}

						}

					}

					if v, ok := httpConfigMapStrToI["no_authorization"]; ok && !isIntfNil(v) && !authChoiceTypeFound {

						authChoiceTypeFound = true

						if v.(bool) {
							authChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_NoAuthorization{}
							authChoiceInt.NoAuthorization = &ves_io_schema.Empty{}
							httpConfig.AuthChoice = authChoiceInt
						}

					}

					if w, ok := httpConfigMapStrToI["enable_http2"]; ok && !isIntfNil(w) {
						httpConfig.EnableHttp2 = w.(bool)
					}

					if w, ok := httpConfigMapStrToI["follow_redirects"]; ok && !isIntfNil(w) {
						httpConfig.FollowRedirects = w.(bool)
					}

					tlsChoiceTypeFound := false

					if v, ok := httpConfigMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

						tlsChoiceTypeFound = true

						if v.(bool) {
							tlsChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_NoTls{}
							tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
							httpConfig.TlsChoice = tlsChoiceInt
						}

					}

					if v, ok := httpConfigMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

						tlsChoiceTypeFound = true
						tlsChoiceInt := &ves_io_schema_alert_receiver.HTTPConfig_UseTls{}
						tlsChoiceInt.UseTls = &ves_io_schema_alert_receiver.TLSConfig{}
						httpConfig.TlsChoice = tlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

								tlsChoiceInt.UseTls.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

								tlsChoiceInt.UseTls.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

							}

							serverValidationChoiceTypeFound := false

							if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true
								serverValidationChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_UseServerVerification{}
								serverValidationChoiceInt.UseServerVerification = &ves_io_schema_alert_receiver.UpstreamTlsValidationContext{}
								tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ca_cert_obj"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										caCertObj := &ves_io_schema_alert_receiver.CACertificateObj{}
										serverValidationChoiceInt.UseServerVerification.CaCertObj = caCertObj
										for _, set := range sl {
											caCertObjMapStrToI := set.(map[string]interface{})

											if v, ok := caCertObjMapStrToI["trusted_ca"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												trustedCaInt := make([]*ves_io_schema.ObjectRefType, len(sl))
												caCertObj.TrustedCa = trustedCaInt
												for i, ps := range sl {

													tcMapToStrVal := ps.(map[string]interface{})
													trustedCaInt[i] = &ves_io_schema.ObjectRefType{}

													trustedCaInt[i].Kind = "trusted_ca_list"

													if v, ok := tcMapToStrVal["name"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Name = v.(string)
													}

													if v, ok := tcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Namespace = v.(string)
													}

													if v, ok := tcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Tenant = v.(string)
													}

													if v, ok := tcMapToStrVal["uid"]; ok && !isIntfNil(v) {
														trustedCaInt[i].Uid = v.(string)
													}

												}

											}

										}

									}

								}

							}

							if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_VolterraTrustedCa{}
									serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							sniChoiceTypeFound := false

							if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_DisableSni{}
									sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true
								sniChoiceInt := &ves_io_schema_alert_receiver.TLSConfig_Sni{}

								tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

								sniChoiceInt.Sni = v.(string)

							}

						}

					}

				}

			}

			if v, ok := cs["url"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				url := &ves_io_schema.SecretType{}
				receiverInt.Webhook.Url = url
				for _, set := range sl {
					urlMapStrToI := set.(map[string]interface{})

					if v, ok := urlMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
						url.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
						for _, set := range sl {
							blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

							if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.Location = w.(string)
							}

							if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
								blindfoldSecretInfoInternal.StoreProvider = w.(string)
							}

						}

					}

					if v, ok := urlMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

						url.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

					}

					secretInfoOneofTypeFound := false

					if v, ok := urlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
						secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

							}

							if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
						secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["url"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

							}

						}

					}

					if v, ok := urlMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
						secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["key"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

							}

							if v, ok := cs["location"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

							}

							if v, ok := cs["provider"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

							}

							if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							if v, ok := cs["version"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

							}

						}

					}

					if v, ok := urlMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

						secretInfoOneofTypeFound = true
						secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
						secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
						url.SecretInfoOneof = secretInfoOneofInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra AlertReceiver obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_alert_receiver.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating AlertReceiver: %s", err)
	}

	return resourceVolterraAlertReceiverRead(d, meta)
}

func resourceVolterraAlertReceiverDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_alert_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] AlertReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra AlertReceiver before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra AlertReceiver obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_alert_receiver.ObjectType, namespace, name)
}

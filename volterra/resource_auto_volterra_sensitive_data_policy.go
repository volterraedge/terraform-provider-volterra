//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_data_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/data_type"
	ves_io_schema_sensitive_data_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/sensitive_data_policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraSensitiveDataPolicy is implementation of Volterra's SensitiveDataPolicy resources
func resourceVolterraSensitiveDataPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraSensitiveDataPolicyCreate,
		Read:   resourceVolterraSensitiveDataPolicyRead,
		Update: resourceVolterraSensitiveDataPolicyUpdate,
		Delete: resourceVolterraSensitiveDataPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"compliances": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"custom_data_types": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_data_type_ref": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"disabled_predefined_data_types": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

// resourceVolterraSensitiveDataPolicyCreate creates SensitiveDataPolicy resource
func resourceVolterraSensitiveDataPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_sensitive_data_policy.CreateSpecType{}
	createReq := &ves_io_schema_sensitive_data_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//compliances
	if v, ok := d.GetOk("compliances"); ok && !isIntfNil(v) {

		compliancesList := []ves_io_schema_data_type.Compliance{}
		for _, j := range v.([]interface{}) {
			if j == nil {
				return fmt.Errorf("please provide valid non-empty enum value of field compliances")
			}
			compliancesList = append(compliancesList, ves_io_schema_data_type.Compliance(ves_io_schema_data_type.Compliance_value[j.(string)]))
		}
		createSpec.Compliances = compliancesList

	}

	//custom_data_types
	if v, ok := d.GetOk("custom_data_types"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		customDataTypes := make([]*ves_io_schema_sensitive_data_policy.CustomDataTypeRef, len(sl))
		createSpec.CustomDataTypes = customDataTypes
		for i, set := range sl {
			if set != nil {
				customDataTypes[i] = &ves_io_schema_sensitive_data_policy.CustomDataTypeRef{}
				customDataTypesMapStrToI := set.(map[string]interface{})

				if v, ok := customDataTypesMapStrToI["custom_data_type_ref"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					customDataTypeRefInt := &ves_io_schema_views.ObjectRefType{}
					customDataTypes[i].CustomDataTypeRef = customDataTypeRefInt

					for _, set := range sl {
						if set != nil {
							cdtrMapToStrVal := set.(map[string]interface{})
							if val, ok := cdtrMapToStrVal["name"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Name = val.(string)
							}
							if val, ok := cdtrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Namespace = val.(string)
							}

							if val, ok := cdtrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	//disabled_predefined_data_types
	if v, ok := d.GetOk("disabled_predefined_data_types"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field disabled_predefined_data_types")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.DisabledPredefinedDataTypes = ls

	}

	log.Printf("[DEBUG] Creating Volterra SensitiveDataPolicy object with struct: %+v", createReq)

	createSensitiveDataPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_sensitive_data_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating SensitiveDataPolicy: %s", err)
	}
	d.SetId(createSensitiveDataPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraSensitiveDataPolicyRead(d, meta)
}

func resourceVolterraSensitiveDataPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_sensitive_data_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SensitiveDataPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SensitiveDataPolicy %q: %s", d.Id(), err)
	}
	return setSensitiveDataPolicyFields(client, d, resp)
}

func setSensitiveDataPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraSensitiveDataPolicyUpdate updates SensitiveDataPolicy resource
func resourceVolterraSensitiveDataPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_sensitive_data_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_sensitive_data_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("compliances"); ok && !isIntfNil(v) {

		compliancesList := []ves_io_schema_data_type.Compliance{}
		for _, j := range v.([]interface{}) {
			if j == nil {
				return fmt.Errorf("please provide valid non-empty enum value of field compliances")
			}
			compliancesList = append(compliancesList, ves_io_schema_data_type.Compliance(ves_io_schema_data_type.Compliance_value[j.(string)]))
		}
		updateSpec.Compliances = compliancesList

	}

	if v, ok := d.GetOk("custom_data_types"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		customDataTypes := make([]*ves_io_schema_sensitive_data_policy.CustomDataTypeRef, len(sl))
		updateSpec.CustomDataTypes = customDataTypes
		for i, set := range sl {
			if set != nil {
				customDataTypes[i] = &ves_io_schema_sensitive_data_policy.CustomDataTypeRef{}
				customDataTypesMapStrToI := set.(map[string]interface{})

				if v, ok := customDataTypesMapStrToI["custom_data_type_ref"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					customDataTypeRefInt := &ves_io_schema_views.ObjectRefType{}
					customDataTypes[i].CustomDataTypeRef = customDataTypeRefInt

					for _, set := range sl {
						if set != nil {
							cdtrMapToStrVal := set.(map[string]interface{})
							if val, ok := cdtrMapToStrVal["name"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Name = val.(string)
							}
							if val, ok := cdtrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Namespace = val.(string)
							}

							if val, ok := cdtrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								customDataTypeRefInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disabled_predefined_data_types"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field disabled_predefined_data_types")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.DisabledPredefinedDataTypes = ls

	}

	log.Printf("[DEBUG] Updating Volterra SensitiveDataPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_sensitive_data_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating SensitiveDataPolicy: %s", err)
	}

	return resourceVolterraSensitiveDataPolicyRead(d, meta)
}

func resourceVolterraSensitiveDataPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_sensitive_data_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] SensitiveDataPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra SensitiveDataPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra SensitiveDataPolicy obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_sensitive_data_policy.ObjectType, namespace, name, opts...)
}

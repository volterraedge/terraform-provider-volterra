//
// Copyright (c) 2023 F5 Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_service_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	drift "github.com/volterraedge/terraform-provider-volterra/volterra/drift_detection"
)

// resourceVolterraServicePolicy is implementation of Volterra's ServicePolicy resources
func resourceVolterraServicePolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraServicePolicyCreate,
		Read:   resourceVolterraServicePolicyRead,
		Update: resourceVolterraServicePolicyUpdate,
		Delete: resourceVolterraServicePolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"algo": {
				Type:     schema.TypeString,
				Required: true,
			},

			"port_matcher": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"invert_matcher": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"ports": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"allow_all_requests": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"allow_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"asn_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"as_numbers": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
								},
							},
						},

						"asn_set": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"country_list": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"default_action_allow": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_action_deny": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_action_next_policy": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ip_prefix_set": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"prefix_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"prefixes": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"tls_fingerprint_classes": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"tls_fingerprint_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"deny_all_requests": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"deny_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"asn_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"as_numbers": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
								},
							},
						},

						"asn_set": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"country_list": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"default_action_allow": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_action_deny": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_action_next_policy": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ip_prefix_set": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"prefix_list": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"prefixes": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"tls_fingerprint_classes": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"tls_fingerprint_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"internally_generated": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"legacy_rule_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"rule_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"metadata": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"disable": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"spec": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"action": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"api_group_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"match": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"arg_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"any_asn": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"body_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"bot_action": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"bot_skip_processing": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"none": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"challenge_action": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_name": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"client_name_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"client_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"client_role": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"match": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"content_rewrite_action": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"element_selector": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"insert_content": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"position": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"domain_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_dst_asn": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"dst_asn_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"dst_asn_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"any_dst_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"dst_ip_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"dst_ip_prefix_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"expiration_timestamp": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"forwarding_class": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"goto_policy": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"http_method": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"methods": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"ip_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"l4_dest_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"l4_dests": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"port_ranges": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"prefixes": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"label_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"keys": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"path": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"prefix_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"suffix_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"port_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ports": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"presence": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"rate_limiter": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"scheme": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"server_selector": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"shape_protected_endpoint_action": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"app_traffic_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"mitigation": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"block": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"body": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"status": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"none": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"redirect": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"uri": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"url_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"url_items": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"domain_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"domain_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"path_prefix": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"path_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"path_value": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_host_matcher": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"regex_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"transformers": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"waf_action": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"app_firewall_detection_control": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exclude_attack_type_contexts": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exclude_attack_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"exclude_signature_contexts": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"signature_id": {
																						Type:     schema.TypeInt,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"exclude_violation_contexts": {

																			Type:     schema.TypeList,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exclude_violation": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"none": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"waf_in_monitoring_mode": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"waf_skip_processing": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"any_server": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"server_name": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"server_name_matcher": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"exact_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"regex_values": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"server_selector": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expressions": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraServicePolicyCreate creates ServicePolicy resource
func resourceVolterraServicePolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_service_policy.CreateSpecType{}
	createReq := &ves_io_schema_service_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//algo
	if v, ok := d.GetOk("algo"); ok && !isIntfNil(v) {

		createSpec.Algo = ves_io_schema_policy.RuleCombiningAlgorithm(ves_io_schema_policy.RuleCombiningAlgorithm_value[v.(string)])

	}

	//port_matcher
	if v, ok := d.GetOk("port_matcher"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		portMatcher := &ves_io_schema_policy.PortMatcherType{}
		createSpec.PortMatcher = portMatcher
		for _, set := range sl {
			portMatcherMapStrToI := set.(map[string]interface{})

			if w, ok := portMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
				portMatcher.InvertMatcher = w.(bool)
			}

			if w, ok := portMatcherMapStrToI["ports"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				portMatcher.Ports = ls
			}

		}

	}

	//rule_choice

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all_requests"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_AllowAllRequests{}
			ruleChoiceInt.AllowAllRequests = &ves_io_schema.Empty{}
			createSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("allow_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_AllowList{}
		ruleChoiceInt.AllowList = &ves_io_schema_service_policy.SourceList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				asnList := &ves_io_schema_policy.AsnMatchList{}
				ruleChoiceInt.AllowList.AsnList = asnList
				for _, set := range sl {
					asnListMapStrToI := set.(map[string]interface{})

					if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
						ls := make([]uint32, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = uint32(v.(int))
						}
						asnList.AsNumbers = ls
					}

				}

			}

			if v, ok := cs["asn_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				asnSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.AllowList.AsnSet = asnSetInt
				for i, ps := range sl {

					asMapToStrVal := ps.(map[string]interface{})
					asnSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
						asnSetInt[i].Name = v.(string)
					}

					if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						asnSetInt[i].Namespace = v.(string)
					}

					if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						asnSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

				country_listList := []ves_io_schema_policy.CountryCode{}
				for _, j := range v.([]interface{}) {
					country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
				}
				ruleChoiceInt.AllowList.CountryList = country_listList

			}

			defaultActionChoiceTypeFound := false

			if v, ok := cs["default_action_allow"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionAllow{}
					defaultActionChoiceInt.DefaultActionAllow = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_deny"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionDeny{}
					defaultActionChoiceInt.DefaultActionDeny = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_next_policy"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionNextPolicy{}
					defaultActionChoiceInt.DefaultActionNextPolicy = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["ip_prefix_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ipPrefixSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.AllowList.IpPrefixSet = ipPrefixSetInt
				for i, ps := range sl {

					ipsMapToStrVal := ps.(map[string]interface{})
					ipPrefixSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := ipsMapToStrVal["name"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Name = v.(string)
					}

					if v, ok := ipsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Namespace = v.(string)
					}

					if v, ok := ipsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["prefix_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				prefixList := &ves_io_schema_views.PrefixStringListType{}
				ruleChoiceInt.AllowList.PrefixList = prefixList
				for _, set := range sl {
					prefixListMapStrToI := set.(map[string]interface{})

					if w, ok := prefixListMapStrToI["prefixes"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						prefixList.Prefixes = ls
					}

				}

			}

			if v, ok := cs["tls_fingerprint_classes"]; ok && !isIntfNil(v) {

				tls_fingerprint_classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
				for _, j := range v.([]interface{}) {
					tls_fingerprint_classesList = append(tls_fingerprint_classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
				}
				ruleChoiceInt.AllowList.TlsFingerprintClasses = tls_fingerprint_classesList

			}

			if v, ok := cs["tls_fingerprint_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.AllowList.TlsFingerprintValues = ls

			}

		}

	}

	if v, ok := d.GetOk("deny_all_requests"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_DenyAllRequests{}
			ruleChoiceInt.DenyAllRequests = &ves_io_schema.Empty{}
			createSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("deny_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_DenyList{}
		ruleChoiceInt.DenyList = &ves_io_schema_service_policy.SourceList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				asnList := &ves_io_schema_policy.AsnMatchList{}
				ruleChoiceInt.DenyList.AsnList = asnList
				for _, set := range sl {
					asnListMapStrToI := set.(map[string]interface{})

					if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
						ls := make([]uint32, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = uint32(v.(int))
						}
						asnList.AsNumbers = ls
					}

				}

			}

			if v, ok := cs["asn_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				asnSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.DenyList.AsnSet = asnSetInt
				for i, ps := range sl {

					asMapToStrVal := ps.(map[string]interface{})
					asnSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
						asnSetInt[i].Name = v.(string)
					}

					if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						asnSetInt[i].Namespace = v.(string)
					}

					if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						asnSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

				country_listList := []ves_io_schema_policy.CountryCode{}
				for _, j := range v.([]interface{}) {
					country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
				}
				ruleChoiceInt.DenyList.CountryList = country_listList

			}

			defaultActionChoiceTypeFound := false

			if v, ok := cs["default_action_allow"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionAllow{}
					defaultActionChoiceInt.DefaultActionAllow = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_deny"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionDeny{}
					defaultActionChoiceInt.DefaultActionDeny = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_next_policy"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionNextPolicy{}
					defaultActionChoiceInt.DefaultActionNextPolicy = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["ip_prefix_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ipPrefixSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.DenyList.IpPrefixSet = ipPrefixSetInt
				for i, ps := range sl {

					ipsMapToStrVal := ps.(map[string]interface{})
					ipPrefixSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := ipsMapToStrVal["name"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Name = v.(string)
					}

					if v, ok := ipsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Namespace = v.(string)
					}

					if v, ok := ipsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["prefix_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				prefixList := &ves_io_schema_views.PrefixStringListType{}
				ruleChoiceInt.DenyList.PrefixList = prefixList
				for _, set := range sl {
					prefixListMapStrToI := set.(map[string]interface{})

					if w, ok := prefixListMapStrToI["prefixes"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						prefixList.Prefixes = ls
					}

				}

			}

			if v, ok := cs["tls_fingerprint_classes"]; ok && !isIntfNil(v) {

				tls_fingerprint_classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
				for _, j := range v.([]interface{}) {
					tls_fingerprint_classesList = append(tls_fingerprint_classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
				}
				ruleChoiceInt.DenyList.TlsFingerprintClasses = tls_fingerprint_classesList

			}

			if v, ok := cs["tls_fingerprint_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.DenyList.TlsFingerprintValues = ls

			}

		}

	}

	if v, ok := d.GetOk("internally_generated"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_InternallyGenerated{}
			ruleChoiceInt.InternallyGenerated = &ves_io_schema.Empty{}
			createSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("legacy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_LegacyRuleList{}
		ruleChoiceInt.LegacyRuleList = &ves_io_schema_service_policy.LegacyRuleList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				ruleChoiceInt.LegacyRuleList.Rules = rulesInt
				for i, ps := range sl {

					rMapToStrVal := ps.(map[string]interface{})
					rulesInt[i] = &ves_io_schema.ObjectRefType{}

					rulesInt[i].Kind = "service_policy_rule"

					if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
						rulesInt[i].Name = v.(string)
					}

					if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						rulesInt[i].Namespace = v.(string)
					}

					if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						rulesInt[i].Tenant = v.(string)
					}

					if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
						rulesInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.CreateSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_service_policy.RuleList{}
		createSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rules := make([]*ves_io_schema_service_policy.Rule, len(sl))
				ruleChoiceInt.RuleList.Rules = rules
				for i, set := range sl {
					rules[i] = &ves_io_schema_service_policy.Rule{}
					rulesMapStrToI := set.(map[string]interface{})

					if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						rules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						spec := &ves_io_schema_service_policy_rule.GlobalSpecType{}
						rules[i].Spec = spec
						for _, set := range sl {
							specMapStrToI := set.(map[string]interface{})

							if v, ok := specMapStrToI["action"]; ok && !isIntfNil(v) {

								spec.Action = ves_io_schema_policy.RuleAction(ves_io_schema_policy.RuleAction_value[v.(string)])

							}

							if v, ok := specMapStrToI["api_group_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								apiGroupMatcher := &ves_io_schema_policy.StringMatcherType{}
								spec.ApiGroupMatcher = apiGroupMatcher
								for _, set := range sl {
									apiGroupMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := apiGroupMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										apiGroupMatcher.InvertMatcher = w.(bool)
									}

									if w, ok := apiGroupMatcherMapStrToI["match"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										apiGroupMatcher.Match = ls
									}

								}

							}

							if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
								spec.ArgMatchers = argMatchers
								for i, set := range sl {
									argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
									argMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										argMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											argMatchers[i].Match = matchInt
										}

									}

									if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											argMatchers[i].Match = matchInt
										}

									}

									if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										argMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

										argMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										argMatchers[i].Name = w.(string)
									}

								}

							}

							asnChoiceTypeFound := false

							if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyAsn{}
									asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
									spec.AsnChoice = asnChoiceInt
								}

							}

							if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AsnList{}
								asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								spec.AsnChoice = asnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										asnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AsnMatcher{}
								asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								spec.AsnChoice = asnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								bodyMatcher := &ves_io_schema_policy.MatcherType{}
								spec.BodyMatcher = bodyMatcher
								for _, set := range sl {
									bodyMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										bodyMatcher.ExactValues = ls
									}

									if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										bodyMatcher.RegexValues = ls
									}

									if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										bodyMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["bot_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								botAction := &ves_io_schema_policy.BotAction{}
								spec.BotAction = botAction
								for _, set := range sl {
									botActionMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := botActionMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.BotAction_BotSkipProcessing{}
											actionTypeInt.BotSkipProcessing = &ves_io_schema.Empty{}
											botAction.ActionType = actionTypeInt
										}

									}

									if v, ok := botActionMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.BotAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											botAction.ActionType = actionTypeInt
										}

									}

								}

							}

							if v, ok := specMapStrToI["challenge_action"]; ok && !isIntfNil(v) {

								spec.ChallengeAction = ves_io_schema_policy.ChallengeAction(ves_io_schema_policy.ChallengeAction_value[v.(string)])

							}

							clientChoiceTypeFound := false

							if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									spec.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientName{}

								spec.ClientChoice = clientChoiceInt

								clientChoiceInt.ClientName = v.(string)

							}

							if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientNameMatcher{}
								clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										clientChoiceInt.ClientNameMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := specMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_service_policy_rule.IPThreatCategoryListType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							if v, ok := specMapStrToI["client_role"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								clientRole := &ves_io_schema_policy.RoleMatcherType{}
								spec.ClientRole = clientRole
								for _, set := range sl {
									clientRoleMapStrToI := set.(map[string]interface{})

									if w, ok := clientRoleMapStrToI["match"]; ok && !isIntfNil(w) {
										clientRole.Match = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["content_rewrite_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								contentRewriteAction := &ves_io_schema_policy.ContentRewriteAction{}
								spec.ContentRewriteAction = contentRewriteAction
								for _, set := range sl {
									contentRewriteActionMapStrToI := set.(map[string]interface{})

									if w, ok := contentRewriteActionMapStrToI["element_selector"]; ok && !isIntfNil(w) {
										contentRewriteAction.ElementSelector = w.(string)
									}

									if w, ok := contentRewriteActionMapStrToI["insert_content"]; ok && !isIntfNil(w) {
										contentRewriteAction.InsertContent = w.(string)
									}

									if v, ok := contentRewriteActionMapStrToI["position"]; ok && !isIntfNil(v) {

										contentRewriteAction.Position = ves_io_schema_policy.HTMLPosition(ves_io_schema_policy.HTMLPosition_value[v.(string)])

									}

								}

							}

							if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								spec.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								domainMatcher := &ves_io_schema_policy.MatcherType{}
								spec.DomainMatcher = domainMatcher
								for _, set := range sl {
									domainMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										domainMatcher.ExactValues = ls
									}

									if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										domainMatcher.RegexValues = ls
									}

									if v, ok := domainMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										domainMatcher.Transformers = transformersList

									}

								}

							}

							dstAsnChoiceTypeFound := false

							if v, ok := specMapStrToI["any_dst_asn"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true

								if v.(bool) {
									dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyDstAsn{}
									dstAsnChoiceInt.AnyDstAsn = &ves_io_schema.Empty{}
									spec.DstAsnChoice = dstAsnChoiceInt
								}

							}

							if v, ok := specMapStrToI["dst_asn_list"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true
								dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstAsnList{}
								dstAsnChoiceInt.DstAsnList = &ves_io_schema_policy.AsnMatchList{}
								spec.DstAsnChoice = dstAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										dstAsnChoiceInt.DstAsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := specMapStrToI["dst_asn_matcher"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true
								dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstAsnMatcher{}
								dstAsnChoiceInt.DstAsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								spec.DstAsnChoice = dstAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										dstAsnChoiceInt.DstAsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							dstIpChoiceTypeFound := false

							if v, ok := specMapStrToI["any_dst_ip"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true

								if v.(bool) {
									dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyDstIp{}
									dstIpChoiceInt.AnyDstIp = &ves_io_schema.Empty{}
									spec.DstIpChoice = dstIpChoiceInt
								}

							}

							if v, ok := specMapStrToI["dst_ip_matcher"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true
								dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstIpMatcher{}
								dstIpChoiceInt.DstIpMatcher = &ves_io_schema_policy.IpMatcherType{}
								spec.DstIpChoice = dstIpChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										dstIpChoiceInt.DstIpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										dstIpChoiceInt.DstIpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["dst_ip_prefix_list"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true
								dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstIpPrefixList{}
								dstIpChoiceInt.DstIpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								spec.DstIpChoice = dstIpChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										dstIpChoiceInt.DstIpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										dstIpChoiceInt.DstIpPrefixList.IpPrefixes = ls

									}

								}

							}

							if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
								ts, err := parseTime(w.(string))
								if err != nil {
									return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
								}
								spec.ExpirationTimestamp = ts
							}

							if v, ok := specMapStrToI["forwarding_class"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								forwardingClassInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.ForwardingClass = forwardingClassInt
								for i, ps := range sl {

									fcMapToStrVal := ps.(map[string]interface{})
									forwardingClassInt[i] = &ves_io_schema.ObjectRefType{}

									forwardingClassInt[i].Kind = "forwarding_class"

									if v, ok := fcMapToStrVal["name"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Name = v.(string)
									}

									if v, ok := fcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Namespace = v.(string)
									}

									if v, ok := fcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Tenant = v.(string)
									}

									if v, ok := fcMapToStrVal["uid"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := specMapStrToI["goto_policy"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								gotoPolicyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.GotoPolicy = gotoPolicyInt
								for i, ps := range sl {

									gpMapToStrVal := ps.(map[string]interface{})
									gotoPolicyInt[i] = &ves_io_schema.ObjectRefType{}

									gotoPolicyInt[i].Kind = "service_policy"

									if v, ok := gpMapToStrVal["name"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Name = v.(string)
									}

									if v, ok := gpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Namespace = v.(string)
									}

									if v, ok := gpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Tenant = v.(string)
									}

									if v, ok := gpMapToStrVal["uid"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								spec.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								spec.HttpMethod = httpMethod
								for _, set := range sl {
									httpMethodMapStrToI := set.(map[string]interface{})

									if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										httpMethod.InvertMatcher = w.(bool)
									}

									if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										httpMethod.Methods = methodsList

									}

								}

							}

							ipChoiceTypeFound := false

							if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true

								if v.(bool) {
									ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyIp{}
									ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
									spec.IpChoice = ipChoiceInt
								}

							}

							if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpMatcher{}
								ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								spec.IpChoice = ipChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpPrefixList{}
								ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								spec.IpChoice = ipChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipChoiceInt.IpPrefixList.IpPrefixes = ls

									}

								}

							}

							if v, ok := specMapStrToI["l4_dest_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								l4DestMatcher := &ves_io_schema_policy.L4DestMatcherType{}
								spec.L4DestMatcher = l4DestMatcher
								for _, set := range sl {
									l4DestMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := l4DestMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										l4DestMatcher.InvertMatcher = w.(bool)
									}

									if v, ok := l4DestMatcherMapStrToI["l4_dests"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										l4Dests := make([]*ves_io_schema.L4DestType, len(sl))
										l4DestMatcher.L4Dests = l4Dests
										for i, set := range sl {
											l4Dests[i] = &ves_io_schema.L4DestType{}
											l4DestsMapStrToI := set.(map[string]interface{})

											if w, ok := l4DestsMapStrToI["port_ranges"]; ok && !isIntfNil(w) {
												l4Dests[i].PortRanges = w.(string)
											}

											if w, ok := l4DestsMapStrToI["prefixes"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												l4Dests[i].Prefixes = ls
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								spec.LabelMatcher = labelMatcher
								for _, set := range sl {
									labelMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										labelMatcher.Keys = ls
									}

								}

							}

							if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema_policy.PathMatcherType{}
								spec.Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.ExactValues = ls
									}

									if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.PrefixValues = ls
									}

									if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.RegexValues = ls
									}

									if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.SuffixValues = ls
									}

									if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										path.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["port_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								portMatcher := &ves_io_schema_policy.PortMatcherType{}
								spec.PortMatcher = portMatcher
								for _, set := range sl {
									portMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := portMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										portMatcher.InvertMatcher = w.(bool)
									}

									if w, ok := portMatcherMapStrToI["ports"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										portMatcher.Ports = ls
									}

								}

							}

							if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								spec.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

							if v, ok := specMapStrToI["rate_limiter"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.RateLimiter = rateLimiterInt
								for i, ps := range sl {

									rlMapToStrVal := ps.(map[string]interface{})
									rateLimiterInt[i] = &ves_io_schema.ObjectRefType{}

									rateLimiterInt[i].Kind = "rate_limiter"

									if v, ok := rlMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Name = v.(string)
									}

									if v, ok := rlMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Namespace = v.(string)
									}

									if v, ok := rlMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Tenant = v.(string)
									}

									if v, ok := rlMapToStrVal["uid"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Uid = v.(string)
									}

								}

							}

							if w, ok := specMapStrToI["scheme"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								spec.Scheme = ls
							}

							if v, ok := specMapStrToI["server_selector"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								serverSelector := &ves_io_schema.LabelSelectorType{}
								spec.ServerSelector = serverSelector
								for _, set := range sl {
									serverSelectorMapStrToI := set.(map[string]interface{})

									if w, ok := serverSelectorMapStrToI["expressions"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										serverSelector.Expressions = ls
									}

								}

							}

							if v, ok := specMapStrToI["shape_protected_endpoint_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								shapeProtectedEndpointAction := &ves_io_schema_policy.ShapeProtectedEndpointAction{}
								spec.ShapeProtectedEndpointAction = shapeProtectedEndpointAction
								for _, set := range sl {
									shapeProtectedEndpointActionMapStrToI := set.(map[string]interface{})

									if v, ok := shapeProtectedEndpointActionMapStrToI["app_traffic_type"]; ok && !isIntfNil(v) {

										shapeProtectedEndpointAction.AppTrafficType = ves_io_schema_policy.AppTrafficType(ves_io_schema_policy.AppTrafficType_value[v.(string)])

									}

									if v, ok := shapeProtectedEndpointActionMapStrToI["mitigation"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
										shapeProtectedEndpointAction.Mitigation = mitigation
										for _, set := range sl {
											mitigationMapStrToI := set.(map[string]interface{})

											actionTypeTypeFound := false

											if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true
												actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
												actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
												mitigation.ActionType = actionTypeInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["body"]; ok && !isIntfNil(v) {

														actionTypeInt.Block.Body = v.(string)

													}

													if v, ok := cs["status"]; ok && !isIntfNil(v) {

														actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

													}

												}

											}

											if v, ok := mitigationMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true

												if v.(bool) {
													actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_None{}
													actionTypeInt.None = &ves_io_schema.Empty{}
													mitigation.ActionType = actionTypeInt
												}

											}

											if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true
												actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
												actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
												mitigation.ActionType = actionTypeInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["uri"]; ok && !isIntfNil(v) {

														actionTypeInt.Redirect.Uri = v.(string)

													}

												}

											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								spec.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

							if v, ok := specMapStrToI["url_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								urlMatcher := &ves_io_schema_policy.URLMatcherType{}
								spec.UrlMatcher = urlMatcher
								for _, set := range sl {
									urlMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := urlMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										urlMatcher.InvertMatcher = w.(bool)
									}

									if v, ok := urlMatcherMapStrToI["url_items"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										urlItems := make([]*ves_io_schema_policy.URLItem, len(sl))
										urlMatcher.UrlItems = urlItems
										for i, set := range sl {
											urlItems[i] = &ves_io_schema_policy.URLItem{}
											urlItemsMapStrToI := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := urlItemsMapStrToI["domain_regex"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_policy.URLItem_DomainRegex{}

												urlItems[i].DomainChoice = domainChoiceInt

												domainChoiceInt.DomainRegex = v.(string)

											}

											if v, ok := urlItemsMapStrToI["domain_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_policy.URLItem_DomainValue{}

												urlItems[i].DomainChoice = domainChoiceInt

												domainChoiceInt.DomainValue = v.(string)

											}

											pathChoiceTypeFound := false

											if v, ok := urlItemsMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathPrefix{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathPrefix = v.(string)

											}

											if v, ok := urlItemsMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathRegex{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathRegex = v.(string)

											}

											if v, ok := urlItemsMapStrToI["path_value"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathValue{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathValue = v.(string)

											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["virtual_host_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualHostMatcher := &ves_io_schema_policy.MatcherType{}
								spec.VirtualHostMatcher = virtualHostMatcher
								for _, set := range sl {
									virtualHostMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := virtualHostMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										virtualHostMatcher.ExactValues = ls
									}

									if w, ok := virtualHostMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										virtualHostMatcher.RegexValues = ls
									}

									if v, ok := virtualHostMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										virtualHostMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["waf_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								wafAction := &ves_io_schema_policy.WafAction{}
								spec.WafAction = wafAction
								for _, set := range sl {
									wafActionMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := wafActionMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.WafAction_AppFirewallDetectionControl{}
										actionTypeInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
										wafAction.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
												for i, set := range sl {
													excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
													excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

													}

												}

											}

											if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
												for i, set := range sl {
													excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
													excludeSignatureContextsMapStrToI := set.(map[string]interface{})

													if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].SignatureId = uint32(w.(int))
													}

												}

											}

											if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
												for i, set := range sl {
													excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
													excludeViolationContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

													}

												}

											}

										}

									}

									if v, ok := wafActionMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

									if v, ok := wafActionMapStrToI["waf_in_monitoring_mode"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_WafInMonitoringMode{}
											actionTypeInt.WafInMonitoringMode = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

									if v, ok := wafActionMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_WafSkipProcessing{}
											actionTypeInt.WafSkipProcessing = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	//server_choice

	serverChoiceTypeFound := false

	if v, ok := d.GetOk("any_server"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true

		if v.(bool) {
			serverChoiceInt := &ves_io_schema_service_policy.CreateSpecType_AnyServer{}
			serverChoiceInt.AnyServer = &ves_io_schema.Empty{}
			createSpec.ServerChoice = serverChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.CreateSpecType_ServerName{}

		createSpec.ServerChoice = serverChoiceInt

		serverChoiceInt.ServerName = v.(string)

	}

	if v, ok := d.GetOk("server_name_matcher"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.CreateSpecType_ServerNameMatcher{}
		serverChoiceInt.ServerNameMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		createSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.ExactValues = ls

			}

			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.RegexValues = ls

			}

		}

	}

	if v, ok := d.GetOk("server_selector"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.CreateSpecType_ServerSelector{}
		serverChoiceInt.ServerSelector = &ves_io_schema.LabelSelectorType{}
		createSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerSelector.Expressions = ls

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra ServicePolicy object with struct: %+v", createReq)

	createServicePolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_service_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating ServicePolicy: %s", err)
	}
	d.SetId(createServicePolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraServicePolicyRead(d, meta)
}

func resourceVolterraServicePolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_service_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ServicePolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ServicePolicy %q: %s", d.Id(), err)
	}
	return setServicePolicyFields(client, d, resp)
}

func setServicePolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	drift.DriftDetectionSpecServicePolicy(d, resp)

	return nil
}

// resourceVolterraServicePolicyUpdate updates ServicePolicy resource
func resourceVolterraServicePolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_service_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_service_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("algo"); ok && !isIntfNil(v) {

		updateSpec.Algo = ves_io_schema_policy.RuleCombiningAlgorithm(ves_io_schema_policy.RuleCombiningAlgorithm_value[v.(string)])

	}

	if v, ok := d.GetOk("port_matcher"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		portMatcher := &ves_io_schema_policy.PortMatcherType{}
		updateSpec.PortMatcher = portMatcher
		for _, set := range sl {
			portMatcherMapStrToI := set.(map[string]interface{})

			if w, ok := portMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
				portMatcher.InvertMatcher = w.(bool)
			}

			if w, ok := portMatcherMapStrToI["ports"]; ok && !isIntfNil(w) {
				ls := make([]string, len(w.([]interface{})))
				for i, v := range w.([]interface{}) {
					ls[i] = v.(string)
				}
				portMatcher.Ports = ls
			}

		}

	}

	ruleChoiceTypeFound := false

	if v, ok := d.GetOk("allow_all_requests"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_AllowAllRequests{}
			ruleChoiceInt.AllowAllRequests = &ves_io_schema.Empty{}
			updateSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("allow_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_AllowList{}
		ruleChoiceInt.AllowList = &ves_io_schema_service_policy.SourceList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				asnList := &ves_io_schema_policy.AsnMatchList{}
				ruleChoiceInt.AllowList.AsnList = asnList
				for _, set := range sl {
					asnListMapStrToI := set.(map[string]interface{})

					if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
						ls := make([]uint32, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = uint32(v.(int))
						}
						asnList.AsNumbers = ls
					}

				}

			}

			if v, ok := cs["asn_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				asnSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.AllowList.AsnSet = asnSetInt
				for i, ps := range sl {

					asMapToStrVal := ps.(map[string]interface{})
					asnSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
						asnSetInt[i].Name = v.(string)
					}

					if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						asnSetInt[i].Namespace = v.(string)
					}

					if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						asnSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

				country_listList := []ves_io_schema_policy.CountryCode{}
				for _, j := range v.([]interface{}) {
					country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
				}
				ruleChoiceInt.AllowList.CountryList = country_listList

			}

			defaultActionChoiceTypeFound := false

			if v, ok := cs["default_action_allow"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionAllow{}
					defaultActionChoiceInt.DefaultActionAllow = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_deny"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionDeny{}
					defaultActionChoiceInt.DefaultActionDeny = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_next_policy"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionNextPolicy{}
					defaultActionChoiceInt.DefaultActionNextPolicy = &ves_io_schema.Empty{}
					ruleChoiceInt.AllowList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["ip_prefix_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ipPrefixSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.AllowList.IpPrefixSet = ipPrefixSetInt
				for i, ps := range sl {

					ipsMapToStrVal := ps.(map[string]interface{})
					ipPrefixSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := ipsMapToStrVal["name"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Name = v.(string)
					}

					if v, ok := ipsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Namespace = v.(string)
					}

					if v, ok := ipsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["prefix_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				prefixList := &ves_io_schema_views.PrefixStringListType{}
				ruleChoiceInt.AllowList.PrefixList = prefixList
				for _, set := range sl {
					prefixListMapStrToI := set.(map[string]interface{})

					if w, ok := prefixListMapStrToI["prefixes"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						prefixList.Prefixes = ls
					}

				}

			}

			if v, ok := cs["tls_fingerprint_classes"]; ok && !isIntfNil(v) {

				tls_fingerprint_classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
				for _, j := range v.([]interface{}) {
					tls_fingerprint_classesList = append(tls_fingerprint_classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
				}
				ruleChoiceInt.AllowList.TlsFingerprintClasses = tls_fingerprint_classesList

			}

			if v, ok := cs["tls_fingerprint_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.AllowList.TlsFingerprintValues = ls

			}

		}

	}

	if v, ok := d.GetOk("deny_all_requests"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_DenyAllRequests{}
			ruleChoiceInt.DenyAllRequests = &ves_io_schema.Empty{}
			updateSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("deny_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_DenyList{}
		ruleChoiceInt.DenyList = &ves_io_schema_service_policy.SourceList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				asnList := &ves_io_schema_policy.AsnMatchList{}
				ruleChoiceInt.DenyList.AsnList = asnList
				for _, set := range sl {
					asnListMapStrToI := set.(map[string]interface{})

					if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
						ls := make([]uint32, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = uint32(v.(int))
						}
						asnList.AsNumbers = ls
					}

				}

			}

			if v, ok := cs["asn_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				asnSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.DenyList.AsnSet = asnSetInt
				for i, ps := range sl {

					asMapToStrVal := ps.(map[string]interface{})
					asnSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
						asnSetInt[i].Name = v.(string)
					}

					if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						asnSetInt[i].Namespace = v.(string)
					}

					if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						asnSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

				country_listList := []ves_io_schema_policy.CountryCode{}
				for _, j := range v.([]interface{}) {
					country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
				}
				ruleChoiceInt.DenyList.CountryList = country_listList

			}

			defaultActionChoiceTypeFound := false

			if v, ok := cs["default_action_allow"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionAllow{}
					defaultActionChoiceInt.DefaultActionAllow = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_deny"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionDeny{}
					defaultActionChoiceInt.DefaultActionDeny = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["default_action_next_policy"]; ok && !isIntfNil(v) && !defaultActionChoiceTypeFound {

				defaultActionChoiceTypeFound = true

				if v.(bool) {
					defaultActionChoiceInt := &ves_io_schema_service_policy.SourceList_DefaultActionNextPolicy{}
					defaultActionChoiceInt.DefaultActionNextPolicy = &ves_io_schema.Empty{}
					ruleChoiceInt.DenyList.DefaultActionChoice = defaultActionChoiceInt
				}

			}

			if v, ok := cs["ip_prefix_set"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				ipPrefixSetInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
				ruleChoiceInt.DenyList.IpPrefixSet = ipPrefixSetInt
				for i, ps := range sl {

					ipsMapToStrVal := ps.(map[string]interface{})
					ipPrefixSetInt[i] = &ves_io_schema_views.ObjectRefType{}

					if v, ok := ipsMapToStrVal["name"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Name = v.(string)
					}

					if v, ok := ipsMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Namespace = v.(string)
					}

					if v, ok := ipsMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						ipPrefixSetInt[i].Tenant = v.(string)
					}

				}

			}

			if v, ok := cs["prefix_list"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				prefixList := &ves_io_schema_views.PrefixStringListType{}
				ruleChoiceInt.DenyList.PrefixList = prefixList
				for _, set := range sl {
					prefixListMapStrToI := set.(map[string]interface{})

					if w, ok := prefixListMapStrToI["prefixes"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						prefixList.Prefixes = ls
					}

				}

			}

			if v, ok := cs["tls_fingerprint_classes"]; ok && !isIntfNil(v) {

				tls_fingerprint_classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
				for _, j := range v.([]interface{}) {
					tls_fingerprint_classesList = append(tls_fingerprint_classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
				}
				ruleChoiceInt.DenyList.TlsFingerprintClasses = tls_fingerprint_classesList

			}

			if v, ok := cs["tls_fingerprint_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				ruleChoiceInt.DenyList.TlsFingerprintValues = ls

			}

		}

	}

	if v, ok := d.GetOk("internally_generated"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true

		if v.(bool) {
			ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_InternallyGenerated{}
			ruleChoiceInt.InternallyGenerated = &ves_io_schema.Empty{}
			updateSpec.RuleChoice = ruleChoiceInt
		}

	}

	if v, ok := d.GetOk("legacy_rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_LegacyRuleList{}
		ruleChoiceInt.LegacyRuleList = &ves_io_schema_service_policy.LegacyRuleList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rulesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
				ruleChoiceInt.LegacyRuleList.Rules = rulesInt
				for i, ps := range sl {

					rMapToStrVal := ps.(map[string]interface{})
					rulesInt[i] = &ves_io_schema.ObjectRefType{}

					rulesInt[i].Kind = "service_policy_rule"

					if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
						rulesInt[i].Name = v.(string)
					}

					if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						rulesInt[i].Namespace = v.(string)
					}

					if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						rulesInt[i].Tenant = v.(string)
					}

					if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
						rulesInt[i].Uid = v.(string)
					}

				}

			}

		}

	}

	if v, ok := d.GetOk("rule_list"); ok && !ruleChoiceTypeFound {

		ruleChoiceTypeFound = true
		ruleChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_RuleList{}
		ruleChoiceInt.RuleList = &ves_io_schema_service_policy.RuleList{}
		updateSpec.RuleChoice = ruleChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["rules"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				rules := make([]*ves_io_schema_service_policy.Rule, len(sl))
				ruleChoiceInt.RuleList.Rules = rules
				for i, set := range sl {
					rules[i] = &ves_io_schema_service_policy.Rule{}
					rulesMapStrToI := set.(map[string]interface{})

					if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						metadata := &ves_io_schema.MessageMetaType{}
						rules[i].Metadata = metadata
						for _, set := range sl {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
								metadata.Disable = w.(bool)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}

					}

					if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						spec := &ves_io_schema_service_policy_rule.GlobalSpecType{}
						rules[i].Spec = spec
						for _, set := range sl {
							specMapStrToI := set.(map[string]interface{})

							if v, ok := specMapStrToI["action"]; ok && !isIntfNil(v) {

								spec.Action = ves_io_schema_policy.RuleAction(ves_io_schema_policy.RuleAction_value[v.(string)])

							}

							if v, ok := specMapStrToI["api_group_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								apiGroupMatcher := &ves_io_schema_policy.StringMatcherType{}
								spec.ApiGroupMatcher = apiGroupMatcher
								for _, set := range sl {
									apiGroupMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := apiGroupMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										apiGroupMatcher.InvertMatcher = w.(bool)
									}

									if w, ok := apiGroupMatcherMapStrToI["match"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										apiGroupMatcher.Match = ls
									}

								}

							}

							if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
								spec.ArgMatchers = argMatchers
								for i, set := range sl {
									argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
									argMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										argMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											argMatchers[i].Match = matchInt
										}

									}

									if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											argMatchers[i].Match = matchInt
										}

									}

									if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										argMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := argMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.ArgMatcherType_Presence{}

										argMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										argMatchers[i].Name = w.(string)
									}

								}

							}

							asnChoiceTypeFound := false

							if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true

								if v.(bool) {
									asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyAsn{}
									asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
									spec.AsnChoice = asnChoiceInt
								}

							}

							if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AsnList{}
								asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
								spec.AsnChoice = asnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										asnChoiceInt.AsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

								asnChoiceTypeFound = true
								asnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AsnMatcher{}
								asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								spec.AsnChoice = asnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								bodyMatcher := &ves_io_schema_policy.MatcherType{}
								spec.BodyMatcher = bodyMatcher
								for _, set := range sl {
									bodyMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										bodyMatcher.ExactValues = ls
									}

									if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										bodyMatcher.RegexValues = ls
									}

									if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										bodyMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["bot_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								botAction := &ves_io_schema_policy.BotAction{}
								spec.BotAction = botAction
								for _, set := range sl {
									botActionMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := botActionMapStrToI["bot_skip_processing"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.BotAction_BotSkipProcessing{}
											actionTypeInt.BotSkipProcessing = &ves_io_schema.Empty{}
											botAction.ActionType = actionTypeInt
										}

									}

									if v, ok := botActionMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.BotAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											botAction.ActionType = actionTypeInt
										}

									}

								}

							}

							if v, ok := specMapStrToI["challenge_action"]; ok && !isIntfNil(v) {

								spec.ChallengeAction = ves_io_schema_policy.ChallengeAction(ves_io_schema_policy.ChallengeAction_value[v.(string)])

							}

							clientChoiceTypeFound := false

							if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true

								if v.(bool) {
									clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyClient{}
									clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
									spec.ClientChoice = clientChoiceInt
								}

							}

							if v, ok := specMapStrToI["client_name"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientName{}

								spec.ClientChoice = clientChoiceInt

								clientChoiceInt.ClientName = v.(string)

							}

							if v, ok := specMapStrToI["client_name_matcher"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientNameMatcher{}
								clientChoiceInt.ClientNameMatcher = &ves_io_schema_policy.MatcherType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.ExactValues = ls

									}

									if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientNameMatcher.RegexValues = ls

									}

									if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										clientChoiceInt.ClientNameMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_ClientSelector{}
								clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										clientChoiceInt.ClientSelector.Expressions = ls

									}

								}

							}

							if v, ok := specMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

								clientChoiceTypeFound = true
								clientChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpThreatCategoryList{}
								clientChoiceInt.IpThreatCategoryList = &ves_io_schema_service_policy_rule.IPThreatCategoryListType{}
								spec.ClientChoice = clientChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

										ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
										for _, j := range v.([]interface{}) {
											ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
										}
										clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

									}

								}

							}

							if v, ok := specMapStrToI["client_role"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								clientRole := &ves_io_schema_policy.RoleMatcherType{}
								spec.ClientRole = clientRole
								for _, set := range sl {
									clientRoleMapStrToI := set.(map[string]interface{})

									if w, ok := clientRoleMapStrToI["match"]; ok && !isIntfNil(w) {
										clientRole.Match = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["content_rewrite_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								contentRewriteAction := &ves_io_schema_policy.ContentRewriteAction{}
								spec.ContentRewriteAction = contentRewriteAction
								for _, set := range sl {
									contentRewriteActionMapStrToI := set.(map[string]interface{})

									if w, ok := contentRewriteActionMapStrToI["element_selector"]; ok && !isIntfNil(w) {
										contentRewriteAction.ElementSelector = w.(string)
									}

									if w, ok := contentRewriteActionMapStrToI["insert_content"]; ok && !isIntfNil(w) {
										contentRewriteAction.InsertContent = w.(string)
									}

									if v, ok := contentRewriteActionMapStrToI["position"]; ok && !isIntfNil(v) {

										contentRewriteAction.Position = ves_io_schema_policy.HTMLPosition(ves_io_schema_policy.HTMLPosition_value[v.(string)])

									}

								}

							}

							if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
								spec.CookieMatchers = cookieMatchers
								for i, set := range sl {
									cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
									cookieMatchersMapStrToI := set.(map[string]interface{})

									if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										cookieMatchers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											cookieMatchers[i].Match = matchInt
										}

									}

									if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										cookieMatchers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := cookieMatchersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.CookieMatcherType_Presence{}

										cookieMatchers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
										cookieMatchers[i].Name = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								domainMatcher := &ves_io_schema_policy.MatcherType{}
								spec.DomainMatcher = domainMatcher
								for _, set := range sl {
									domainMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										domainMatcher.ExactValues = ls
									}

									if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										domainMatcher.RegexValues = ls
									}

									if v, ok := domainMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										domainMatcher.Transformers = transformersList

									}

								}

							}

							dstAsnChoiceTypeFound := false

							if v, ok := specMapStrToI["any_dst_asn"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true

								if v.(bool) {
									dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyDstAsn{}
									dstAsnChoiceInt.AnyDstAsn = &ves_io_schema.Empty{}
									spec.DstAsnChoice = dstAsnChoiceInt
								}

							}

							if v, ok := specMapStrToI["dst_asn_list"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true
								dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstAsnList{}
								dstAsnChoiceInt.DstAsnList = &ves_io_schema_policy.AsnMatchList{}
								spec.DstAsnChoice = dstAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

										ls := make([]uint32, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = uint32(v.(int))
										}
										dstAsnChoiceInt.DstAsnList.AsNumbers = ls

									}

								}

							}

							if v, ok := specMapStrToI["dst_asn_matcher"]; ok && !isIntfNil(v) && !dstAsnChoiceTypeFound {

								dstAsnChoiceTypeFound = true
								dstAsnChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstAsnMatcher{}
								dstAsnChoiceInt.DstAsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
								spec.DstAsnChoice = dstAsnChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										dstAsnChoiceInt.DstAsnMatcher.AsnSets = asnSetsInt
										for i, ps := range sl {

											asMapToStrVal := ps.(map[string]interface{})
											asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

											asnSetsInt[i].Kind = "bgp_asn_set"

											if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Name = v.(string)
											}

											if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Namespace = v.(string)
											}

											if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Tenant = v.(string)
											}

											if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
												asnSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							dstIpChoiceTypeFound := false

							if v, ok := specMapStrToI["any_dst_ip"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true

								if v.(bool) {
									dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyDstIp{}
									dstIpChoiceInt.AnyDstIp = &ves_io_schema.Empty{}
									spec.DstIpChoice = dstIpChoiceInt
								}

							}

							if v, ok := specMapStrToI["dst_ip_matcher"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true
								dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstIpMatcher{}
								dstIpChoiceInt.DstIpMatcher = &ves_io_schema_policy.IpMatcherType{}
								spec.DstIpChoice = dstIpChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										dstIpChoiceInt.DstIpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										dstIpChoiceInt.DstIpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["dst_ip_prefix_list"]; ok && !isIntfNil(v) && !dstIpChoiceTypeFound {

								dstIpChoiceTypeFound = true
								dstIpChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_DstIpPrefixList{}
								dstIpChoiceInt.DstIpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								spec.DstIpChoice = dstIpChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										dstIpChoiceInt.DstIpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										dstIpChoiceInt.DstIpPrefixList.IpPrefixes = ls

									}

								}

							}

							if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
								ts, err := parseTime(w.(string))
								if err != nil {
									return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
								}
								spec.ExpirationTimestamp = ts
							}

							if v, ok := specMapStrToI["forwarding_class"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								forwardingClassInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.ForwardingClass = forwardingClassInt
								for i, ps := range sl {

									fcMapToStrVal := ps.(map[string]interface{})
									forwardingClassInt[i] = &ves_io_schema.ObjectRefType{}

									forwardingClassInt[i].Kind = "forwarding_class"

									if v, ok := fcMapToStrVal["name"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Name = v.(string)
									}

									if v, ok := fcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Namespace = v.(string)
									}

									if v, ok := fcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Tenant = v.(string)
									}

									if v, ok := fcMapToStrVal["uid"]; ok && !isIntfNil(v) {
										forwardingClassInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := specMapStrToI["goto_policy"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								gotoPolicyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.GotoPolicy = gotoPolicyInt
								for i, ps := range sl {

									gpMapToStrVal := ps.(map[string]interface{})
									gotoPolicyInt[i] = &ves_io_schema.ObjectRefType{}

									gotoPolicyInt[i].Kind = "service_policy"

									if v, ok := gpMapToStrVal["name"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Name = v.(string)
									}

									if v, ok := gpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Namespace = v.(string)
									}

									if v, ok := gpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Tenant = v.(string)
									}

									if v, ok := gpMapToStrVal["uid"]; ok && !isIntfNil(v) {
										gotoPolicyInt[i].Uid = v.(string)
									}

								}

							}

							if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
								spec.Headers = headers
								for i, set := range sl {
									headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
									headersMapStrToI := set.(map[string]interface{})

									if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										headers[i].InvertMatcher = w.(bool)
									}

									matchTypeFound := false

									if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											headers[i].Match = matchInt
										}

									}

									if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										headers[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.HeaderMatcherType_Presence{}

										headers[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

									if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
										headers[i].Name = w.(string)
									}

								}

							}

							if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								spec.HttpMethod = httpMethod
								for _, set := range sl {
									httpMethodMapStrToI := set.(map[string]interface{})

									if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										httpMethod.InvertMatcher = w.(bool)
									}

									if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

										methodsList := []ves_io_schema.HttpMethod{}
										for _, j := range v.([]interface{}) {
											methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
										}
										httpMethod.Methods = methodsList

									}

								}

							}

							ipChoiceTypeFound := false

							if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true

								if v.(bool) {
									ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_AnyIp{}
									ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
									spec.IpChoice = ipChoiceInt
								}

							}

							if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpMatcher{}
								ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
								spec.IpChoice = ipChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

										ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

									}

									if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
										ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
										for i, ps := range sl {

											psMapToStrVal := ps.(map[string]interface{})
											prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

											prefixSetsInt[i].Kind = "ip_prefix_set"

											if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Name = v.(string)
											}

											if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Namespace = v.(string)
											}

											if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Tenant = v.(string)
											}

											if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
												prefixSetsInt[i].Uid = v.(string)
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

								ipChoiceTypeFound = true
								ipChoiceInt := &ves_io_schema_service_policy_rule.GlobalSpecType_IpPrefixList{}
								ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
								spec.IpChoice = ipChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipChoiceInt.IpPrefixList.IpPrefixes = ls

									}

								}

							}

							if v, ok := specMapStrToI["l4_dest_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								l4DestMatcher := &ves_io_schema_policy.L4DestMatcherType{}
								spec.L4DestMatcher = l4DestMatcher
								for _, set := range sl {
									l4DestMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := l4DestMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										l4DestMatcher.InvertMatcher = w.(bool)
									}

									if v, ok := l4DestMatcherMapStrToI["l4_dests"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										l4Dests := make([]*ves_io_schema.L4DestType, len(sl))
										l4DestMatcher.L4Dests = l4Dests
										for i, set := range sl {
											l4Dests[i] = &ves_io_schema.L4DestType{}
											l4DestsMapStrToI := set.(map[string]interface{})

											if w, ok := l4DestsMapStrToI["port_ranges"]; ok && !isIntfNil(w) {
												l4Dests[i].PortRanges = w.(string)
											}

											if w, ok := l4DestsMapStrToI["prefixes"]; ok && !isIntfNil(w) {
												ls := make([]string, len(w.([]interface{})))
												for i, v := range w.([]interface{}) {
													ls[i] = v.(string)
												}
												l4Dests[i].Prefixes = ls
											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["label_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								labelMatcher := &ves_io_schema.LabelMatcherType{}
								spec.LabelMatcher = labelMatcher
								for _, set := range sl {
									labelMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := labelMatcherMapStrToI["keys"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										labelMatcher.Keys = ls
									}

								}

							}

							if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								path := &ves_io_schema_policy.PathMatcherType{}
								spec.Path = path
								for _, set := range sl {
									pathMapStrToI := set.(map[string]interface{})

									if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.ExactValues = ls
									}

									if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.PrefixValues = ls
									}

									if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.RegexValues = ls
									}

									if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										path.SuffixValues = ls
									}

									if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										path.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["port_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								portMatcher := &ves_io_schema_policy.PortMatcherType{}
								spec.PortMatcher = portMatcher
								for _, set := range sl {
									portMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := portMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										portMatcher.InvertMatcher = w.(bool)
									}

									if w, ok := portMatcherMapStrToI["ports"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										portMatcher.Ports = ls
									}

								}

							}

							if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
								spec.QueryParams = queryParams
								for i, set := range sl {
									queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
									queryParamsMapStrToI := set.(map[string]interface{})

									if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										queryParams[i].InvertMatcher = w.(bool)
									}

									if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
										queryParams[i].Key = w.(string)
									}

									matchTypeFound := false

									if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
											matchInt.CheckNotPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true

										if v.(bool) {
											matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
											matchInt.CheckPresent = &ves_io_schema.Empty{}
											queryParams[i].Match = matchInt
										}

									}

									if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
										matchInt.Item = &ves_io_schema_policy.MatcherType{}
										queryParams[i].Match = matchInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.ExactValues = ls

											}

											if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

												ls := make([]string, len(v.([]interface{})))
												for i, v := range v.([]interface{}) {
													ls[i] = v.(string)
												}
												matchInt.Item.RegexValues = ls

											}

											if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

												transformersList := []ves_io_schema_policy.Transformer{}
												for _, j := range v.([]interface{}) {
													transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
												}
												matchInt.Item.Transformers = transformersList

											}

										}

									}

									if v, ok := queryParamsMapStrToI["presence"]; ok && !isIntfNil(v) && !matchTypeFound {

										matchTypeFound = true
										matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Presence{}

										queryParams[i].Match = matchInt

										matchInt.Presence = v.(bool)

									}

								}

							}

							if v, ok := specMapStrToI["rate_limiter"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								spec.RateLimiter = rateLimiterInt
								for i, ps := range sl {

									rlMapToStrVal := ps.(map[string]interface{})
									rateLimiterInt[i] = &ves_io_schema.ObjectRefType{}

									rateLimiterInt[i].Kind = "rate_limiter"

									if v, ok := rlMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Name = v.(string)
									}

									if v, ok := rlMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Namespace = v.(string)
									}

									if v, ok := rlMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Tenant = v.(string)
									}

									if v, ok := rlMapToStrVal["uid"]; ok && !isIntfNil(v) {
										rateLimiterInt[i].Uid = v.(string)
									}

								}

							}

							if w, ok := specMapStrToI["scheme"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								spec.Scheme = ls
							}

							if v, ok := specMapStrToI["server_selector"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								serverSelector := &ves_io_schema.LabelSelectorType{}
								spec.ServerSelector = serverSelector
								for _, set := range sl {
									serverSelectorMapStrToI := set.(map[string]interface{})

									if w, ok := serverSelectorMapStrToI["expressions"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										serverSelector.Expressions = ls
									}

								}

							}

							if v, ok := specMapStrToI["shape_protected_endpoint_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								shapeProtectedEndpointAction := &ves_io_schema_policy.ShapeProtectedEndpointAction{}
								spec.ShapeProtectedEndpointAction = shapeProtectedEndpointAction
								for _, set := range sl {
									shapeProtectedEndpointActionMapStrToI := set.(map[string]interface{})

									if v, ok := shapeProtectedEndpointActionMapStrToI["app_traffic_type"]; ok && !isIntfNil(v) {

										shapeProtectedEndpointAction.AppTrafficType = ves_io_schema_policy.AppTrafficType(ves_io_schema_policy.AppTrafficType_value[v.(string)])

									}

									if v, ok := shapeProtectedEndpointActionMapStrToI["mitigation"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										mitigation := &ves_io_schema_policy.ShapeBotMitigationAction{}
										shapeProtectedEndpointAction.Mitigation = mitigation
										for _, set := range sl {
											mitigationMapStrToI := set.(map[string]interface{})

											actionTypeTypeFound := false

											if v, ok := mitigationMapStrToI["block"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true
												actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Block{}
												actionTypeInt.Block = &ves_io_schema_policy.ShapeBotBlockMitigationActionType{}
												mitigation.ActionType = actionTypeInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["body"]; ok && !isIntfNil(v) {

														actionTypeInt.Block.Body = v.(string)

													}

													if v, ok := cs["status"]; ok && !isIntfNil(v) {

														actionTypeInt.Block.Status = ves_io_schema.HttpStatusCode(ves_io_schema.HttpStatusCode_value[v.(string)])

													}

												}

											}

											if v, ok := mitigationMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true

												if v.(bool) {
													actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_None{}
													actionTypeInt.None = &ves_io_schema.Empty{}
													mitigation.ActionType = actionTypeInt
												}

											}

											if v, ok := mitigationMapStrToI["redirect"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

												actionTypeTypeFound = true
												actionTypeInt := &ves_io_schema_policy.ShapeBotMitigationAction_Redirect{}
												actionTypeInt.Redirect = &ves_io_schema_policy.ShapeBotRedirectMitigationActionType{}
												mitigation.ActionType = actionTypeInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["uri"]; ok && !isIntfNil(v) {

														actionTypeInt.Redirect.Uri = v.(string)

													}

												}

											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								spec.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

									if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

										classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
										for _, j := range v.([]interface{}) {
											classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
										}
										tlsFingerprintMatcher.Classes = classesList

									}

									if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExactValues = ls
									}

									if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										tlsFingerprintMatcher.ExcludedValues = ls
									}

								}

							}

							if v, ok := specMapStrToI["url_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								urlMatcher := &ves_io_schema_policy.URLMatcherType{}
								spec.UrlMatcher = urlMatcher
								for _, set := range sl {
									urlMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := urlMatcherMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
										urlMatcher.InvertMatcher = w.(bool)
									}

									if v, ok := urlMatcherMapStrToI["url_items"]; ok && !isIntfNil(v) {

										sl := v.([]interface{})
										urlItems := make([]*ves_io_schema_policy.URLItem, len(sl))
										urlMatcher.UrlItems = urlItems
										for i, set := range sl {
											urlItems[i] = &ves_io_schema_policy.URLItem{}
											urlItemsMapStrToI := set.(map[string]interface{})

											domainChoiceTypeFound := false

											if v, ok := urlItemsMapStrToI["domain_regex"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_policy.URLItem_DomainRegex{}

												urlItems[i].DomainChoice = domainChoiceInt

												domainChoiceInt.DomainRegex = v.(string)

											}

											if v, ok := urlItemsMapStrToI["domain_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

												domainChoiceTypeFound = true
												domainChoiceInt := &ves_io_schema_policy.URLItem_DomainValue{}

												urlItems[i].DomainChoice = domainChoiceInt

												domainChoiceInt.DomainValue = v.(string)

											}

											pathChoiceTypeFound := false

											if v, ok := urlItemsMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathPrefix{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathPrefix = v.(string)

											}

											if v, ok := urlItemsMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathRegex{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathRegex = v.(string)

											}

											if v, ok := urlItemsMapStrToI["path_value"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

												pathChoiceTypeFound = true
												pathChoiceInt := &ves_io_schema_policy.URLItem_PathValue{}

												urlItems[i].PathChoice = pathChoiceInt

												pathChoiceInt.PathValue = v.(string)

											}

										}

									}

								}

							}

							if v, ok := specMapStrToI["virtual_host_matcher"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								virtualHostMatcher := &ves_io_schema_policy.MatcherType{}
								spec.VirtualHostMatcher = virtualHostMatcher
								for _, set := range sl {
									virtualHostMatcherMapStrToI := set.(map[string]interface{})

									if w, ok := virtualHostMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										virtualHostMatcher.ExactValues = ls
									}

									if w, ok := virtualHostMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
										ls := make([]string, len(w.([]interface{})))
										for i, v := range w.([]interface{}) {
											ls[i] = v.(string)
										}
										virtualHostMatcher.RegexValues = ls
									}

									if v, ok := virtualHostMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

										transformersList := []ves_io_schema_policy.Transformer{}
										for _, j := range v.([]interface{}) {
											transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
										}
										virtualHostMatcher.Transformers = transformersList

									}

								}

							}

							if v, ok := specMapStrToI["waf_action"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								wafAction := &ves_io_schema_policy.WafAction{}
								spec.WafAction = wafAction
								for _, set := range sl {
									wafActionMapStrToI := set.(map[string]interface{})

									actionTypeTypeFound := false

									if v, ok := wafActionMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true
										actionTypeInt := &ves_io_schema_policy.WafAction_AppFirewallDetectionControl{}
										actionTypeInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
										wafAction.ActionType = actionTypeInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
												for i, set := range sl {
													excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
													excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

														excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

													}

												}

											}

											if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
												for i, set := range sl {
													excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
													excludeSignatureContextsMapStrToI := set.(map[string]interface{})

													if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
														excludeSignatureContexts[i].SignatureId = uint32(w.(int))
													}

												}

											}

											if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

												sl := v.([]interface{})
												excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
												actionTypeInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
												for i, set := range sl {
													excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
													excludeViolationContextsMapStrToI := set.(map[string]interface{})

													if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

														excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

													}

												}

											}

										}

									}

									if v, ok := wafActionMapStrToI["none"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_None{}
											actionTypeInt.None = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

									if v, ok := wafActionMapStrToI["waf_in_monitoring_mode"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_WafInMonitoringMode{}
											actionTypeInt.WafInMonitoringMode = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

									if v, ok := wafActionMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !actionTypeTypeFound {

										actionTypeTypeFound = true

										if v.(bool) {
											actionTypeInt := &ves_io_schema_policy.WafAction_WafSkipProcessing{}
											actionTypeInt.WafSkipProcessing = &ves_io_schema.Empty{}
											wafAction.ActionType = actionTypeInt
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

	serverChoiceTypeFound := false

	if v, ok := d.GetOk("any_server"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true

		if v.(bool) {
			serverChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_AnyServer{}
			serverChoiceInt.AnyServer = &ves_io_schema.Empty{}
			updateSpec.ServerChoice = serverChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_ServerName{}

		updateSpec.ServerChoice = serverChoiceInt

		serverChoiceInt.ServerName = v.(string)

	}

	if v, ok := d.GetOk("server_name_matcher"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_ServerNameMatcher{}
		serverChoiceInt.ServerNameMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		updateSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.ExactValues = ls

			}

			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerNameMatcher.RegexValues = ls

			}

		}

	}

	if v, ok := d.GetOk("server_selector"); ok && !serverChoiceTypeFound {

		serverChoiceTypeFound = true
		serverChoiceInt := &ves_io_schema_service_policy.ReplaceSpecType_ServerSelector{}
		serverChoiceInt.ServerSelector = &ves_io_schema.LabelSelectorType{}
		updateSpec.ServerChoice = serverChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				serverChoiceInt.ServerSelector.Expressions = ls

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra ServicePolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_service_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating ServicePolicy: %s", err)
	}

	return resourceVolterraServicePolicyRead(d, meta)
}

func resourceVolterraServicePolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_service_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ServicePolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ServicePolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra ServicePolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_service_policy.ObjectType, namespace, name)
}

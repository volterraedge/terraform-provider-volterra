//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_discovery "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraDiscovery is implementation of Volterra's Discovery resources
func resourceVolterraDiscovery() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraDiscoveryCreate,
		Read:   resourceVolterraDiscoveryRead,
		Update: resourceVolterraDiscoveryUpdate,
		Delete: resourceVolterraDiscoveryDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"cluster_id": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"no_cluster_id": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"discovery_cbip": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cbip_clusters": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cbip_devices": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"admin_credentials": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"password": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"username": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"cbip_certificate_authority": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"skip_server_verification": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"trusted_ca": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cbip_mgmt_ip": {
													Type:     schema.TypeString,
													Required: true,
												},

												"default_all": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"namespace_mapping": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"items": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"partition_regex": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_server_filter": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description_regex": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"discover_disabled_virtual_servers": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"name_regex": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"port_ranges": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"discovery_consul": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"access_info": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"connection_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_server": {
													Type:     schema.TypeString,
													Required: true,
												},

												"tls_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"key_url": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"server_name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"trusted_ca_url": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"http_basic_auth_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"passwd_url": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"user_name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"publish_info": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"publish": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"discovery_k8s": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"access_info": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"connection_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_server": {
													Type:     schema.TypeString,
													Required: true,
												},

												"tls_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"key_url": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"server_name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"trusted_ca_url": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"kubeconfig_url": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"blindfold_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"decryption_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"location": {
																Type:     schema.TypeString,
																Required: true,
															},

															"store_provider": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"clear_secret_info": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"provider": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"url": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"isolated": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"reachable": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"publish_info": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"dns_delegation": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"dns_mode": {
													Type:     schema.TypeString,
													Required: true,
												},

												"subdomain": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"publish": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"namespace": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"publish_fqdns": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"where": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_network": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"virtual_site": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_internet_vip": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"network_type": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ref": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraDiscoveryCreate creates Discovery resource
func resourceVolterraDiscoveryCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_discovery.CreateSpecType{}
	createReq := &ves_io_schema_discovery.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//cluster_identifier_choice

	clusterIdentifierChoiceTypeFound := false

	if v, ok := d.GetOk("cluster_id"); ok && !isIntfNil(v) && !clusterIdentifierChoiceTypeFound {

		clusterIdentifierChoiceTypeFound = true
		clusterIdentifierChoiceInt := &ves_io_schema_discovery.CreateSpecType_ClusterId{}

		createSpec.ClusterIdentifierChoice = clusterIdentifierChoiceInt

		clusterIdentifierChoiceInt.ClusterId = v.(string)

	}

	if v, ok := d.GetOk("no_cluster_id"); ok && !clusterIdentifierChoiceTypeFound {

		clusterIdentifierChoiceTypeFound = true

		if v.(bool) {
			clusterIdentifierChoiceInt := &ves_io_schema_discovery.CreateSpecType_NoClusterId{}
			clusterIdentifierChoiceInt.NoClusterId = &ves_io_schema.Empty{}
			createSpec.ClusterIdentifierChoice = clusterIdentifierChoiceInt
		}

	}

	//discovery_choice

	discoveryChoiceTypeFound := false

	if v, ok := d.GetOk("discovery_cbip"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.CreateSpecType_DiscoveryCbip{}
		discoveryChoiceInt.DiscoveryCbip = &ves_io_schema_discovery.CbipDiscoveryType{}
		createSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cbip_clusters"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cbipClusters := make([]*ves_io_schema_discovery.CbipCluster, len(sl))
					discoveryChoiceInt.DiscoveryCbip.CbipClusters = cbipClusters
					for i, set := range sl {
						if set != nil {
							cbipClusters[i] = &ves_io_schema_discovery.CbipCluster{}
							cbipClustersMapStrToI := set.(map[string]interface{})

							if v, ok := cbipClustersMapStrToI["cbip_devices"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cbipDevices := make([]*ves_io_schema_discovery.CbipDeviceConfig, len(sl))
								cbipClusters[i].CbipDevices = cbipDevices
								for i, set := range sl {
									if set != nil {
										cbipDevices[i] = &ves_io_schema_discovery.CbipDeviceConfig{}
										cbipDevicesMapStrToI := set.(map[string]interface{})

										if v, ok := cbipDevicesMapStrToI["admin_credentials"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											adminCredentials := &ves_io_schema_discovery.CbipAdminCredentials{}
											cbipDevices[i].AdminCredentials = adminCredentials
											for _, set := range sl {
												if set != nil {
													adminCredentialsMapStrToI := set.(map[string]interface{})

													if v, ok := adminCredentialsMapStrToI["password"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														password := &ves_io_schema.SecretType{}
														adminCredentials.Password = password
														for _, set := range sl {
															if set != nil {
																passwordMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := adminCredentialsMapStrToI["username"]; ok && !isIntfNil(w) {
														adminCredentials.Username = w.(string)
													}

												}
											}

										}

										if v, ok := cbipDevicesMapStrToI["cbip_certificate_authority"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cbipCertificateAuthority := &ves_io_schema_discovery.CbipCertificateAuthority{}
											cbipDevices[i].CbipCertificateAuthority = cbipCertificateAuthority
											for _, set := range sl {
												if set != nil {
													cbipCertificateAuthorityMapStrToI := set.(map[string]interface{})

													serverValidationChoiceTypeFound := false

													if v, ok := cbipCertificateAuthorityMapStrToI["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

														serverValidationChoiceTypeFound = true

														if v.(bool) {
															serverValidationChoiceInt := &ves_io_schema_discovery.CbipCertificateAuthority_SkipServerVerification{}
															serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
															cbipCertificateAuthority.ServerValidationChoice = serverValidationChoiceInt
														}

													}

													if v, ok := cbipCertificateAuthorityMapStrToI["trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

														serverValidationChoiceTypeFound = true
														serverValidationChoiceInt := &ves_io_schema_discovery.CbipCertificateAuthority_TrustedCa{}
														serverValidationChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														cbipCertificateAuthority.ServerValidationChoice = serverValidationChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := cbipDevicesMapStrToI["cbip_mgmt_ip"]; ok && !isIntfNil(w) {
											cbipDevices[i].CbipMgmtIp = w.(string)
										}

										namespaceMappingChoiceTypeFound := false

										if v, ok := cbipDevicesMapStrToI["default_all"]; ok && !isIntfNil(v) && !namespaceMappingChoiceTypeFound {

											namespaceMappingChoiceTypeFound = true

											if v.(bool) {
												namespaceMappingChoiceInt := &ves_io_schema_discovery.CbipDeviceConfig_DefaultAll{}
												namespaceMappingChoiceInt.DefaultAll = &ves_io_schema.Empty{}
												cbipDevices[i].NamespaceMappingChoice = namespaceMappingChoiceInt
											}

										}

										if v, ok := cbipDevicesMapStrToI["namespace_mapping"]; ok && !isIntfNil(v) && !namespaceMappingChoiceTypeFound {

											namespaceMappingChoiceTypeFound = true
											namespaceMappingChoiceInt := &ves_io_schema_discovery.CbipDeviceConfig_NamespaceMapping{}
											namespaceMappingChoiceInt.NamespaceMapping = &ves_io_schema_discovery.NamespaceMapping{}
											cbipDevices[i].NamespaceMappingChoice = namespaceMappingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["items"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														items := make([]*ves_io_schema_discovery.NamespaceMappingItem, len(sl))
														namespaceMappingChoiceInt.NamespaceMapping.Items = items
														for i, set := range sl {
															if set != nil {
																items[i] = &ves_io_schema_discovery.NamespaceMappingItem{}
																itemsMapStrToI := set.(map[string]interface{})

																if w, ok := itemsMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	items[i].Namespace = w.(string)
																}

																if w, ok := itemsMapStrToI["partition_regex"]; ok && !isIntfNil(w) {
																	items[i].PartitionRegex = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := cbipDevicesMapStrToI["virtual_server_filter"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualServerFilter := &ves_io_schema_discovery.VirtualServerFilter{}
											cbipDevices[i].VirtualServerFilter = virtualServerFilter
											for _, set := range sl {
												if set != nil {
													virtualServerFilterMapStrToI := set.(map[string]interface{})

													if w, ok := virtualServerFilterMapStrToI["description_regex"]; ok && !isIntfNil(w) {
														virtualServerFilter.DescriptionRegex = w.(string)
													}

													if w, ok := virtualServerFilterMapStrToI["discover_disabled_virtual_servers"]; ok && !isIntfNil(w) {
														virtualServerFilter.DiscoverDisabledVirtualServers = w.(bool)
													}

													if w, ok := virtualServerFilterMapStrToI["name_regex"]; ok && !isIntfNil(w) {
														virtualServerFilter.NameRegex = w.(string)
													}

													if w, ok := virtualServerFilterMapStrToI["port_ranges"]; ok && !isIntfNil(w) {
														virtualServerFilter.PortRanges = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := cbipClustersMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								cbipClusters[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("discovery_consul"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.CreateSpecType_DiscoveryConsul{}
		discoveryChoiceInt.DiscoveryConsul = &ves_io_schema_discovery.ConsulDiscoveryType{}
		createSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["access_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					accessInfo := &ves_io_schema_discovery.ConsulAccessInfo{}
					discoveryChoiceInt.DiscoveryConsul.AccessInfo = accessInfo
					for _, set := range sl {
						if set != nil {
							accessInfoMapStrToI := set.(map[string]interface{})

							if v, ok := accessInfoMapStrToI["connection_info"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connectionInfo := &ves_io_schema_discovery.RestConfigType{}
								accessInfo.ConnectionInfo = connectionInfo
								for _, set := range sl {
									if set != nil {
										connectionInfoMapStrToI := set.(map[string]interface{})

										if w, ok := connectionInfoMapStrToI["api_server"]; ok && !isIntfNil(w) {
											connectionInfo.ApiServer = w.(string)
										}

										if v, ok := connectionInfoMapStrToI["tls_info"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsInfo := &ves_io_schema_discovery.TLSClientConfigType{}
											connectionInfo.TlsInfo = tlsInfo
											for _, set := range sl {
												if set != nil {
													tlsInfoMapStrToI := set.(map[string]interface{})

													if w, ok := tlsInfoMapStrToI["certificate"]; ok && !isIntfNil(w) {
														tlsInfo.Certificate = w.(string)
													}

													if v, ok := tlsInfoMapStrToI["key_url"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														keyUrl := &ves_io_schema.SecretType{}
														tlsInfo.KeyUrl = keyUrl
														for _, set := range sl {
															if set != nil {
																keyUrlMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := tlsInfoMapStrToI["server_name"]; ok && !isIntfNil(w) {
														tlsInfo.ServerName = w.(string)
													}

													if w, ok := tlsInfoMapStrToI["trusted_ca_url"]; ok && !isIntfNil(w) {
														tlsInfo.TrustedCaUrl = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := accessInfoMapStrToI["http_basic_auth_info"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								httpBasicAuthInfo := &ves_io_schema_discovery.ConsulHttpBasicAuthInfoType{}
								accessInfo.HttpBasicAuthInfo = httpBasicAuthInfo
								for _, set := range sl {
									if set != nil {
										httpBasicAuthInfoMapStrToI := set.(map[string]interface{})

										if v, ok := httpBasicAuthInfoMapStrToI["passwd_url"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											passwdUrl := &ves_io_schema.SecretType{}
											httpBasicAuthInfo.PasswdUrl = passwdUrl
											for _, set := range sl {
												if set != nil {
													passwdUrlMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := passwdUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														passwdUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := passwdUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														passwdUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := httpBasicAuthInfoMapStrToI["user_name"]; ok && !isIntfNil(w) {
											httpBasicAuthInfo.UserName = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["publish_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publishInfo := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType{}
					discoveryChoiceInt.DiscoveryConsul.PublishInfo = publishInfo
					for _, set := range sl {
						if set != nil {
							publishInfoMapStrToI := set.(map[string]interface{})

							publishChoiceTypeFound := false

							if v, ok := publishInfoMapStrToI["disable"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType_Disable{}
									publishChoiceInt.Disable = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

							if v, ok := publishInfoMapStrToI["publish"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType_Publish{}
									publishChoiceInt.Publish = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("discovery_k8s"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.CreateSpecType_DiscoveryK8S{}
		discoveryChoiceInt.DiscoveryK8S = &ves_io_schema_discovery.K8SDiscoveryType{}
		createSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["access_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					accessInfo := &ves_io_schema_discovery.K8SAccessInfo{}
					discoveryChoiceInt.DiscoveryK8S.AccessInfo = accessInfo
					for _, set := range sl {
						if set != nil {
							accessInfoMapStrToI := set.(map[string]interface{})

							configTypeTypeFound := false

							if v, ok := accessInfoMapStrToI["connection_info"]; ok && !isIntfNil(v) && !configTypeTypeFound {

								configTypeTypeFound = true
								configTypeInt := &ves_io_schema_discovery.K8SAccessInfo_ConnectionInfo{}
								configTypeInt.ConnectionInfo = &ves_io_schema_discovery.RestConfigType{}
								accessInfo.ConfigType = configTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_server"]; ok && !isIntfNil(v) {

											configTypeInt.ConnectionInfo.ApiServer = v.(string)

										}

										if v, ok := cs["tls_info"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsInfo := &ves_io_schema_discovery.TLSClientConfigType{}
											configTypeInt.ConnectionInfo.TlsInfo = tlsInfo
											for _, set := range sl {
												if set != nil {
													tlsInfoMapStrToI := set.(map[string]interface{})

													if w, ok := tlsInfoMapStrToI["certificate"]; ok && !isIntfNil(w) {
														tlsInfo.Certificate = w.(string)
													}

													if v, ok := tlsInfoMapStrToI["key_url"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														keyUrl := &ves_io_schema.SecretType{}
														tlsInfo.KeyUrl = keyUrl
														for _, set := range sl {
															if set != nil {
																keyUrlMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := tlsInfoMapStrToI["server_name"]; ok && !isIntfNil(w) {
														tlsInfo.ServerName = w.(string)
													}

													if w, ok := tlsInfoMapStrToI["trusted_ca_url"]; ok && !isIntfNil(w) {
														tlsInfo.TrustedCaUrl = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := accessInfoMapStrToI["kubeconfig_url"]; ok && !isIntfNil(v) && !configTypeTypeFound {

								configTypeTypeFound = true
								configTypeInt := &ves_io_schema_discovery.K8SAccessInfo_KubeconfigUrl{}
								configTypeInt.KubeconfigUrl = &ves_io_schema.SecretType{}
								accessInfo.ConfigType = configTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											configTypeInt.KubeconfigUrl.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											configTypeInt.KubeconfigUrl.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							k8SPodNetworkChoiceTypeFound := false

							if v, ok := accessInfoMapStrToI["isolated"]; ok && !isIntfNil(v) && !k8SPodNetworkChoiceTypeFound {

								k8SPodNetworkChoiceTypeFound = true

								if v.(bool) {
									k8SPodNetworkChoiceInt := &ves_io_schema_discovery.K8SAccessInfo_Isolated{}
									k8SPodNetworkChoiceInt.Isolated = &ves_io_schema.Empty{}
									accessInfo.K8SPodNetworkChoice = k8SPodNetworkChoiceInt
								}

							}

							if v, ok := accessInfoMapStrToI["reachable"]; ok && !isIntfNil(v) && !k8SPodNetworkChoiceTypeFound {

								k8SPodNetworkChoiceTypeFound = true

								if v.(bool) {
									k8SPodNetworkChoiceInt := &ves_io_schema_discovery.K8SAccessInfo_Reachable{}
									k8SPodNetworkChoiceInt.Reachable = &ves_io_schema.Empty{}
									accessInfo.K8SPodNetworkChoice = k8SPodNetworkChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["publish_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publishInfo := &ves_io_schema_discovery.K8SVipDiscoveryInfoType{}
					discoveryChoiceInt.DiscoveryK8S.PublishInfo = publishInfo
					for _, set := range sl {
						if set != nil {
							publishInfoMapStrToI := set.(map[string]interface{})

							publishChoiceTypeFound := false

							if v, ok := publishInfoMapStrToI["disable"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_Disable{}
									publishChoiceInt.Disable = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

							if v, ok := publishInfoMapStrToI["dns_delegation"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true
								publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_DnsDelegation{}
								publishChoiceInt.DnsDelegation = &ves_io_schema_discovery.K8SDelegationType{}
								publishInfo.PublishChoice = publishChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["dns_mode"]; ok && !isIntfNil(v) {

											publishChoiceInt.DnsDelegation.DnsMode = ves_io_schema_discovery.K8SDNSMode(ves_io_schema_discovery.K8SDNSMode_value[v.(string)])

										}

										if v, ok := cs["subdomain"]; ok && !isIntfNil(v) {

											publishChoiceInt.DnsDelegation.Subdomain = v.(string)

										}

									}
								}

							}

							if v, ok := publishInfoMapStrToI["publish"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true
								publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_Publish{}
								publishChoiceInt.Publish = &ves_io_schema_discovery.K8SPublishType{}
								publishInfo.PublishChoice = publishChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											publishChoiceInt.Publish.Namespace = v.(string)

										}

									}
								}

							}

							if v, ok := publishInfoMapStrToI["publish_fqdns"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_PublishFqdns{}
									publishChoiceInt.PublishFqdns = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	//where
	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.NetworkSiteRefSelector{}
		createSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualNetwork{}
					refOrSelectorInt.VirtualNetwork = &ves_io_schema.NetworkRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualNetwork.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra Discovery object with struct: %+v", createReq)

	createDiscoveryResp, err := client.CreateObject(context.Background(), ves_io_schema_discovery.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating Discovery: %s", err)
	}
	d.SetId(createDiscoveryResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraDiscoveryRead(d, meta)
}

func resourceVolterraDiscoveryRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_discovery.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Discovery %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Discovery %q: %s", d.Id(), err)
	}
	return setDiscoveryFields(client, d, resp)
}

func setDiscoveryFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraDiscoveryUpdate updates Discovery resource
func resourceVolterraDiscoveryUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_discovery.ReplaceSpecType{}
	updateReq := &ves_io_schema_discovery.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	clusterIdentifierChoiceTypeFound := false

	if v, ok := d.GetOk("cluster_id"); ok && !isIntfNil(v) && !clusterIdentifierChoiceTypeFound {

		clusterIdentifierChoiceTypeFound = true
		clusterIdentifierChoiceInt := &ves_io_schema_discovery.ReplaceSpecType_ClusterId{}

		updateSpec.ClusterIdentifierChoice = clusterIdentifierChoiceInt

		clusterIdentifierChoiceInt.ClusterId = v.(string)

	}

	if v, ok := d.GetOk("no_cluster_id"); ok && !clusterIdentifierChoiceTypeFound {

		clusterIdentifierChoiceTypeFound = true

		if v.(bool) {
			clusterIdentifierChoiceInt := &ves_io_schema_discovery.ReplaceSpecType_NoClusterId{}
			clusterIdentifierChoiceInt.NoClusterId = &ves_io_schema.Empty{}
			updateSpec.ClusterIdentifierChoice = clusterIdentifierChoiceInt
		}

	}

	discoveryChoiceTypeFound := false

	if v, ok := d.GetOk("discovery_cbip"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.ReplaceSpecType_DiscoveryCbip{}
		discoveryChoiceInt.DiscoveryCbip = &ves_io_schema_discovery.CbipDiscoveryType{}
		updateSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cbip_clusters"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cbipClusters := make([]*ves_io_schema_discovery.CbipCluster, len(sl))
					discoveryChoiceInt.DiscoveryCbip.CbipClusters = cbipClusters
					for i, set := range sl {
						if set != nil {
							cbipClusters[i] = &ves_io_schema_discovery.CbipCluster{}
							cbipClustersMapStrToI := set.(map[string]interface{})

							if v, ok := cbipClustersMapStrToI["cbip_devices"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cbipDevices := make([]*ves_io_schema_discovery.CbipDeviceConfig, len(sl))
								cbipClusters[i].CbipDevices = cbipDevices
								for i, set := range sl {
									if set != nil {
										cbipDevices[i] = &ves_io_schema_discovery.CbipDeviceConfig{}
										cbipDevicesMapStrToI := set.(map[string]interface{})

										if v, ok := cbipDevicesMapStrToI["admin_credentials"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											adminCredentials := &ves_io_schema_discovery.CbipAdminCredentials{}
											cbipDevices[i].AdminCredentials = adminCredentials
											for _, set := range sl {
												if set != nil {
													adminCredentialsMapStrToI := set.(map[string]interface{})

													if v, ok := adminCredentialsMapStrToI["password"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														password := &ves_io_schema.SecretType{}
														adminCredentials.Password = password
														for _, set := range sl {
															if set != nil {
																passwordMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := passwordMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := passwordMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	password.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := adminCredentialsMapStrToI["username"]; ok && !isIntfNil(w) {
														adminCredentials.Username = w.(string)
													}

												}
											}

										}

										if v, ok := cbipDevicesMapStrToI["cbip_certificate_authority"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cbipCertificateAuthority := &ves_io_schema_discovery.CbipCertificateAuthority{}
											cbipDevices[i].CbipCertificateAuthority = cbipCertificateAuthority
											for _, set := range sl {
												if set != nil {
													cbipCertificateAuthorityMapStrToI := set.(map[string]interface{})

													serverValidationChoiceTypeFound := false

													if v, ok := cbipCertificateAuthorityMapStrToI["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

														serverValidationChoiceTypeFound = true

														if v.(bool) {
															serverValidationChoiceInt := &ves_io_schema_discovery.CbipCertificateAuthority_SkipServerVerification{}
															serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
															cbipCertificateAuthority.ServerValidationChoice = serverValidationChoiceInt
														}

													}

													if v, ok := cbipCertificateAuthorityMapStrToI["trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

														serverValidationChoiceTypeFound = true
														serverValidationChoiceInt := &ves_io_schema_discovery.CbipCertificateAuthority_TrustedCa{}
														serverValidationChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														cbipCertificateAuthority.ServerValidationChoice = serverValidationChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	serverValidationChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := cbipDevicesMapStrToI["cbip_mgmt_ip"]; ok && !isIntfNil(w) {
											cbipDevices[i].CbipMgmtIp = w.(string)
										}

										namespaceMappingChoiceTypeFound := false

										if v, ok := cbipDevicesMapStrToI["default_all"]; ok && !isIntfNil(v) && !namespaceMappingChoiceTypeFound {

											namespaceMappingChoiceTypeFound = true

											if v.(bool) {
												namespaceMappingChoiceInt := &ves_io_schema_discovery.CbipDeviceConfig_DefaultAll{}
												namespaceMappingChoiceInt.DefaultAll = &ves_io_schema.Empty{}
												cbipDevices[i].NamespaceMappingChoice = namespaceMappingChoiceInt
											}

										}

										if v, ok := cbipDevicesMapStrToI["namespace_mapping"]; ok && !isIntfNil(v) && !namespaceMappingChoiceTypeFound {

											namespaceMappingChoiceTypeFound = true
											namespaceMappingChoiceInt := &ves_io_schema_discovery.CbipDeviceConfig_NamespaceMapping{}
											namespaceMappingChoiceInt.NamespaceMapping = &ves_io_schema_discovery.NamespaceMapping{}
											cbipDevices[i].NamespaceMappingChoice = namespaceMappingChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["items"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														items := make([]*ves_io_schema_discovery.NamespaceMappingItem, len(sl))
														namespaceMappingChoiceInt.NamespaceMapping.Items = items
														for i, set := range sl {
															if set != nil {
																items[i] = &ves_io_schema_discovery.NamespaceMappingItem{}
																itemsMapStrToI := set.(map[string]interface{})

																if w, ok := itemsMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	items[i].Namespace = w.(string)
																}

																if w, ok := itemsMapStrToI["partition_regex"]; ok && !isIntfNil(w) {
																	items[i].PartitionRegex = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := cbipDevicesMapStrToI["virtual_server_filter"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											virtualServerFilter := &ves_io_schema_discovery.VirtualServerFilter{}
											cbipDevices[i].VirtualServerFilter = virtualServerFilter
											for _, set := range sl {
												if set != nil {
													virtualServerFilterMapStrToI := set.(map[string]interface{})

													if w, ok := virtualServerFilterMapStrToI["description_regex"]; ok && !isIntfNil(w) {
														virtualServerFilter.DescriptionRegex = w.(string)
													}

													if w, ok := virtualServerFilterMapStrToI["discover_disabled_virtual_servers"]; ok && !isIntfNil(w) {
														virtualServerFilter.DiscoverDisabledVirtualServers = w.(bool)
													}

													if w, ok := virtualServerFilterMapStrToI["name_regex"]; ok && !isIntfNil(w) {
														virtualServerFilter.NameRegex = w.(string)
													}

													if w, ok := virtualServerFilterMapStrToI["port_ranges"]; ok && !isIntfNil(w) {
														virtualServerFilter.PortRanges = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := cbipClustersMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								cbipClusters[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("discovery_consul"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.ReplaceSpecType_DiscoveryConsul{}
		discoveryChoiceInt.DiscoveryConsul = &ves_io_schema_discovery.ConsulDiscoveryType{}
		updateSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["access_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					accessInfo := &ves_io_schema_discovery.ConsulAccessInfo{}
					discoveryChoiceInt.DiscoveryConsul.AccessInfo = accessInfo
					for _, set := range sl {
						if set != nil {
							accessInfoMapStrToI := set.(map[string]interface{})

							if v, ok := accessInfoMapStrToI["connection_info"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connectionInfo := &ves_io_schema_discovery.RestConfigType{}
								accessInfo.ConnectionInfo = connectionInfo
								for _, set := range sl {
									if set != nil {
										connectionInfoMapStrToI := set.(map[string]interface{})

										if w, ok := connectionInfoMapStrToI["api_server"]; ok && !isIntfNil(w) {
											connectionInfo.ApiServer = w.(string)
										}

										if v, ok := connectionInfoMapStrToI["tls_info"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsInfo := &ves_io_schema_discovery.TLSClientConfigType{}
											connectionInfo.TlsInfo = tlsInfo
											for _, set := range sl {
												if set != nil {
													tlsInfoMapStrToI := set.(map[string]interface{})

													if w, ok := tlsInfoMapStrToI["certificate"]; ok && !isIntfNil(w) {
														tlsInfo.Certificate = w.(string)
													}

													if v, ok := tlsInfoMapStrToI["key_url"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														keyUrl := &ves_io_schema.SecretType{}
														tlsInfo.KeyUrl = keyUrl
														for _, set := range sl {
															if set != nil {
																keyUrlMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := tlsInfoMapStrToI["server_name"]; ok && !isIntfNil(w) {
														tlsInfo.ServerName = w.(string)
													}

													if w, ok := tlsInfoMapStrToI["trusted_ca_url"]; ok && !isIntfNil(w) {
														tlsInfo.TrustedCaUrl = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := accessInfoMapStrToI["http_basic_auth_info"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								httpBasicAuthInfo := &ves_io_schema_discovery.ConsulHttpBasicAuthInfoType{}
								accessInfo.HttpBasicAuthInfo = httpBasicAuthInfo
								for _, set := range sl {
									if set != nil {
										httpBasicAuthInfoMapStrToI := set.(map[string]interface{})

										if v, ok := httpBasicAuthInfoMapStrToI["passwd_url"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											passwdUrl := &ves_io_schema.SecretType{}
											httpBasicAuthInfo.PasswdUrl = passwdUrl
											for _, set := range sl {
												if set != nil {
													passwdUrlMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := passwdUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														passwdUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := passwdUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														passwdUrl.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := httpBasicAuthInfoMapStrToI["user_name"]; ok && !isIntfNil(w) {
											httpBasicAuthInfo.UserName = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["publish_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publishInfo := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType{}
					discoveryChoiceInt.DiscoveryConsul.PublishInfo = publishInfo
					for _, set := range sl {
						if set != nil {
							publishInfoMapStrToI := set.(map[string]interface{})

							publishChoiceTypeFound := false

							if v, ok := publishInfoMapStrToI["disable"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType_Disable{}
									publishChoiceInt.Disable = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

							if v, ok := publishInfoMapStrToI["publish"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.ConsulVipDiscoveryInfoType_Publish{}
									publishChoiceInt.Publish = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("discovery_k8s"); ok && !isIntfNil(v) && !discoveryChoiceTypeFound {

		discoveryChoiceTypeFound = true
		discoveryChoiceInt := &ves_io_schema_discovery.ReplaceSpecType_DiscoveryK8S{}
		discoveryChoiceInt.DiscoveryK8S = &ves_io_schema_discovery.K8SDiscoveryType{}
		updateSpec.DiscoveryChoice = discoveryChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["access_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					accessInfo := &ves_io_schema_discovery.K8SAccessInfo{}
					discoveryChoiceInt.DiscoveryK8S.AccessInfo = accessInfo
					for _, set := range sl {
						if set != nil {
							accessInfoMapStrToI := set.(map[string]interface{})

							configTypeTypeFound := false

							if v, ok := accessInfoMapStrToI["connection_info"]; ok && !isIntfNil(v) && !configTypeTypeFound {

								configTypeTypeFound = true
								configTypeInt := &ves_io_schema_discovery.K8SAccessInfo_ConnectionInfo{}
								configTypeInt.ConnectionInfo = &ves_io_schema_discovery.RestConfigType{}
								accessInfo.ConfigType = configTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_server"]; ok && !isIntfNil(v) {

											configTypeInt.ConnectionInfo.ApiServer = v.(string)

										}

										if v, ok := cs["tls_info"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsInfo := &ves_io_schema_discovery.TLSClientConfigType{}
											configTypeInt.ConnectionInfo.TlsInfo = tlsInfo
											for _, set := range sl {
												if set != nil {
													tlsInfoMapStrToI := set.(map[string]interface{})

													if w, ok := tlsInfoMapStrToI["certificate"]; ok && !isIntfNil(w) {
														tlsInfo.Certificate = w.(string)
													}

													if v, ok := tlsInfoMapStrToI["key_url"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														keyUrl := &ves_io_schema.SecretType{}
														tlsInfo.KeyUrl = keyUrl
														for _, set := range sl {
															if set != nil {
																keyUrlMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := keyUrlMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := keyUrlMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	keyUrl.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

													if w, ok := tlsInfoMapStrToI["server_name"]; ok && !isIntfNil(w) {
														tlsInfo.ServerName = w.(string)
													}

													if w, ok := tlsInfoMapStrToI["trusted_ca_url"]; ok && !isIntfNil(w) {
														tlsInfo.TrustedCaUrl = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := accessInfoMapStrToI["kubeconfig_url"]; ok && !isIntfNil(v) && !configTypeTypeFound {

								configTypeTypeFound = true
								configTypeInt := &ves_io_schema_discovery.K8SAccessInfo_KubeconfigUrl{}
								configTypeInt.KubeconfigUrl = &ves_io_schema.SecretType{}
								accessInfo.ConfigType = configTypeInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										secretInfoOneofTypeFound := false

										if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
											secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
											configTypeInt.KubeconfigUrl.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}
											}

										}

										if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

											secretInfoOneofTypeFound = true
											secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
											secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
											configTypeInt.KubeconfigUrl.SecretInfoOneof = secretInfoOneofInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}
											}

										}

									}
								}

							}

							k8SPodNetworkChoiceTypeFound := false

							if v, ok := accessInfoMapStrToI["isolated"]; ok && !isIntfNil(v) && !k8SPodNetworkChoiceTypeFound {

								k8SPodNetworkChoiceTypeFound = true

								if v.(bool) {
									k8SPodNetworkChoiceInt := &ves_io_schema_discovery.K8SAccessInfo_Isolated{}
									k8SPodNetworkChoiceInt.Isolated = &ves_io_schema.Empty{}
									accessInfo.K8SPodNetworkChoice = k8SPodNetworkChoiceInt
								}

							}

							if v, ok := accessInfoMapStrToI["reachable"]; ok && !isIntfNil(v) && !k8SPodNetworkChoiceTypeFound {

								k8SPodNetworkChoiceTypeFound = true

								if v.(bool) {
									k8SPodNetworkChoiceInt := &ves_io_schema_discovery.K8SAccessInfo_Reachable{}
									k8SPodNetworkChoiceInt.Reachable = &ves_io_schema.Empty{}
									accessInfo.K8SPodNetworkChoice = k8SPodNetworkChoiceInt
								}

							}

						}
					}

				}

				if v, ok := cs["publish_info"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publishInfo := &ves_io_schema_discovery.K8SVipDiscoveryInfoType{}
					discoveryChoiceInt.DiscoveryK8S.PublishInfo = publishInfo
					for _, set := range sl {
						if set != nil {
							publishInfoMapStrToI := set.(map[string]interface{})

							publishChoiceTypeFound := false

							if v, ok := publishInfoMapStrToI["disable"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_Disable{}
									publishChoiceInt.Disable = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

							if v, ok := publishInfoMapStrToI["dns_delegation"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true
								publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_DnsDelegation{}
								publishChoiceInt.DnsDelegation = &ves_io_schema_discovery.K8SDelegationType{}
								publishInfo.PublishChoice = publishChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["dns_mode"]; ok && !isIntfNil(v) {

											publishChoiceInt.DnsDelegation.DnsMode = ves_io_schema_discovery.K8SDNSMode(ves_io_schema_discovery.K8SDNSMode_value[v.(string)])

										}

										if v, ok := cs["subdomain"]; ok && !isIntfNil(v) {

											publishChoiceInt.DnsDelegation.Subdomain = v.(string)

										}

									}
								}

							}

							if v, ok := publishInfoMapStrToI["publish"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true
								publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_Publish{}
								publishChoiceInt.Publish = &ves_io_schema_discovery.K8SPublishType{}
								publishInfo.PublishChoice = publishChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											publishChoiceInt.Publish.Namespace = v.(string)

										}

									}
								}

							}

							if v, ok := publishInfoMapStrToI["publish_fqdns"]; ok && !isIntfNil(v) && !publishChoiceTypeFound {

								publishChoiceTypeFound = true

								if v.(bool) {
									publishChoiceInt := &ves_io_schema_discovery.K8SVipDiscoveryInfoType_PublishFqdns{}
									publishChoiceInt.PublishFqdns = &ves_io_schema.Empty{}
									publishInfo.PublishChoice = publishChoiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("where"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		where := &ves_io_schema.NetworkSiteRefSelector{}
		updateSpec.Where = where
		for _, set := range sl {
			if set != nil {
				whereMapStrToI := set.(map[string]interface{})

				refOrSelectorTypeFound := false

				if v, ok := whereMapStrToI["site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_Site{}
					refOrSelectorInt.Site = &ves_io_schema.SiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.SiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.Site.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.Site.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.Site.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualNetwork{}
					refOrSelectorInt.VirtualNetwork = &ves_io_schema.NetworkRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualNetwork.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_network"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := whereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !refOrSelectorTypeFound {

					refOrSelectorTypeFound = true
					refOrSelectorInt := &ves_io_schema.NetworkSiteRefSelector_VirtualSite{}
					refOrSelectorInt.VirtualSite = &ves_io_schema.VSiteRefType{}
					where.RefOrSelector = refOrSelectorInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							internetVipChoiceTypeFound := false

							if v, ok := cs["disable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_DisableInternetVip{}
									internetVipChoiceInt.DisableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["enable_internet_vip"]; ok && !isIntfNil(v) && !internetVipChoiceTypeFound {

								internetVipChoiceTypeFound = true

								if v.(bool) {
									internetVipChoiceInt := &ves_io_schema.VSiteRefType_EnableInternetVip{}
									internetVipChoiceInt.EnableInternetVip = &ves_io_schema.Empty{}
									refOrSelectorInt.VirtualSite.InternetVipChoice = internetVipChoiceInt
								}

							}

							if v, ok := cs["network_type"]; ok && !isIntfNil(v) {

								refOrSelectorInt.VirtualSite.NetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

							}

							if v, ok := cs["ref"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								refIntNew := make([]*ves_io_schema.ObjectRefType, len(sl))
								refOrSelectorInt.VirtualSite.Ref = refIntNew
								for i, ps := range sl {

									rMapToStrVal := ps.(map[string]interface{})
									refIntNew[i] = &ves_io_schema.ObjectRefType{}

									refIntNew[i].Kind = "virtual_site"

									if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
										refIntNew[i].Name = v.(string)
									}

									if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										refIntNew[i].Namespace = v.(string)
									}

									if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										refIntNew[i].Tenant = v.(string)
									}

									if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
										refIntNew[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra Discovery obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_discovery.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating Discovery: %s", err)
	}

	return resourceVolterraDiscoveryRead(d, meta)
}

func resourceVolterraDiscoveryDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_discovery.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] Discovery %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra Discovery before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra Discovery obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_discovery.ObjectType, namespace, name, opts...)
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_cdn_cache_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cdn_cache_rule"
)

// resourceVolterraCdnCacheRule is implementation of Volterra's CdnCacheRule resources
func resourceVolterraCdnCacheRule() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCdnCacheRuleCreate,
		Read:   resourceVolterraCdnCacheRuleRead,
		Update: resourceVolterraCdnCacheRuleUpdate,
		Delete: resourceVolterraCdnCacheRuleDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"cache_rules": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_bypass": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"eligible_for_cache": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"scheme_proxy_host_request_uri": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"cache_ttl": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ignore_response_cookie": {
													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},

									"scheme_proxy_host_uri": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_override": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"cache_ttl": {
													Type:     schema.TypeString,
													Required: true,
												},

												"ignore_response_cookie": {
													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"rule_expression_list": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_rule_expression": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cache_headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"operator": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cookie_matcher": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"operator": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"path_match": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"operator": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"query_parameters": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"operator": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"contains": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_contain": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_end_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_equal": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"does_not_start_with": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"endswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"equals": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"match_regex": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"startswith": {

																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"expression_name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"rule_name": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCdnCacheRuleCreate creates CdnCacheRule resource
func resourceVolterraCdnCacheRuleCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_cdn_cache_rule.CreateSpecType{}
	createReq := &ves_io_schema_cdn_cache_rule.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//cache_rules
	if v, ok := d.GetOk("cache_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cacheRules := &ves_io_schema_cdn_cache_rule.CDNCacheRule{}
		createSpec.CacheRules = cacheRules
		for _, set := range sl {
			if set != nil {
				cacheRulesMapStrToI := set.(map[string]interface{})

				cacheActionsTypeFound := false

				if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true

					if v.(bool) {
						cacheActionsInt := &ves_io_schema_cdn_cache_rule.CDNCacheRule_CacheBypass{}
						cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
						cacheRules.CacheActions = cacheActionsInt
					}

				}

				if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_cdn_cache_rule.CDNCacheRule_EligibleForCache{}
					cacheActionsInt.EligibleForCache = &ves_io_schema_cdn_cache_rule.CacheEligibleOptions{}
					cacheRules.CacheActions = cacheActionsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							eligibleForCacheTypeFound := false

							if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

								eligibleForCacheTypeFound = true
								eligibleForCacheInt := &ves_io_schema_cdn_cache_rule.CacheEligibleOptions_SchemeProxyHostRequestUri{}
								eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_cdn_cache_rule.CacheTTLEnableProps{}
								cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

										}

										if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

										}

										if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

										}

									}
								}

							}

							if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

								eligibleForCacheTypeFound = true
								eligibleForCacheInt := &ves_io_schema_cdn_cache_rule.CacheEligibleOptions_SchemeProxyHostUri{}
								eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_cdn_cache_rule.CacheTTLEnableProps{}
								cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

										}

										if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

										}

										if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleExpressionList := make([]*ves_io_schema_cdn_cache_rule.CDNCacheRuleExpressionList, len(sl))
					cacheRules.RuleExpressionList = ruleExpressionList
					for i, set := range sl {
						if set != nil {
							ruleExpressionList[i] = &ves_io_schema_cdn_cache_rule.CDNCacheRuleExpressionList{}
							ruleExpressionListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cacheRuleExpression := make([]*ves_io_schema_cdn_cache_rule.CDNCacheRuleExpression, len(sl))
								ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
								for i, set := range sl {
									if set != nil {
										cacheRuleExpression[i] = &ves_io_schema_cdn_cache_rule.CDNCacheRuleExpression{}
										cacheRuleExpressionMapStrToI := set.(map[string]interface{})

										if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cacheHeaders := make([]*ves_io_schema_cdn_cache_rule.CacheHeaderMatcherType, len(sl))
											cacheRuleExpression[i].CacheHeaders = cacheHeaders
											for i, set := range sl {
												if set != nil {
													cacheHeaders[i] = &ves_io_schema_cdn_cache_rule.CacheHeaderMatcherType{}
													cacheHeadersMapStrToI := set.(map[string]interface{})

													if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

														cacheHeaders[i].Name = ves_io_schema_cdn_cache_rule.HeaderOptions(ves_io_schema_cdn_cache_rule.HeaderOptions_value[v.(string)])

													}

													if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														cacheHeaders[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatcher := make([]*ves_io_schema_cdn_cache_rule.CacheCookieMatcherType, len(sl))
											cacheRuleExpression[i].CookieMatcher = cookieMatcher
											for i, set := range sl {
												if set != nil {
													cookieMatcher[i] = &ves_io_schema_cdn_cache_rule.CacheCookieMatcherType{}
													cookieMatcherMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatcher[i].Name = w.(string)
													}

													if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														cookieMatcher[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											pathMatch := &ves_io_schema_cdn_cache_rule.CDNPathMatcherType{}
											cacheRuleExpression[i].PathMatch = pathMatch
											for _, set := range sl {
												if set != nil {
													pathMatchMapStrToI := set.(map[string]interface{})

													if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														pathMatch.Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParameters := make([]*ves_io_schema_cdn_cache_rule.CacheQueryParameterMatcherType, len(sl))
											cacheRuleExpression[i].QueryParameters = queryParameters
											for i, set := range sl {
												if set != nil {
													queryParameters[i] = &ves_io_schema_cdn_cache_rule.CacheQueryParameterMatcherType{}
													queryParametersMapStrToI := set.(map[string]interface{})

													if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParameters[i].Key = w.(string)
													}

													if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														queryParameters[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
								ruleExpressionList[i].ExpressionName = w.(string)
							}

						}
					}

				}

				if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
					cacheRules.RuleName = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra CdnCacheRule object with struct: %+v", createReq)

	createCdnCacheRuleResp, err := client.CreateObject(context.Background(), ves_io_schema_cdn_cache_rule.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CdnCacheRule: %s", err)
	}
	d.SetId(createCdnCacheRuleResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCdnCacheRuleRead(d, meta)
}

func resourceVolterraCdnCacheRuleRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_cdn_cache_rule.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnCacheRule %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnCacheRule %q: %s", d.Id(), err)
	}
	return setCdnCacheRuleFields(client, d, resp)
}

func setCdnCacheRuleFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCdnCacheRuleUpdate updates CdnCacheRule resource
func resourceVolterraCdnCacheRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_cdn_cache_rule.ReplaceSpecType{}
	updateReq := &ves_io_schema_cdn_cache_rule.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("cache_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		cacheRules := &ves_io_schema_cdn_cache_rule.CDNCacheRule{}
		updateSpec.CacheRules = cacheRules
		for _, set := range sl {
			if set != nil {
				cacheRulesMapStrToI := set.(map[string]interface{})

				cacheActionsTypeFound := false

				if v, ok := cacheRulesMapStrToI["cache_bypass"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true

					if v.(bool) {
						cacheActionsInt := &ves_io_schema_cdn_cache_rule.CDNCacheRule_CacheBypass{}
						cacheActionsInt.CacheBypass = &ves_io_schema.Empty{}
						cacheRules.CacheActions = cacheActionsInt
					}

				}

				if v, ok := cacheRulesMapStrToI["eligible_for_cache"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_cdn_cache_rule.CDNCacheRule_EligibleForCache{}
					cacheActionsInt.EligibleForCache = &ves_io_schema_cdn_cache_rule.CacheEligibleOptions{}
					cacheRules.CacheActions = cacheActionsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							eligibleForCacheTypeFound := false

							if v, ok := cs["scheme_proxy_host_request_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

								eligibleForCacheTypeFound = true
								eligibleForCacheInt := &ves_io_schema_cdn_cache_rule.CacheEligibleOptions_SchemeProxyHostRequestUri{}
								eligibleForCacheInt.SchemeProxyHostRequestUri = &ves_io_schema_cdn_cache_rule.CacheTTLEnableProps{}
								cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.CacheOverride = v.(bool)

										}

										if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.CacheTtl = v.(string)

										}

										if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostRequestUri.IgnoreResponseCookie = v.(bool)

										}

									}
								}

							}

							if v, ok := cs["scheme_proxy_host_uri"]; ok && !isIntfNil(v) && !eligibleForCacheTypeFound {

								eligibleForCacheTypeFound = true
								eligibleForCacheInt := &ves_io_schema_cdn_cache_rule.CacheEligibleOptions_SchemeProxyHostUri{}
								eligibleForCacheInt.SchemeProxyHostUri = &ves_io_schema_cdn_cache_rule.CacheTTLEnableProps{}
								cacheActionsInt.EligibleForCache.EligibleForCache = eligibleForCacheInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["cache_override"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.CacheOverride = v.(bool)

										}

										if v, ok := cs["cache_ttl"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.CacheTtl = v.(string)

										}

										if v, ok := cs["ignore_response_cookie"]; ok && !isIntfNil(v) {

											eligibleForCacheInt.SchemeProxyHostUri.IgnoreResponseCookie = v.(bool)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cacheRulesMapStrToI["rule_expression_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleExpressionList := make([]*ves_io_schema_cdn_cache_rule.CDNCacheRuleExpressionList, len(sl))
					cacheRules.RuleExpressionList = ruleExpressionList
					for i, set := range sl {
						if set != nil {
							ruleExpressionList[i] = &ves_io_schema_cdn_cache_rule.CDNCacheRuleExpressionList{}
							ruleExpressionListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleExpressionListMapStrToI["cache_rule_expression"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								cacheRuleExpression := make([]*ves_io_schema_cdn_cache_rule.CDNCacheRuleExpression, len(sl))
								ruleExpressionList[i].CacheRuleExpression = cacheRuleExpression
								for i, set := range sl {
									if set != nil {
										cacheRuleExpression[i] = &ves_io_schema_cdn_cache_rule.CDNCacheRuleExpression{}
										cacheRuleExpressionMapStrToI := set.(map[string]interface{})

										if v, ok := cacheRuleExpressionMapStrToI["cache_headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cacheHeaders := make([]*ves_io_schema_cdn_cache_rule.CacheHeaderMatcherType, len(sl))
											cacheRuleExpression[i].CacheHeaders = cacheHeaders
											for i, set := range sl {
												if set != nil {
													cacheHeaders[i] = &ves_io_schema_cdn_cache_rule.CacheHeaderMatcherType{}
													cacheHeadersMapStrToI := set.(map[string]interface{})

													if v, ok := cacheHeadersMapStrToI["name"]; ok && !isIntfNil(v) {

														cacheHeaders[i].Name = ves_io_schema_cdn_cache_rule.HeaderOptions(ves_io_schema_cdn_cache_rule.HeaderOptions_value[v.(string)])

													}

													if v, ok := cacheHeadersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														cacheHeaders[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["cookie_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatcher := make([]*ves_io_schema_cdn_cache_rule.CacheCookieMatcherType, len(sl))
											cacheRuleExpression[i].CookieMatcher = cookieMatcher
											for i, set := range sl {
												if set != nil {
													cookieMatcher[i] = &ves_io_schema_cdn_cache_rule.CacheCookieMatcherType{}
													cookieMatcherMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatcherMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatcher[i].Name = w.(string)
													}

													if v, ok := cookieMatcherMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														cookieMatcher[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["path_match"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											pathMatch := &ves_io_schema_cdn_cache_rule.CDNPathMatcherType{}
											cacheRuleExpression[i].PathMatch = pathMatch
											for _, set := range sl {
												if set != nil {
													pathMatchMapStrToI := set.(map[string]interface{})

													if v, ok := pathMatchMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														pathMatch.Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cacheRuleExpressionMapStrToI["query_parameters"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParameters := make([]*ves_io_schema_cdn_cache_rule.CacheQueryParameterMatcherType, len(sl))
											cacheRuleExpression[i].QueryParameters = queryParameters
											for i, set := range sl {
												if set != nil {
													queryParameters[i] = &ves_io_schema_cdn_cache_rule.CacheQueryParameterMatcherType{}
													queryParametersMapStrToI := set.(map[string]interface{})

													if w, ok := queryParametersMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParameters[i].Key = w.(string)
													}

													if v, ok := queryParametersMapStrToI["operator"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														operator := &ves_io_schema_cdn_cache_rule.CacheOperator{}
														queryParameters[i].Operator = operator
														for _, set := range sl {
															if set != nil {
																operatorMapStrToI := set.(map[string]interface{})

																cacheOperatorTypeFound := false

																if v, ok := operatorMapStrToI["contains"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Contains{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Contains = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_contain"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotContain{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotContain = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_end_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEndWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEndWith = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_equal"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotEqual{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotEqual = v.(string)

																}

																if v, ok := operatorMapStrToI["does_not_start_with"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_DoesNotStartWith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.DoesNotStartWith = v.(string)

																}

																if v, ok := operatorMapStrToI["endswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Endswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Endswith = v.(string)

																}

																if v, ok := operatorMapStrToI["equals"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Equals{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Equals = v.(string)

																}

																if v, ok := operatorMapStrToI["match_regex"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_MatchRegex{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.MatchRegex = v.(string)

																}

																if v, ok := operatorMapStrToI["startswith"]; ok && !isIntfNil(v) && !cacheOperatorTypeFound {

																	cacheOperatorTypeFound = true
																	cacheOperatorInt := &ves_io_schema_cdn_cache_rule.CacheOperator_Startswith{}

																	operator.CacheOperator = cacheOperatorInt

																	cacheOperatorInt.Startswith = v.(string)

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if w, ok := ruleExpressionListMapStrToI["expression_name"]; ok && !isIntfNil(w) {
								ruleExpressionList[i].ExpressionName = w.(string)
							}

						}
					}

				}

				if w, ok := cacheRulesMapStrToI["rule_name"]; ok && !isIntfNil(w) {
					cacheRules.RuleName = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra CdnCacheRule obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_cdn_cache_rule.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CdnCacheRule: %s", err)
	}

	return resourceVolterraCdnCacheRuleRead(d, meta)
}

func resourceVolterraCdnCacheRuleDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_cdn_cache_rule.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnCacheRule %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnCacheRule before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CdnCacheRule obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_cdn_cache_rule.ObjectType, namespace, name, opts...)
}

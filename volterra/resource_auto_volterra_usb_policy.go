//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_usb_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy"
)

// resourceVolterraUsbPolicy is implementation of Volterra's UsbPolicy resources
func resourceVolterraUsbPolicy() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraUsbPolicyCreate,
		Read:   resourceVolterraUsbPolicyRead,
		Update: resourceVolterraUsbPolicyUpdate,
		Delete: resourceVolterraUsbPolicyDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"allowed_devices": {

				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"b_device_class": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"b_device_protocol": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"b_device_sub_class": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"i_serial": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"id_product": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"id_vendor": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraUsbPolicyCreate creates UsbPolicy resource
func resourceVolterraUsbPolicyCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_usb_policy.CreateSpecType{}
	createReq := &ves_io_schema_usb_policy.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//allowed_devices
	if v, ok := d.GetOk("allowed_devices"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		allowedDevices := make([]*ves_io_schema_usb_policy.Rule, len(sl))
		createSpec.AllowedDevices = allowedDevices
		for i, set := range sl {
			if set != nil {
				allowedDevices[i] = &ves_io_schema_usb_policy.Rule{}
				allowedDevicesMapStrToI := set.(map[string]interface{})

				if w, ok := allowedDevicesMapStrToI["b_device_class"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceClass = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["b_device_protocol"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceProtocol = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["b_device_sub_class"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceSubClass = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["i_serial"]; ok && !isIntfNil(w) {
					allowedDevices[i].ISerial = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["id_product"]; ok && !isIntfNil(w) {
					allowedDevices[i].IdProduct = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["id_vendor"]; ok && !isIntfNil(w) {
					allowedDevices[i].IdVendor = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra UsbPolicy object with struct: %+v", createReq)

	createUsbPolicyResp, err := client.CreateObject(context.Background(), ves_io_schema_usb_policy.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating UsbPolicy: %s", err)
	}
	d.SetId(createUsbPolicyResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraUsbPolicyRead(d, meta)
}

func resourceVolterraUsbPolicyRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_usb_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UsbPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UsbPolicy %q: %s", d.Id(), err)
	}
	return setUsbPolicyFields(client, d, resp)
}

func setUsbPolicyFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraUsbPolicyUpdate updates UsbPolicy resource
func resourceVolterraUsbPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_usb_policy.ReplaceSpecType{}
	updateReq := &ves_io_schema_usb_policy.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("allowed_devices"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		allowedDevices := make([]*ves_io_schema_usb_policy.Rule, len(sl))
		updateSpec.AllowedDevices = allowedDevices
		for i, set := range sl {
			if set != nil {
				allowedDevices[i] = &ves_io_schema_usb_policy.Rule{}
				allowedDevicesMapStrToI := set.(map[string]interface{})

				if w, ok := allowedDevicesMapStrToI["b_device_class"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceClass = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["b_device_protocol"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceProtocol = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["b_device_sub_class"]; ok && !isIntfNil(w) {
					allowedDevices[i].BDeviceSubClass = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["i_serial"]; ok && !isIntfNil(w) {
					allowedDevices[i].ISerial = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["id_product"]; ok && !isIntfNil(w) {
					allowedDevices[i].IdProduct = w.(string)
				}

				if w, ok := allowedDevicesMapStrToI["id_vendor"]; ok && !isIntfNil(w) {
					allowedDevices[i].IdVendor = w.(string)
				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra UsbPolicy obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_usb_policy.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating UsbPolicy: %s", err)
	}

	return resourceVolterraUsbPolicyRead(d, meta)
}

func resourceVolterraUsbPolicyDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_usb_policy.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] UsbPolicy %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra UsbPolicy before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra UsbPolicy obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_usb_policy.ObjectType, namespace, name)
}

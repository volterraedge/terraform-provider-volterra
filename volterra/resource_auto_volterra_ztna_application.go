//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_ztna_application "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ztna_application"
)

// resourceVolterraZtnaApplication is implementation of Volterra's ZtnaApplication resources
func resourceVolterraZtnaApplication() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraZtnaApplicationCreate,
		Read:   resourceVolterraZtnaApplicationRead,
		Update: resourceVolterraZtnaApplicationUpdate,
		Delete: resourceVolterraZtnaApplicationDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"domain_name": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"msg": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ip": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv4": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"ipv6": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"addr": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"policies": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"connectivity_policy_name": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"message_policy_name": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"session_policy_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"proxy_advertisement": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"advertise_custom": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"advertise_where": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"advertise_on_public": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"public_ip": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cloud_edge_segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cloud_edge": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"ip": {
																Type:     schema.TypeString,
																Required: true,
															},

															"ipv6": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"segment": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ipv4_vip": {
																Type:     schema.TypeString,
																Required: true,
															},

															"ipv6_vip": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"segment": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"ipv6": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"network": {
																Type:     schema.TypeString,
																Required: true,
															},

															"site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"site_segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip": {
																Type:     schema.TypeString,
																Required: true,
															},

															"ipv6": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"segment": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_network": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"default_v6_vip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"specific_v6_vip": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"default_vip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"specific_vip": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"virtual_network": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_site": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"network": {
																Type:     schema.TypeString,
																Required: true,
															},

															"virtual_site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_site_segment": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip": {
																Type:     schema.TypeString,
																Required: true,
															},

															"ipv6": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"segment": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"virtual_site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"virtual_site_with_vip": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"ipv6": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"network": {
																Type:     schema.TypeString,
																Required: true,
															},

															"virtual_site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"vk8s_service": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"virtual_site": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"port": {

													Type:     schema.TypeInt,
													Optional: true,
												},

												"port_ranges": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"use_default_port": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_public": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"public_ip": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"advertise_on_public_default_vip": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"do_not_advertise": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"transport_type": {
				Type:     schema.TypeString,
				Required: true,
			},
		},
	}
}

// resourceVolterraZtnaApplicationCreate creates ZtnaApplication resource
func resourceVolterraZtnaApplicationCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_ztna_application.CreateSpecType{}
	createReq := &ves_io_schema_ztna_application.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//domain_name
	if v, ok := d.GetOk("domain_name"); ok && !isIntfNil(v) {

		createSpec.DomainName =
			v.(string)

	}

	//msg
	if v, ok := d.GetOk("msg"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		msg := &ves_io_schema_ztna_application.ServiceDetails{}
		createSpec.Msg = msg
		for _, set := range sl {
			if set != nil {
				msgMapStrToI := set.(map[string]interface{})

				if v, ok := msgMapStrToI["ip"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ip := &ves_io_schema.IpAddressType{}
					msg.Ip = ip
					for _, set := range sl {
						if set != nil {
							ipMapStrToI := set.(map[string]interface{})

							verTypeFound := false

							if v, ok := ipMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

								verTypeFound = true
								verInt := &ves_io_schema.IpAddressType_Ipv4{}
								verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
								ip.Ver = verInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["addr"]; ok && !isIntfNil(v) {

											verInt.Ipv4.Addr = v.(string)

										}

									}
								}

							}

							if v, ok := ipMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

								verTypeFound = true
								verInt := &ves_io_schema.IpAddressType_Ipv6{}
								verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
								ip.Ver = verInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["addr"]; ok && !isIntfNil(v) {

											verInt.Ipv6.Addr = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if w, ok := msgMapStrToI["port"]; ok && !isIntfNil(w) {
					msg.Port = int32(w.(int))
				}

			}
		}

	}

	//policies
	if v, ok := d.GetOk("policies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policies := &ves_io_schema_ztna_application.ZTNApolicies{}
		createSpec.Policies = policies
		for _, set := range sl {
			if set != nil {
				policiesMapStrToI := set.(map[string]interface{})

				if w, ok := policiesMapStrToI["connectivity_policy_name"]; ok && !isIntfNil(w) {
					policies.ConnectivityPolicyName = w.(string)
				}

				if w, ok := policiesMapStrToI["message_policy_name"]; ok && !isIntfNil(w) {
					policies.MessagePolicyName = w.(string)
				}

				if w, ok := policiesMapStrToI["session_policy_name"]; ok && !isIntfNil(w) {
					policies.SessionPolicyName = w.(string)
				}

			}
		}

	}

	//proxy_advertisement
	if v, ok := d.GetOk("proxy_advertisement"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		proxyAdvertisement := &ves_io_schema_ztna_application.ProxyAdvertisementType{}
		createSpec.ProxyAdvertisement = proxyAdvertisement
		for _, set := range sl {
			if set != nil {
				proxyAdvertisementMapStrToI := set.(map[string]interface{})

				advertiseChoiceTypeFound := false

				if v, ok := proxyAdvertisementMapStrToI["advertise_custom"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseCustom{}
					advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
					proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
								advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
								for i, set := range sl {
									if set != nil {
										advertiseWhere[i] = &ves_io_schema_views.WhereType{}
										advertiseWhereMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := advertiseWhereMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_AdvertiseOnPublic{}
											choiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														publicIp := &ves_io_schema_views.ObjectRefType{}
														choiceInt.AdvertiseOnPublic.PublicIp = publicIp
														for _, set := range sl {
															if set != nil {
																publicIpMapStrToI := set.(map[string]interface{})

																if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
																	publicIp.Name = w.(string)
																}

																if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	publicIp.Namespace = w.(string)
																}

																if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	publicIp.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_Site{}
											choiceInt.Site = &ves_io_schema_views.WhereSite{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.Site.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.Site.Ipv6 = v.(string)

													}

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

													}

													if v, ok := cs["site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														site := &ves_io_schema_views.ObjectRefType{}
														choiceInt.Site.Site = site
														for _, set := range sl {
															if set != nil {
																siteMapStrToI := set.(map[string]interface{})

																if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
																	site.Name = w.(string)
																}

																if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	site.Namespace = w.(string)
																}

																if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	site.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
											choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.SiteSegment.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.SiteSegment.Ipv6 = v.(string)

													}

													if v, ok := cs["segment"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														segment := &ves_io_schema_views.ObjectRefType{}
														choiceInt.SiteSegment.Segment = segment
														for _, set := range sl {
															if set != nil {
																segmentMapStrToI := set.(map[string]interface{})

																if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
																	segment.Name = w.(string)
																}

																if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	segment.Namespace = w.(string)
																}

																if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	segment.Tenant = w.(string)
																}

															}
														}

													}

													if v, ok := cs["site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														site := &ves_io_schema_views.ObjectRefType{}
														choiceInt.SiteSegment.Site = site
														for _, set := range sl {
															if set != nil {
																siteMapStrToI := set.(map[string]interface{})

																if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
																	site.Name = w.(string)
																}

																if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	site.Namespace = w.(string)
																}

																if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	site.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
											choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													v6VipChoiceTypeFound := false

													if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

														v6VipChoiceTypeFound = true

														if v.(bool) {
															v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
															v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
															choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
														}

													}

													if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

														v6VipChoiceTypeFound = true
														v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

														choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

														v6VipChoiceInt.SpecificV6Vip = v.(string)

													}

													vipChoiceTypeFound := false

													if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

														vipChoiceTypeFound = true

														if v.(bool) {
															vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
															vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
															choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
														}

													}

													if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

														vipChoiceTypeFound = true
														vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

														choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

														vipChoiceInt.SpecificVip = v.(string)

													}

													if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualNetwork := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
														for _, set := range sl {
															if set != nil {
																virtualNetworkMapStrToI := set.(map[string]interface{})

																if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualNetwork.Name = w.(string)
																}

																if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualNetwork.Namespace = w.(string)
																}

																if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualNetwork.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
											choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualSite := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualSite.VirtualSite = virtualSite
														for _, set := range sl {
															if set != nil {
																virtualSiteMapStrToI := set.(map[string]interface{})

																if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualSite.Name = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualSite.Namespace = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualSite.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_site_with_vip"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualSiteWithVip{}
											choiceInt.VirtualSiteWithVip = &ves_io_schema_views.WhereVirtualSiteSpecifiedVIP{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Ipv6 = v.(string)

													}

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Network = ves_io_schema_views.SiteNetworkSpecifiedVIP(ves_io_schema_views.SiteNetworkSpecifiedVIP_value[v.(string)])

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualSite := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualSiteWithVip.VirtualSite = virtualSite
														for _, set := range sl {
															if set != nil {
																virtualSiteMapStrToI := set.(map[string]interface{})

																if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualSite.Name = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualSite.Namespace = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualSite.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
											choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
														choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
														choiceInt.Vk8SService.Choice = choiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
														choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
														choiceInt.Vk8SService.Choice = choiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Tenant = v.(string)

																}

															}
														}

													}

												}
											}

										}

										portChoiceTypeFound := false

										if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true
											portChoiceInt := &ves_io_schema_views.WhereType_Port{}

											advertiseWhere[i].PortChoice = portChoiceInt

											portChoiceInt.Port = uint32(v.(int))

										}

										if v, ok := advertiseWhereMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true
											portChoiceInt := &ves_io_schema_views.WhereType_PortRanges{}

											advertiseWhere[i].PortChoice = portChoiceInt

											portChoiceInt.PortRanges = v.(string)

										}

										if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true

											if v.(bool) {
												portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
												portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
												advertiseWhere[i].PortChoice = portChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseOnPublic{}
					advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
					proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIp := &ves_io_schema_views.ObjectRefType{}
								advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
								for _, set := range sl {
									if set != nil {
										publicIpMapStrToI := set.(map[string]interface{})

										if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
											publicIp.Name = w.(string)
										}

										if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
											publicIp.Namespace = w.(string)
										}

										if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
											publicIp.Tenant = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["advertise_on_public_default_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseOnPublicDefaultVip{}
						advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
						proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["do_not_advertise"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_DoNotAdvertise{}
						advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
						proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt
					}

				}

			}
		}

	}

	//transport_type
	if v, ok := d.GetOk("transport_type"); ok && !isIntfNil(v) {

		createSpec.TransportType = ves_io_schema_ztna_application.TransportType(ves_io_schema_ztna_application.TransportType_value[v.(string)])

	}

	log.Printf("[DEBUG] Creating Volterra ZtnaApplication object with struct: %+v", createReq)

	createZtnaApplicationResp, err := client.CreateObject(context.Background(), ves_io_schema_ztna_application.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating ZtnaApplication: %s", err)
	}
	d.SetId(createZtnaApplicationResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraZtnaApplicationRead(d, meta)
}

func resourceVolterraZtnaApplicationRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_ztna_application.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ZtnaApplication %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ZtnaApplication %q: %s", d.Id(), err)
	}
	return setZtnaApplicationFields(client, d, resp)
}

func setZtnaApplicationFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraZtnaApplicationUpdate updates ZtnaApplication resource
func resourceVolterraZtnaApplicationUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_ztna_application.ReplaceSpecType{}
	updateReq := &ves_io_schema_ztna_application.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("domain_name"); ok && !isIntfNil(v) {

		updateSpec.DomainName =
			v.(string)

	}

	if v, ok := d.GetOk("msg"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		msg := &ves_io_schema_ztna_application.ServiceDetails{}
		updateSpec.Msg = msg
		for _, set := range sl {
			if set != nil {
				msgMapStrToI := set.(map[string]interface{})

				if v, ok := msgMapStrToI["ip"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ip := &ves_io_schema.IpAddressType{}
					msg.Ip = ip
					for _, set := range sl {
						if set != nil {
							ipMapStrToI := set.(map[string]interface{})

							verTypeFound := false

							if v, ok := ipMapStrToI["ipv4"]; ok && !isIntfNil(v) && !verTypeFound {

								verTypeFound = true
								verInt := &ves_io_schema.IpAddressType_Ipv4{}
								verInt.Ipv4 = &ves_io_schema.Ipv4AddressType{}
								ip.Ver = verInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["addr"]; ok && !isIntfNil(v) {

											verInt.Ipv4.Addr = v.(string)

										}

									}
								}

							}

							if v, ok := ipMapStrToI["ipv6"]; ok && !isIntfNil(v) && !verTypeFound {

								verTypeFound = true
								verInt := &ves_io_schema.IpAddressType_Ipv6{}
								verInt.Ipv6 = &ves_io_schema.Ipv6AddressType{}
								ip.Ver = verInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["addr"]; ok && !isIntfNil(v) {

											verInt.Ipv6.Addr = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if w, ok := msgMapStrToI["port"]; ok && !isIntfNil(w) {
					msg.Port = int32(w.(int))
				}

			}
		}

	}

	if v, ok := d.GetOk("policies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		policies := &ves_io_schema_ztna_application.ZTNApolicies{}
		updateSpec.Policies = policies
		for _, set := range sl {
			if set != nil {
				policiesMapStrToI := set.(map[string]interface{})

				if w, ok := policiesMapStrToI["connectivity_policy_name"]; ok && !isIntfNil(w) {
					policies.ConnectivityPolicyName = w.(string)
				}

				if w, ok := policiesMapStrToI["message_policy_name"]; ok && !isIntfNil(w) {
					policies.MessagePolicyName = w.(string)
				}

				if w, ok := policiesMapStrToI["session_policy_name"]; ok && !isIntfNil(w) {
					policies.SessionPolicyName = w.(string)
				}

			}
		}

	}

	if v, ok := d.GetOk("proxy_advertisement"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		proxyAdvertisement := &ves_io_schema_ztna_application.ProxyAdvertisementType{}
		updateSpec.ProxyAdvertisement = proxyAdvertisement
		for _, set := range sl {
			if set != nil {
				proxyAdvertisementMapStrToI := set.(map[string]interface{})

				advertiseChoiceTypeFound := false

				if v, ok := proxyAdvertisementMapStrToI["advertise_custom"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseCustom{}
					advertiseChoiceInt.AdvertiseCustom = &ves_io_schema_views.AdvertiseCustom{}
					proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["advertise_where"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								advertiseWhere := make([]*ves_io_schema_views.WhereType, len(sl))
								advertiseChoiceInt.AdvertiseCustom.AdvertiseWhere = advertiseWhere
								for i, set := range sl {
									if set != nil {
										advertiseWhere[i] = &ves_io_schema_views.WhereType{}
										advertiseWhereMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := advertiseWhereMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_AdvertiseOnPublic{}
											choiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														publicIp := &ves_io_schema_views.ObjectRefType{}
														choiceInt.AdvertiseOnPublic.PublicIp = publicIp
														for _, set := range sl {
															if set != nil {
																publicIpMapStrToI := set.(map[string]interface{})

																if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
																	publicIp.Name = w.(string)
																}

																if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	publicIp.Namespace = w.(string)
																}

																if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	publicIp.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_Site{}
											choiceInt.Site = &ves_io_schema_views.WhereSite{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.Site.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.Site.Ipv6 = v.(string)

													}

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.Site.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

													}

													if v, ok := cs["site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														site := &ves_io_schema_views.ObjectRefType{}
														choiceInt.Site.Site = site
														for _, set := range sl {
															if set != nil {
																siteMapStrToI := set.(map[string]interface{})

																if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
																	site.Name = w.(string)
																}

																if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	site.Namespace = w.(string)
																}

																if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	site.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["site_segment"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_SiteSegment{}
											choiceInt.SiteSegment = &ves_io_schema_views.WhereSiteSegment{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.SiteSegment.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.SiteSegment.Ipv6 = v.(string)

													}

													if v, ok := cs["segment"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														segment := &ves_io_schema_views.ObjectRefType{}
														choiceInt.SiteSegment.Segment = segment
														for _, set := range sl {
															if set != nil {
																segmentMapStrToI := set.(map[string]interface{})

																if w, ok := segmentMapStrToI["name"]; ok && !isIntfNil(w) {
																	segment.Name = w.(string)
																}

																if w, ok := segmentMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	segment.Namespace = w.(string)
																}

																if w, ok := segmentMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	segment.Tenant = w.(string)
																}

															}
														}

													}

													if v, ok := cs["site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														site := &ves_io_schema_views.ObjectRefType{}
														choiceInt.SiteSegment.Site = site
														for _, set := range sl {
															if set != nil {
																siteMapStrToI := set.(map[string]interface{})

																if w, ok := siteMapStrToI["name"]; ok && !isIntfNil(w) {
																	site.Name = w.(string)
																}

																if w, ok := siteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	site.Namespace = w.(string)
																}

																if w, ok := siteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	site.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_network"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualNetwork{}
											choiceInt.VirtualNetwork = &ves_io_schema_views.WhereVirtualNetwork{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													v6VipChoiceTypeFound := false

													if v, ok := cs["default_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

														v6VipChoiceTypeFound = true

														if v.(bool) {
															v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultV6Vip{}
															v6VipChoiceInt.DefaultV6Vip = &ves_io_schema.Empty{}
															choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt
														}

													}

													if v, ok := cs["specific_v6_vip"]; ok && !isIntfNil(v) && !v6VipChoiceTypeFound {

														v6VipChoiceTypeFound = true
														v6VipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificV6Vip{}

														choiceInt.VirtualNetwork.V6VipChoice = v6VipChoiceInt

														v6VipChoiceInt.SpecificV6Vip = v.(string)

													}

													vipChoiceTypeFound := false

													if v, ok := cs["default_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

														vipChoiceTypeFound = true

														if v.(bool) {
															vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_DefaultVip{}
															vipChoiceInt.DefaultVip = &ves_io_schema.Empty{}
															choiceInt.VirtualNetwork.VipChoice = vipChoiceInt
														}

													}

													if v, ok := cs["specific_vip"]; ok && !isIntfNil(v) && !vipChoiceTypeFound {

														vipChoiceTypeFound = true
														vipChoiceInt := &ves_io_schema_views.WhereVirtualNetwork_SpecificVip{}

														choiceInt.VirtualNetwork.VipChoice = vipChoiceInt

														vipChoiceInt.SpecificVip = v.(string)

													}

													if v, ok := cs["virtual_network"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualNetwork := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualNetwork.VirtualNetwork = virtualNetwork
														for _, set := range sl {
															if set != nil {
																virtualNetworkMapStrToI := set.(map[string]interface{})

																if w, ok := virtualNetworkMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualNetwork.Name = w.(string)
																}

																if w, ok := virtualNetworkMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualNetwork.Namespace = w.(string)
																}

																if w, ok := virtualNetworkMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualNetwork.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualSite{}
											choiceInt.VirtualSite = &ves_io_schema_views.WhereVirtualSite{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSite.Network = ves_io_schema_views.SiteNetwork(ves_io_schema_views.SiteNetwork_value[v.(string)])

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualSite := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualSite.VirtualSite = virtualSite
														for _, set := range sl {
															if set != nil {
																virtualSiteMapStrToI := set.(map[string]interface{})

																if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualSite.Name = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualSite.Namespace = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualSite.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["virtual_site_with_vip"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_VirtualSiteWithVip{}
											choiceInt.VirtualSiteWithVip = &ves_io_schema_views.WhereVirtualSiteSpecifiedVIP{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Ip = v.(string)

													}

													if v, ok := cs["ipv6"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Ipv6 = v.(string)

													}

													if v, ok := cs["network"]; ok && !isIntfNil(v) {

														choiceInt.VirtualSiteWithVip.Network = ves_io_schema_views.SiteNetworkSpecifiedVIP(ves_io_schema_views.SiteNetworkSpecifiedVIP_value[v.(string)])

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														virtualSite := &ves_io_schema_views.ObjectRefType{}
														choiceInt.VirtualSiteWithVip.VirtualSite = virtualSite
														for _, set := range sl {
															if set != nil {
																virtualSiteMapStrToI := set.(map[string]interface{})

																if w, ok := virtualSiteMapStrToI["name"]; ok && !isIntfNil(w) {
																	virtualSite.Name = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["namespace"]; ok && !isIntfNil(w) {
																	virtualSite.Namespace = w.(string)
																}

																if w, ok := virtualSiteMapStrToI["tenant"]; ok && !isIntfNil(w) {
																	virtualSite.Tenant = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := advertiseWhereMapStrToI["vk8s_service"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.WhereType_Vk8SService{}
											choiceInt.Vk8SService = &ves_io_schema_views.WhereVK8SService{}
											advertiseWhere[i].Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := cs["site"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceIntNew := &ves_io_schema_views.WhereVK8SService_Site{}
														choiceIntNew.Site = &ves_io_schema_views.ObjectRefType{}
														choiceInt.Vk8SService.Choice = choiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	choiceIntNew.Site.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["virtual_site"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceIntNew := &ves_io_schema_views.WhereVK8SService_VirtualSite{}
														choiceIntNew.VirtualSite = &ves_io_schema_views.ObjectRefType{}
														choiceInt.Vk8SService.Choice = choiceIntNew

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	choiceIntNew.VirtualSite.Tenant = v.(string)

																}

															}
														}

													}

												}
											}

										}

										portChoiceTypeFound := false

										if v, ok := advertiseWhereMapStrToI["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true
											portChoiceInt := &ves_io_schema_views.WhereType_Port{}

											advertiseWhere[i].PortChoice = portChoiceInt

											portChoiceInt.Port = uint32(v.(int))

										}

										if v, ok := advertiseWhereMapStrToI["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true
											portChoiceInt := &ves_io_schema_views.WhereType_PortRanges{}

											advertiseWhere[i].PortChoice = portChoiceInt

											portChoiceInt.PortRanges = v.(string)

										}

										if v, ok := advertiseWhereMapStrToI["use_default_port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

											portChoiceTypeFound = true

											if v.(bool) {
												portChoiceInt := &ves_io_schema_views.WhereType_UseDefaultPort{}
												portChoiceInt.UseDefaultPort = &ves_io_schema.Empty{}
												advertiseWhere[i].PortChoice = portChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["advertise_on_public"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true
					advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseOnPublic{}
					advertiseChoiceInt.AdvertiseOnPublic = &ves_io_schema_views.AdvertisePublic{}
					proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["public_ip"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								publicIp := &ves_io_schema_views.ObjectRefType{}
								advertiseChoiceInt.AdvertiseOnPublic.PublicIp = publicIp
								for _, set := range sl {
									if set != nil {
										publicIpMapStrToI := set.(map[string]interface{})

										if w, ok := publicIpMapStrToI["name"]; ok && !isIntfNil(w) {
											publicIp.Name = w.(string)
										}

										if w, ok := publicIpMapStrToI["namespace"]; ok && !isIntfNil(w) {
											publicIp.Namespace = w.(string)
										}

										if w, ok := publicIpMapStrToI["tenant"]; ok && !isIntfNil(w) {
											publicIp.Tenant = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["advertise_on_public_default_vip"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_AdvertiseOnPublicDefaultVip{}
						advertiseChoiceInt.AdvertiseOnPublicDefaultVip = &ves_io_schema.Empty{}
						proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt
					}

				}

				if v, ok := proxyAdvertisementMapStrToI["do_not_advertise"]; ok && !isIntfNil(v) && !advertiseChoiceTypeFound {

					advertiseChoiceTypeFound = true

					if v.(bool) {
						advertiseChoiceInt := &ves_io_schema_ztna_application.ProxyAdvertisementType_DoNotAdvertise{}
						advertiseChoiceInt.DoNotAdvertise = &ves_io_schema.Empty{}
						proxyAdvertisement.AdvertiseChoice = advertiseChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("transport_type"); ok && !isIntfNil(v) {

		updateSpec.TransportType = ves_io_schema_ztna_application.TransportType(ves_io_schema_ztna_application.TransportType_value[v.(string)])

	}

	log.Printf("[DEBUG] Updating Volterra ZtnaApplication obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_ztna_application.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating ZtnaApplication: %s", err)
	}

	return resourceVolterraZtnaApplicationRead(d, meta)
}

func resourceVolterraZtnaApplicationDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_ztna_application.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] ZtnaApplication %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra ZtnaApplication before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra ZtnaApplication obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_ztna_application.ObjectType, namespace, name)
}

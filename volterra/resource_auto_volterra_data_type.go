//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_data_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/data_type"
)

// resourceVolterraDataType is implementation of Volterra's DataType resources
func resourceVolterraDataType() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraDataTypeCreate,
		Read:   resourceVolterraDataTypeRead,
		Update: resourceVolterraDataTypeUpdate,
		Delete: resourceVolterraDataTypeDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"compliances": {

				Type: schema.TypeList,

				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"is_pii": {
				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
			},

			"is_sensitive_data": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"key_pattern": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exact_values": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"regex_value": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"substring_value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"key_value_pattern": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"key_pattern": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"regex_value": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"substring_value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"value_pattern": {

										Type:     schema.TypeSet,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"exact_values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"regex_value": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"substring_value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"value_pattern": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exact_values": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"regex_value": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"substring_value": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraDataTypeCreate creates DataType resource
func resourceVolterraDataTypeCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_data_type.CreateSpecType{}
	createReq := &ves_io_schema_data_type.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//compliances
	if v, ok := d.GetOk("compliances"); ok && !isIntfNil(v) {

		compliancesList := []ves_io_schema_data_type.Compliance{}
		for _, j := range v.([]interface{}) {
			compliancesList = append(compliancesList, ves_io_schema_data_type.Compliance(ves_io_schema_data_type.Compliance_value[j.(string)]))
		}
		createSpec.Compliances = compliancesList

	}

	//is_pii
	if v, ok := d.GetOk("is_pii"); ok && !isIntfNil(v) {

		createSpec.IsPii =
			v.(bool)

	}

	//is_sensitive_data
	if v, ok := d.GetOk("is_sensitive_data"); ok && !isIntfNil(v) {

		createSpec.IsSensitiveData =
			v.(bool)

	}

	//rules
	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_data_type.DetectionRule, len(sl))
		createSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_data_type.DetectionRule{}
			rulesMapStrToI := set.(map[string]interface{})

			patternChoiceTypeFound := false

			if v, ok := rulesMapStrToI["key_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_KeyPattern{}
				patternChoiceInt.KeyPattern = &ves_io_schema_data_type.RulePatternType{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					typeChoiceTypeFound := false

					if v, ok := cs["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
						typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								typeChoiceInt.ExactValues.ExactValues = ls

							}

						}

					}

					if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						typeChoiceInt.RegexValue = v.(string)

					}

					if v, ok := cs["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						typeChoiceInt.SubstringValue = v.(string)

					}

				}

			}

			if v, ok := rulesMapStrToI["key_value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_KeyValuePattern{}
				patternChoiceInt.KeyValuePattern = &ves_io_schema_data_type.KeyValuePattern{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["key_pattern"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						keyPattern := &ves_io_schema_data_type.RulePatternType{}
						patternChoiceInt.KeyValuePattern.KeyPattern = keyPattern
						for _, set := range sl {
							keyPatternMapStrToI := set.(map[string]interface{})

							typeChoiceTypeFound := false

							if v, ok := keyPatternMapStrToI["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
								typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
								keyPattern.TypeChoice = typeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										typeChoiceInt.ExactValues.ExactValues = ls

									}

								}

							}

							if v, ok := keyPatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

								keyPattern.TypeChoice = typeChoiceInt

								typeChoiceInt.RegexValue = v.(string)

							}

							if v, ok := keyPatternMapStrToI["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

								keyPattern.TypeChoice = typeChoiceInt

								typeChoiceInt.SubstringValue = v.(string)

							}

						}

					}

					if v, ok := cs["value_pattern"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						valuePattern := &ves_io_schema_data_type.RulePatternType{}
						patternChoiceInt.KeyValuePattern.ValuePattern = valuePattern
						for _, set := range sl {
							valuePatternMapStrToI := set.(map[string]interface{})

							typeChoiceTypeFound := false

							if v, ok := valuePatternMapStrToI["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
								typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
								valuePattern.TypeChoice = typeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										typeChoiceInt.ExactValues.ExactValues = ls

									}

								}

							}

							if v, ok := valuePatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

								valuePattern.TypeChoice = typeChoiceInt

								typeChoiceInt.RegexValue = v.(string)

							}

							if v, ok := valuePatternMapStrToI["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

								valuePattern.TypeChoice = typeChoiceInt

								typeChoiceInt.SubstringValue = v.(string)

							}

						}

					}

				}

			}

			if v, ok := rulesMapStrToI["value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_ValuePattern{}
				patternChoiceInt.ValuePattern = &ves_io_schema_data_type.RulePatternType{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					typeChoiceTypeFound := false

					if v, ok := cs["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
						typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								typeChoiceInt.ExactValues.ExactValues = ls

							}

						}

					}

					if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						typeChoiceInt.RegexValue = v.(string)

					}

					if v, ok := cs["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						typeChoiceInt.SubstringValue = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra DataType object with struct: %+v", createReq)

	createDataTypeResp, err := client.CreateObject(context.Background(), ves_io_schema_data_type.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating DataType: %s", err)
	}
	d.SetId(createDataTypeResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraDataTypeRead(d, meta)
}

func resourceVolterraDataTypeRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_data_type.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DataType %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DataType %q: %s", d.Id(), err)
	}
	return setDataTypeFields(client, d, resp)
}

func setDataTypeFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraDataTypeUpdate updates DataType resource
func resourceVolterraDataTypeUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_data_type.ReplaceSpecType{}
	updateReq := &ves_io_schema_data_type.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("compliances"); ok && !isIntfNil(v) {

		compliancesList := []ves_io_schema_data_type.Compliance{}
		for _, j := range v.([]interface{}) {
			compliancesList = append(compliancesList, ves_io_schema_data_type.Compliance(ves_io_schema_data_type.Compliance_value[j.(string)]))
		}
		updateSpec.Compliances = compliancesList

	}

	if v, ok := d.GetOk("is_pii"); ok && !isIntfNil(v) {

		updateSpec.IsPii =
			v.(bool)

	}

	if v, ok := d.GetOk("is_sensitive_data"); ok && !isIntfNil(v) {

		updateSpec.IsSensitiveData =
			v.(bool)

	}

	if v, ok := d.GetOk("rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rules := make([]*ves_io_schema_data_type.DetectionRule, len(sl))
		updateSpec.Rules = rules
		for i, set := range sl {
			rules[i] = &ves_io_schema_data_type.DetectionRule{}
			rulesMapStrToI := set.(map[string]interface{})

			patternChoiceTypeFound := false

			if v, ok := rulesMapStrToI["key_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_KeyPattern{}
				patternChoiceInt.KeyPattern = &ves_io_schema_data_type.RulePatternType{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					typeChoiceTypeFound := false

					if v, ok := cs["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
						typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								typeChoiceInt.ExactValues.ExactValues = ls

							}

						}

					}

					if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						typeChoiceInt.RegexValue = v.(string)

					}

					if v, ok := cs["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

						patternChoiceInt.KeyPattern.TypeChoice = typeChoiceInt

						typeChoiceInt.SubstringValue = v.(string)

					}

				}

			}

			if v, ok := rulesMapStrToI["key_value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_KeyValuePattern{}
				patternChoiceInt.KeyValuePattern = &ves_io_schema_data_type.KeyValuePattern{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					if v, ok := cs["key_pattern"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						keyPattern := &ves_io_schema_data_type.RulePatternType{}
						patternChoiceInt.KeyValuePattern.KeyPattern = keyPattern
						for _, set := range sl {
							keyPatternMapStrToI := set.(map[string]interface{})

							typeChoiceTypeFound := false

							if v, ok := keyPatternMapStrToI["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
								typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
								keyPattern.TypeChoice = typeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										typeChoiceInt.ExactValues.ExactValues = ls

									}

								}

							}

							if v, ok := keyPatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

								keyPattern.TypeChoice = typeChoiceInt

								typeChoiceInt.RegexValue = v.(string)

							}

							if v, ok := keyPatternMapStrToI["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

								keyPattern.TypeChoice = typeChoiceInt

								typeChoiceInt.SubstringValue = v.(string)

							}

						}

					}

					if v, ok := cs["value_pattern"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						valuePattern := &ves_io_schema_data_type.RulePatternType{}
						patternChoiceInt.KeyValuePattern.ValuePattern = valuePattern
						for _, set := range sl {
							valuePatternMapStrToI := set.(map[string]interface{})

							typeChoiceTypeFound := false

							if v, ok := valuePatternMapStrToI["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
								typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
								valuePattern.TypeChoice = typeChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										typeChoiceInt.ExactValues.ExactValues = ls

									}

								}

							}

							if v, ok := valuePatternMapStrToI["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

								valuePattern.TypeChoice = typeChoiceInt

								typeChoiceInt.RegexValue = v.(string)

							}

							if v, ok := valuePatternMapStrToI["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

								typeChoiceTypeFound = true
								typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

								valuePattern.TypeChoice = typeChoiceInt

								typeChoiceInt.SubstringValue = v.(string)

							}

						}

					}

				}

			}

			if v, ok := rulesMapStrToI["value_pattern"]; ok && !isIntfNil(v) && !patternChoiceTypeFound {

				patternChoiceTypeFound = true
				patternChoiceInt := &ves_io_schema_data_type.DetectionRule_ValuePattern{}
				patternChoiceInt.ValuePattern = &ves_io_schema_data_type.RulePatternType{}
				rules[i].PatternChoice = patternChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					typeChoiceTypeFound := false

					if v, ok := cs["exact_values"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_ExactValues{}
						typeChoiceInt.ExactValues = &ves_io_schema_data_type.ExactValues{}
						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									ls[i] = v.(string)
								}
								typeChoiceInt.ExactValues.ExactValues = ls

							}

						}

					}

					if v, ok := cs["regex_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_RegexValue{}

						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						typeChoiceInt.RegexValue = v.(string)

					}

					if v, ok := cs["substring_value"]; ok && !isIntfNil(v) && !typeChoiceTypeFound {

						typeChoiceTypeFound = true
						typeChoiceInt := &ves_io_schema_data_type.RulePatternType_SubstringValue{}

						patternChoiceInt.ValuePattern.TypeChoice = typeChoiceInt

						typeChoiceInt.SubstringValue = v.(string)

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra DataType obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_data_type.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating DataType: %s", err)
	}

	return resourceVolterraDataTypeRead(d, meta)
}

func resourceVolterraDataTypeDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_data_type.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DataType %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DataType before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra DataType obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_data_type.ObjectType, namespace, name)
}

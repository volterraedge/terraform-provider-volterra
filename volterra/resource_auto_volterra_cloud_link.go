//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_cloud_link "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_link"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraCloudLink is implementation of Volterra's CloudLink resources
func resourceVolterraCloudLink() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCloudLinkCreate,
		Read:   resourceVolterraCloudLinkRead,
		Update: resourceVolterraCloudLinkUpdate,
		Delete: resourceVolterraCloudLinkDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"aws": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"aws_cred": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"byoc": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"connections": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"auth_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"store_provider": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"location": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"provider": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"secret_encoding": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"version": {
																			Type:       schema.TypeInt,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"bgp_asn": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"connection_id": {
													Type:     schema.TypeString,
													Required: true,
												},

												"coordinates": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"latitude": {
																Type:       schema.TypeFloat,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"longitude": {
																Type:       schema.TypeFloat,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"enable_sitelink": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"ipv4": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"aws_router_peer_address": {
																Type:     schema.TypeString,
																Required: true,
															},

															"router_peer_address": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"ipv6": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"jumbo_mtu": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"region": {
													Type:     schema.TypeString,
													Required: true,
												},

												"system_generated_name": {

													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"user_assigned_name": {

													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"tags": {
													Type:     schema.TypeMap,
													Optional: true,
												},

												"virtual_interface_type": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"vlan": {
													Type:     schema.TypeInt,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"f5xc_managed": {

							Type:       schema.TypeList,
							MaxItems:   1,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},

						"auto": {

							Type:       schema.TypeBool,
							Optional:   true,
							Deprecated: "This field is deprecated and will be removed in future release.",
						},

						"custom_asn": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"azure": {

				Type:       schema.TypeList,
				MaxItems:   1,
				Optional:   true,
				Deprecated: "This field is deprecated and will be removed in future release.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},

			"gcp": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"byoc": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"connections": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"coordinates": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"latitude": {
																Type:       schema.TypeFloat,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"longitude": {
																Type:       schema.TypeFloat,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},

												"interconnect_attachment_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"disable": {
																Type:       schema.TypeBool,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"project": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"same_as_credential": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"region": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"gcp_cred": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"disabled": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enabled": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cloudlink_network_name": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCloudLinkCreate creates CloudLink resource
func resourceVolterraCloudLinkCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_cloud_link.CreateSpecType{}
	createReq := &ves_io_schema_cloud_link.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//cloud_provider

	cloudProviderTypeFound := false

	if v, ok := d.GetOk("aws"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.CreateSpecType_Aws{}
		cloudProviderInt.Aws = &ves_io_schema_cloud_link.AWSType{}
		createSpec.CloudProvider = cloudProviderInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["aws_cred"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					awsCredInt := &ves_io_schema_views.ObjectRefType{}
					cloudProviderInt.Aws.AwsCred = awsCredInt

					for _, set := range sl {
						if set != nil {
							acMapToStrVal := set.(map[string]interface{})
							if val, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
								awsCredInt.Name = val.(string)
							}
							if val, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								awsCredInt.Namespace = val.(string)
							}

							if val, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								awsCredInt.Tenant = val.(string)
							}
						}
					}

				}

				cloudLinkTypeTypeFound := false

				if v, ok := cs["byoc"]; ok && !isIntfNil(v) && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.AWSType_Byoc{}
					cloudLinkTypeInt.Byoc = &ves_io_schema_cloud_link.AWSBYOCListType{}
					cloudProviderInt.Aws.CloudLinkType = cloudLinkTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["connections"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connections := make([]*ves_io_schema_cloud_link.AWSBYOCType, len(sl))
								cloudLinkTypeInt.Byoc.Connections = connections
								for i, set := range sl {
									if set != nil {
										connections[i] = &ves_io_schema_cloud_link.AWSBYOCType{}
										connectionsMapStrToI := set.(map[string]interface{})

										if v, ok := connectionsMapStrToI["auth_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											authKey := &ves_io_schema.SecretType{}
											connections[i].AuthKey = authKey
											for _, set := range sl {
												if set != nil {
													authKeyMapStrToI := set.(map[string]interface{})

													if v, ok := authKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
														authKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
														for _, set := range sl {
															if set != nil {
																blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

																if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
																}

																if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.Location = w.(string)
																}

																if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.StoreProvider = w.(string)
																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

														authKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													secretInfoOneofTypeFound := false

													if v, ok := authKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
														secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["key"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

																}

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

																}

																if v, ok := cs["version"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
														secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["bgp_asn"]; ok && !isIntfNil(w) {
											connections[i].BgpAsn = uint32(w.(int))
										}

										if w, ok := connectionsMapStrToI["connection_id"]; ok && !isIntfNil(w) {
											connections[i].ConnectionId = w.(string)
										}

										if v, ok := connectionsMapStrToI["coordinates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											coordinates := &ves_io_schema_site.Coordinates{}
											connections[i].Coordinates = coordinates
											for _, set := range sl {
												if set != nil {
													coordinatesMapStrToI := set.(map[string]interface{})

													if w, ok := coordinatesMapStrToI["latitude"]; ok && !isIntfNil(w) {
														coordinates.Latitude = float32(w.(float64))
													}

													if w, ok := coordinatesMapStrToI["longitude"]; ok && !isIntfNil(w) {
														coordinates.Longitude = float32(w.(float64))
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["enable_sitelink"]; ok && !isIntfNil(w) {
											connections[i].EnableSitelink = w.(bool)
										}

										ipTypeTypeFound := false

										if v, ok := connectionsMapStrToI["ipv4"]; ok && !isIntfNil(v) && !ipTypeTypeFound {

											ipTypeTypeFound = true
											ipTypeInt := &ves_io_schema_cloud_link.AWSBYOCType_Ipv4{}
											ipTypeInt.Ipv4 = &ves_io_schema_cloud_link.Ipv4Type{}
											connections[i].IpType = ipTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["aws_router_peer_address"]; ok && !isIntfNil(v) {

														ipTypeInt.Ipv4.AwsRouterPeerAddress = v.(string)

													}

													if v, ok := cs["router_peer_address"]; ok && !isIntfNil(v) {

														ipTypeInt.Ipv4.RouterPeerAddress = v.(string)

													}

												}
											}

										}

										if _, ok := connectionsMapStrToI["ipv6"]; ok && !ipTypeTypeFound {

											ipTypeTypeFound = true
											ipTypeInt := &ves_io_schema_cloud_link.AWSBYOCType_Ipv6{}
											ipTypeInt.Ipv6 = &ves_io_schema_cloud_link.Ipv6Type{}
											connections[i].IpType = ipTypeInt

										}

										if w, ok := connectionsMapStrToI["jumbo_mtu"]; ok && !isIntfNil(w) {
											connections[i].JumboMtu = w.(bool)
										}

										if v, ok := connectionsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											connections[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["region"]; ok && !isIntfNil(w) {
											connections[i].Region = w.(string)
										}

										resourceNameChoiceTypeFound := false

										if v, ok := connectionsMapStrToI["system_generated_name"]; ok && !isIntfNil(v) && !resourceNameChoiceTypeFound {

											resourceNameChoiceTypeFound = true

											if v.(bool) {
												resourceNameChoiceInt := &ves_io_schema_cloud_link.AWSBYOCType_SystemGeneratedName{}
												resourceNameChoiceInt.SystemGeneratedName = &ves_io_schema.Empty{}
												connections[i].ResourceNameChoice = resourceNameChoiceInt
											}

										}

										if v, ok := connectionsMapStrToI["user_assigned_name"]; ok && !isIntfNil(v) && !resourceNameChoiceTypeFound {

											resourceNameChoiceTypeFound = true
											resourceNameChoiceInt := &ves_io_schema_cloud_link.AWSBYOCType_UserAssignedName{}

											connections[i].ResourceNameChoice = resourceNameChoiceInt

											resourceNameChoiceInt.UserAssignedName = v.(string)

										}

										if w, ok := connectionsMapStrToI["tags"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											connections[i].Tags = ms
										}

										if v, ok := connectionsMapStrToI["virtual_interface_type"]; ok && !isIntfNil(v) {

											connections[i].VirtualInterfaceType = ves_io_schema_cloud_link.VirtualInterfaceType(ves_io_schema_cloud_link.VirtualInterfaceType_value[v.(string)])

										}

										if w, ok := connectionsMapStrToI["vlan"]; ok && !isIntfNil(w) {
											connections[i].Vlan = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if _, ok := cs["f5xc_managed"]; ok && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.AWSType_F5XcManaged{}
					cloudLinkTypeInt.F5XcManaged = &ves_io_schema_cloud_link.AWSF5XCManagedType{}
					cloudProviderInt.Aws.CloudLinkType = cloudLinkTypeInt

				}

				directConnectGatewayAsnChoiceTypeFound := false

				if v, ok := cs["auto"]; ok && !isIntfNil(v) && !directConnectGatewayAsnChoiceTypeFound {

					directConnectGatewayAsnChoiceTypeFound = true

					if v.(bool) {
						directConnectGatewayAsnChoiceInt := &ves_io_schema_cloud_link.AWSType_Auto{}
						directConnectGatewayAsnChoiceInt.Auto = &ves_io_schema.Empty{}
						cloudProviderInt.Aws.DirectConnectGatewayAsnChoice = directConnectGatewayAsnChoiceInt
					}

				}

				if v, ok := cs["custom_asn"]; ok && !isIntfNil(v) && !directConnectGatewayAsnChoiceTypeFound {

					directConnectGatewayAsnChoiceTypeFound = true
					directConnectGatewayAsnChoiceInt := &ves_io_schema_cloud_link.AWSType_CustomAsn{}

					cloudProviderInt.Aws.DirectConnectGatewayAsnChoice = directConnectGatewayAsnChoiceInt

					directConnectGatewayAsnChoiceInt.CustomAsn = uint32(v.(int))

				}

			}
		}

	}

	if _, ok := d.GetOk("azure"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.CreateSpecType_Azure{}
		cloudProviderInt.Azure = &ves_io_schema_cloud_link.AzureType{}
		createSpec.CloudProvider = cloudProviderInt

	}

	if v, ok := d.GetOk("gcp"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.CreateSpecType_Gcp{}
		cloudProviderInt.Gcp = &ves_io_schema_cloud_link.GCPType{}
		createSpec.CloudProvider = cloudProviderInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				cloudLinkTypeTypeFound := false

				if v, ok := cs["byoc"]; ok && !isIntfNil(v) && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.GCPType_Byoc{}
					cloudLinkTypeInt.Byoc = &ves_io_schema_cloud_link.GCPBYOCListType{}
					cloudProviderInt.Gcp.CloudLinkType = cloudLinkTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["connections"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connections := make([]*ves_io_schema_cloud_link.GCPBYOCType, len(sl))
								cloudLinkTypeInt.Byoc.Connections = connections
								for i, set := range sl {
									if set != nil {
										connections[i] = &ves_io_schema_cloud_link.GCPBYOCType{}
										connectionsMapStrToI := set.(map[string]interface{})

										if v, ok := connectionsMapStrToI["coordinates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											coordinates := &ves_io_schema_site.Coordinates{}
											connections[i].Coordinates = coordinates
											for _, set := range sl {
												if set != nil {
													coordinatesMapStrToI := set.(map[string]interface{})

													if w, ok := coordinatesMapStrToI["latitude"]; ok && !isIntfNil(w) {
														coordinates.Latitude = float32(w.(float64))
													}

													if w, ok := coordinatesMapStrToI["longitude"]; ok && !isIntfNil(w) {
														coordinates.Longitude = float32(w.(float64))
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["interconnect_attachment_name"]; ok && !isIntfNil(w) {
											connections[i].InterconnectAttachmentName = w.(string)
										}

										if v, ok := connectionsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											connections[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										projectChoiceTypeFound := false

										if v, ok := connectionsMapStrToI["project"]; ok && !isIntfNil(v) && !projectChoiceTypeFound {

											projectChoiceTypeFound = true
											projectChoiceInt := &ves_io_schema_cloud_link.GCPBYOCType_Project{}

											connections[i].ProjectChoice = projectChoiceInt

											projectChoiceInt.Project = v.(string)

										}

										if v, ok := connectionsMapStrToI["same_as_credential"]; ok && !isIntfNil(v) && !projectChoiceTypeFound {

											projectChoiceTypeFound = true

											if v.(bool) {
												projectChoiceInt := &ves_io_schema_cloud_link.GCPBYOCType_SameAsCredential{}
												projectChoiceInt.SameAsCredential = &ves_io_schema.Empty{}
												connections[i].ProjectChoice = projectChoiceInt
											}

										}

										if w, ok := connectionsMapStrToI["region"]; ok && !isIntfNil(w) {
											connections[i].Region = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["gcp_cred"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					gcpCredInt := &ves_io_schema_views.ObjectRefType{}
					cloudProviderInt.Gcp.GcpCred = gcpCredInt

					for _, set := range sl {
						if set != nil {
							gcMapToStrVal := set.(map[string]interface{})
							if val, ok := gcMapToStrVal["name"]; ok && !isIntfNil(v) {
								gcpCredInt.Name = val.(string)
							}
							if val, ok := gcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								gcpCredInt.Namespace = val.(string)
							}

							if val, ok := gcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								gcpCredInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	//enable_connection_to_re_choice

	enableConnectionToReChoiceTypeFound := false

	if v, ok := d.GetOk("disabled"); ok && !enableConnectionToReChoiceTypeFound {

		enableConnectionToReChoiceTypeFound = true

		if v.(bool) {
			enableConnectionToReChoiceInt := &ves_io_schema_cloud_link.CreateSpecType_Disabled{}
			enableConnectionToReChoiceInt.Disabled = &ves_io_schema.Empty{}
			createSpec.EnableConnectionToReChoice = enableConnectionToReChoiceInt
		}

	}

	if v, ok := d.GetOk("enabled"); ok && !enableConnectionToReChoiceTypeFound {

		enableConnectionToReChoiceTypeFound = true
		enableConnectionToReChoiceInt := &ves_io_schema_cloud_link.CreateSpecType_Enabled{}
		enableConnectionToReChoiceInt.Enabled = &ves_io_schema_views.CloudLinkADNType{}
		createSpec.EnableConnectionToReChoice = enableConnectionToReChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cloudlink_network_name"]; ok && !isIntfNil(v) {

					enableConnectionToReChoiceInt.Enabled.CloudlinkNetworkName = v.(string)

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra CloudLink object with struct: %+v", createReq)

	createCloudLinkResp, err := client.CreateObject(context.Background(), ves_io_schema_cloud_link.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CloudLink: %s", err)
	}
	d.SetId(createCloudLinkResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCloudLinkRead(d, meta)
}

func resourceVolterraCloudLinkRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_cloud_link.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CloudLink %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CloudLink %q: %s", d.Id(), err)
	}
	return setCloudLinkFields(client, d, resp)
}

func setCloudLinkFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCloudLinkUpdate updates CloudLink resource
func resourceVolterraCloudLinkUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_cloud_link.ReplaceSpecType{}
	updateReq := &ves_io_schema_cloud_link.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	cloudProviderTypeFound := false

	if v, ok := d.GetOk("aws"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.ReplaceSpecType_Aws{}
		cloudProviderInt.Aws = &ves_io_schema_cloud_link.AWSType{}
		updateSpec.CloudProvider = cloudProviderInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["aws_cred"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					awsCredInt := &ves_io_schema_views.ObjectRefType{}
					cloudProviderInt.Aws.AwsCred = awsCredInt

					for _, set := range sl {
						if set != nil {
							acMapToStrVal := set.(map[string]interface{})
							if val, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
								awsCredInt.Name = val.(string)
							}
							if val, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								awsCredInt.Namespace = val.(string)
							}

							if val, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								awsCredInt.Tenant = val.(string)
							}
						}
					}

				}

				cloudLinkTypeTypeFound := false

				if v, ok := cs["byoc"]; ok && !isIntfNil(v) && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.AWSType_Byoc{}
					cloudLinkTypeInt.Byoc = &ves_io_schema_cloud_link.AWSBYOCListType{}
					cloudProviderInt.Aws.CloudLinkType = cloudLinkTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["connections"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connections := make([]*ves_io_schema_cloud_link.AWSBYOCType, len(sl))
								cloudLinkTypeInt.Byoc.Connections = connections
								for i, set := range sl {
									if set != nil {
										connections[i] = &ves_io_schema_cloud_link.AWSBYOCType{}
										connectionsMapStrToI := set.(map[string]interface{})

										if v, ok := connectionsMapStrToI["auth_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											authKey := &ves_io_schema.SecretType{}
											connections[i].AuthKey = authKey
											for _, set := range sl {
												if set != nil {
													authKeyMapStrToI := set.(map[string]interface{})

													if v, ok := authKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
														authKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
														for _, set := range sl {
															if set != nil {
																blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

																if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
																}

																if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.Location = w.(string)
																}

																if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
																	blindfoldSecretInfoInternal.StoreProvider = w.(string)
																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

														authKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													secretInfoOneofTypeFound := false

													if v, ok := authKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
														secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["key"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

																}

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

																}

																if v, ok := cs["version"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

																}

															}
														}

													}

													if v, ok := authKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
														secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
														authKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["bgp_asn"]; ok && !isIntfNil(w) {
											connections[i].BgpAsn = uint32(w.(int))
										}

										if w, ok := connectionsMapStrToI["connection_id"]; ok && !isIntfNil(w) {
											connections[i].ConnectionId = w.(string)
										}

										if v, ok := connectionsMapStrToI["coordinates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											coordinates := &ves_io_schema_site.Coordinates{}
											connections[i].Coordinates = coordinates
											for _, set := range sl {
												if set != nil {
													coordinatesMapStrToI := set.(map[string]interface{})

													if w, ok := coordinatesMapStrToI["latitude"]; ok && !isIntfNil(w) {
														coordinates.Latitude = float32(w.(float64))
													}

													if w, ok := coordinatesMapStrToI["longitude"]; ok && !isIntfNil(w) {
														coordinates.Longitude = float32(w.(float64))
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["enable_sitelink"]; ok && !isIntfNil(w) {
											connections[i].EnableSitelink = w.(bool)
										}

										ipTypeTypeFound := false

										if v, ok := connectionsMapStrToI["ipv4"]; ok && !isIntfNil(v) && !ipTypeTypeFound {

											ipTypeTypeFound = true
											ipTypeInt := &ves_io_schema_cloud_link.AWSBYOCType_Ipv4{}
											ipTypeInt.Ipv4 = &ves_io_schema_cloud_link.Ipv4Type{}
											connections[i].IpType = ipTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["aws_router_peer_address"]; ok && !isIntfNil(v) {

														ipTypeInt.Ipv4.AwsRouterPeerAddress = v.(string)

													}

													if v, ok := cs["router_peer_address"]; ok && !isIntfNil(v) {

														ipTypeInt.Ipv4.RouterPeerAddress = v.(string)

													}

												}
											}

										}

										if _, ok := connectionsMapStrToI["ipv6"]; ok && !ipTypeTypeFound {

											ipTypeTypeFound = true
											ipTypeInt := &ves_io_schema_cloud_link.AWSBYOCType_Ipv6{}
											ipTypeInt.Ipv6 = &ves_io_schema_cloud_link.Ipv6Type{}
											connections[i].IpType = ipTypeInt

										}

										if w, ok := connectionsMapStrToI["jumbo_mtu"]; ok && !isIntfNil(w) {
											connections[i].JumboMtu = w.(bool)
										}

										if v, ok := connectionsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											connections[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["region"]; ok && !isIntfNil(w) {
											connections[i].Region = w.(string)
										}

										resourceNameChoiceTypeFound := false

										if v, ok := connectionsMapStrToI["system_generated_name"]; ok && !isIntfNil(v) && !resourceNameChoiceTypeFound {

											resourceNameChoiceTypeFound = true

											if v.(bool) {
												resourceNameChoiceInt := &ves_io_schema_cloud_link.AWSBYOCType_SystemGeneratedName{}
												resourceNameChoiceInt.SystemGeneratedName = &ves_io_schema.Empty{}
												connections[i].ResourceNameChoice = resourceNameChoiceInt
											}

										}

										if v, ok := connectionsMapStrToI["user_assigned_name"]; ok && !isIntfNil(v) && !resourceNameChoiceTypeFound {

											resourceNameChoiceTypeFound = true
											resourceNameChoiceInt := &ves_io_schema_cloud_link.AWSBYOCType_UserAssignedName{}

											connections[i].ResourceNameChoice = resourceNameChoiceInt

											resourceNameChoiceInt.UserAssignedName = v.(string)

										}

										if w, ok := connectionsMapStrToI["tags"]; ok && !isIntfNil(w) {
											ms := map[string]string{}
											for k, v := range w.(map[string]interface{}) {
												ms[k] = v.(string)
											}
											connections[i].Tags = ms
										}

										if v, ok := connectionsMapStrToI["virtual_interface_type"]; ok && !isIntfNil(v) {

											connections[i].VirtualInterfaceType = ves_io_schema_cloud_link.VirtualInterfaceType(ves_io_schema_cloud_link.VirtualInterfaceType_value[v.(string)])

										}

										if w, ok := connectionsMapStrToI["vlan"]; ok && !isIntfNil(w) {
											connections[i].Vlan = uint32(w.(int))
										}

									}
								}

							}

						}
					}

				}

				if _, ok := cs["f5xc_managed"]; ok && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.AWSType_F5XcManaged{}
					cloudLinkTypeInt.F5XcManaged = &ves_io_schema_cloud_link.AWSF5XCManagedType{}
					cloudProviderInt.Aws.CloudLinkType = cloudLinkTypeInt

				}

				directConnectGatewayAsnChoiceTypeFound := false

				if v, ok := cs["auto"]; ok && !isIntfNil(v) && !directConnectGatewayAsnChoiceTypeFound {

					directConnectGatewayAsnChoiceTypeFound = true

					if v.(bool) {
						directConnectGatewayAsnChoiceInt := &ves_io_schema_cloud_link.AWSType_Auto{}
						directConnectGatewayAsnChoiceInt.Auto = &ves_io_schema.Empty{}
						cloudProviderInt.Aws.DirectConnectGatewayAsnChoice = directConnectGatewayAsnChoiceInt
					}

				}

				if v, ok := cs["custom_asn"]; ok && !isIntfNil(v) && !directConnectGatewayAsnChoiceTypeFound {

					directConnectGatewayAsnChoiceTypeFound = true
					directConnectGatewayAsnChoiceInt := &ves_io_schema_cloud_link.AWSType_CustomAsn{}

					cloudProviderInt.Aws.DirectConnectGatewayAsnChoice = directConnectGatewayAsnChoiceInt

					directConnectGatewayAsnChoiceInt.CustomAsn = uint32(v.(int))

				}

			}
		}

	}

	if _, ok := d.GetOk("azure"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.ReplaceSpecType_Azure{}
		cloudProviderInt.Azure = &ves_io_schema_cloud_link.AzureType{}
		updateSpec.CloudProvider = cloudProviderInt

	}

	if v, ok := d.GetOk("gcp"); ok && !cloudProviderTypeFound {

		cloudProviderTypeFound = true
		cloudProviderInt := &ves_io_schema_cloud_link.ReplaceSpecType_Gcp{}
		cloudProviderInt.Gcp = &ves_io_schema_cloud_link.GCPType{}
		updateSpec.CloudProvider = cloudProviderInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				cloudLinkTypeTypeFound := false

				if v, ok := cs["byoc"]; ok && !isIntfNil(v) && !cloudLinkTypeTypeFound {

					cloudLinkTypeTypeFound = true
					cloudLinkTypeInt := &ves_io_schema_cloud_link.GCPType_Byoc{}
					cloudLinkTypeInt.Byoc = &ves_io_schema_cloud_link.GCPBYOCListType{}
					cloudProviderInt.Gcp.CloudLinkType = cloudLinkTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["connections"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								connections := make([]*ves_io_schema_cloud_link.GCPBYOCType, len(sl))
								cloudLinkTypeInt.Byoc.Connections = connections
								for i, set := range sl {
									if set != nil {
										connections[i] = &ves_io_schema_cloud_link.GCPBYOCType{}
										connectionsMapStrToI := set.(map[string]interface{})

										if v, ok := connectionsMapStrToI["coordinates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											coordinates := &ves_io_schema_site.Coordinates{}
											connections[i].Coordinates = coordinates
											for _, set := range sl {
												if set != nil {
													coordinatesMapStrToI := set.(map[string]interface{})

													if w, ok := coordinatesMapStrToI["latitude"]; ok && !isIntfNil(w) {
														coordinates.Latitude = float32(w.(float64))
													}

													if w, ok := coordinatesMapStrToI["longitude"]; ok && !isIntfNil(w) {
														coordinates.Longitude = float32(w.(float64))
													}

												}
											}

										}

										if w, ok := connectionsMapStrToI["interconnect_attachment_name"]; ok && !isIntfNil(w) {
											connections[i].InterconnectAttachmentName = w.(string)
										}

										if v, ok := connectionsMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											connections[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
														metadata.Disable = w.(bool)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										projectChoiceTypeFound := false

										if v, ok := connectionsMapStrToI["project"]; ok && !isIntfNil(v) && !projectChoiceTypeFound {

											projectChoiceTypeFound = true
											projectChoiceInt := &ves_io_schema_cloud_link.GCPBYOCType_Project{}

											connections[i].ProjectChoice = projectChoiceInt

											projectChoiceInt.Project = v.(string)

										}

										if v, ok := connectionsMapStrToI["same_as_credential"]; ok && !isIntfNil(v) && !projectChoiceTypeFound {

											projectChoiceTypeFound = true

											if v.(bool) {
												projectChoiceInt := &ves_io_schema_cloud_link.GCPBYOCType_SameAsCredential{}
												projectChoiceInt.SameAsCredential = &ves_io_schema.Empty{}
												connections[i].ProjectChoice = projectChoiceInt
											}

										}

										if w, ok := connectionsMapStrToI["region"]; ok && !isIntfNil(w) {
											connections[i].Region = w.(string)
										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["gcp_cred"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					gcpCredInt := &ves_io_schema_views.ObjectRefType{}
					cloudProviderInt.Gcp.GcpCred = gcpCredInt

					for _, set := range sl {
						if set != nil {
							gcMapToStrVal := set.(map[string]interface{})
							if val, ok := gcMapToStrVal["name"]; ok && !isIntfNil(v) {
								gcpCredInt.Name = val.(string)
							}
							if val, ok := gcMapToStrVal["namespace"]; ok && !isIntfNil(v) {
								gcpCredInt.Namespace = val.(string)
							}

							if val, ok := gcMapToStrVal["tenant"]; ok && !isIntfNil(v) {
								gcpCredInt.Tenant = val.(string)
							}
						}
					}

				}

			}
		}

	}

	enableConnectionToReChoiceTypeFound := false

	if v, ok := d.GetOk("disabled"); ok && !enableConnectionToReChoiceTypeFound {

		enableConnectionToReChoiceTypeFound = true

		if v.(bool) {
			enableConnectionToReChoiceInt := &ves_io_schema_cloud_link.ReplaceSpecType_Disabled{}
			enableConnectionToReChoiceInt.Disabled = &ves_io_schema.Empty{}
			updateSpec.EnableConnectionToReChoice = enableConnectionToReChoiceInt
		}

	}

	if v, ok := d.GetOk("enabled"); ok && !enableConnectionToReChoiceTypeFound {

		enableConnectionToReChoiceTypeFound = true
		enableConnectionToReChoiceInt := &ves_io_schema_cloud_link.ReplaceSpecType_Enabled{}
		enableConnectionToReChoiceInt.Enabled = &ves_io_schema_views.CloudLinkADNType{}
		updateSpec.EnableConnectionToReChoice = enableConnectionToReChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cloudlink_network_name"]; ok && !isIntfNil(v) {

					enableConnectionToReChoiceInt.Enabled.CloudlinkNetworkName = v.(string)

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra CloudLink obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_cloud_link.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CloudLink: %s", err)
	}

	return resourceVolterraCloudLinkRead(d, meta)
}

func resourceVolterraCloudLinkDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_cloud_link.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CloudLink %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CloudLink before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CloudLink obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_cloud_link.ObjectType, namespace, name)
}
